// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_service_messages.proto

#include "steammessages_remoteclient_service_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_CreateSession_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CreateSession_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateSession_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateSession_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateSession_RequestDefaultTypeInternal _CRemoteClient_CreateSession_Request_default_instance_;
constexpr CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0))
  , euniverse_(0){}
struct CRemoteClient_CreateSession_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CreateSession_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateSession_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateSession_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateSession_ResponseDefaultTypeInternal _CRemoteClient_CreateSession_Response_default_instance_;
constexpr CRemoteClient_DeleteSession_Notification::CRemoteClient_DeleteSession_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_DeleteSession_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_DeleteSession_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_DeleteSession_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_DeleteSession_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_DeleteSession_NotificationDefaultTypeInternal _CRemoteClient_DeleteSession_Notification_default_instance_;
constexpr CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_StartPairing_RequestDefaultTypeInternal {
  constexpr CRemoteClient_StartPairing_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_StartPairing_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_StartPairing_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_StartPairing_RequestDefaultTypeInternal _CRemoteClient_StartPairing_Request_default_instance_;
constexpr CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u){}
struct CRemoteClient_StartPairing_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_StartPairing_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_StartPairing_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_StartPairing_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_StartPairing_ResponseDefaultTypeInternal _CRemoteClient_StartPairing_Response_default_instance_;
constexpr CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(PROTOBUF_ULONGLONG(0))
  , device_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal {
  constexpr CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_SetPairingInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_SetPairingInfo_Request_default_instance_;
constexpr CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_SetPairingInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_SetPairingInfo_Response_default_instance_;
constexpr CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u){}
struct CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal {
  constexpr CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_GetPairingInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_GetPairingInfo_Request_default_instance_;
constexpr CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(PROTOBUF_ULONGLONG(0))
  , device_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_GetPairingInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_GetPairingInfo_Response_default_instance_;
constexpr CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_CancelPairing_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CancelPairing_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CancelPairing_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CancelPairing_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CancelPairing_RequestDefaultTypeInternal _CRemoteClient_CancelPairing_Request_default_instance_;
constexpr CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_CancelPairing_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CancelPairing_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CancelPairing_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CancelPairing_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CancelPairing_ResponseDefaultTypeInternal _CRemoteClient_CancelPairing_Response_default_instance_;
constexpr CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , device_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_RegisterStatusUpdate_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_RegisterStatusUpdate_Notification_default_instance_;
constexpr CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_UnregisterStatusUpdate_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_;
constexpr CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , remote_client_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_Online_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_Online_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_Online_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_Online_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_Online_NotificationDefaultTypeInternal _CRemoteClient_Online_Notification_default_instance_;
constexpr CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_RemotePacket_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_RemotePacket_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_RemotePacket_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_RemotePacket_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_RemotePacket_NotificationDefaultTypeInternal _CRemoteClient_RemotePacket_Notification_default_instance_;
constexpr CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_ReplyPacket_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal _CRemoteClient_ReplyPacket_Notification_default_instance_;
constexpr CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_GetReplies_RequestDefaultTypeInternal {
  constexpr CRemoteClient_GetReplies_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetReplies_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_GetReplies_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetReplies_RequestDefaultTypeInternal _CRemoteClient_GetReplies_Request_default_instance_;
constexpr CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(){}
struct CRemoteClient_GetReplies_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_GetReplies_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetReplies_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_GetReplies_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetReplies_ResponseDefaultTypeInternal _CRemoteClient_GetReplies_Response_default_instance_;
constexpr CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : credentials_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cellid_(0u){}
struct CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal {
  constexpr CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateRelayServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Request_default_instance_;
constexpr CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateRelayServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Response_default_instance_;
constexpr CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CRemoteClient_AllocateSDR_RequestDefaultTypeInternal {
  constexpr CRemoteClient_AllocateSDR_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateSDR_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateSDR_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateSDR_RequestDefaultTypeInternal _CRemoteClient_AllocateSDR_Request_default_instance_;
constexpr CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateSDR_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal _CRemoteClient_AllocateSDR_Response_default_instance_;
constexpr CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , clientid_(PROTOBUF_ULONGLONG(0)){}
struct CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_SteamBroadcast_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal _CRemoteClient_SteamBroadcast_Notification_default_instance_;
constexpr CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , src_clientid_(PROTOBUF_ULONGLONG(0))
  , dst_clientid_(PROTOBUF_ULONGLONG(0))
  , secretid_(0u){}
struct CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_SteamToSteam_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal _CRemoteClient_SteamToSteam_Notification_default_instance_;
constexpr CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_account_id_(0u)
  , client_account_id_(0u)
  , appid_(0u)
  , device_form_factor_(0)
  , remote_play_together_(false)
  , guest_session_(false){}
struct CRemotePlay_SessionStarted_RequestDefaultTypeInternal {
  constexpr CRemotePlay_SessionStarted_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStarted_RequestDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStarted_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStarted_RequestDefaultTypeInternal _CRemotePlay_SessionStarted_Request_default_instance_;
constexpr CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(PROTOBUF_ULONGLONG(0)){}
struct CRemotePlay_SessionStarted_ResponseDefaultTypeInternal {
  constexpr CRemotePlay_SessionStarted_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStarted_ResponseDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStarted_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStarted_ResponseDefaultTypeInternal _CRemotePlay_SessionStarted_Response_default_instance_;
constexpr CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(PROTOBUF_ULONGLONG(0))
  , used_x264_(false)
  , used_h264_(false)
  , used_hevc_(false){}
struct CRemotePlay_SessionStopped_NotificationDefaultTypeInternal {
  constexpr CRemotePlay_SessionStopped_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStopped_NotificationDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStopped_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStopped_NotificationDefaultTypeInternal _CRemotePlay_SessionStopped_Notification_default_instance_;
constexpr CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , guestid_(0u)
  , keyboard_enabled_(false)
  , mouse_enabled_(false)
  , controller_enabled_(false){}
struct CRemotePlayTogether_Notification_PlayerDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_PlayerDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_PlayerDefaultTypeInternal _CRemotePlayTogether_Notification_Player_default_instance_;
constexpr CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , slotid_(0u){}
struct CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_ControllerSlot_obsolete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_;
constexpr CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , slotid_(0u)
  , controller_type_(0){}
struct CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_ControllerSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_default_instance_;
constexpr CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_obsolete_()
  , controller_slots_obsolete_()
  , player_slots_()
  , controller_slots_()
  , host_steamid_(PROTOBUF_ULONGLONG(0))
  , host_clientid_(PROTOBUF_ULONGLONG(0))
  , host_gameid_(PROTOBUF_ULONGLONG(0))
  , has_new_players_(false){}
struct CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_GroupUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal _CRemotePlayTogether_Notification_GroupUpdated_default_instance_;
constexpr CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , _oneof_case_{}{}
struct CRemotePlayTogether_NotificationDefaultTypeInternal {
  constexpr CRemotePlayTogether_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_NotificationDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_NotificationDefaultTypeInternal _CRemotePlayTogether_Notification_default_instance_;
constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : launch_parameters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_;
constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_DeleteRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_DeleteRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_;
constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_LookupRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_LookupRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_;
constexpr CCMRemoteClient_ClientMessage::CCMRemoteClient_ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CCMRemoteClient_ClientMessageDefaultTypeInternal {
  constexpr CCMRemoteClient_ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCMRemoteClient_ClientMessageDefaultTypeInternal() {}
  union {
    CCMRemoteClient_ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCMRemoteClient_ClientMessageDefaultTypeInternal _CCMRemoteClient_ClientMessage_default_instance_;
constexpr CCMRemoteClient_ServerMessage::CCMRemoteClient_ServerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , _oneof_case_{}{}
struct CCMRemoteClient_ServerMessageDefaultTypeInternal {
  constexpr CCMRemoteClient_ServerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCMRemoteClient_ServerMessageDefaultTypeInternal() {}
  union {
    CCMRemoteClient_ServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCMRemoteClient_ServerMessageDefaultTypeInternal _CCMRemoteClient_ServerMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[40];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, euniverse_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteSession_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteSession_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteSession_Notification, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, device_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, request_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, device_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, request_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, device_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, remote_client_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, payload_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Response, payload_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, credentials_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, relay_server_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, src_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, dst_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, secretid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, encrypted_payload_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, host_account_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, client_account_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, device_form_factor_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, remote_play_together_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, guest_session_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, record_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, record_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_x264_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_h264_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_hevc_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, guestid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, avatar_hash_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, keyboard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, mouse_enabled_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, controller_enabled_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, slotid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, slotid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, player_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, controller_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, players_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_gameid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, controller_slots_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, has_new_players_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, player_slots_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, controller_slots_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, steamid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, Message_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, launch_parameters_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, invitation_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, invitation_code_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, invitation_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, invitation_url_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ClientMessage, Message_),
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ServerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ServerMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ServerMessage, result_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CCMRemoteClient_ServerMessage, Message_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CRemoteClient_CreateSession_Request)},
  { 5, 12, sizeof(::CRemoteClient_CreateSession_Response)},
  { 14, 20, sizeof(::CRemoteClient_DeleteSession_Notification)},
  { 21, 27, sizeof(::CRemoteClient_StartPairing_Request)},
  { 28, 34, sizeof(::CRemoteClient_StartPairing_Response)},
  { 35, 43, sizeof(::CRemoteClient_SetPairingInfo_Request)},
  { 46, -1, sizeof(::CRemoteClient_SetPairingInfo_Response)},
  { 51, 57, sizeof(::CRemoteClient_GetPairingInfo_Request)},
  { 58, 66, sizeof(::CRemoteClient_GetPairingInfo_Response)},
  { 69, 75, sizeof(::CRemoteClient_CancelPairing_Request)},
  { 76, -1, sizeof(::CRemoteClient_CancelPairing_Response)},
  { 81, 89, sizeof(::CRemoteClient_RegisterStatusUpdate_Notification)},
  { 92, 99, sizeof(::CRemoteClient_UnregisterStatusUpdate_Notification)},
  { 101, 108, sizeof(::CRemoteClient_Online_Notification)},
  { 110, 118, sizeof(::CRemoteClient_RemotePacket_Notification)},
  { 121, 128, sizeof(::CRemoteClient_ReplyPacket_Notification)},
  { 130, 136, sizeof(::CRemoteClient_GetReplies_Request)},
  { 137, -1, sizeof(::CRemoteClient_GetReplies_Response)},
  { 143, 150, sizeof(::CRemoteClient_AllocateRelayServer_Request)},
  { 152, 158, sizeof(::CRemoteClient_AllocateRelayServer_Response)},
  { 159, 165, sizeof(::CRemoteClient_AllocateSDR_Request)},
  { 166, -1, sizeof(::CRemoteClient_AllocateSDR_Response)},
  { 171, 179, sizeof(::CRemoteClient_SteamBroadcast_Notification)},
  { 182, 192, sizeof(::CRemoteClient_SteamToSteam_Notification)},
  { 197, 208, sizeof(::CRemotePlay_SessionStarted_Request)},
  { 214, 220, sizeof(::CRemotePlay_SessionStarted_Response)},
  { 221, 230, sizeof(::CRemotePlay_SessionStopped_Notification)},
  { 234, 245, sizeof(::CRemotePlayTogether_Notification_Player)},
  { 251, 258, sizeof(::CRemotePlayTogether_Notification_ControllerSlot_obsolete)},
  { 260, 268, sizeof(::CRemotePlayTogether_Notification_ControllerSlot)},
  { 271, 284, sizeof(::CRemotePlayTogether_Notification_GroupUpdated)},
  { 292, 300, sizeof(::CRemotePlayTogether_Notification)},
  { 302, 309, sizeof(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request)},
  { 311, 317, sizeof(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response)},
  { 318, 324, sizeof(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)},
  { 325, -1, sizeof(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)},
  { 330, 336, sizeof(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request)},
  { 337, 343, sizeof(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response)},
  { 344, -1, sizeof(::CCMRemoteClient_ClientMessage)},
  { 357, 369, sizeof(::CCMRemoteClient_ServerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateSession_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateSession_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_DeleteSession_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_StartPairing_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_StartPairing_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SetPairingInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SetPairingInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetPairingInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetPairingInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CancelPairing_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CancelPairing_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_RegisterStatusUpdate_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_Online_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_RemotePacket_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_ReplyPacket_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetReplies_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetReplies_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateRelayServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateRelayServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateSDR_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateSDR_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SteamBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SteamToSteam_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStarted_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStarted_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStopped_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_ControllerSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_GroupUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCMRemoteClient_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCMRemoteClient_ServerMessage_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1steammessages_remoteclient_service_mes"
  "sages.proto\032 google/protobuf/descriptor."
  "proto\"%\n#CRemoteClient_CreateSession_Req"
  "uest\"M\n$CRemoteClient_CreateSession_Resp"
  "onse\022\022\n\nsession_id\030\001 \001(\006\022\021\n\teuniverse\030\002 "
  "\001(\005\">\n(CRemoteClient_DeleteSession_Notif"
  "ication\022\022\n\nsession_id\030\001 \001(\006\"8\n\"CRemoteCl"
  "ient_StartPairing_Request\022\022\n\nsession_id\030"
  "\001 \001(\006\"2\n#CRemoteClient_StartPairing_Resp"
  "onse\022\013\n\003pin\030\001 \001(\r\"^\n$CRemoteClient_SetPa"
  "iringInfo_Request\022\022\n\nsession_id\030\001 \001(\006\022\021\n"
  "\tdevice_id\030\002 \001(\006\022\017\n\007request\030\003 \001(\014\"\'\n%CRe"
  "moteClient_SetPairingInfo_Response\"3\n$CR"
  "emoteClient_GetPairingInfo_Request\022\013\n\003pi"
  "n\030\001 \001(\r\"_\n%CRemoteClient_GetPairingInfo_"
  "Response\022\022\n\nsession_id\030\001 \001(\006\022\021\n\tdevice_i"
  "d\030\002 \001(\006\022\017\n\007request\030\003 \001(\014\"9\n#CRemoteClien"
  "t_CancelPairing_Request\022\022\n\nsession_id\030\001 "
  "\001(\006\"&\n$CRemoteClient_CancelPairing_Respo"
  "nse\"i\n/CRemoteClient_RegisterStatusUpdat"
  "e_Notification\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007st"
  "eamid\030\002 \001(\006\022\021\n\tdevice_id\030\003 \001(\006\"X\n1CRemot"
  "eClient_UnregisterStatusUpdate_Notificat"
  "ion\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007steamid\030\002 \001(\006"
  "\"N\n!CRemoteClient_Online_Notification\022\017\n"
  "\007steamid\030\001 \001(\006\022\030\n\020remote_client_id\030\002 \001(\006"
  "\"_\n\'CRemoteClient_RemotePacket_Notificat"
  "ion\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007steamid\030\002 \001(\006"
  "\022\017\n\007payload\030\004 \001(\014\"M\n&CRemoteClient_Reply"
  "Packet_Notification\022\022\n\nsession_id\030\001 \001(\006\022"
  "\017\n\007payload\030\002 \001(\014\"6\n CRemoteClient_GetRep"
  "lies_Request\022\022\n\nsession_id\030\001 \001(\006\"4\n!CRem"
  "oteClient_GetReplies_Response\022\017\n\007payload"
  "\030\001 \003(\014\"P\n)CRemoteClient_AllocateRelaySer"
  "ver_Request\022\016\n\006cellid\030\001 \001(\r\022\023\n\013credentia"
  "ls\030\002 \001(\t\"B\n*CRemoteClient_AllocateRelayS"
  "erver_Response\022\024\n\014relay_server\030\001 \001(\t\"2\n!"
  "CRemoteClient_AllocateSDR_Request\022\r\n\005app"
  "id\030\001 \001(\r\"$\n\"CRemoteClient_AllocateSDR_Re"
  "sponse\"_\n)CRemoteClient_SteamBroadcast_N"
  "otification\022\017\n\007steamid\030\001 \001(\006\022\020\n\010clientid"
  "\030\002 \001(\006\022\017\n\007payload\030\003 \001(\014\"\223\001\n\'CRemoteClien"
  "t_SteamToSteam_Notification\022\017\n\007steamid\030\001"
  " \001(\006\022\024\n\014src_clientid\030\002 \001(\006\022\024\n\014dst_client"
  "id\030\003 \001(\006\022\020\n\010secretid\030\004 \001(\r\022\031\n\021encrypted_"
  "payload\030\005 \001(\014\"\270\001\n\"CRemotePlay_SessionSta"
  "rted_Request\022\027\n\017host_account_id\030\001 \001(\r\022\031\n"
  "\021client_account_id\030\002 \001(\r\022\r\n\005appid\030\003 \001(\r\022"
  "\032\n\022device_form_factor\030\004 \001(\005\022\034\n\024remote_pl"
  "ay_together\030\005 \001(\010\022\025\n\rguest_session\030\006 \001(\010"
  "\"8\n#CRemotePlay_SessionStarted_Response\022"
  "\021\n\trecord_id\030\001 \001(\006\"u\n\'CRemotePlay_Sessio"
  "nStopped_Notification\022\021\n\trecord_id\030\001 \001(\006"
  "\022\021\n\tused_x264\030\002 \001(\010\022\021\n\tused_h264\030\003 \001(\010\022\021"
  "\n\tused_hevc\030\004 \001(\010\"\267\006\n CRemotePlayTogethe"
  "r_Notification\022\017\n\007steamid\030\001 \001(\006\022G\n\rgroup"
  "_updated\030\002 \001(\0132..CRemotePlayTogether_Not"
  "ification.GroupUpdatedH\000\032\214\001\n\006Player\022\017\n\007s"
  "teamid\030\001 \001(\006\022\017\n\007guestid\030\002 \001(\r\022\023\n\013avatar_"
  "hash\030\003 \001(\014\022\030\n\020keyboard_enabled\030\004 \001(\010\022\025\n\r"
  "mouse_enabled\030\005 \001(\010\022\032\n\022controller_enable"
  "d\030\006 \001(\010\032:\n\027ControllerSlot_obsolete\022\016\n\006sl"
  "otid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\006\032s\n\016Controlle"
  "rSlot\022\016\n\006slotid\030\001 \001(\r\0228\n\006player\030\002 \001(\0132(."
  "CRemotePlayTogether_Notification.Player\022"
  "\027\n\017controller_type\030\003 \001(\005\032\355\002\n\014GroupUpdate"
  "d\022\024\n\014host_steamid\030\001 \001(\006\022\025\n\rhost_clientid"
  "\030\002 \001(\006\022\030\n\020players_obsolete\030\003 \003(\006\022\023\n\013host"
  "_gameid\030\004 \001(\006\022\\\n\031controller_slots_obsole"
  "te\030\005 \003(\01329.CRemotePlayTogether_Notificat"
  "ion.ControllerSlot_obsolete\022\027\n\017has_new_p"
  "layers\030\006 \001(\010\022>\n\014player_slots\030\007 \003(\0132(.CRe"
  "motePlayTogether_Notification.Player\022J\n\020"
  "controller_slots\030\010 \003(\01320.CRemotePlayToge"
  "ther_Notification.ControllerSlotB\t\n\007Mess"
  "age\"d\n8CRemoteClient_CreateRemotePlayTog"
  "etherInvitation_Request\022\r\n\005appid\030\001 \001(\r\022\031"
  "\n\021launch_parameters\030\002 \001(\t\"T\n9CRemoteClie"
  "nt_CreateRemotePlayTogetherInvitation_Re"
  "sponse\022\027\n\017invitation_code\030\001 \001(\t\"S\n8CRemo"
  "teClient_DeleteRemotePlayTogetherInvitat"
  "ion_Request\022\027\n\017invitation_code\030\001 \001(\t\";\n9"
  "CRemoteClient_DeleteRemotePlayTogetherIn"
  "vitation_Response\"S\n8CRemoteClient_Looku"
  "pRemotePlayTogetherInvitation_Request\022\027\n"
  "\017invitation_code\030\001 \001(\t\"S\n9CRemoteClient_"
  "LookupRemotePlayTogetherInvitation_Respo"
  "nse\022\026\n\016invitation_url\030\001 \001(\t\"\272\004\n\035CCMRemot"
  "eClient_ClientMessage\022F\n\026create_session_"
  "request\030\001 \001(\0132$.CRemoteClient_CreateSess"
  "ion_RequestH\000\022D\n\025start_pairing_request\030\002"
  " \001(\0132#.CRemoteClient_StartPairing_Reques"
  "tH\000\022I\n\030set_pairing_info_request\030\003 \001(\0132%."
  "CRemoteClient_SetPairingInfo_RequestH\000\022F"
  "\n\026cancel_pairing_request\030\004 \001(\0132$.CRemote"
  "Client_CancelPairing_RequestH\000\022R\n\026regist"
  "er_status_update\030\005 \001(\01320.CRemoteClient_R"
  "egisterStatusUpdate_NotificationH\000\022V\n\030un"
  "register_status_update\030\006 \001(\01322.CRemoteCl"
  "ient_UnregisterStatusUpdate_Notification"
  "H\000\022A\n\rremote_packet\030\007 \001(\0132(.CRemoteClien"
  "t_RemotePacket_NotificationH\000B\t\n\007Message"
  "\"\237\003\n\035CCMRemoteClient_ServerMessage\022\016\n\006re"
  "sult\030\001 \001(\005\022H\n\027create_session_response\030\002 "
  "\001(\0132%.CRemoteClient_CreateSession_Respon"
  "seH\000\022F\n\026start_pairing_response\030\003 \001(\0132$.C"
  "RemoteClient_StartPairing_ResponseH\000\022K\n\031"
  "set_pairing_info_response\030\004 \001(\0132&.CRemot"
  "eClient_SetPairingInfo_ResponseH\000\022H\n\027can"
  "cel_pairing_response\030\005 \001(\0132%.CRemoteClie"
  "nt_CancelPairing_ResponseH\000\022:\n\014reply_pac"
  "ket\030\006 \001(\0132\".CRemoteClient_GetReplies_Res"
  "ponseH\000B\t\n\007MessageB\032\252\002\027OpenSteamworks.Pr"
  "otobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = {
  false, false, 4526, descriptor_table_protodef_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, "steammessages_remoteclient_service_messages.proto", 
  &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once, descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_deps, 1, 40,
  schemas, file_default_instances, TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto);
  return descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fremoteclient_5fservice_5fmessages_2eproto(&descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto);

// ===================================================================

class CRemoteClient_CreateSession_Request::_Internal {
 public:
};

CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateSession_Request)
}
CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(const CRemoteClient_CreateSession_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateSession_Request)
}

void CRemoteClient_CreateSession_Request::SharedCtor() {
}

CRemoteClient_CreateSession_Request::~CRemoteClient_CreateSession_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateSession_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CreateSession_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_CreateSession_Request::ArenaDtor(void* object) {
  CRemoteClient_CreateSession_Request* _this = reinterpret_cast< CRemoteClient_CreateSession_Request* >(object);
  (void)_this;
}
void CRemoteClient_CreateSession_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateSession_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateSession_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CreateSession_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateSession_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateSession_Request)
  return target;
}

size_t CRemoteClient_CreateSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateSession_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CreateSession_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CreateSession_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CreateSession_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CreateSession_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CreateSession_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_CreateSession_Request::MergeFrom(const CRemoteClient_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRemoteClient_CreateSession_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CreateSession_Request::CopyFrom(const CRemoteClient_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateSession_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateSession_Request::InternalSwap(CRemoteClient_CreateSession_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateSession_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_CreateSession_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateSession_Response>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_euniverse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateSession_Response)
}
CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(const CRemoteClient_CreateSession_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&euniverse_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateSession_Response)
}

void CRemoteClient_CreateSession_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&euniverse_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
}

CRemoteClient_CreateSession_Response::~CRemoteClient_CreateSession_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateSession_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CreateSession_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_CreateSession_Response::ArenaDtor(void* object) {
  CRemoteClient_CreateSession_Response* _this = reinterpret_cast< CRemoteClient_CreateSession_Response* >(object);
  (void)_this;
}
void CRemoteClient_CreateSession_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateSession_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&euniverse_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateSession_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 euniverse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_euniverse(&has_bits);
          euniverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CreateSession_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateSession_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int32 euniverse = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_euniverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateSession_Response)
  return target;
}

size_t CRemoteClient_CreateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateSession_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 euniverse = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_euniverse());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CreateSession_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CreateSession_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CreateSession_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CreateSession_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CreateSession_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_CreateSession_Response::MergeFrom(const CRemoteClient_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      euniverse_ = from.euniverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_CreateSession_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CreateSession_Response::CopyFrom(const CRemoteClient_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateSession_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateSession_Response::InternalSwap(CRemoteClient_CreateSession_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_CreateSession_Response, euniverse_)
      + sizeof(CRemoteClient_CreateSession_Response::euniverse_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_CreateSession_Response, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateSession_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_DeleteSession_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_DeleteSession_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_DeleteSession_Notification::CRemoteClient_DeleteSession_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_DeleteSession_Notification)
}
CRemoteClient_DeleteSession_Notification::CRemoteClient_DeleteSession_Notification(const CRemoteClient_DeleteSession_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_DeleteSession_Notification)
}

void CRemoteClient_DeleteSession_Notification::SharedCtor() {
session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_DeleteSession_Notification::~CRemoteClient_DeleteSession_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_DeleteSession_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_DeleteSession_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_DeleteSession_Notification::ArenaDtor(void* object) {
  CRemoteClient_DeleteSession_Notification* _this = reinterpret_cast< CRemoteClient_DeleteSession_Notification* >(object);
  (void)_this;
}
void CRemoteClient_DeleteSession_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_DeleteSession_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_DeleteSession_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_DeleteSession_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_DeleteSession_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_DeleteSession_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_DeleteSession_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_DeleteSession_Notification)
  return target;
}

size_t CRemoteClient_DeleteSession_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_DeleteSession_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_DeleteSession_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_DeleteSession_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_DeleteSession_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_DeleteSession_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_DeleteSession_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_DeleteSession_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_DeleteSession_Notification::MergeFrom(const CRemoteClient_DeleteSession_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_DeleteSession_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void CRemoteClient_DeleteSession_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_DeleteSession_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_DeleteSession_Notification::CopyFrom(const CRemoteClient_DeleteSession_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_DeleteSession_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_DeleteSession_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_DeleteSession_Notification::InternalSwap(CRemoteClient_DeleteSession_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_DeleteSession_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_StartPairing_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_StartPairing_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_StartPairing_Request)
}
CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(const CRemoteClient_StartPairing_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_StartPairing_Request)
}

void CRemoteClient_StartPairing_Request::SharedCtor() {
session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_StartPairing_Request::~CRemoteClient_StartPairing_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_StartPairing_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_StartPairing_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_StartPairing_Request::ArenaDtor(void* object) {
  CRemoteClient_StartPairing_Request* _this = reinterpret_cast< CRemoteClient_StartPairing_Request* >(object);
  (void)_this;
}
void CRemoteClient_StartPairing_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_StartPairing_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_StartPairing_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_StartPairing_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_StartPairing_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_StartPairing_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_StartPairing_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_StartPairing_Request)
  return target;
}

size_t CRemoteClient_StartPairing_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_StartPairing_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_StartPairing_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_StartPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_StartPairing_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_StartPairing_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_StartPairing_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_StartPairing_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_StartPairing_Request::MergeFrom(const CRemoteClient_StartPairing_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_StartPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void CRemoteClient_StartPairing_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_StartPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_StartPairing_Request::CopyFrom(const CRemoteClient_StartPairing_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_StartPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_StartPairing_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_StartPairing_Request::InternalSwap(CRemoteClient_StartPairing_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_StartPairing_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_StartPairing_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_StartPairing_Response>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_StartPairing_Response)
}
CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(const CRemoteClient_StartPairing_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_StartPairing_Response)
}

void CRemoteClient_StartPairing_Response::SharedCtor() {
pin_ = 0u;
}

CRemoteClient_StartPairing_Response::~CRemoteClient_StartPairing_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_StartPairing_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_StartPairing_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_StartPairing_Response::ArenaDtor(void* object) {
  CRemoteClient_StartPairing_Response* _this = reinterpret_cast< CRemoteClient_StartPairing_Response* >(object);
  (void)_this;
}
void CRemoteClient_StartPairing_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_StartPairing_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_StartPairing_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_StartPairing_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_StartPairing_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pin(&has_bits);
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_StartPairing_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_StartPairing_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_StartPairing_Response)
  return target;
}

size_t CRemoteClient_StartPairing_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_StartPairing_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_StartPairing_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_StartPairing_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_StartPairing_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_StartPairing_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_StartPairing_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_StartPairing_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_StartPairing_Response::MergeFrom(const CRemoteClient_StartPairing_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_StartPairing_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_set_pin(from._internal_pin());
  }
}

void CRemoteClient_StartPairing_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_StartPairing_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_StartPairing_Response::CopyFrom(const CRemoteClient_StartPairing_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_StartPairing_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_StartPairing_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_StartPairing_Response::InternalSwap(CRemoteClient_StartPairing_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_StartPairing_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_SetPairingInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SetPairingInfo_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SetPairingInfo_Request)
}
CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(const CRemoteClient_SetPairingInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SetPairingInfo_Request)
}

void CRemoteClient_SetPairingInfo_Request::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_SetPairingInfo_Request::~CRemoteClient_SetPairingInfo_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SetPairingInfo_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_SetPairingInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SetPairingInfo_Request::ArenaDtor(void* object) {
  CRemoteClient_SetPairingInfo_Request* _this = reinterpret_cast< CRemoteClient_SetPairingInfo_Request* >(object);
  (void)_this;
}
void CRemoteClient_SetPairingInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SetPairingInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SetPairingInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SetPairingInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SetPairingInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_SetPairingInfo_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SetPairingInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_device_id(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SetPairingInfo_Request)
  return target;
}

size_t CRemoteClient_SetPairingInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SetPairingInfo_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_request());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_SetPairingInfo_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_SetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_SetPairingInfo_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_SetPairingInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_SetPairingInfo_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_SetPairingInfo_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_SetPairingInfo_Request::MergeFrom(const CRemoteClient_SetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_SetPairingInfo_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_SetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_SetPairingInfo_Request::CopyFrom(const CRemoteClient_SetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SetPairingInfo_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_SetPairingInfo_Request::InternalSwap(CRemoteClient_SetPairingInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SetPairingInfo_Request, device_id_)
      + sizeof(CRemoteClient_SetPairingInfo_Request::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SetPairingInfo_Request, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SetPairingInfo_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_SetPairingInfo_Response::_Internal {
 public:
};

CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SetPairingInfo_Response)
}
CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(const CRemoteClient_SetPairingInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SetPairingInfo_Response)
}

void CRemoteClient_SetPairingInfo_Response::SharedCtor() {
}

CRemoteClient_SetPairingInfo_Response::~CRemoteClient_SetPairingInfo_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SetPairingInfo_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_SetPairingInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_SetPairingInfo_Response::ArenaDtor(void* object) {
  CRemoteClient_SetPairingInfo_Response* _this = reinterpret_cast< CRemoteClient_SetPairingInfo_Response* >(object);
  (void)_this;
}
void CRemoteClient_SetPairingInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SetPairingInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SetPairingInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SetPairingInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SetPairingInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_SetPairingInfo_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SetPairingInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SetPairingInfo_Response)
  return target;
}

size_t CRemoteClient_SetPairingInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SetPairingInfo_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_SetPairingInfo_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_SetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_SetPairingInfo_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_SetPairingInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_SetPairingInfo_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_SetPairingInfo_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_SetPairingInfo_Response::MergeFrom(const CRemoteClient_SetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRemoteClient_SetPairingInfo_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_SetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_SetPairingInfo_Response::CopyFrom(const CRemoteClient_SetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SetPairingInfo_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_SetPairingInfo_Response::InternalSwap(CRemoteClient_SetPairingInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SetPairingInfo_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_GetPairingInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetPairingInfo_Request>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetPairingInfo_Request)
}
CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(const CRemoteClient_GetPairingInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetPairingInfo_Request)
}

void CRemoteClient_GetPairingInfo_Request::SharedCtor() {
pin_ = 0u;
}

CRemoteClient_GetPairingInfo_Request::~CRemoteClient_GetPairingInfo_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetPairingInfo_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_GetPairingInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_GetPairingInfo_Request::ArenaDtor(void* object) {
  CRemoteClient_GetPairingInfo_Request* _this = reinterpret_cast< CRemoteClient_GetPairingInfo_Request* >(object);
  (void)_this;
}
void CRemoteClient_GetPairingInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetPairingInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetPairingInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetPairingInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetPairingInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pin(&has_bits);
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_GetPairingInfo_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetPairingInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetPairingInfo_Request)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetPairingInfo_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetPairingInfo_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_GetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetPairingInfo_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_GetPairingInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_GetPairingInfo_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_GetPairingInfo_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetPairingInfo_Request::MergeFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_set_pin(from._internal_pin());
  }
}

void CRemoteClient_GetPairingInfo_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_GetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetPairingInfo_Request::CopyFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Request::InternalSwap(CRemoteClient_GetPairingInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetPairingInfo_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_GetPairingInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetPairingInfo_Response>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetPairingInfo_Response)
}
CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(const CRemoteClient_GetPairingInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetPairingInfo_Response)
}

void CRemoteClient_GetPairingInfo_Response::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_GetPairingInfo_Response::~CRemoteClient_GetPairingInfo_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetPairingInfo_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_GetPairingInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_GetPairingInfo_Response::ArenaDtor(void* object) {
  CRemoteClient_GetPairingInfo_Response* _this = reinterpret_cast< CRemoteClient_GetPairingInfo_Response* >(object);
  (void)_this;
}
void CRemoteClient_GetPairingInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetPairingInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetPairingInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetPairingInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetPairingInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_GetPairingInfo_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetPairingInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_device_id(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetPairingInfo_Response)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetPairingInfo_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_request());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetPairingInfo_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_GetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetPairingInfo_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_GetPairingInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_GetPairingInfo_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_GetPairingInfo_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetPairingInfo_Response::MergeFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_GetPairingInfo_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_GetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetPairingInfo_Response::CopyFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Response::InternalSwap(CRemoteClient_GetPairingInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_GetPairingInfo_Response, device_id_)
      + sizeof(CRemoteClient_GetPairingInfo_Response::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_GetPairingInfo_Response, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetPairingInfo_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_CancelPairing_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CancelPairing_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CancelPairing_Request)
}
CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(const CRemoteClient_CancelPairing_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CancelPairing_Request)
}

void CRemoteClient_CancelPairing_Request::SharedCtor() {
session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_CancelPairing_Request::~CRemoteClient_CancelPairing_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CancelPairing_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CancelPairing_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_CancelPairing_Request::ArenaDtor(void* object) {
  CRemoteClient_CancelPairing_Request* _this = reinterpret_cast< CRemoteClient_CancelPairing_Request* >(object);
  (void)_this;
}
void CRemoteClient_CancelPairing_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CancelPairing_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CancelPairing_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CancelPairing_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CancelPairing_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CancelPairing_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CancelPairing_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CancelPairing_Request)
  return target;
}

size_t CRemoteClient_CancelPairing_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CancelPairing_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CancelPairing_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CancelPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CancelPairing_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CancelPairing_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CancelPairing_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CancelPairing_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_CancelPairing_Request::MergeFrom(const CRemoteClient_CancelPairing_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CancelPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void CRemoteClient_CancelPairing_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CancelPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CancelPairing_Request::CopyFrom(const CRemoteClient_CancelPairing_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CancelPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CancelPairing_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_CancelPairing_Request::InternalSwap(CRemoteClient_CancelPairing_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CancelPairing_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_CancelPairing_Response::_Internal {
 public:
};

CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CancelPairing_Response)
}
CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(const CRemoteClient_CancelPairing_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CancelPairing_Response)
}

void CRemoteClient_CancelPairing_Response::SharedCtor() {
}

CRemoteClient_CancelPairing_Response::~CRemoteClient_CancelPairing_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CancelPairing_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CancelPairing_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_CancelPairing_Response::ArenaDtor(void* object) {
  CRemoteClient_CancelPairing_Response* _this = reinterpret_cast< CRemoteClient_CancelPairing_Response* >(object);
  (void)_this;
}
void CRemoteClient_CancelPairing_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CancelPairing_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CancelPairing_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CancelPairing_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CancelPairing_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CancelPairing_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CancelPairing_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CancelPairing_Response)
  return target;
}

size_t CRemoteClient_CancelPairing_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CancelPairing_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CancelPairing_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CancelPairing_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CancelPairing_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CancelPairing_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CancelPairing_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CancelPairing_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_CancelPairing_Response::MergeFrom(const CRemoteClient_CancelPairing_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CancelPairing_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRemoteClient_CancelPairing_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CancelPairing_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CancelPairing_Response::CopyFrom(const CRemoteClient_CancelPairing_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CancelPairing_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CancelPairing_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_CancelPairing_Response::InternalSwap(CRemoteClient_CancelPairing_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CancelPairing_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_RegisterStatusUpdate_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_RegisterStatusUpdate_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_RegisterStatusUpdate_Notification)
}
CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(const CRemoteClient_RegisterStatusUpdate_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_RegisterStatusUpdate_Notification)
}

void CRemoteClient_RegisterStatusUpdate_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_RegisterStatusUpdate_Notification::~CRemoteClient_RegisterStatusUpdate_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_RegisterStatusUpdate_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_RegisterStatusUpdate_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_RegisterStatusUpdate_Notification::ArenaDtor(void* object) {
  CRemoteClient_RegisterStatusUpdate_Notification* _this = reinterpret_cast< CRemoteClient_RegisterStatusUpdate_Notification* >(object);
  (void)_this;
}
void CRemoteClient_RegisterStatusUpdate_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_RegisterStatusUpdate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_RegisterStatusUpdate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_RegisterStatusUpdate_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_RegisterStatusUpdate_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_RegisterStatusUpdate_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_RegisterStatusUpdate_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional fixed64 device_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_RegisterStatusUpdate_Notification)
  return target;
}

size_t CRemoteClient_RegisterStatusUpdate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_RegisterStatusUpdate_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_RegisterStatusUpdate_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_RegisterStatusUpdate_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_RegisterStatusUpdate_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_RegisterStatusUpdate_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_RegisterStatusUpdate_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_RegisterStatusUpdate_Notification::MergeFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_RegisterStatusUpdate_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_RegisterStatusUpdate_Notification::CopyFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_RegisterStatusUpdate_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_RegisterStatusUpdate_Notification::InternalSwap(CRemoteClient_RegisterStatusUpdate_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_RegisterStatusUpdate_Notification, device_id_)
      + sizeof(CRemoteClient_RegisterStatusUpdate_Notification::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_RegisterStatusUpdate_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_RegisterStatusUpdate_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_UnregisterStatusUpdate_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_UnregisterStatusUpdate_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_UnregisterStatusUpdate_Notification)
}
CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(const CRemoteClient_UnregisterStatusUpdate_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_UnregisterStatusUpdate_Notification)
}

void CRemoteClient_UnregisterStatusUpdate_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
}

CRemoteClient_UnregisterStatusUpdate_Notification::~CRemoteClient_UnregisterStatusUpdate_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_UnregisterStatusUpdate_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_UnregisterStatusUpdate_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::ArenaDtor(void* object) {
  CRemoteClient_UnregisterStatusUpdate_Notification* _this = reinterpret_cast< CRemoteClient_UnregisterStatusUpdate_Notification* >(object);
  (void)_this;
}
void CRemoteClient_UnregisterStatusUpdate_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_UnregisterStatusUpdate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_UnregisterStatusUpdate_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_UnregisterStatusUpdate_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_UnregisterStatusUpdate_Notification)
  return target;
}

size_t CRemoteClient_UnregisterStatusUpdate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_UnregisterStatusUpdate_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_UnregisterStatusUpdate_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_UnregisterStatusUpdate_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_UnregisterStatusUpdate_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_UnregisterStatusUpdate_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_UnregisterStatusUpdate_Notification::MergeFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_UnregisterStatusUpdate_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::CopyFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_UnregisterStatusUpdate_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_UnregisterStatusUpdate_Notification::InternalSwap(CRemoteClient_UnregisterStatusUpdate_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_UnregisterStatusUpdate_Notification, steamid_)
      + sizeof(CRemoteClient_UnregisterStatusUpdate_Notification::steamid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_UnregisterStatusUpdate_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_UnregisterStatusUpdate_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_Online_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_Online_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_Online_Notification)
}
CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(const CRemoteClient_Online_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_client_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_Online_Notification)
}

void CRemoteClient_Online_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_client_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
}

CRemoteClient_Online_Notification::~CRemoteClient_Online_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_Online_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_Online_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_Online_Notification::ArenaDtor(void* object) {
  CRemoteClient_Online_Notification* _this = reinterpret_cast< CRemoteClient_Online_Notification* >(object);
  (void)_this;
}
void CRemoteClient_Online_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_Online_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_Online_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_Online_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_client_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_Online_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 remote_client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_remote_client_id(&has_bits);
          remote_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_Online_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_Online_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 remote_client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_remote_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_Online_Notification)
  return target;
}

size_t CRemoteClient_Online_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_Online_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 remote_client_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_Online_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_Online_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_Online_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_Online_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_Online_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_Online_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_Online_Notification::MergeFrom(const CRemoteClient_Online_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_Online_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      remote_client_id_ = from.remote_client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_Online_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_Online_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_Online_Notification::CopyFrom(const CRemoteClient_Online_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_Online_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_Online_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_Online_Notification::InternalSwap(CRemoteClient_Online_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_Online_Notification, remote_client_id_)
      + sizeof(CRemoteClient_Online_Notification::remote_client_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_Online_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_Online_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_RemotePacket_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_RemotePacket_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_RemotePacket_Notification)
}
CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(const CRemoteClient_RemotePacket_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_RemotePacket_Notification)
}

void CRemoteClient_RemotePacket_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
}

CRemoteClient_RemotePacket_Notification::~CRemoteClient_RemotePacket_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_RemotePacket_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_RemotePacket_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_RemotePacket_Notification::ArenaDtor(void* object) {
  CRemoteClient_RemotePacket_Notification* _this = reinterpret_cast< CRemoteClient_RemotePacket_Notification* >(object);
  (void)_this;
}
void CRemoteClient_RemotePacket_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_RemotePacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_RemotePacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_RemotePacket_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_RemotePacket_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_RemotePacket_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_RemotePacket_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_RemotePacket_Notification)
  return target;
}

size_t CRemoteClient_RemotePacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_RemotePacket_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_RemotePacket_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_RemotePacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_RemotePacket_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_RemotePacket_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_RemotePacket_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_RemotePacket_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_RemotePacket_Notification::MergeFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_RemotePacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_RemotePacket_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_RemotePacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_RemotePacket_Notification::CopyFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_RemotePacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_RemotePacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_RemotePacket_Notification::InternalSwap(CRemoteClient_RemotePacket_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_RemotePacket_Notification, steamid_)
      + sizeof(CRemoteClient_RemotePacket_Notification::steamid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_RemotePacket_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_RemotePacket_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_ReplyPacket_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_ReplyPacket_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_ReplyPacket_Notification)
}
CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(const CRemoteClient_ReplyPacket_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_ReplyPacket_Notification)
}

void CRemoteClient_ReplyPacket_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_ReplyPacket_Notification::~CRemoteClient_ReplyPacket_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_ReplyPacket_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_ReplyPacket_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_ReplyPacket_Notification::ArenaDtor(void* object) {
  CRemoteClient_ReplyPacket_Notification* _this = reinterpret_cast< CRemoteClient_ReplyPacket_Notification* >(object);
  (void)_this;
}
void CRemoteClient_ReplyPacket_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_ReplyPacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_ReplyPacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_ReplyPacket_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_ReplyPacket_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_ReplyPacket_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_ReplyPacket_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_ReplyPacket_Notification)
  return target;
}

size_t CRemoteClient_ReplyPacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_ReplyPacket_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_ReplyPacket_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_ReplyPacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_ReplyPacket_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_ReplyPacket_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_ReplyPacket_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_ReplyPacket_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_ReplyPacket_Notification::MergeFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_ReplyPacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_ReplyPacket_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_ReplyPacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_ReplyPacket_Notification::CopyFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_ReplyPacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_ReplyPacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_ReplyPacket_Notification::InternalSwap(CRemoteClient_ReplyPacket_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_ReplyPacket_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_GetReplies_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetReplies_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetReplies_Request)
}
CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(const CRemoteClient_GetReplies_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetReplies_Request)
}

void CRemoteClient_GetReplies_Request::SharedCtor() {
session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_GetReplies_Request::~CRemoteClient_GetReplies_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetReplies_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_GetReplies_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_GetReplies_Request::ArenaDtor(void* object) {
  CRemoteClient_GetReplies_Request* _this = reinterpret_cast< CRemoteClient_GetReplies_Request* >(object);
  (void)_this;
}
void CRemoteClient_GetReplies_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetReplies_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetReplies_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetReplies_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetReplies_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_GetReplies_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetReplies_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetReplies_Request)
  return target;
}

size_t CRemoteClient_GetReplies_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetReplies_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetReplies_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_GetReplies_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetReplies_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_GetReplies_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_GetReplies_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_GetReplies_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetReplies_Request::MergeFrom(const CRemoteClient_GetReplies_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetReplies_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void CRemoteClient_GetReplies_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_GetReplies_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetReplies_Request::CopyFrom(const CRemoteClient_GetReplies_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetReplies_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetReplies_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_GetReplies_Request::InternalSwap(CRemoteClient_GetReplies_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetReplies_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_GetReplies_Response::_Internal {
 public:
};

CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payload_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetReplies_Response)
}
CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(const CRemoteClient_GetReplies_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetReplies_Response)
}

void CRemoteClient_GetReplies_Response::SharedCtor() {
}

CRemoteClient_GetReplies_Response::~CRemoteClient_GetReplies_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetReplies_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_GetReplies_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_GetReplies_Response::ArenaDtor(void* object) {
  CRemoteClient_GetReplies_Response* _this = reinterpret_cast< CRemoteClient_GetReplies_Response* >(object);
  (void)_this;
}
void CRemoteClient_GetReplies_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetReplies_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetReplies_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetReplies_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetReplies_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_payload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_GetReplies_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetReplies_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes payload = 1;
  for (int i = 0, n = this->_internal_payload_size(); i < n; i++) {
    const auto& s = this->_internal_payload(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetReplies_Response)
  return target;
}

size_t CRemoteClient_GetReplies_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetReplies_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes payload = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(payload_.size());
  for (int i = 0, n = payload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      payload_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetReplies_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_GetReplies_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetReplies_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_GetReplies_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_GetReplies_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_GetReplies_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetReplies_Response::MergeFrom(const CRemoteClient_GetReplies_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetReplies_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
}

void CRemoteClient_GetReplies_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_GetReplies_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetReplies_Response::CopyFrom(const CRemoteClient_GetReplies_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetReplies_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetReplies_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_GetReplies_Response::InternalSwap(CRemoteClient_GetReplies_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.InternalSwap(&other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetReplies_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_AllocateRelayServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateRelayServer_Request>()._has_bits_);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateRelayServer_Request)
}
CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(const CRemoteClient_AllocateRelayServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_credentials()) {
    credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credentials(), 
      GetArena());
  }
  cellid_ = from.cellid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateRelayServer_Request)
}

void CRemoteClient_AllocateRelayServer_Request::SharedCtor() {
credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cellid_ = 0u;
}

CRemoteClient_AllocateRelayServer_Request::~CRemoteClient_AllocateRelayServer_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateRelayServer_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_AllocateRelayServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  credentials_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateRelayServer_Request::ArenaDtor(void* object) {
  CRemoteClient_AllocateRelayServer_Request* _this = reinterpret_cast< CRemoteClient_AllocateRelayServer_Request* >(object);
  (void)_this;
}
void CRemoteClient_AllocateRelayServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateRelayServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateRelayServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateRelayServer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    credentials_.ClearNonDefaultToEmpty();
  }
  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateRelayServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cellid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_credentials();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateRelayServer_Request.credentials");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_AllocateRelayServer_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateRelayServer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cellid(), target);
  }

  // optional string credentials = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_credentials().data(), static_cast<int>(this->_internal_credentials().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateRelayServer_Request.credentials");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_credentials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateRelayServer_Request)
  return target;
}

size_t CRemoteClient_AllocateRelayServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateRelayServer_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string credentials = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_credentials());
    }

    // optional uint32 cellid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cellid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_AllocateRelayServer_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_AllocateRelayServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_AllocateRelayServer_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_AllocateRelayServer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_AllocateRelayServer_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_AllocateRelayServer_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_AllocateRelayServer_Request::MergeFrom(const CRemoteClient_AllocateRelayServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateRelayServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_credentials(from._internal_credentials());
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_AllocateRelayServer_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_AllocateRelayServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_AllocateRelayServer_Request::CopyFrom(const CRemoteClient_AllocateRelayServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateRelayServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateRelayServer_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateRelayServer_Request::InternalSwap(CRemoteClient_AllocateRelayServer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  credentials_.Swap(&other->credentials_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cellid_, other->cellid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateRelayServer_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_AllocateRelayServer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateRelayServer_Response>()._has_bits_);
  static void set_has_relay_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateRelayServer_Response)
}
CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(const CRemoteClient_AllocateRelayServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_relay_server()) {
    relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relay_server(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateRelayServer_Response)
}

void CRemoteClient_AllocateRelayServer_Response::SharedCtor() {
relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRemoteClient_AllocateRelayServer_Response::~CRemoteClient_AllocateRelayServer_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateRelayServer_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_AllocateRelayServer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  relay_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateRelayServer_Response::ArenaDtor(void* object) {
  CRemoteClient_AllocateRelayServer_Response* _this = reinterpret_cast< CRemoteClient_AllocateRelayServer_Response* >(object);
  (void)_this;
}
void CRemoteClient_AllocateRelayServer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateRelayServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateRelayServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateRelayServer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relay_server_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateRelayServer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string relay_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_relay_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateRelayServer_Response.relay_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_AllocateRelayServer_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateRelayServer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relay_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relay_server().data(), static_cast<int>(this->_internal_relay_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateRelayServer_Response.relay_server");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relay_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateRelayServer_Response)
  return target;
}

size_t CRemoteClient_AllocateRelayServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateRelayServer_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string relay_server = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relay_server());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_AllocateRelayServer_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_AllocateRelayServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_AllocateRelayServer_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_AllocateRelayServer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_AllocateRelayServer_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_AllocateRelayServer_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_AllocateRelayServer_Response::MergeFrom(const CRemoteClient_AllocateRelayServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateRelayServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relay_server()) {
    _internal_set_relay_server(from._internal_relay_server());
  }
}

void CRemoteClient_AllocateRelayServer_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_AllocateRelayServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_AllocateRelayServer_Response::CopyFrom(const CRemoteClient_AllocateRelayServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateRelayServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateRelayServer_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateRelayServer_Response::InternalSwap(CRemoteClient_AllocateRelayServer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_server_.Swap(&other->relay_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateRelayServer_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_AllocateSDR_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateSDR_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateSDR_Request)
}
CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(const CRemoteClient_AllocateSDR_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateSDR_Request)
}

void CRemoteClient_AllocateSDR_Request::SharedCtor() {
appid_ = 0u;
}

CRemoteClient_AllocateSDR_Request::~CRemoteClient_AllocateSDR_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateSDR_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_AllocateSDR_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_AllocateSDR_Request::ArenaDtor(void* object) {
  CRemoteClient_AllocateSDR_Request* _this = reinterpret_cast< CRemoteClient_AllocateSDR_Request* >(object);
  (void)_this;
}
void CRemoteClient_AllocateSDR_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateSDR_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateSDR_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateSDR_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateSDR_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_AllocateSDR_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateSDR_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateSDR_Request)
  return target;
}

size_t CRemoteClient_AllocateSDR_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateSDR_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_AllocateSDR_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_AllocateSDR_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_AllocateSDR_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_AllocateSDR_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_AllocateSDR_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_AllocateSDR_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_AllocateSDR_Request::MergeFrom(const CRemoteClient_AllocateSDR_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateSDR_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CRemoteClient_AllocateSDR_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_AllocateSDR_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_AllocateSDR_Request::CopyFrom(const CRemoteClient_AllocateSDR_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateSDR_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateSDR_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateSDR_Request::InternalSwap(CRemoteClient_AllocateSDR_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateSDR_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_AllocateSDR_Response::_Internal {
 public:
};

CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateSDR_Response)
}
CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(const CRemoteClient_AllocateSDR_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateSDR_Response)
}

void CRemoteClient_AllocateSDR_Response::SharedCtor() {
}

CRemoteClient_AllocateSDR_Response::~CRemoteClient_AllocateSDR_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateSDR_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_AllocateSDR_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_AllocateSDR_Response::ArenaDtor(void* object) {
  CRemoteClient_AllocateSDR_Response* _this = reinterpret_cast< CRemoteClient_AllocateSDR_Response* >(object);
  (void)_this;
}
void CRemoteClient_AllocateSDR_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateSDR_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateSDR_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateSDR_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateSDR_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_AllocateSDR_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateSDR_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateSDR_Response)
  return target;
}

size_t CRemoteClient_AllocateSDR_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateSDR_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_AllocateSDR_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_AllocateSDR_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_AllocateSDR_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_AllocateSDR_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_AllocateSDR_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_AllocateSDR_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_AllocateSDR_Response::MergeFrom(const CRemoteClient_AllocateSDR_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateSDR_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRemoteClient_AllocateSDR_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_AllocateSDR_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_AllocateSDR_Response::CopyFrom(const CRemoteClient_AllocateSDR_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateSDR_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateSDR_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateSDR_Response::InternalSwap(CRemoteClient_AllocateSDR_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateSDR_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_SteamBroadcast_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SteamBroadcast_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SteamBroadcast_Notification)
}
CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(const CRemoteClient_SteamBroadcast_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SteamBroadcast_Notification)
}

void CRemoteClient_SteamBroadcast_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
}

CRemoteClient_SteamBroadcast_Notification::~CRemoteClient_SteamBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SteamBroadcast_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_SteamBroadcast_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SteamBroadcast_Notification::ArenaDtor(void* object) {
  CRemoteClient_SteamBroadcast_Notification* _this = reinterpret_cast< CRemoteClient_SteamBroadcast_Notification* >(object);
  (void)_this;
}
void CRemoteClient_SteamBroadcast_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SteamBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SteamBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SteamBroadcast_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SteamBroadcast_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_SteamBroadcast_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SteamBroadcast_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 clientid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_clientid(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SteamBroadcast_Notification)
  return target;
}

size_t CRemoteClient_SteamBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SteamBroadcast_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 clientid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_SteamBroadcast_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_SteamBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_SteamBroadcast_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_SteamBroadcast_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_SteamBroadcast_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_SteamBroadcast_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_SteamBroadcast_Notification::MergeFrom(const CRemoteClient_SteamBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SteamBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_SteamBroadcast_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_SteamBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_SteamBroadcast_Notification::CopyFrom(const CRemoteClient_SteamBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SteamBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SteamBroadcast_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_SteamBroadcast_Notification::InternalSwap(CRemoteClient_SteamBroadcast_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamBroadcast_Notification, clientid_)
      + sizeof(CRemoteClient_SteamBroadcast_Notification::clientid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamBroadcast_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SteamBroadcast_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_SteamToSteam_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SteamToSteam_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_src_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dst_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_secretid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encrypted_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SteamToSteam_Notification)
}
CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(const CRemoteClient_SteamToSteam_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_payload()) {
    encrypted_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_payload(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&secretid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SteamToSteam_Notification)
}

void CRemoteClient_SteamToSteam_Notification::SharedCtor() {
encrypted_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&secretid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
}

CRemoteClient_SteamToSteam_Notification::~CRemoteClient_SteamToSteam_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SteamToSteam_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_SteamToSteam_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encrypted_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SteamToSteam_Notification::ArenaDtor(void* object) {
  CRemoteClient_SteamToSteam_Notification* _this = reinterpret_cast< CRemoteClient_SteamToSteam_Notification* >(object);
  (void)_this;
}
void CRemoteClient_SteamToSteam_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SteamToSteam_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SteamToSteam_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SteamToSteam_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encrypted_payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secretid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SteamToSteam_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 src_clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_src_clientid(&has_bits);
          src_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 dst_clientid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dst_clientid(&has_bits);
          dst_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 secretid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_secretid(&has_bits);
          secretid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encrypted_payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_encrypted_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_SteamToSteam_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SteamToSteam_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 src_clientid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_src_clientid(), target);
  }

  // optional fixed64 dst_clientid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_dst_clientid(), target);
  }

  // optional uint32 secretid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_secretid(), target);
  }

  // optional bytes encrypted_payload = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_encrypted_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SteamToSteam_Notification)
  return target;
}

size_t CRemoteClient_SteamToSteam_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SteamToSteam_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes encrypted_payload = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_payload());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 src_clientid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 dst_clientid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 secretid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secretid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_SteamToSteam_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_SteamToSteam_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_SteamToSteam_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_SteamToSteam_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_SteamToSteam_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_SteamToSteam_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_SteamToSteam_Notification::MergeFrom(const CRemoteClient_SteamToSteam_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SteamToSteam_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_payload(from._internal_encrypted_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_clientid_ = from.src_clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dst_clientid_ = from.dst_clientid_;
    }
    if (cached_has_bits & 0x00000010u) {
      secretid_ = from.secretid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_SteamToSteam_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_SteamToSteam_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_SteamToSteam_Notification::CopyFrom(const CRemoteClient_SteamToSteam_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SteamToSteam_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SteamToSteam_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_SteamToSteam_Notification::InternalSwap(CRemoteClient_SteamToSteam_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_payload_.Swap(&other->encrypted_payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamToSteam_Notification, secretid_)
      + sizeof(CRemoteClient_SteamToSteam_Notification::secretid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamToSteam_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SteamToSteam_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlay_SessionStarted_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStarted_Request>()._has_bits_);
  static void set_has_host_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_form_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_play_together(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guest_session(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStarted_Request)
}
CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(const CRemotePlay_SessionStarted_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&host_account_id_, &from.host_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guest_session_) -
    reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStarted_Request)
}

void CRemotePlay_SessionStarted_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&host_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guest_session_) -
    reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
}

CRemotePlay_SessionStarted_Request::~CRemotePlay_SessionStarted_Request() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStarted_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlay_SessionStarted_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemotePlay_SessionStarted_Request::ArenaDtor(void* object) {
  CRemotePlay_SessionStarted_Request* _this = reinterpret_cast< CRemotePlay_SessionStarted_Request* >(object);
  (void)_this;
}
void CRemotePlay_SessionStarted_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStarted_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStarted_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStarted_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&host_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guest_session_) -
        reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStarted_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 host_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_host_account_id(&has_bits);
          host_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_account_id(&has_bits);
          client_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 device_form_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_device_form_factor(&has_bits);
          device_form_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remote_play_together = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_remote_play_together(&has_bits);
          remote_play_together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool guest_session = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_guest_session(&has_bits);
          guest_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlay_SessionStarted_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStarted_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_host_account_id(), target);
  }

  // optional uint32 client_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_account_id(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional int32 device_form_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_device_form_factor(), target);
  }

  // optional bool remote_play_together = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_remote_play_together(), target);
  }

  // optional bool guest_session = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_guest_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStarted_Request)
  return target;
}

size_t CRemotePlay_SessionStarted_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStarted_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 host_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_account_id());
    }

    // optional uint32 client_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_account_id());
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional int32 device_form_factor = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_device_form_factor());
    }

    // optional bool remote_play_together = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool guest_session = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlay_SessionStarted_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlay_SessionStarted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlay_SessionStarted_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlay_SessionStarted_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlay_SessionStarted_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlay_SessionStarted_Request)
    MergeFrom(*source);
  }
}

void CRemotePlay_SessionStarted_Request::MergeFrom(const CRemotePlay_SessionStarted_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStarted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      host_account_id_ = from.host_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_account_id_ = from.client_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_form_factor_ = from.device_form_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      remote_play_together_ = from.remote_play_together_;
    }
    if (cached_has_bits & 0x00000020u) {
      guest_session_ = from.guest_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlay_SessionStarted_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlay_SessionStarted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlay_SessionStarted_Request::CopyFrom(const CRemotePlay_SessionStarted_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStarted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStarted_Request::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStarted_Request::InternalSwap(CRemotePlay_SessionStarted_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStarted_Request, guest_session_)
      + sizeof(CRemotePlay_SessionStarted_Request::guest_session_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStarted_Request, host_account_id_)>(
          reinterpret_cast<char*>(&host_account_id_),
          reinterpret_cast<char*>(&other->host_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStarted_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlay_SessionStarted_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStarted_Response>()._has_bits_);
  static void set_has_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStarted_Response)
}
CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(const CRemotePlay_SessionStarted_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_ = from.record_id_;
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStarted_Response)
}

void CRemotePlay_SessionStarted_Response::SharedCtor() {
record_id_ = PROTOBUF_ULONGLONG(0);
}

CRemotePlay_SessionStarted_Response::~CRemotePlay_SessionStarted_Response() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStarted_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlay_SessionStarted_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemotePlay_SessionStarted_Response::ArenaDtor(void* object) {
  CRemotePlay_SessionStarted_Response* _this = reinterpret_cast< CRemotePlay_SessionStarted_Response* >(object);
  (void)_this;
}
void CRemotePlay_SessionStarted_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStarted_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStarted_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStarted_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStarted_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_record_id(&has_bits);
          record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlay_SessionStarted_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStarted_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_record_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStarted_Response)
  return target;
}

size_t CRemotePlay_SessionStarted_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStarted_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 record_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlay_SessionStarted_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlay_SessionStarted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlay_SessionStarted_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlay_SessionStarted_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlay_SessionStarted_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlay_SessionStarted_Response)
    MergeFrom(*source);
  }
}

void CRemotePlay_SessionStarted_Response::MergeFrom(const CRemotePlay_SessionStarted_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStarted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_record_id()) {
    _internal_set_record_id(from._internal_record_id());
  }
}

void CRemotePlay_SessionStarted_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlay_SessionStarted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlay_SessionStarted_Response::CopyFrom(const CRemotePlay_SessionStarted_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStarted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStarted_Response::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStarted_Response::InternalSwap(CRemotePlay_SessionStarted_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(record_id_, other->record_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStarted_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlay_SessionStopped_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStopped_Notification>()._has_bits_);
  static void set_has_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_used_x264(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_used_h264(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_used_hevc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStopped_Notification)
}
CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(const CRemotePlay_SessionStopped_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&record_id_, &from.record_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_hevc_) -
    reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStopped_Notification)
}

void CRemotePlay_SessionStopped_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&record_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_hevc_) -
    reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
}

CRemotePlay_SessionStopped_Notification::~CRemotePlay_SessionStopped_Notification() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStopped_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlay_SessionStopped_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemotePlay_SessionStopped_Notification::ArenaDtor(void* object) {
  CRemotePlay_SessionStopped_Notification* _this = reinterpret_cast< CRemotePlay_SessionStopped_Notification* >(object);
  (void)_this;
}
void CRemotePlay_SessionStopped_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStopped_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStopped_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStopped_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&record_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_hevc_) -
        reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStopped_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_record_id(&has_bits);
          record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool used_x264 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_used_x264(&has_bits);
          used_x264_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool used_h264 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_used_h264(&has_bits);
          used_h264_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool used_hevc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_used_hevc(&has_bits);
          used_hevc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlay_SessionStopped_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStopped_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_record_id(), target);
  }

  // optional bool used_x264 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_used_x264(), target);
  }

  // optional bool used_h264 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_used_h264(), target);
  }

  // optional bool used_hevc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_used_hevc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStopped_Notification)
  return target;
}

size_t CRemotePlay_SessionStopped_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStopped_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 record_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool used_x264 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool used_h264 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool used_hevc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlay_SessionStopped_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlay_SessionStopped_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlay_SessionStopped_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlay_SessionStopped_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlay_SessionStopped_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlay_SessionStopped_Notification)
    MergeFrom(*source);
  }
}

void CRemotePlay_SessionStopped_Notification::MergeFrom(const CRemotePlay_SessionStopped_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStopped_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      record_id_ = from.record_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_x264_ = from.used_x264_;
    }
    if (cached_has_bits & 0x00000004u) {
      used_h264_ = from.used_h264_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_hevc_ = from.used_hevc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlay_SessionStopped_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlay_SessionStopped_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlay_SessionStopped_Notification::CopyFrom(const CRemotePlay_SessionStopped_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStopped_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStopped_Notification::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStopped_Notification::InternalSwap(CRemotePlay_SessionStopped_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStopped_Notification, used_hevc_)
      + sizeof(CRemotePlay_SessionStopped_Notification::used_hevc_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStopped_Notification, record_id_)>(
          reinterpret_cast<char*>(&record_id_),
          reinterpret_cast<char*>(&other->record_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStopped_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlayTogether_Notification_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_Player>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avatar_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keyboard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mouse_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_controller_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.Player)
}
CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(const CRemotePlayTogether_Notification_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatar_hash()) {
    avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_hash(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_enabled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.Player)
}

void CRemotePlayTogether_Notification_Player::SharedCtor() {
avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_enabled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
}

CRemotePlayTogether_Notification_Player::~CRemotePlayTogether_Notification_Player() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlayTogether_Notification_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemotePlayTogether_Notification_Player::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_Player* _this = reinterpret_cast< CRemotePlayTogether_Notification_Player* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatar_hash_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_enabled_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 guestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guestid(&has_bits);
          guestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes avatar_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keyboard_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_keyboard_enabled(&has_bits);
          keyboard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mouse_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mouse_enabled(&has_bits);
          mouse_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_controller_enabled(&has_bits);
          controller_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlayTogether_Notification_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 guestid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guestid(), target);
  }

  // optional bytes avatar_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar_hash(), target);
  }

  // optional bool keyboard_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_keyboard_enabled(), target);
  }

  // optional bool mouse_enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mouse_enabled(), target);
  }

  // optional bool controller_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_controller_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.Player)
  return target;
}

size_t CRemotePlayTogether_Notification_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes avatar_hash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatar_hash());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 guestid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guestid());
    }

    // optional bool keyboard_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool mouse_enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool controller_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlayTogether_Notification_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlayTogether_Notification.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlayTogether_Notification_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlayTogether_Notification_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlayTogether_Notification.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlayTogether_Notification.Player)
    MergeFrom(*source);
  }
}

void CRemotePlayTogether_Notification_Player::MergeFrom(const CRemotePlayTogether_Notification_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatar_hash(from._internal_avatar_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      guestid_ = from.guestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      keyboard_enabled_ = from.keyboard_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      mouse_enabled_ = from.mouse_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_enabled_ = from.controller_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlayTogether_Notification_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlayTogether_Notification.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlayTogether_Notification_Player::CopyFrom(const CRemotePlayTogether_Notification_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_Player::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_Player::InternalSwap(CRemotePlayTogether_Notification_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatar_hash_.Swap(&other->avatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_Player, controller_enabled_)
      + sizeof(CRemotePlayTogether_Notification_Player::controller_enabled_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_Player, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlayTogether_Notification_ControllerSlot_obsolete::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_ControllerSlot_obsolete>()._has_bits_);
  static void set_has_slotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
}
CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&slotid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slotid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
}

CRemotePlayTogether_Notification_ControllerSlot_obsolete::~CRemotePlayTogether_Notification_ControllerSlot_obsolete() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_ControllerSlot_obsolete* _this = reinterpret_cast< CRemotePlayTogether_Notification_ControllerSlot_obsolete* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_ControllerSlot_obsolete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_ControllerSlot_obsolete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slotid(&has_bits);
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlayTogether_Notification_ControllerSlot_obsolete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slotid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slotid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  return target;
}

size_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 slotid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlayTogether_Notification_ControllerSlot_obsolete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlayTogether_Notification_ControllerSlot_obsolete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
    MergeFrom(*source);
  }
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      slotid_ = from.slotid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::InternalSwap(CRemotePlayTogether_Notification_ControllerSlot_obsolete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot_obsolete, slotid_)
      + sizeof(CRemotePlayTogether_Notification_ControllerSlot_obsolete::slotid_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot_obsolete, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_ControllerSlot_obsolete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlayTogether_Notification_ControllerSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_ControllerSlot>()._has_bits_);
  static void set_has_slotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CRemotePlayTogether_Notification_Player& player(const CRemotePlayTogether_Notification_ControllerSlot* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CRemotePlayTogether_Notification_Player&
CRemotePlayTogether_Notification_ControllerSlot::_Internal::player(const CRemotePlayTogether_Notification_ControllerSlot* msg) {
  return *msg->player_;
}
CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.ControllerSlot)
}
CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(const CRemotePlayTogether_Notification_ControllerSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::CRemotePlayTogether_Notification_Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&slotid_, &from.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.ControllerSlot)
}

void CRemotePlayTogether_Notification_ControllerSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&player_)) + sizeof(controller_type_));
}

CRemotePlayTogether_Notification_ControllerSlot::~CRemotePlayTogether_Notification_ControllerSlot() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.ControllerSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlayTogether_Notification_ControllerSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void CRemotePlayTogether_Notification_ControllerSlot::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_ControllerSlot* _this = reinterpret_cast< CRemotePlayTogether_Notification_ControllerSlot* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_ControllerSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_ControllerSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_ControllerSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.ControllerSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != nullptr);
    player_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&slotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_type_) -
        reinterpret_cast<char*>(&slotid_)) + sizeof(controller_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_ControllerSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slotid(&has_bits);
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CRemotePlayTogether_Notification.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 controller_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_controller_type(&has_bits);
          controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlayTogether_Notification_ControllerSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.ControllerSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slotid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slotid(), target);
  }

  // optional .CRemotePlayTogether_Notification.Player player = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  // optional int32 controller_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_controller_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.ControllerSlot)
  return target;
}

size_t CRemotePlayTogether_Notification_ControllerSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.ControllerSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CRemotePlayTogether_Notification.Player player = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_);
    }

    // optional uint32 slotid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotid());
    }

    // optional int32 controller_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlayTogether_Notification_ControllerSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlayTogether_Notification_ControllerSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlayTogether_Notification_ControllerSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlayTogether_Notification.ControllerSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlayTogether_Notification.ControllerSlot)
    MergeFrom(*source);
  }
}

void CRemotePlayTogether_Notification_ControllerSlot::MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player()->::CRemotePlayTogether_Notification_Player::MergeFrom(from._internal_player());
    }
    if (cached_has_bits & 0x00000002u) {
      slotid_ = from.slotid_;
    }
    if (cached_has_bits & 0x00000004u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlayTogether_Notification_ControllerSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlayTogether_Notification_ControllerSlot::CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_ControllerSlot::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_ControllerSlot::InternalSwap(CRemotePlayTogether_Notification_ControllerSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot, controller_type_)
      + sizeof(CRemotePlayTogether_Notification_ControllerSlot::controller_type_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_ControllerSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlayTogether_Notification_GroupUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_GroupUpdated>()._has_bits_);
  static void set_has_host_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_new_players(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_obsolete_(arena),
  controller_slots_obsolete_(arena),
  player_slots_(arena),
  controller_slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.GroupUpdated)
}
CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(const CRemotePlayTogether_Notification_GroupUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_obsolete_(from.players_obsolete_),
      controller_slots_obsolete_(from.controller_slots_obsolete_),
      player_slots_(from.player_slots_),
      controller_slots_(from.controller_slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&host_steamid_, &from.host_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_new_players_) -
    reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.GroupUpdated)
}

void CRemotePlayTogether_Notification_GroupUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&host_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_new_players_) -
    reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
}

CRemotePlayTogether_Notification_GroupUpdated::~CRemotePlayTogether_Notification_GroupUpdated() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.GroupUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlayTogether_Notification_GroupUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemotePlayTogether_Notification_GroupUpdated::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_GroupUpdated* _this = reinterpret_cast< CRemotePlayTogether_Notification_GroupUpdated* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_GroupUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_GroupUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_GroupUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.GroupUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_obsolete_.Clear();
  controller_slots_obsolete_.Clear();
  player_slots_.Clear();
  controller_slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&host_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_new_players_) -
        reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_GroupUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 host_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_host_steamid(&has_bits);
          host_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 host_clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_host_clientid(&has_bits);
          host_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 players_obsolete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_players_obsolete(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_players_obsolete(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 host_gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_host_gameid(&has_bits);
          host_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_slots_obsolete(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_new_players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_new_players(&has_bits);
          has_new_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlayTogether_Notification_GroupUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.GroupUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 host_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_host_steamid(), target);
  }

  // optional fixed64 host_clientid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_host_clientid(), target);
  }

  // repeated fixed64 players_obsolete = 3;
  for (int i = 0, n = this->_internal_players_obsolete_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_players_obsolete(i), target);
  }

  // optional fixed64 host_gameid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_host_gameid(), target);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_slots_obsolete_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_controller_slots_obsolete(i), target, stream);
  }

  // optional bool has_new_players = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_has_new_players(), target);
  }

  // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_player_slots(i), target, stream);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_controller_slots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.GroupUpdated)
  return target;
}

size_t CRemotePlayTogether_Notification_GroupUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.GroupUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 players_obsolete = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_players_obsolete_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_obsolete_size());
    total_size += data_size;
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
  total_size += 1UL * this->_internal_controller_slots_obsolete_size();
  for (const auto& msg : this->controller_slots_obsolete_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
  total_size += 1UL * this->_internal_player_slots_size();
  for (const auto& msg : this->player_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
  total_size += 1UL * this->_internal_controller_slots_size();
  for (const auto& msg : this->controller_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 host_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 host_clientid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 host_gameid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool has_new_players = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlayTogether_Notification_GroupUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlayTogether_Notification_GroupUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlayTogether_Notification.GroupUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlayTogether_Notification.GroupUpdated)
    MergeFrom(*source);
  }
}

void CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(const CRemotePlayTogether_Notification_GroupUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_obsolete_.MergeFrom(from.players_obsolete_);
  controller_slots_obsolete_.MergeFrom(from.controller_slots_obsolete_);
  player_slots_.MergeFrom(from.player_slots_);
  controller_slots_.MergeFrom(from.controller_slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      host_steamid_ = from.host_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      host_clientid_ = from.host_clientid_;
    }
    if (cached_has_bits & 0x00000004u) {
      host_gameid_ = from.host_gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_new_players_ = from.has_new_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemotePlayTogether_Notification_GroupUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlayTogether_Notification_GroupUpdated::CopyFrom(const CRemotePlayTogether_Notification_GroupUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_GroupUpdated::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_GroupUpdated::InternalSwap(CRemotePlayTogether_Notification_GroupUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_obsolete_.InternalSwap(&other->players_obsolete_);
  controller_slots_obsolete_.InternalSwap(&other->controller_slots_obsolete_);
  player_slots_.InternalSwap(&other->player_slots_);
  controller_slots_.InternalSwap(&other->controller_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_GroupUpdated, has_new_players_)
      + sizeof(CRemotePlayTogether_Notification_GroupUpdated::has_new_players_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_GroupUpdated, host_steamid_)>(
          reinterpret_cast<char*>(&host_steamid_),
          reinterpret_cast<char*>(&other->host_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_GroupUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemotePlayTogether_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CRemotePlayTogether_Notification_GroupUpdated& group_updated(const CRemotePlayTogether_Notification* msg);
};

const ::CRemotePlayTogether_Notification_GroupUpdated&
CRemotePlayTogether_Notification::_Internal::group_updated(const CRemotePlayTogether_Notification* msg) {
  return *msg->Message_.group_updated_;
}
void CRemotePlayTogether_Notification::set_allocated_group_updated(::CRemotePlayTogether_Notification_GroupUpdated* group_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (group_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_updated);
    if (message_arena != submessage_arena) {
      group_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_updated, submessage_arena);
    }
    set_has_group_updated();
    Message_.group_updated_ = group_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:CRemotePlayTogether_Notification.group_updated)
}
CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification)
}
CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(const CRemotePlayTogether_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  clear_has_Message();
  switch (from.Message_case()) {
    case kGroupUpdated: {
      _internal_mutable_group_updated()->::CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(from._internal_group_updated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification)
}

void CRemotePlayTogether_Notification::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
clear_has_Message();
}

CRemotePlayTogether_Notification::~CRemotePlayTogether_Notification() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemotePlayTogether_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void CRemotePlayTogether_Notification::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification* _this = reinterpret_cast< CRemotePlayTogether_Notification* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:CRemotePlayTogether_Notification)
  switch (Message_case()) {
    case kGroupUpdated: {
      if (GetArena() == nullptr) {
        delete Message_.group_updated_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void CRemotePlayTogether_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  clear_Message();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemotePlayTogether_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
  if (_internal_has_group_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification)
  return target;
}

size_t CRemotePlayTogether_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  switch (Message_case()) {
    // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
    case kGroupUpdated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.group_updated_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemotePlayTogether_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemotePlayTogether_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemotePlayTogether_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemotePlayTogether_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemotePlayTogether_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemotePlayTogether_Notification)
    MergeFrom(*source);
  }
}

void CRemotePlayTogether_Notification::MergeFrom(const CRemotePlayTogether_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  switch (from.Message_case()) {
    case kGroupUpdated: {
      _internal_mutable_group_updated()->::CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(from._internal_group_updated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void CRemotePlayTogether_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemotePlayTogether_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemotePlayTogether_Notification::CopyFrom(const CRemotePlayTogether_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification::InternalSwap(CRemotePlayTogether_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
}
CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  launch_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_launch_parameters()) {
    launch_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_parameters(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SharedCtor() {
launch_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CRemoteClient_CreateRemotePlayTogetherInvitation_Request::~CRemoteClient_CreateRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  launch_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_CreateRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_CreateRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    launch_parameters_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string launch_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_launch_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string launch_parameters = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_launch_parameters().data(), static_cast<int>(this->_internal_launch_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_launch_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_CreateRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string launch_parameters = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_launch_parameters());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CreateRemotePlayTogetherInvitation_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CreateRemotePlayTogetherInvitation_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_launch_parameters(from._internal_launch_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  launch_parameters_.Swap(&other->launch_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
}
CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRemoteClient_CreateRemotePlayTogetherInvitation_Response::~CRemoteClient_CreateRemotePlayTogetherInvitation_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::ArenaDtor(void* object) {
  CRemoteClient_CreateRemotePlayTogetherInvitation_Response* _this = reinterpret_cast< CRemoteClient_CreateRemotePlayTogetherInvitation_Response* >(object);
  (void)_this;
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  return target;
}

size_t CRemoteClient_CreateRemotePlayTogetherInvitation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_CreateRemotePlayTogetherInvitation_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateRemotePlayTogetherInvitation_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_code_.Swap(&other->invitation_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
}
CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::~CRemoteClient_DeleteRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_code_.Swap(&other->invitation_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::_Internal {
 public:
};

CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
}
CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::SharedCtor() {
}

CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::~CRemoteClient_DeleteRemotePlayTogetherInvitation_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::ArenaDtor(void* object) {
  CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* _this = reinterpret_cast< CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* >(object);
  (void)_this;
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  return target;
}

size_t CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::MergeFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CopyFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::InternalSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_LookupRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
}
CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRemoteClient_LookupRemotePlayTogetherInvitation_Request::~CRemoteClient_LookupRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_LookupRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_LookupRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_LookupRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_LookupRemotePlayTogetherInvitation_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_LookupRemotePlayTogetherInvitation_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_LookupRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_code_.Swap(&other->invitation_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_LookupRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_LookupRemotePlayTogetherInvitation_Response>()._has_bits_);
  static void set_has_invitation_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
}
CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_url()) {
    invitation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_url(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SharedCtor() {
invitation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRemoteClient_LookupRemotePlayTogetherInvitation_Response::~CRemoteClient_LookupRemotePlayTogetherInvitation_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitation_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::ArenaDtor(void* object) {
  CRemoteClient_LookupRemotePlayTogetherInvitation_Response* _this = reinterpret_cast< CRemoteClient_LookupRemotePlayTogetherInvitation_Response* >(object);
  (void)_this;
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invitation_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_url().data(), static_cast<int>(this->_internal_invitation_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  return target;
}

size_t CRemoteClient_LookupRemotePlayTogetherInvitation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_LookupRemotePlayTogetherInvitation_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRemoteClient_LookupRemotePlayTogetherInvitation_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_url()) {
    _internal_set_invitation_url(from._internal_invitation_url());
  }
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_LookupRemotePlayTogetherInvitation_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_url_.Swap(&other->invitation_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_LookupRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCMRemoteClient_ClientMessage::_Internal {
 public:
  static const ::CRemoteClient_CreateSession_Request& create_session_request(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_StartPairing_Request& start_pairing_request(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_SetPairingInfo_Request& set_pairing_info_request(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_CancelPairing_Request& cancel_pairing_request(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_RegisterStatusUpdate_Notification& register_status_update(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_UnregisterStatusUpdate_Notification& unregister_status_update(const CCMRemoteClient_ClientMessage* msg);
  static const ::CRemoteClient_RemotePacket_Notification& remote_packet(const CCMRemoteClient_ClientMessage* msg);
};

const ::CRemoteClient_CreateSession_Request&
CCMRemoteClient_ClientMessage::_Internal::create_session_request(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.create_session_request_;
}
const ::CRemoteClient_StartPairing_Request&
CCMRemoteClient_ClientMessage::_Internal::start_pairing_request(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.start_pairing_request_;
}
const ::CRemoteClient_SetPairingInfo_Request&
CCMRemoteClient_ClientMessage::_Internal::set_pairing_info_request(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.set_pairing_info_request_;
}
const ::CRemoteClient_CancelPairing_Request&
CCMRemoteClient_ClientMessage::_Internal::cancel_pairing_request(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.cancel_pairing_request_;
}
const ::CRemoteClient_RegisterStatusUpdate_Notification&
CCMRemoteClient_ClientMessage::_Internal::register_status_update(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.register_status_update_;
}
const ::CRemoteClient_UnregisterStatusUpdate_Notification&
CCMRemoteClient_ClientMessage::_Internal::unregister_status_update(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.unregister_status_update_;
}
const ::CRemoteClient_RemotePacket_Notification&
CCMRemoteClient_ClientMessage::_Internal::remote_packet(const CCMRemoteClient_ClientMessage* msg) {
  return *msg->Message_.remote_packet_;
}
void CCMRemoteClient_ClientMessage::set_allocated_create_session_request(::CRemoteClient_CreateSession_Request* create_session_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (create_session_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_session_request);
    if (message_arena != submessage_arena) {
      create_session_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session_request, submessage_arena);
    }
    set_has_create_session_request();
    Message_.create_session_request_ = create_session_request;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.create_session_request)
}
void CCMRemoteClient_ClientMessage::set_allocated_start_pairing_request(::CRemoteClient_StartPairing_Request* start_pairing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (start_pairing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_pairing_request);
    if (message_arena != submessage_arena) {
      start_pairing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pairing_request, submessage_arena);
    }
    set_has_start_pairing_request();
    Message_.start_pairing_request_ = start_pairing_request;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.start_pairing_request)
}
void CCMRemoteClient_ClientMessage::set_allocated_set_pairing_info_request(::CRemoteClient_SetPairingInfo_Request* set_pairing_info_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (set_pairing_info_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_pairing_info_request);
    if (message_arena != submessage_arena) {
      set_pairing_info_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_pairing_info_request, submessage_arena);
    }
    set_has_set_pairing_info_request();
    Message_.set_pairing_info_request_ = set_pairing_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.set_pairing_info_request)
}
void CCMRemoteClient_ClientMessage::set_allocated_cancel_pairing_request(::CRemoteClient_CancelPairing_Request* cancel_pairing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (cancel_pairing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_pairing_request);
    if (message_arena != submessage_arena) {
      cancel_pairing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_pairing_request, submessage_arena);
    }
    set_has_cancel_pairing_request();
    Message_.cancel_pairing_request_ = cancel_pairing_request;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.cancel_pairing_request)
}
void CCMRemoteClient_ClientMessage::set_allocated_register_status_update(::CRemoteClient_RegisterStatusUpdate_Notification* register_status_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (register_status_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(register_status_update);
    if (message_arena != submessage_arena) {
      register_status_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_status_update, submessage_arena);
    }
    set_has_register_status_update();
    Message_.register_status_update_ = register_status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.register_status_update)
}
void CCMRemoteClient_ClientMessage::set_allocated_unregister_status_update(::CRemoteClient_UnregisterStatusUpdate_Notification* unregister_status_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (unregister_status_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unregister_status_update);
    if (message_arena != submessage_arena) {
      unregister_status_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unregister_status_update, submessage_arena);
    }
    set_has_unregister_status_update();
    Message_.unregister_status_update_ = unregister_status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.unregister_status_update)
}
void CCMRemoteClient_ClientMessage::set_allocated_remote_packet(::CRemoteClient_RemotePacket_Notification* remote_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (remote_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remote_packet);
    if (message_arena != submessage_arena) {
      remote_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_packet, submessage_arena);
    }
    set_has_remote_packet();
    Message_.remote_packet_ = remote_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ClientMessage.remote_packet)
}
CCMRemoteClient_ClientMessage::CCMRemoteClient_ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCMRemoteClient_ClientMessage)
}
CCMRemoteClient_ClientMessage::CCMRemoteClient_ClientMessage(const CCMRemoteClient_ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Message();
  switch (from.Message_case()) {
    case kCreateSessionRequest: {
      _internal_mutable_create_session_request()->::CRemoteClient_CreateSession_Request::MergeFrom(from._internal_create_session_request());
      break;
    }
    case kStartPairingRequest: {
      _internal_mutable_start_pairing_request()->::CRemoteClient_StartPairing_Request::MergeFrom(from._internal_start_pairing_request());
      break;
    }
    case kSetPairingInfoRequest: {
      _internal_mutable_set_pairing_info_request()->::CRemoteClient_SetPairingInfo_Request::MergeFrom(from._internal_set_pairing_info_request());
      break;
    }
    case kCancelPairingRequest: {
      _internal_mutable_cancel_pairing_request()->::CRemoteClient_CancelPairing_Request::MergeFrom(from._internal_cancel_pairing_request());
      break;
    }
    case kRegisterStatusUpdate: {
      _internal_mutable_register_status_update()->::CRemoteClient_RegisterStatusUpdate_Notification::MergeFrom(from._internal_register_status_update());
      break;
    }
    case kUnregisterStatusUpdate: {
      _internal_mutable_unregister_status_update()->::CRemoteClient_UnregisterStatusUpdate_Notification::MergeFrom(from._internal_unregister_status_update());
      break;
    }
    case kRemotePacket: {
      _internal_mutable_remote_packet()->::CRemoteClient_RemotePacket_Notification::MergeFrom(from._internal_remote_packet());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CCMRemoteClient_ClientMessage)
}

void CCMRemoteClient_ClientMessage::SharedCtor() {
clear_has_Message();
}

CCMRemoteClient_ClientMessage::~CCMRemoteClient_ClientMessage() {
  // @@protoc_insertion_point(destructor:CCMRemoteClient_ClientMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCMRemoteClient_ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void CCMRemoteClient_ClientMessage::ArenaDtor(void* object) {
  CCMRemoteClient_ClientMessage* _this = reinterpret_cast< CCMRemoteClient_ClientMessage* >(object);
  (void)_this;
}
void CCMRemoteClient_ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCMRemoteClient_ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCMRemoteClient_ClientMessage::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:CCMRemoteClient_ClientMessage)
  switch (Message_case()) {
    case kCreateSessionRequest: {
      if (GetArena() == nullptr) {
        delete Message_.create_session_request_;
      }
      break;
    }
    case kStartPairingRequest: {
      if (GetArena() == nullptr) {
        delete Message_.start_pairing_request_;
      }
      break;
    }
    case kSetPairingInfoRequest: {
      if (GetArena() == nullptr) {
        delete Message_.set_pairing_info_request_;
      }
      break;
    }
    case kCancelPairingRequest: {
      if (GetArena() == nullptr) {
        delete Message_.cancel_pairing_request_;
      }
      break;
    }
    case kRegisterStatusUpdate: {
      if (GetArena() == nullptr) {
        delete Message_.register_status_update_;
      }
      break;
    }
    case kUnregisterStatusUpdate: {
      if (GetArena() == nullptr) {
        delete Message_.unregister_status_update_;
      }
      break;
    }
    case kRemotePacket: {
      if (GetArena() == nullptr) {
        delete Message_.remote_packet_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void CCMRemoteClient_ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCMRemoteClient_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCMRemoteClient_ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CRemoteClient_CreateSession_Request create_session_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_session_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_StartPairing_Request start_pairing_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pairing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_SetPairingInfo_Request set_pairing_info_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_pairing_info_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_CancelPairing_Request cancel_pairing_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_pairing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_RegisterStatusUpdate_Notification register_status_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_status_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_UnregisterStatusUpdate_Notification unregister_status_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unregister_status_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_RemotePacket_Notification remote_packet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCMRemoteClient_ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCMRemoteClient_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (Message_case()) {
    case kCreateSessionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::create_session_request(this), target, stream);
      break;
    }
    case kStartPairingRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::start_pairing_request(this), target, stream);
      break;
    }
    case kSetPairingInfoRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::set_pairing_info_request(this), target, stream);
      break;
    }
    case kCancelPairingRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::cancel_pairing_request(this), target, stream);
      break;
    }
    case kRegisterStatusUpdate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::register_status_update(this), target, stream);
      break;
    }
    case kUnregisterStatusUpdate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::unregister_status_update(this), target, stream);
      break;
    }
    case kRemotePacket: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::remote_packet(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCMRemoteClient_ClientMessage)
  return target;
}

size_t CCMRemoteClient_ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCMRemoteClient_ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Message_case()) {
    // .CRemoteClient_CreateSession_Request create_session_request = 1;
    case kCreateSessionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.create_session_request_);
      break;
    }
    // .CRemoteClient_StartPairing_Request start_pairing_request = 2;
    case kStartPairingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.start_pairing_request_);
      break;
    }
    // .CRemoteClient_SetPairingInfo_Request set_pairing_info_request = 3;
    case kSetPairingInfoRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.set_pairing_info_request_);
      break;
    }
    // .CRemoteClient_CancelPairing_Request cancel_pairing_request = 4;
    case kCancelPairingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.cancel_pairing_request_);
      break;
    }
    // .CRemoteClient_RegisterStatusUpdate_Notification register_status_update = 5;
    case kRegisterStatusUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.register_status_update_);
      break;
    }
    // .CRemoteClient_UnregisterStatusUpdate_Notification unregister_status_update = 6;
    case kUnregisterStatusUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.unregister_status_update_);
      break;
    }
    // .CRemoteClient_RemotePacket_Notification remote_packet = 7;
    case kRemotePacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.remote_packet_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCMRemoteClient_ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCMRemoteClient_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CCMRemoteClient_ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCMRemoteClient_ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCMRemoteClient_ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCMRemoteClient_ClientMessage)
    MergeFrom(*source);
  }
}

void CCMRemoteClient_ClientMessage::MergeFrom(const CCMRemoteClient_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCMRemoteClient_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Message_case()) {
    case kCreateSessionRequest: {
      _internal_mutable_create_session_request()->::CRemoteClient_CreateSession_Request::MergeFrom(from._internal_create_session_request());
      break;
    }
    case kStartPairingRequest: {
      _internal_mutable_start_pairing_request()->::CRemoteClient_StartPairing_Request::MergeFrom(from._internal_start_pairing_request());
      break;
    }
    case kSetPairingInfoRequest: {
      _internal_mutable_set_pairing_info_request()->::CRemoteClient_SetPairingInfo_Request::MergeFrom(from._internal_set_pairing_info_request());
      break;
    }
    case kCancelPairingRequest: {
      _internal_mutable_cancel_pairing_request()->::CRemoteClient_CancelPairing_Request::MergeFrom(from._internal_cancel_pairing_request());
      break;
    }
    case kRegisterStatusUpdate: {
      _internal_mutable_register_status_update()->::CRemoteClient_RegisterStatusUpdate_Notification::MergeFrom(from._internal_register_status_update());
      break;
    }
    case kUnregisterStatusUpdate: {
      _internal_mutable_unregister_status_update()->::CRemoteClient_UnregisterStatusUpdate_Notification::MergeFrom(from._internal_unregister_status_update());
      break;
    }
    case kRemotePacket: {
      _internal_mutable_remote_packet()->::CRemoteClient_RemotePacket_Notification::MergeFrom(from._internal_remote_packet());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void CCMRemoteClient_ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCMRemoteClient_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCMRemoteClient_ClientMessage::CopyFrom(const CCMRemoteClient_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCMRemoteClient_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCMRemoteClient_ClientMessage::IsInitialized() const {
  return true;
}

void CCMRemoteClient_ClientMessage::InternalSwap(CCMRemoteClient_ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCMRemoteClient_ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCMRemoteClient_ServerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCMRemoteClient_ServerMessage>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CRemoteClient_CreateSession_Response& create_session_response(const CCMRemoteClient_ServerMessage* msg);
  static const ::CRemoteClient_StartPairing_Response& start_pairing_response(const CCMRemoteClient_ServerMessage* msg);
  static const ::CRemoteClient_SetPairingInfo_Response& set_pairing_info_response(const CCMRemoteClient_ServerMessage* msg);
  static const ::CRemoteClient_CancelPairing_Response& cancel_pairing_response(const CCMRemoteClient_ServerMessage* msg);
  static const ::CRemoteClient_GetReplies_Response& reply_packet(const CCMRemoteClient_ServerMessage* msg);
};

const ::CRemoteClient_CreateSession_Response&
CCMRemoteClient_ServerMessage::_Internal::create_session_response(const CCMRemoteClient_ServerMessage* msg) {
  return *msg->Message_.create_session_response_;
}
const ::CRemoteClient_StartPairing_Response&
CCMRemoteClient_ServerMessage::_Internal::start_pairing_response(const CCMRemoteClient_ServerMessage* msg) {
  return *msg->Message_.start_pairing_response_;
}
const ::CRemoteClient_SetPairingInfo_Response&
CCMRemoteClient_ServerMessage::_Internal::set_pairing_info_response(const CCMRemoteClient_ServerMessage* msg) {
  return *msg->Message_.set_pairing_info_response_;
}
const ::CRemoteClient_CancelPairing_Response&
CCMRemoteClient_ServerMessage::_Internal::cancel_pairing_response(const CCMRemoteClient_ServerMessage* msg) {
  return *msg->Message_.cancel_pairing_response_;
}
const ::CRemoteClient_GetReplies_Response&
CCMRemoteClient_ServerMessage::_Internal::reply_packet(const CCMRemoteClient_ServerMessage* msg) {
  return *msg->Message_.reply_packet_;
}
void CCMRemoteClient_ServerMessage::set_allocated_create_session_response(::CRemoteClient_CreateSession_Response* create_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (create_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_session_response);
    if (message_arena != submessage_arena) {
      create_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session_response, submessage_arena);
    }
    set_has_create_session_response();
    Message_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ServerMessage.create_session_response)
}
void CCMRemoteClient_ServerMessage::set_allocated_start_pairing_response(::CRemoteClient_StartPairing_Response* start_pairing_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (start_pairing_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_pairing_response);
    if (message_arena != submessage_arena) {
      start_pairing_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pairing_response, submessage_arena);
    }
    set_has_start_pairing_response();
    Message_.start_pairing_response_ = start_pairing_response;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ServerMessage.start_pairing_response)
}
void CCMRemoteClient_ServerMessage::set_allocated_set_pairing_info_response(::CRemoteClient_SetPairingInfo_Response* set_pairing_info_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (set_pairing_info_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_pairing_info_response);
    if (message_arena != submessage_arena) {
      set_pairing_info_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_pairing_info_response, submessage_arena);
    }
    set_has_set_pairing_info_response();
    Message_.set_pairing_info_response_ = set_pairing_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ServerMessage.set_pairing_info_response)
}
void CCMRemoteClient_ServerMessage::set_allocated_cancel_pairing_response(::CRemoteClient_CancelPairing_Response* cancel_pairing_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (cancel_pairing_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_pairing_response);
    if (message_arena != submessage_arena) {
      cancel_pairing_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_pairing_response, submessage_arena);
    }
    set_has_cancel_pairing_response();
    Message_.cancel_pairing_response_ = cancel_pairing_response;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ServerMessage.cancel_pairing_response)
}
void CCMRemoteClient_ServerMessage::set_allocated_reply_packet(::CRemoteClient_GetReplies_Response* reply_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (reply_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_packet);
    if (message_arena != submessage_arena) {
      reply_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_packet, submessage_arena);
    }
    set_has_reply_packet();
    Message_.reply_packet_ = reply_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:CCMRemoteClient_ServerMessage.reply_packet)
}
CCMRemoteClient_ServerMessage::CCMRemoteClient_ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCMRemoteClient_ServerMessage)
}
CCMRemoteClient_ServerMessage::CCMRemoteClient_ServerMessage(const CCMRemoteClient_ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  clear_has_Message();
  switch (from.Message_case()) {
    case kCreateSessionResponse: {
      _internal_mutable_create_session_response()->::CRemoteClient_CreateSession_Response::MergeFrom(from._internal_create_session_response());
      break;
    }
    case kStartPairingResponse: {
      _internal_mutable_start_pairing_response()->::CRemoteClient_StartPairing_Response::MergeFrom(from._internal_start_pairing_response());
      break;
    }
    case kSetPairingInfoResponse: {
      _internal_mutable_set_pairing_info_response()->::CRemoteClient_SetPairingInfo_Response::MergeFrom(from._internal_set_pairing_info_response());
      break;
    }
    case kCancelPairingResponse: {
      _internal_mutable_cancel_pairing_response()->::CRemoteClient_CancelPairing_Response::MergeFrom(from._internal_cancel_pairing_response());
      break;
    }
    case kReplyPacket: {
      _internal_mutable_reply_packet()->::CRemoteClient_GetReplies_Response::MergeFrom(from._internal_reply_packet());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CCMRemoteClient_ServerMessage)
}

void CCMRemoteClient_ServerMessage::SharedCtor() {
result_ = 0;
clear_has_Message();
}

CCMRemoteClient_ServerMessage::~CCMRemoteClient_ServerMessage() {
  // @@protoc_insertion_point(destructor:CCMRemoteClient_ServerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCMRemoteClient_ServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void CCMRemoteClient_ServerMessage::ArenaDtor(void* object) {
  CCMRemoteClient_ServerMessage* _this = reinterpret_cast< CCMRemoteClient_ServerMessage* >(object);
  (void)_this;
}
void CCMRemoteClient_ServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCMRemoteClient_ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCMRemoteClient_ServerMessage::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:CCMRemoteClient_ServerMessage)
  switch (Message_case()) {
    case kCreateSessionResponse: {
      if (GetArena() == nullptr) {
        delete Message_.create_session_response_;
      }
      break;
    }
    case kStartPairingResponse: {
      if (GetArena() == nullptr) {
        delete Message_.start_pairing_response_;
      }
      break;
    }
    case kSetPairingInfoResponse: {
      if (GetArena() == nullptr) {
        delete Message_.set_pairing_info_response_;
      }
      break;
    }
    case kCancelPairingResponse: {
      if (GetArena() == nullptr) {
        delete Message_.cancel_pairing_response_;
      }
      break;
    }
    case kReplyPacket: {
      if (GetArena() == nullptr) {
        delete Message_.reply_packet_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void CCMRemoteClient_ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCMRemoteClient_ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  clear_Message();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCMRemoteClient_ServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_CreateSession_Response create_session_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_session_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_StartPairing_Response start_pairing_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pairing_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_SetPairingInfo_Response set_pairing_info_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_pairing_info_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_CancelPairing_Response cancel_pairing_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_pairing_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CRemoteClient_GetReplies_Response reply_packet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCMRemoteClient_ServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCMRemoteClient_ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  switch (Message_case()) {
    case kCreateSessionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::create_session_response(this), target, stream);
      break;
    }
    case kStartPairingResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::start_pairing_response(this), target, stream);
      break;
    }
    case kSetPairingInfoResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::set_pairing_info_response(this), target, stream);
      break;
    }
    case kCancelPairingResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::cancel_pairing_response(this), target, stream);
      break;
    }
    case kReplyPacket: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::reply_packet(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCMRemoteClient_ServerMessage)
  return target;
}

size_t CCMRemoteClient_ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCMRemoteClient_ServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  switch (Message_case()) {
    // .CRemoteClient_CreateSession_Response create_session_response = 2;
    case kCreateSessionResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.create_session_response_);
      break;
    }
    // .CRemoteClient_StartPairing_Response start_pairing_response = 3;
    case kStartPairingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.start_pairing_response_);
      break;
    }
    // .CRemoteClient_SetPairingInfo_Response set_pairing_info_response = 4;
    case kSetPairingInfoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.set_pairing_info_response_);
      break;
    }
    // .CRemoteClient_CancelPairing_Response cancel_pairing_response = 5;
    case kCancelPairingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.cancel_pairing_response_);
      break;
    }
    // .CRemoteClient_GetReplies_Response reply_packet = 6;
    case kReplyPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.reply_packet_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCMRemoteClient_ServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCMRemoteClient_ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CCMRemoteClient_ServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCMRemoteClient_ServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCMRemoteClient_ServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCMRemoteClient_ServerMessage)
    MergeFrom(*source);
  }
}

void CCMRemoteClient_ServerMessage::MergeFrom(const CCMRemoteClient_ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCMRemoteClient_ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  switch (from.Message_case()) {
    case kCreateSessionResponse: {
      _internal_mutable_create_session_response()->::CRemoteClient_CreateSession_Response::MergeFrom(from._internal_create_session_response());
      break;
    }
    case kStartPairingResponse: {
      _internal_mutable_start_pairing_response()->::CRemoteClient_StartPairing_Response::MergeFrom(from._internal_start_pairing_response());
      break;
    }
    case kSetPairingInfoResponse: {
      _internal_mutable_set_pairing_info_response()->::CRemoteClient_SetPairingInfo_Response::MergeFrom(from._internal_set_pairing_info_response());
      break;
    }
    case kCancelPairingResponse: {
      _internal_mutable_cancel_pairing_response()->::CRemoteClient_CancelPairing_Response::MergeFrom(from._internal_cancel_pairing_response());
      break;
    }
    case kReplyPacket: {
      _internal_mutable_reply_packet()->::CRemoteClient_GetReplies_Response::MergeFrom(from._internal_reply_packet());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void CCMRemoteClient_ServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCMRemoteClient_ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCMRemoteClient_ServerMessage::CopyFrom(const CCMRemoteClient_ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCMRemoteClient_ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCMRemoteClient_ServerMessage::IsInitialized() const {
  return true;
}

void CCMRemoteClient_ServerMessage::InternalSwap(CCMRemoteClient_ServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCMRemoteClient_ServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateSession_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CreateSession_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateSession_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CreateSession_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_DeleteSession_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_DeleteSession_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_DeleteSession_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_StartPairing_Request* Arena::CreateMaybeMessage< ::CRemoteClient_StartPairing_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_StartPairing_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_StartPairing_Response* Arena::CreateMaybeMessage< ::CRemoteClient_StartPairing_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_StartPairing_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SetPairingInfo_Request* Arena::CreateMaybeMessage< ::CRemoteClient_SetPairingInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SetPairingInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SetPairingInfo_Response* Arena::CreateMaybeMessage< ::CRemoteClient_SetPairingInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SetPairingInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetPairingInfo_Request* Arena::CreateMaybeMessage< ::CRemoteClient_GetPairingInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetPairingInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetPairingInfo_Response* Arena::CreateMaybeMessage< ::CRemoteClient_GetPairingInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetPairingInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CancelPairing_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CancelPairing_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CancelPairing_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CancelPairing_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CancelPairing_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CancelPairing_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_RegisterStatusUpdate_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_RegisterStatusUpdate_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_RegisterStatusUpdate_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_UnregisterStatusUpdate_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_UnregisterStatusUpdate_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_UnregisterStatusUpdate_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_Online_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_Online_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_Online_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_RemotePacket_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_RemotePacket_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_RemotePacket_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_ReplyPacket_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_ReplyPacket_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_ReplyPacket_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetReplies_Request* Arena::CreateMaybeMessage< ::CRemoteClient_GetReplies_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetReplies_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetReplies_Response* Arena::CreateMaybeMessage< ::CRemoteClient_GetReplies_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetReplies_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateRelayServer_Request* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateRelayServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateRelayServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateRelayServer_Response* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateRelayServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateRelayServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateSDR_Request* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateSDR_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateSDR_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateSDR_Response* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateSDR_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateSDR_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SteamBroadcast_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_SteamBroadcast_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SteamBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SteamToSteam_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_SteamToSteam_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SteamToSteam_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStarted_Request* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStarted_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStarted_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStarted_Response* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStarted_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStarted_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStopped_Notification* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStopped_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStopped_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_Player* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_ControllerSlot* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_ControllerSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_ControllerSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_GroupUpdated* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_GroupUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_GroupUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCMRemoteClient_ClientMessage* Arena::CreateMaybeMessage< ::CCMRemoteClient_ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCMRemoteClient_ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CCMRemoteClient_ServerMessage* Arena::CreateMaybeMessage< ::CCMRemoteClient_ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCMRemoteClient_ServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
