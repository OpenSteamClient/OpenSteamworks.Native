// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_secrets.steamclient.proto

#include "steammessages_secrets.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CKeyEscrow_Request::CKeyEscrow_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rsa_oaep_sha_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usage_(0)
{}
struct CKeyEscrow_RequestDefaultTypeInternal {
  constexpr CKeyEscrow_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CKeyEscrow_RequestDefaultTypeInternal() {}
  union {
    CKeyEscrow_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CKeyEscrow_RequestDefaultTypeInternal _CKeyEscrow_Request_default_instance_;
constexpr CKeyEscrow_Ticket::CKeyEscrow_Ticket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u)
  , usage_(0)

  , device_provisioning_id_(0u){}
struct CKeyEscrow_TicketDefaultTypeInternal {
  constexpr CKeyEscrow_TicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CKeyEscrow_TicketDefaultTypeInternal() {}
  union {
    CKeyEscrow_Ticket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CKeyEscrow_TicketDefaultTypeInternal _CKeyEscrow_Ticket_default_instance_;
constexpr CKeyEscrow_Response::CKeyEscrow_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(nullptr){}
struct CKeyEscrow_ResponseDefaultTypeInternal {
  constexpr CKeyEscrow_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CKeyEscrow_ResponseDefaultTypeInternal() {}
  union {
    CKeyEscrow_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CKeyEscrow_ResponseDefaultTypeInternal _CKeyEscrow_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fsecrets_2esteamclient_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fsecrets_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fsecrets_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fsecrets_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, rsa_oaep_sha_ticket_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, usage_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Request, device_name_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, password_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, identifier_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, payload_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, usage_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, device_name_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, device_model_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, device_serial_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Ticket, device_provisioning_id_),
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CKeyEscrow_Response, ticket_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CKeyEscrow_Request)},
  { 13, 27, sizeof(::CKeyEscrow_Ticket)},
  { 36, 42, sizeof(::CKeyEscrow_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CKeyEscrow_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CKeyEscrow_Ticket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CKeyEscrow_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fsecrets_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'steammessages_secrets.steamclient.prot"
  "o\032 google/protobuf/descriptor.proto\032\030ste"
  "ammessages_base.proto\032,steammessages_uni"
  "fied_base.steamclient.proto\"\231\001\n\022CKeyEscr"
  "ow_Request\022\033\n\023rsa_oaep_sha_ticket\030\001 \001(\014\022"
  "\020\n\010password\030\002 \001(\014\022\?\n\005usage\030\003 \001(\0162\020.EKeyE"
  "scrowUsage:\036EKeyEscrowUsageStreamingDevi"
  "ce\022\023\n\013device_name\030\004 \001(\t\"\200\002\n\021CKeyEscrow_T"
  "icket\022\020\n\010password\030\001 \001(\014\022\022\n\nidentifier\030\002 "
  "\001(\004\022\017\n\007payload\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\r\022"
  "\?\n\005usage\030\005 \001(\0162\020.EKeyEscrowUsage:\036EKeyEs"
  "crowUsageStreamingDevice\022\023\n\013device_name\030"
  "\006 \001(\t\022\024\n\014device_model\030\007 \001(\t\022\025\n\rdevice_se"
  "rial\030\010 \001(\t\022\036\n\026device_provisioning_id\030\t \001"
  "(\r\"9\n\023CKeyEscrow_Response\022\"\n\006ticket\030\001 \001("
  "\0132\022.CKeyEscrow_Ticket*5\n\017EKeyEscrowUsage"
  "\022\"\n\036EKeyEscrowUsageStreamingDevice\020\0002A\n\007"
  "Secrets\0226\n\tKeyEscrow\022\023.CKeyEscrow_Reques"
  "t\032\024.CKeyEscrow_ResponseB\035\200\001\001\252\002\027OpenSteam"
  "works.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto = {
  false, false, 774, descriptor_table_protodef_steammessages_5fsecrets_2esteamclient_2eproto, "steammessages_secrets.steamclient.proto", 
  &descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto_once, descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_steammessages_5fsecrets_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fsecrets_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fsecrets_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fsecrets_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fsecrets_2esteamclient_2eproto(&descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EKeyEscrowUsage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fsecrets_2esteamclient_2eproto[0];
}
bool EKeyEscrowUsage_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CKeyEscrow_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CKeyEscrow_Request>()._has_bits_);
  static void set_has_rsa_oaep_sha_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CKeyEscrow_Request::CKeyEscrow_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CKeyEscrow_Request)
}
CKeyEscrow_Request::CKeyEscrow_Request(const CKeyEscrow_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rsa_oaep_sha_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rsa_oaep_sha_ticket()) {
    rsa_oaep_sha_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rsa_oaep_sha_ticket(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArena());
  }
  usage_ = from.usage_;
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Request)
}

void CKeyEscrow_Request::SharedCtor() {
rsa_oaep_sha_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
usage_ = 0;
}

CKeyEscrow_Request::~CKeyEscrow_Request() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CKeyEscrow_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rsa_oaep_sha_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Request::ArenaDtor(void* object) {
  CKeyEscrow_Request* _this = reinterpret_cast< CKeyEscrow_Request* >(object);
  (void)_this;
}
void CKeyEscrow_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CKeyEscrow_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CKeyEscrow_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rsa_oaep_sha_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmpty();
    }
  }
  usage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CKeyEscrow_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes rsa_oaep_sha_ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rsa_oaep_sha_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EKeyEscrowUsage usage = 3 [default = EKeyEscrowUsageStreamingDevice];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EKeyEscrowUsage_IsValid(val))) {
            _internal_set_usage(static_cast<::EKeyEscrowUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string device_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CKeyEscrow_Request.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CKeyEscrow_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rsa_oaep_sha_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rsa_oaep_sha_ticket(), target);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional .EKeyEscrowUsage usage = 3 [default = EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_usage(), target);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Request.device_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Request)
  return target;
}

size_t CKeyEscrow_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes rsa_oaep_sha_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rsa_oaep_sha_ticket());
    }

    // optional bytes password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_password());
    }

    // optional string device_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional .EKeyEscrowUsage usage = 3 [default = EKeyEscrowUsageStreamingDevice];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CKeyEscrow_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Request)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Request::MergeFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rsa_oaep_sha_ticket(from._internal_rsa_oaep_sha_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000008u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CKeyEscrow_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Request::CopyFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Request::IsInitialized() const {
  return true;
}

void CKeyEscrow_Request::InternalSwap(CKeyEscrow_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rsa_oaep_sha_ticket_.Swap(&other->rsa_oaep_sha_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(usage_, other->usage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CKeyEscrow_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CKeyEscrow_Ticket::_Internal {
 public:
  using HasBits = decltype(std::declval<CKeyEscrow_Ticket>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_provisioning_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CKeyEscrow_Ticket::CKeyEscrow_Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CKeyEscrow_Ticket)
}
CKeyEscrow_Ticket::CKeyEscrow_Ticket(const CKeyEscrow_Ticket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArena());
  }
  device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_model()) {
    device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_model(), 
      GetArena());
  }
  device_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_serial()) {
    device_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_serial(), 
      GetArena());
  }
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Ticket)
}

void CKeyEscrow_Ticket::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
}

CKeyEscrow_Ticket::~CKeyEscrow_Ticket() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Ticket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CKeyEscrow_Ticket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Ticket::ArenaDtor(void* object) {
  CKeyEscrow_Ticket* _this = reinterpret_cast< CKeyEscrow_Ticket* >(object);
  (void)_this;
}
void CKeyEscrow_Ticket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CKeyEscrow_Ticket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CKeyEscrow_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Ticket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      device_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      device_serial_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(usage_));
  }
  device_provisioning_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CKeyEscrow_Ticket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EKeyEscrowUsage usage = 5 [default = EKeyEscrowUsageStreamingDevice];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EKeyEscrowUsage_IsValid(val))) {
            _internal_set_usage(static_cast<::EKeyEscrowUsage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string device_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CKeyEscrow_Ticket.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_model = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CKeyEscrow_Ticket.device_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_serial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_device_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CKeyEscrow_Ticket.device_serial");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 device_provisioning_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_device_provisioning_id(&has_bits);
          device_provisioning_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CKeyEscrow_Ticket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Ticket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_identifier(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // optional .EKeyEscrowUsage usage = 5 [default = EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_usage(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_name(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_model().data(), static_cast<int>(this->_internal_device_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_model");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_model(), target);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_serial().data(), static_cast<int>(this->_internal_device_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CKeyEscrow_Ticket.device_serial");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_serial(), target);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_device_provisioning_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Ticket)
  return target;
}

size_t CKeyEscrow_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Ticket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_password());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional string device_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional string device_model = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_model());
    }

    // optional string device_serial = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_serial());
    }

    // optional uint64 identifier = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_identifier());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional .EKeyEscrowUsage usage = 5 [default = EKeyEscrowUsageStreamingDevice];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usage());
    }

  }
  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device_provisioning_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Ticket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Ticket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CKeyEscrow_Ticket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Ticket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Ticket)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Ticket::MergeFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_device_model(from._internal_device_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_device_serial(from._internal_device_serial());
    }
    if (cached_has_bits & 0x00000020u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_device_provisioning_id(from._internal_device_provisioning_id());
  }
}

void CKeyEscrow_Ticket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Ticket::CopyFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Ticket::IsInitialized() const {
  return true;
}

void CKeyEscrow_Ticket::InternalSwap(CKeyEscrow_Ticket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_model_.Swap(&other->device_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_serial_.Swap(&other->device_serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CKeyEscrow_Ticket, device_provisioning_id_)
      + sizeof(CKeyEscrow_Ticket::device_provisioning_id_)
      - PROTOBUF_FIELD_OFFSET(CKeyEscrow_Ticket, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CKeyEscrow_Ticket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CKeyEscrow_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CKeyEscrow_Response>()._has_bits_);
  static const ::CKeyEscrow_Ticket& ticket(const CKeyEscrow_Response* msg);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CKeyEscrow_Ticket&
CKeyEscrow_Response::_Internal::ticket(const CKeyEscrow_Response* msg) {
  return *msg->ticket_;
}
CKeyEscrow_Response::CKeyEscrow_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CKeyEscrow_Response)
}
CKeyEscrow_Response::CKeyEscrow_Response(const CKeyEscrow_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    ticket_ = new ::CKeyEscrow_Ticket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CKeyEscrow_Response)
}

void CKeyEscrow_Response::SharedCtor() {
ticket_ = nullptr;
}

CKeyEscrow_Response::~CKeyEscrow_Response() {
  // @@protoc_insertion_point(destructor:CKeyEscrow_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CKeyEscrow_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ticket_;
}

void CKeyEscrow_Response::ArenaDtor(void* object) {
  CKeyEscrow_Response* _this = reinterpret_cast< CKeyEscrow_Response* >(object);
  (void)_this;
}
void CKeyEscrow_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CKeyEscrow_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CKeyEscrow_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CKeyEscrow_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != nullptr);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CKeyEscrow_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CKeyEscrow_Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CKeyEscrow_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CKeyEscrow_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CKeyEscrow_Ticket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CKeyEscrow_Response)
  return target;
}

size_t CKeyEscrow_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CKeyEscrow_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CKeyEscrow_Ticket ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CKeyEscrow_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CKeyEscrow_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CKeyEscrow_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CKeyEscrow_Response)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Response::MergeFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _internal_mutable_ticket()->::CKeyEscrow_Ticket::MergeFrom(from._internal_ticket());
  }
}

void CKeyEscrow_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Response::CopyFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Response::IsInitialized() const {
  return true;
}

void CKeyEscrow_Response::InternalSwap(CKeyEscrow_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CKeyEscrow_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Secrets::~Secrets() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Secrets::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fsecrets_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Secrets::GetDescriptor() {
  return descriptor();
}

void Secrets::KeyEscrow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CKeyEscrow_Request*,
                         ::CKeyEscrow_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KeyEscrow() not implemented.");
  done->Run();
}

void Secrets::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fsecrets_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      KeyEscrow(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CKeyEscrow_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CKeyEscrow_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Secrets::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CKeyEscrow_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Secrets::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CKeyEscrow_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Secrets_Stub::Secrets_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Secrets_Stub::Secrets_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Secrets_Stub::~Secrets_Stub() {
  if (owns_channel_) delete channel_;
}

void Secrets_Stub::KeyEscrow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CKeyEscrow_Request* request,
                              ::CKeyEscrow_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CKeyEscrow_Request* Arena::CreateMaybeMessage< ::CKeyEscrow_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CKeyEscrow_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CKeyEscrow_Ticket* Arena::CreateMaybeMessage< ::CKeyEscrow_Ticket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CKeyEscrow_Ticket >(arena);
}
template<> PROTOBUF_NOINLINE ::CKeyEscrow_Response* Arena::CreateMaybeMessage< ::CKeyEscrow_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CKeyEscrow_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
