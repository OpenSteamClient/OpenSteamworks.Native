// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fsitelicenseclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fsitelicenseclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsitelicenseclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(int index);
class CMsgClientSiteInfo;
struct CMsgClientSiteInfoDefaultTypeInternal;
extern CMsgClientSiteInfoDefaultTypeInternal _CMsgClientSiteInfo_default_instance_;
class CMsgClientSiteLicenseCheckout;
struct CMsgClientSiteLicenseCheckoutDefaultTypeInternal;
extern CMsgClientSiteLicenseCheckoutDefaultTypeInternal _CMsgClientSiteLicenseCheckout_default_instance_;
class CMsgClientSiteLicenseCheckoutResponse;
struct CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeats;
struct CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal;
extern CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsResponse;
struct CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfo;
struct CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal;
extern CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoResponse;
struct CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal;
extern CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientSiteInfo* Arena::CreateMaybeMessage<::CMsgClientSiteInfo>(Arena*);
template<> ::CMsgClientSiteLicenseCheckout* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseCheckout>(Arena*);
template<> ::CMsgClientSiteLicenseCheckoutResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseCheckoutResponse>(Arena*);
template<> ::CMsgClientSiteLicenseGetAvailableSeats* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetAvailableSeats>(Arena*);
template<> ::CMsgClientSiteLicenseGetAvailableSeatsResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetAvailableSeatsResponse>(Arena*);
template<> ::CMsgClientSiteLicenseGetContentCacheInfo* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetContentCacheInfo>(Arena*);
template<> ::CMsgClientSiteLicenseGetContentCacheInfoResponse* Arena::CreateMaybeMessage<::CMsgClientSiteLicenseGetContentCacheInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientSiteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteInfo) */ {
 public:
  inline CMsgClientSiteInfo() : CMsgClientSiteInfo(nullptr) {}
  virtual ~CMsgClientSiteInfo();
  explicit constexpr CMsgClientSiteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteInfo(const CMsgClientSiteInfo& from);
  CMsgClientSiteInfo(CMsgClientSiteInfo&& from) noexcept
    : CMsgClientSiteInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteInfo& operator=(const CMsgClientSiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteInfo& operator=(CMsgClientSiteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteInfo*>(
               &_CMsgClientSiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientSiteInfo& a, CMsgClientSiteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteInfo* New() const final {
    return CreateMaybeMessage<CMsgClientSiteInfo>(nullptr);
  }

  CMsgClientSiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteInfo& from);
  void MergeFrom(const CMsgClientSiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteInfo";
  }
  protected:
  explicit CMsgClientSiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteNameFieldNumber = 2,
    kSiteIdFieldNumber = 1,
    kAllowCachedCredentialsFieldNumber = 3,
  };
  // optional string site_name = 2;
  bool has_site_name() const;
  private:
  bool _internal_has_site_name() const;
  public:
  void clear_site_name();
  const std::string& site_name() const;
  void set_site_name(const std::string& value);
  void set_site_name(std::string&& value);
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  std::string* mutable_site_name();
  std::string* release_site_name();
  void set_allocated_site_name(std::string* site_name);
  private:
  const std::string& _internal_site_name() const;
  void _internal_set_site_name(const std::string& value);
  std::string* _internal_mutable_site_name();
  public:

  // optional uint64 site_id = 1;
  bool has_site_id() const;
  private:
  bool _internal_has_site_id() const;
  public:
  void clear_site_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 site_id() const;
  void set_site_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_site_id() const;
  void _internal_set_site_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool allow_cached_credentials = 3;
  bool has_allow_cached_credentials() const;
  private:
  bool _internal_has_allow_cached_credentials() const;
  public:
  void clear_allow_cached_credentials();
  bool allow_cached_credentials() const;
  void set_allow_cached_credentials(bool value);
  private:
  bool _internal_allow_cached_credentials() const;
  void _internal_set_allow_cached_credentials(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 site_id_;
  bool allow_cached_credentials_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseCheckout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseCheckout) */ {
 public:
  inline CMsgClientSiteLicenseCheckout() : CMsgClientSiteLicenseCheckout(nullptr) {}
  virtual ~CMsgClientSiteLicenseCheckout();
  explicit constexpr CMsgClientSiteLicenseCheckout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from);
  CMsgClientSiteLicenseCheckout(CMsgClientSiteLicenseCheckout&& from) noexcept
    : CMsgClientSiteLicenseCheckout() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseCheckout& operator=(const CMsgClientSiteLicenseCheckout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseCheckout& operator=(CMsgClientSiteLicenseCheckout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseCheckout& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseCheckout* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseCheckout*>(
               &_CMsgClientSiteLicenseCheckout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientSiteLicenseCheckout& a, CMsgClientSiteLicenseCheckout& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseCheckout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseCheckout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseCheckout* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckout>(nullptr);
  }

  CMsgClientSiteLicenseCheckout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseCheckout& from);
  void MergeFrom(const CMsgClientSiteLicenseCheckout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseCheckout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseCheckout";
  }
  protected:
  explicit CMsgClientSiteLicenseCheckout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseCheckout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseCheckoutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseCheckoutResponse) */ {
 public:
  inline CMsgClientSiteLicenseCheckoutResponse() : CMsgClientSiteLicenseCheckoutResponse(nullptr) {}
  virtual ~CMsgClientSiteLicenseCheckoutResponse();
  explicit constexpr CMsgClientSiteLicenseCheckoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from);
  CMsgClientSiteLicenseCheckoutResponse(CMsgClientSiteLicenseCheckoutResponse&& from) noexcept
    : CMsgClientSiteLicenseCheckoutResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseCheckoutResponse& operator=(const CMsgClientSiteLicenseCheckoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseCheckoutResponse& operator=(CMsgClientSiteLicenseCheckoutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseCheckoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseCheckoutResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseCheckoutResponse*>(
               &_CMsgClientSiteLicenseCheckoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientSiteLicenseCheckoutResponse& a, CMsgClientSiteLicenseCheckoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseCheckoutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseCheckoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseCheckoutResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckoutResponse>(nullptr);
  }

  CMsgClientSiteLicenseCheckoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseCheckoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseCheckoutResponse";
  }
  protected:
  explicit CMsgClientSiteLicenseCheckoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseCheckoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetAvailableSeats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetAvailableSeats) */ {
 public:
  inline CMsgClientSiteLicenseGetAvailableSeats() : CMsgClientSiteLicenseGetAvailableSeats(nullptr) {}
  virtual ~CMsgClientSiteLicenseGetAvailableSeats();
  explicit constexpr CMsgClientSiteLicenseGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from);
  CMsgClientSiteLicenseGetAvailableSeats(CMsgClientSiteLicenseGetAvailableSeats&& from) noexcept
    : CMsgClientSiteLicenseGetAvailableSeats() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetAvailableSeats& operator=(const CMsgClientSiteLicenseGetAvailableSeats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseGetAvailableSeats& operator=(CMsgClientSiteLicenseGetAvailableSeats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseGetAvailableSeats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseGetAvailableSeats* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetAvailableSeats*>(
               &_CMsgClientSiteLicenseGetAvailableSeats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientSiteLicenseGetAvailableSeats& a, CMsgClientSiteLicenseGetAvailableSeats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseGetAvailableSeats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseGetAvailableSeats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetAvailableSeats* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeats>(nullptr);
  }

  CMsgClientSiteLicenseGetAvailableSeats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from);
  void MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseGetAvailableSeats";
  }
  protected:
  explicit CMsgClientSiteLicenseGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetAvailableSeats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetAvailableSeatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetAvailableSeatsResponse) */ {
 public:
  inline CMsgClientSiteLicenseGetAvailableSeatsResponse() : CMsgClientSiteLicenseGetAvailableSeatsResponse(nullptr) {}
  virtual ~CMsgClientSiteLicenseGetAvailableSeatsResponse();
  explicit constexpr CMsgClientSiteLicenseGetAvailableSeatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);
  CMsgClientSiteLicenseGetAvailableSeatsResponse(CMsgClientSiteLicenseGetAvailableSeatsResponse&& from) noexcept
    : CMsgClientSiteLicenseGetAvailableSeatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetAvailableSeatsResponse& operator=(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseGetAvailableSeatsResponse& operator=(CMsgClientSiteLicenseGetAvailableSeatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseGetAvailableSeatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseGetAvailableSeatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetAvailableSeatsResponse*>(
               &_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientSiteLicenseGetAvailableSeatsResponse& a, CMsgClientSiteLicenseGetAvailableSeatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetAvailableSeatsResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeatsResponse>(nullptr);
  }

  CMsgClientSiteLicenseGetAvailableSeatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetAvailableSeatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseGetAvailableSeatsResponse";
  }
  protected:
  explicit CMsgClientSiteLicenseGetAvailableSeatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatsFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional uint32 seats = 2;
  bool has_seats() const;
  private:
  bool _internal_has_seats() const;
  public:
  void clear_seats();
  ::PROTOBUF_NAMESPACE_ID::uint32 seats() const;
  void set_seats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seats() const;
  void _internal_set_seats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetAvailableSeatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seats_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetContentCacheInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetContentCacheInfo) */ {
 public:
  inline CMsgClientSiteLicenseGetContentCacheInfo() : CMsgClientSiteLicenseGetContentCacheInfo(nullptr) {}
  virtual ~CMsgClientSiteLicenseGetContentCacheInfo();
  explicit constexpr CMsgClientSiteLicenseGetContentCacheInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from);
  CMsgClientSiteLicenseGetContentCacheInfo(CMsgClientSiteLicenseGetContentCacheInfo&& from) noexcept
    : CMsgClientSiteLicenseGetContentCacheInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetContentCacheInfo& operator=(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseGetContentCacheInfo& operator=(CMsgClientSiteLicenseGetContentCacheInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseGetContentCacheInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseGetContentCacheInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetContentCacheInfo*>(
               &_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientSiteLicenseGetContentCacheInfo& a, CMsgClientSiteLicenseGetContentCacheInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetContentCacheInfo* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfo>(nullptr);
  }

  CMsgClientSiteLicenseGetContentCacheInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from);
  void MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetContentCacheInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseGetContentCacheInfo";
  }
  protected:
  explicit CMsgClientSiteLicenseGetContentCacheInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetContentCacheInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSiteLicenseGetContentCacheInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSiteLicenseGetContentCacheInfoResponse) */ {
 public:
  inline CMsgClientSiteLicenseGetContentCacheInfoResponse() : CMsgClientSiteLicenseGetContentCacheInfoResponse(nullptr) {}
  virtual ~CMsgClientSiteLicenseGetContentCacheInfoResponse();
  explicit constexpr CMsgClientSiteLicenseGetContentCacheInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);
  CMsgClientSiteLicenseGetContentCacheInfoResponse(CMsgClientSiteLicenseGetContentCacheInfoResponse&& from) noexcept
    : CMsgClientSiteLicenseGetContentCacheInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSiteLicenseGetContentCacheInfoResponse& operator=(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSiteLicenseGetContentCacheInfoResponse& operator=(CMsgClientSiteLicenseGetContentCacheInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSiteLicenseGetContentCacheInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSiteLicenseGetContentCacheInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSiteLicenseGetContentCacheInfoResponse*>(
               &_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientSiteLicenseGetContentCacheInfoResponse& a, CMsgClientSiteLicenseGetContentCacheInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSiteLicenseGetContentCacheInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfoResponse>(nullptr);
  }

  CMsgClientSiteLicenseGetContentCacheInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSiteLicenseGetContentCacheInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);
  void MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSiteLicenseGetContentCacheInfoResponse";
  }
  protected:
  explicit CMsgClientSiteLicenseGetContentCacheInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fsitelicenseclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 5,
    kUseCacheFieldNumber = 1,
    kIpv4AddressFieldNumber = 2,
    kPortNumberFieldNumber = 3,
    kP2PGroupFieldNumber = 4,
  };
  // optional string ip_address = 5;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // optional bool use_cache = 1;
  bool has_use_cache() const;
  private:
  bool _internal_has_use_cache() const;
  public:
  void clear_use_cache();
  bool use_cache() const;
  void set_use_cache(bool value);
  private:
  bool _internal_use_cache() const;
  void _internal_set_use_cache(bool value);
  public:

  // optional uint32 ipv4_address = 2;
  bool has_ipv4_address() const;
  private:
  bool _internal_has_ipv4_address() const;
  public:
  void clear_ipv4_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_address() const;
  void set_ipv4_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4_address() const;
  void _internal_set_ipv4_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 port_number = 3;
  bool has_port_number() const;
  private:
  bool _internal_has_port_number() const;
  public:
  void clear_port_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_number() const;
  void set_port_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_number() const;
  void _internal_set_port_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 p2p_group = 4;
  bool has_p2p_group() const;
  private:
  bool _internal_has_p2p_group() const;
  public:
  void clear_p2p_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 p2p_group() const;
  void set_p2p_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p2p_group() const;
  void _internal_set_p2p_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSiteLicenseGetContentCacheInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  bool use_cache_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p2p_group_;
  friend struct ::TableStruct_steammessages_5fsitelicenseclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientSiteInfo

// optional uint64 site_id = 1;
inline bool CMsgClientSiteInfo::_internal_has_site_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSiteInfo::has_site_id() const {
  return _internal_has_site_id();
}
inline void CMsgClientSiteInfo::clear_site_id() {
  site_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSiteInfo::_internal_site_id() const {
  return site_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSiteInfo::site_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteInfo.site_id)
  return _internal_site_id();
}
inline void CMsgClientSiteInfo::_internal_set_site_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  site_id_ = value;
}
inline void CMsgClientSiteInfo::set_site_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteInfo.site_id)
}

// optional string site_name = 2;
inline bool CMsgClientSiteInfo::_internal_has_site_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteInfo::has_site_name() const {
  return _internal_has_site_name();
}
inline void CMsgClientSiteInfo::clear_site_name() {
  site_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientSiteInfo::site_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteInfo.site_name)
  return _internal_site_name();
}
inline void CMsgClientSiteInfo::set_site_name(const std::string& value) {
  _internal_set_site_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteInfo.site_name)
}
inline std::string* CMsgClientSiteInfo::mutable_site_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSiteInfo.site_name)
  return _internal_mutable_site_name();
}
inline const std::string& CMsgClientSiteInfo::_internal_site_name() const {
  return site_name_.Get();
}
inline void CMsgClientSiteInfo::_internal_set_site_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSiteInfo::set_site_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  site_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSiteInfo.site_name)
}
inline void CMsgClientSiteInfo::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSiteInfo.site_name)
}
inline void CMsgClientSiteInfo::set_site_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSiteInfo.site_name)
}
inline std::string* CMsgClientSiteInfo::_internal_mutable_site_name() {
  _has_bits_[0] |= 0x00000001u;
  return site_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSiteInfo::release_site_name() {
  // @@protoc_insertion_point(field_release:CMsgClientSiteInfo.site_name)
  if (!_internal_has_site_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return site_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSiteInfo::set_allocated_site_name(std::string* site_name) {
  if (site_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSiteInfo.site_name)
}

// optional bool allow_cached_credentials = 3;
inline bool CMsgClientSiteInfo::_internal_has_allow_cached_credentials() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSiteInfo::has_allow_cached_credentials() const {
  return _internal_has_allow_cached_credentials();
}
inline void CMsgClientSiteInfo::clear_allow_cached_credentials() {
  allow_cached_credentials_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientSiteInfo::_internal_allow_cached_credentials() const {
  return allow_cached_credentials_;
}
inline bool CMsgClientSiteInfo::allow_cached_credentials() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteInfo.allow_cached_credentials)
  return _internal_allow_cached_credentials();
}
inline void CMsgClientSiteInfo::_internal_set_allow_cached_credentials(bool value) {
  _has_bits_[0] |= 0x00000004u;
  allow_cached_credentials_ = value;
}
inline void CMsgClientSiteInfo::set_allow_cached_credentials(bool value) {
  _internal_set_allow_cached_credentials(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteInfo.allow_cached_credentials)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseCheckout

// optional uint32 appid = 1;
inline bool CMsgClientSiteLicenseCheckout::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseCheckout::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientSiteLicenseCheckout::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseCheckout::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseCheckout::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseCheckout.appid)
  return _internal_appid();
}
inline void CMsgClientSiteLicenseCheckout::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CMsgClientSiteLicenseCheckout::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseCheckout.appid)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseCheckoutResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientSiteLicenseCheckoutResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseCheckoutResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientSiteLicenseCheckoutResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSiteLicenseCheckoutResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSiteLicenseCheckoutResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseCheckoutResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientSiteLicenseCheckoutResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientSiteLicenseCheckoutResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseCheckoutResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetAvailableSeats

// optional uint32 appid = 1;
inline bool CMsgClientSiteLicenseGetAvailableSeats::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetAvailableSeats::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientSiteLicenseGetAvailableSeats::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetAvailableSeats::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetAvailableSeats::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeats.appid)
  return _internal_appid();
}
inline void CMsgClientSiteLicenseGetAvailableSeats::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CMsgClientSiteLicenseGetAvailableSeats::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeats.appid)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetAvailableSeatsResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSiteLicenseGetAvailableSeatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
}

// optional uint32 seats = 2;
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_has_seats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_seats() const {
  return _internal_has_seats();
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_seats() {
  seats_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_seats() const {
  return seats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetAvailableSeatsResponse::seats() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
  return _internal_seats();
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::_internal_set_seats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  seats_ = value;
}
inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_seats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seats(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
}

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetContentCacheInfo

// -------------------------------------------------------------------

// CMsgClientSiteLicenseGetContentCacheInfoResponse

// optional bool use_cache = 1;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_has_use_cache() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_use_cache() const {
  return _internal_has_use_cache();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_use_cache() {
  use_cache_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_use_cache() const {
  return use_cache_;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::use_cache() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
  return _internal_use_cache();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_set_use_cache(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_cache_ = value;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_use_cache(bool value) {
  _internal_set_use_cache(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
}

// optional uint32 ipv4_address = 2;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_has_ipv4_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_ipv4_address() const {
  return _internal_has_ipv4_address();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_ipv4_address() {
  ipv4_address_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_ipv4_address() const {
  return ipv4_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::ipv4_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
  return _internal_ipv4_address();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_set_ipv4_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ipv4_address_ = value;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ipv4_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4_address(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
}

// optional uint32 port_number = 3;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_has_port_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_port_number() const {
  return _internal_has_port_number();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_port_number() {
  port_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_port_number() const {
  return port_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::port_number() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
  return _internal_port_number();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_set_port_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_number_ = value;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_port_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_number(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
}

// optional uint32 p2p_group = 4;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_has_p2p_group() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_p2p_group() const {
  return _internal_has_p2p_group();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_p2p_group() {
  p2p_group_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_p2p_group() const {
  return p2p_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::p2p_group() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
  return _internal_p2p_group();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_set_p2p_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  p2p_group_ = value;
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_p2p_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p2p_group(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
}

// optional string ip_address = 5;
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_ip_address() {
  ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientSiteLicenseGetContentCacheInfoResponse::ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
  return _internal_ip_address();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
}
inline std::string* CMsgClientSiteLicenseGetContentCacheInfoResponse::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_set_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ip_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ip_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
}
inline std::string* CMsgClientSiteLicenseGetContentCacheInfoResponse::_internal_mutable_ip_address() {
  _has_bits_[0] |= 0x00000001u;
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSiteLicenseGetContentCacheInfoResponse::release_ip_address() {
  // @@protoc_insertion_point(field_release:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
  if (!_internal_has_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsitelicenseclient_2eproto
