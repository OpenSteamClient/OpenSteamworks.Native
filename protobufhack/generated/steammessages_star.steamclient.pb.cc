// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_star.steamclient.proto

#include "steammessages_star.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSTAR_KeyValueQuery::CSTAR_KeyValueQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSTAR_KeyValueQueryDefaultTypeInternal {
  constexpr CSTAR_KeyValueQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_KeyValueQueryDefaultTypeInternal() {}
  union {
    CSTAR_KeyValueQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_KeyValueQueryDefaultTypeInternal _CSTAR_KeyValueQuery_default_instance_;
constexpr CSTAR_GlyphQueryParams::CSTAR_GlyphQueryParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : queries_()
  , bundle_id_(PROTOBUF_ULONGLONG(0)){}
struct CSTAR_GlyphQueryParamsDefaultTypeInternal {
  constexpr CSTAR_GlyphQueryParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_GlyphQueryParamsDefaultTypeInternal() {}
  union {
    CSTAR_GlyphQueryParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_GlyphQueryParamsDefaultTypeInternal _CSTAR_GlyphQueryParams_default_instance_;
constexpr CSTAR_ReadGlyphData_Request::CSTAR_ReadGlyphData_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_modified_time_lower_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_params_(nullptr){}
struct CSTAR_ReadGlyphData_RequestDefaultTypeInternal {
  constexpr CSTAR_ReadGlyphData_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_ReadGlyphData_RequestDefaultTypeInternal() {}
  union {
    CSTAR_ReadGlyphData_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_ReadGlyphData_RequestDefaultTypeInternal _CSTAR_ReadGlyphData_Request_default_instance_;
constexpr CSTAR_GlyphData::CSTAR_GlyphData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : glyph_guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , glyph_last_modified_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , glyph_json_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSTAR_GlyphDataDefaultTypeInternal {
  constexpr CSTAR_GlyphDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_GlyphDataDefaultTypeInternal() {}
  union {
    CSTAR_GlyphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_GlyphDataDefaultTypeInternal _CSTAR_GlyphData_default_instance_;
constexpr CSTAR_WriteGlyphData_Request::CSTAR_WriteGlyphData_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : glyph_data_()
  , bundle_id_(PROTOBUF_ULONGLONG(0)){}
struct CSTAR_WriteGlyphData_RequestDefaultTypeInternal {
  constexpr CSTAR_WriteGlyphData_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_WriteGlyphData_RequestDefaultTypeInternal() {}
  union {
    CSTAR_WriteGlyphData_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_WriteGlyphData_RequestDefaultTypeInternal _CSTAR_WriteGlyphData_Request_default_instance_;
constexpr CSTAR_Request::CSTAR_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_glyph_data_(nullptr)
  , write_glyph_data_(nullptr){}
struct CSTAR_RequestDefaultTypeInternal {
  constexpr CSTAR_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_RequestDefaultTypeInternal() {}
  union {
    CSTAR_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_RequestDefaultTypeInternal _CSTAR_Request_default_instance_;
constexpr CSTAR_ReadGlyphData_Response::CSTAR_ReadGlyphData_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : glyph_data_()
  , bundle_id_(PROTOBUF_ULONGLONG(0)){}
struct CSTAR_ReadGlyphData_ResponseDefaultTypeInternal {
  constexpr CSTAR_ReadGlyphData_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_ReadGlyphData_ResponseDefaultTypeInternal() {}
  union {
    CSTAR_ReadGlyphData_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_ReadGlyphData_ResponseDefaultTypeInternal _CSTAR_ReadGlyphData_Response_default_instance_;
constexpr CSTAR_WriteGlyphData_Response::CSTAR_WriteGlyphData_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(){}
struct CSTAR_WriteGlyphData_ResponseDefaultTypeInternal {
  constexpr CSTAR_WriteGlyphData_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_WriteGlyphData_ResponseDefaultTypeInternal() {}
  union {
    CSTAR_WriteGlyphData_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_WriteGlyphData_ResponseDefaultTypeInternal _CSTAR_WriteGlyphData_Response_default_instance_;
constexpr CSTAR_Response::CSTAR_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_glyph_data_(nullptr)
  , write_glyph_data_(nullptr){}
struct CSTAR_ResponseDefaultTypeInternal {
  constexpr CSTAR_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSTAR_ResponseDefaultTypeInternal() {}
  union {
    CSTAR_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSTAR_ResponseDefaultTypeInternal _CSTAR_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fstar_2esteamclient_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fstar_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fstar_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fstar_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSTAR_KeyValueQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_KeyValueQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_KeyValueQuery, key_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_KeyValueQuery, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphQueryParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphQueryParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphQueryParams, bundle_id_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphQueryParams, queries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Request, query_params_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Request, last_modified_time_lower_limit_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphData, glyph_guid_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphData, glyph_last_modified_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_GlyphData, glyph_json_data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Request, bundle_id_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Request, glyph_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSTAR_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_Request, read_glyph_data_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_Request, write_glyph_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Response, bundle_id_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_ReadGlyphData_Response, glyph_data_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_WriteGlyphData_Response, result_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSTAR_Response, read_glyph_data_),
  PROTOBUF_FIELD_OFFSET(::CSTAR_Response, write_glyph_data_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSTAR_KeyValueQuery)},
  { 9, 16, sizeof(::CSTAR_GlyphQueryParams)},
  { 18, 25, sizeof(::CSTAR_ReadGlyphData_Request)},
  { 27, 35, sizeof(::CSTAR_GlyphData)},
  { 38, 45, sizeof(::CSTAR_WriteGlyphData_Request)},
  { 47, 54, sizeof(::CSTAR_Request)},
  { 56, 63, sizeof(::CSTAR_ReadGlyphData_Response)},
  { 65, -1, sizeof(::CSTAR_WriteGlyphData_Response)},
  { 71, 78, sizeof(::CSTAR_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_KeyValueQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_GlyphQueryParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_ReadGlyphData_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_GlyphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_WriteGlyphData_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_ReadGlyphData_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_WriteGlyphData_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSTAR_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fstar_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_star.steamclient.proto\032 "
  "google/protobuf/descriptor.proto\032\030steamm"
  "essages_base.proto\032,steammessages_unifie"
  "d_base.steamclient.proto\"1\n\023CSTAR_KeyVal"
  "ueQuery\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"R\n\026C"
  "STAR_GlyphQueryParams\022\021\n\tbundle_id\030\001 \001(\004"
  "\022%\n\007queries\030\002 \003(\0132\024.CSTAR_KeyValueQuery\""
  "t\n\033CSTAR_ReadGlyphData_Request\022-\n\014query_"
  "params\030\001 \001(\0132\027.CSTAR_GlyphQueryParams\022&\n"
  "\036last_modified_time_lower_limit\030\002 \001(\t\"[\n"
  "\017CSTAR_GlyphData\022\022\n\nglyph_guid\030\001 \001(\014\022\033\n\023"
  "glyph_last_modified\030\002 \001(\t\022\027\n\017glyph_json_"
  "data\030\003 \001(\t\"W\n\034CSTAR_WriteGlyphData_Reque"
  "st\022\021\n\tbundle_id\030\001 \001(\004\022$\n\nglyph_data\030\002 \003("
  "\0132\020.CSTAR_GlyphData\"\177\n\rCSTAR_Request\0225\n\017"
  "read_glyph_data\030\001 \001(\0132\034.CSTAR_ReadGlyphD"
  "ata_Request\0227\n\020write_glyph_data\030\002 \001(\0132\035."
  "CSTAR_WriteGlyphData_Request\"W\n\034CSTAR_Re"
  "adGlyphData_Response\022\021\n\tbundle_id\030\001 \001(\004\022"
  "$\n\nglyph_data\030\002 \003(\0132\020.CSTAR_GlyphData\"I\n"
  "\035CSTAR_WriteGlyphData_Response\022(\n\006result"
  "\030\001 \003(\0162\030.E_STAR_GlyphWriteResult\"\202\001\n\016CST"
  "AR_Response\0226\n\017read_glyph_data\030\001 \001(\0132\035.C"
  "STAR_ReadGlyphData_Response\0228\n\020write_gly"
  "ph_data\030\002 \001(\0132\036.CSTAR_WriteGlyphData_Res"
  "ponse*\271\001\n\027E_STAR_GlyphWriteResult\022#\n\037E_S"
  "TAR_GlyphWriteResult_Success\020\000\022*\n&E_STAR"
  "_GlyphWriteResult_InvalidMessage\020\001\022\'\n#E_"
  "STAR_GlyphWriteResult_InvalidJSON\020\002\022$\n E"
  "_STAR_GlyphWriteResult_SQLError\020\00329\n\004STA"
  "R\0221\n\016ProcessMessage\022\016.CSTAR_Request\032\017.CS"
  "TAR_ResponseB\035\200\001\001\252\002\027OpenSteamworks.Proto"
  "buf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fstar_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fstar_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fstar_2esteamclient_2eproto = {
  false, false, 1283, descriptor_table_protodef_steammessages_5fstar_2esteamclient_2eproto, "steammessages_star.steamclient.proto", 
  &descriptor_table_steammessages_5fstar_2esteamclient_2eproto_once, descriptor_table_steammessages_5fstar_2esteamclient_2eproto_deps, 3, 9,
  schemas, file_default_instances, TableStruct_steammessages_5fstar_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fstar_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fstar_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fstar_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fstar_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstar_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fstar_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fstar_2esteamclient_2eproto(&descriptor_table_steammessages_5fstar_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_STAR_GlyphWriteResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstar_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstar_2esteamclient_2eproto[0];
}
bool E_STAR_GlyphWriteResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSTAR_KeyValueQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_KeyValueQuery>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSTAR_KeyValueQuery::CSTAR_KeyValueQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_KeyValueQuery)
}
CSTAR_KeyValueQuery::CSTAR_KeyValueQuery(const CSTAR_KeyValueQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSTAR_KeyValueQuery)
}

void CSTAR_KeyValueQuery::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSTAR_KeyValueQuery::~CSTAR_KeyValueQuery() {
  // @@protoc_insertion_point(destructor:CSTAR_KeyValueQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_KeyValueQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSTAR_KeyValueQuery::ArenaDtor(void* object) {
  CSTAR_KeyValueQuery* _this = reinterpret_cast< CSTAR_KeyValueQuery* >(object);
  (void)_this;
}
void CSTAR_KeyValueQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_KeyValueQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_KeyValueQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_KeyValueQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_KeyValueQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSTAR_KeyValueQuery.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSTAR_KeyValueQuery.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_KeyValueQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_KeyValueQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSTAR_KeyValueQuery.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSTAR_KeyValueQuery.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_KeyValueQuery)
  return target;
}

size_t CSTAR_KeyValueQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_KeyValueQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_KeyValueQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_KeyValueQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_KeyValueQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_KeyValueQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_KeyValueQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_KeyValueQuery)
    MergeFrom(*source);
  }
}

void CSTAR_KeyValueQuery::MergeFrom(const CSTAR_KeyValueQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_KeyValueQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CSTAR_KeyValueQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_KeyValueQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_KeyValueQuery::CopyFrom(const CSTAR_KeyValueQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_KeyValueQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_KeyValueQuery::IsInitialized() const {
  return true;
}

void CSTAR_KeyValueQuery::InternalSwap(CSTAR_KeyValueQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_KeyValueQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_GlyphQueryParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_GlyphQueryParams>()._has_bits_);
  static void set_has_bundle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSTAR_GlyphQueryParams::CSTAR_GlyphQueryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  queries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_GlyphQueryParams)
}
CSTAR_GlyphQueryParams::CSTAR_GlyphQueryParams(const CSTAR_GlyphQueryParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bundle_id_ = from.bundle_id_;
  // @@protoc_insertion_point(copy_constructor:CSTAR_GlyphQueryParams)
}

void CSTAR_GlyphQueryParams::SharedCtor() {
bundle_id_ = PROTOBUF_ULONGLONG(0);
}

CSTAR_GlyphQueryParams::~CSTAR_GlyphQueryParams() {
  // @@protoc_insertion_point(destructor:CSTAR_GlyphQueryParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_GlyphQueryParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTAR_GlyphQueryParams::ArenaDtor(void* object) {
  CSTAR_GlyphQueryParams* _this = reinterpret_cast< CSTAR_GlyphQueryParams* >(object);
  (void)_this;
}
void CSTAR_GlyphQueryParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_GlyphQueryParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_GlyphQueryParams::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_GlyphQueryParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  bundle_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_GlyphQueryParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bundle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bundle_id(&has_bits);
          bundle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSTAR_KeyValueQuery queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_GlyphQueryParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_GlyphQueryParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bundle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bundle_id(), target);
  }

  // repeated .CSTAR_KeyValueQuery queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_queries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_GlyphQueryParams)
  return target;
}

size_t CSTAR_GlyphQueryParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_GlyphQueryParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSTAR_KeyValueQuery queries = 2;
  total_size += 1UL * this->_internal_queries_size();
  for (const auto& msg : this->queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 bundle_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bundle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_GlyphQueryParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_GlyphQueryParams)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_GlyphQueryParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_GlyphQueryParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_GlyphQueryParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_GlyphQueryParams)
    MergeFrom(*source);
  }
}

void CSTAR_GlyphQueryParams::MergeFrom(const CSTAR_GlyphQueryParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_GlyphQueryParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  if (from._internal_has_bundle_id()) {
    _internal_set_bundle_id(from._internal_bundle_id());
  }
}

void CSTAR_GlyphQueryParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_GlyphQueryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_GlyphQueryParams::CopyFrom(const CSTAR_GlyphQueryParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_GlyphQueryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_GlyphQueryParams::IsInitialized() const {
  return true;
}

void CSTAR_GlyphQueryParams::InternalSwap(CSTAR_GlyphQueryParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  queries_.InternalSwap(&other->queries_);
  swap(bundle_id_, other->bundle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_GlyphQueryParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_ReadGlyphData_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_ReadGlyphData_Request>()._has_bits_);
  static const ::CSTAR_GlyphQueryParams& query_params(const CSTAR_ReadGlyphData_Request* msg);
  static void set_has_query_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_modified_time_lower_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSTAR_GlyphQueryParams&
CSTAR_ReadGlyphData_Request::_Internal::query_params(const CSTAR_ReadGlyphData_Request* msg) {
  return *msg->query_params_;
}
CSTAR_ReadGlyphData_Request::CSTAR_ReadGlyphData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_ReadGlyphData_Request)
}
CSTAR_ReadGlyphData_Request::CSTAR_ReadGlyphData_Request(const CSTAR_ReadGlyphData_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_modified_time_lower_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_modified_time_lower_limit()) {
    last_modified_time_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_modified_time_lower_limit(), 
      GetArena());
  }
  if (from._internal_has_query_params()) {
    query_params_ = new ::CSTAR_GlyphQueryParams(*from.query_params_);
  } else {
    query_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSTAR_ReadGlyphData_Request)
}

void CSTAR_ReadGlyphData_Request::SharedCtor() {
last_modified_time_lower_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_params_ = nullptr;
}

CSTAR_ReadGlyphData_Request::~CSTAR_ReadGlyphData_Request() {
  // @@protoc_insertion_point(destructor:CSTAR_ReadGlyphData_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_ReadGlyphData_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_modified_time_lower_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_params_;
}

void CSTAR_ReadGlyphData_Request::ArenaDtor(void* object) {
  CSTAR_ReadGlyphData_Request* _this = reinterpret_cast< CSTAR_ReadGlyphData_Request* >(object);
  (void)_this;
}
void CSTAR_ReadGlyphData_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_ReadGlyphData_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_ReadGlyphData_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_ReadGlyphData_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_modified_time_lower_limit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(query_params_ != nullptr);
      query_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_ReadGlyphData_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CSTAR_GlyphQueryParams query_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_modified_time_lower_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_modified_time_lower_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_ReadGlyphData_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_ReadGlyphData_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSTAR_GlyphQueryParams query_params = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query_params(this), target, stream);
  }

  // optional string last_modified_time_lower_limit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_modified_time_lower_limit().data(), static_cast<int>(this->_internal_last_modified_time_lower_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_modified_time_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_ReadGlyphData_Request)
  return target;
}

size_t CSTAR_ReadGlyphData_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_ReadGlyphData_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string last_modified_time_lower_limit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_modified_time_lower_limit());
    }

    // optional .CSTAR_GlyphQueryParams query_params = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_params_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_ReadGlyphData_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_ReadGlyphData_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_ReadGlyphData_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_ReadGlyphData_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_ReadGlyphData_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_ReadGlyphData_Request)
    MergeFrom(*source);
  }
}

void CSTAR_ReadGlyphData_Request::MergeFrom(const CSTAR_ReadGlyphData_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_ReadGlyphData_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_modified_time_lower_limit(from._internal_last_modified_time_lower_limit());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_query_params()->::CSTAR_GlyphQueryParams::MergeFrom(from._internal_query_params());
    }
  }
}

void CSTAR_ReadGlyphData_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_ReadGlyphData_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_ReadGlyphData_Request::CopyFrom(const CSTAR_ReadGlyphData_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_ReadGlyphData_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_ReadGlyphData_Request::IsInitialized() const {
  return true;
}

void CSTAR_ReadGlyphData_Request::InternalSwap(CSTAR_ReadGlyphData_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_modified_time_lower_limit_.Swap(&other->last_modified_time_lower_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(query_params_, other->query_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_ReadGlyphData_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_GlyphData::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_GlyphData>()._has_bits_);
  static void set_has_glyph_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_glyph_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_glyph_json_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSTAR_GlyphData::CSTAR_GlyphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_GlyphData)
}
CSTAR_GlyphData::CSTAR_GlyphData(const CSTAR_GlyphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  glyph_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_glyph_guid()) {
    glyph_guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_glyph_guid(), 
      GetArena());
  }
  glyph_last_modified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_glyph_last_modified()) {
    glyph_last_modified_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_glyph_last_modified(), 
      GetArena());
  }
  glyph_json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_glyph_json_data()) {
    glyph_json_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_glyph_json_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSTAR_GlyphData)
}

void CSTAR_GlyphData::SharedCtor() {
glyph_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
glyph_last_modified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
glyph_json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSTAR_GlyphData::~CSTAR_GlyphData() {
  // @@protoc_insertion_point(destructor:CSTAR_GlyphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_GlyphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  glyph_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  glyph_last_modified_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  glyph_json_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSTAR_GlyphData::ArenaDtor(void* object) {
  CSTAR_GlyphData* _this = reinterpret_cast< CSTAR_GlyphData* >(object);
  (void)_this;
}
void CSTAR_GlyphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_GlyphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_GlyphData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_GlyphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      glyph_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      glyph_last_modified_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      glyph_json_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_GlyphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes glyph_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_glyph_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string glyph_last_modified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_glyph_last_modified();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSTAR_GlyphData.glyph_last_modified");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string glyph_json_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_glyph_json_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSTAR_GlyphData.glyph_json_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_GlyphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_GlyphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes glyph_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_glyph_guid(), target);
  }

  // optional string glyph_last_modified = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_glyph_last_modified().data(), static_cast<int>(this->_internal_glyph_last_modified().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSTAR_GlyphData.glyph_last_modified");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_glyph_last_modified(), target);
  }

  // optional string glyph_json_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_glyph_json_data().data(), static_cast<int>(this->_internal_glyph_json_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSTAR_GlyphData.glyph_json_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_glyph_json_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_GlyphData)
  return target;
}

size_t CSTAR_GlyphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_GlyphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes glyph_guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_glyph_guid());
    }

    // optional string glyph_last_modified = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_glyph_last_modified());
    }

    // optional string glyph_json_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_glyph_json_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_GlyphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_GlyphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_GlyphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_GlyphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_GlyphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_GlyphData)
    MergeFrom(*source);
  }
}

void CSTAR_GlyphData::MergeFrom(const CSTAR_GlyphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_GlyphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_glyph_guid(from._internal_glyph_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_glyph_last_modified(from._internal_glyph_last_modified());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_glyph_json_data(from._internal_glyph_json_data());
    }
  }
}

void CSTAR_GlyphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_GlyphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_GlyphData::CopyFrom(const CSTAR_GlyphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_GlyphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_GlyphData::IsInitialized() const {
  return true;
}

void CSTAR_GlyphData::InternalSwap(CSTAR_GlyphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  glyph_guid_.Swap(&other->glyph_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  glyph_last_modified_.Swap(&other->glyph_last_modified_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  glyph_json_data_.Swap(&other->glyph_json_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_GlyphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_WriteGlyphData_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_WriteGlyphData_Request>()._has_bits_);
  static void set_has_bundle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSTAR_WriteGlyphData_Request::CSTAR_WriteGlyphData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  glyph_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_WriteGlyphData_Request)
}
CSTAR_WriteGlyphData_Request::CSTAR_WriteGlyphData_Request(const CSTAR_WriteGlyphData_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      glyph_data_(from.glyph_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bundle_id_ = from.bundle_id_;
  // @@protoc_insertion_point(copy_constructor:CSTAR_WriteGlyphData_Request)
}

void CSTAR_WriteGlyphData_Request::SharedCtor() {
bundle_id_ = PROTOBUF_ULONGLONG(0);
}

CSTAR_WriteGlyphData_Request::~CSTAR_WriteGlyphData_Request() {
  // @@protoc_insertion_point(destructor:CSTAR_WriteGlyphData_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_WriteGlyphData_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTAR_WriteGlyphData_Request::ArenaDtor(void* object) {
  CSTAR_WriteGlyphData_Request* _this = reinterpret_cast< CSTAR_WriteGlyphData_Request* >(object);
  (void)_this;
}
void CSTAR_WriteGlyphData_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_WriteGlyphData_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_WriteGlyphData_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_WriteGlyphData_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glyph_data_.Clear();
  bundle_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_WriteGlyphData_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bundle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bundle_id(&has_bits);
          bundle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSTAR_GlyphData glyph_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_glyph_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_WriteGlyphData_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_WriteGlyphData_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bundle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bundle_id(), target);
  }

  // repeated .CSTAR_GlyphData glyph_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_glyph_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_glyph_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_WriteGlyphData_Request)
  return target;
}

size_t CSTAR_WriteGlyphData_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_WriteGlyphData_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSTAR_GlyphData glyph_data = 2;
  total_size += 1UL * this->_internal_glyph_data_size();
  for (const auto& msg : this->glyph_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 bundle_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bundle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_WriteGlyphData_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_WriteGlyphData_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_WriteGlyphData_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_WriteGlyphData_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_WriteGlyphData_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_WriteGlyphData_Request)
    MergeFrom(*source);
  }
}

void CSTAR_WriteGlyphData_Request::MergeFrom(const CSTAR_WriteGlyphData_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_WriteGlyphData_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glyph_data_.MergeFrom(from.glyph_data_);
  if (from._internal_has_bundle_id()) {
    _internal_set_bundle_id(from._internal_bundle_id());
  }
}

void CSTAR_WriteGlyphData_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_WriteGlyphData_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_WriteGlyphData_Request::CopyFrom(const CSTAR_WriteGlyphData_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_WriteGlyphData_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_WriteGlyphData_Request::IsInitialized() const {
  return true;
}

void CSTAR_WriteGlyphData_Request::InternalSwap(CSTAR_WriteGlyphData_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  glyph_data_.InternalSwap(&other->glyph_data_);
  swap(bundle_id_, other->bundle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_WriteGlyphData_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_Request>()._has_bits_);
  static const ::CSTAR_ReadGlyphData_Request& read_glyph_data(const CSTAR_Request* msg);
  static void set_has_read_glyph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSTAR_WriteGlyphData_Request& write_glyph_data(const CSTAR_Request* msg);
  static void set_has_write_glyph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CSTAR_ReadGlyphData_Request&
CSTAR_Request::_Internal::read_glyph_data(const CSTAR_Request* msg) {
  return *msg->read_glyph_data_;
}
const ::CSTAR_WriteGlyphData_Request&
CSTAR_Request::_Internal::write_glyph_data(const CSTAR_Request* msg) {
  return *msg->write_glyph_data_;
}
CSTAR_Request::CSTAR_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_Request)
}
CSTAR_Request::CSTAR_Request(const CSTAR_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_read_glyph_data()) {
    read_glyph_data_ = new ::CSTAR_ReadGlyphData_Request(*from.read_glyph_data_);
  } else {
    read_glyph_data_ = nullptr;
  }
  if (from._internal_has_write_glyph_data()) {
    write_glyph_data_ = new ::CSTAR_WriteGlyphData_Request(*from.write_glyph_data_);
  } else {
    write_glyph_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSTAR_Request)
}

void CSTAR_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_glyph_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_glyph_data_) -
    reinterpret_cast<char*>(&read_glyph_data_)) + sizeof(write_glyph_data_));
}

CSTAR_Request::~CSTAR_Request() {
  // @@protoc_insertion_point(destructor:CSTAR_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete read_glyph_data_;
  if (this != internal_default_instance()) delete write_glyph_data_;
}

void CSTAR_Request::ArenaDtor(void* object) {
  CSTAR_Request* _this = reinterpret_cast< CSTAR_Request* >(object);
  (void)_this;
}
void CSTAR_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(read_glyph_data_ != nullptr);
      read_glyph_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(write_glyph_data_ != nullptr);
      write_glyph_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_glyph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_glyph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::read_glyph_data(this), target, stream);
  }

  // optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::write_glyph_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_Request)
  return target;
}

size_t CSTAR_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_glyph_data_);
    }

    // optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_glyph_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_Request)
    MergeFrom(*source);
  }
}

void CSTAR_Request::MergeFrom(const CSTAR_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_read_glyph_data()->::CSTAR_ReadGlyphData_Request::MergeFrom(from._internal_read_glyph_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_write_glyph_data()->::CSTAR_WriteGlyphData_Request::MergeFrom(from._internal_write_glyph_data());
    }
  }
}

void CSTAR_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_Request::CopyFrom(const CSTAR_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_Request::IsInitialized() const {
  return true;
}

void CSTAR_Request::InternalSwap(CSTAR_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSTAR_Request, write_glyph_data_)
      + sizeof(CSTAR_Request::write_glyph_data_)
      - PROTOBUF_FIELD_OFFSET(CSTAR_Request, read_glyph_data_)>(
          reinterpret_cast<char*>(&read_glyph_data_),
          reinterpret_cast<char*>(&other->read_glyph_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_ReadGlyphData_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_ReadGlyphData_Response>()._has_bits_);
  static void set_has_bundle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSTAR_ReadGlyphData_Response::CSTAR_ReadGlyphData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  glyph_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_ReadGlyphData_Response)
}
CSTAR_ReadGlyphData_Response::CSTAR_ReadGlyphData_Response(const CSTAR_ReadGlyphData_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      glyph_data_(from.glyph_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bundle_id_ = from.bundle_id_;
  // @@protoc_insertion_point(copy_constructor:CSTAR_ReadGlyphData_Response)
}

void CSTAR_ReadGlyphData_Response::SharedCtor() {
bundle_id_ = PROTOBUF_ULONGLONG(0);
}

CSTAR_ReadGlyphData_Response::~CSTAR_ReadGlyphData_Response() {
  // @@protoc_insertion_point(destructor:CSTAR_ReadGlyphData_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_ReadGlyphData_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTAR_ReadGlyphData_Response::ArenaDtor(void* object) {
  CSTAR_ReadGlyphData_Response* _this = reinterpret_cast< CSTAR_ReadGlyphData_Response* >(object);
  (void)_this;
}
void CSTAR_ReadGlyphData_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_ReadGlyphData_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_ReadGlyphData_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_ReadGlyphData_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glyph_data_.Clear();
  bundle_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_ReadGlyphData_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bundle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bundle_id(&has_bits);
          bundle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSTAR_GlyphData glyph_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_glyph_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_ReadGlyphData_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_ReadGlyphData_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bundle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bundle_id(), target);
  }

  // repeated .CSTAR_GlyphData glyph_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_glyph_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_glyph_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_ReadGlyphData_Response)
  return target;
}

size_t CSTAR_ReadGlyphData_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_ReadGlyphData_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSTAR_GlyphData glyph_data = 2;
  total_size += 1UL * this->_internal_glyph_data_size();
  for (const auto& msg : this->glyph_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 bundle_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bundle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_ReadGlyphData_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_ReadGlyphData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_ReadGlyphData_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_ReadGlyphData_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_ReadGlyphData_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_ReadGlyphData_Response)
    MergeFrom(*source);
  }
}

void CSTAR_ReadGlyphData_Response::MergeFrom(const CSTAR_ReadGlyphData_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_ReadGlyphData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glyph_data_.MergeFrom(from.glyph_data_);
  if (from._internal_has_bundle_id()) {
    _internal_set_bundle_id(from._internal_bundle_id());
  }
}

void CSTAR_ReadGlyphData_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_ReadGlyphData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_ReadGlyphData_Response::CopyFrom(const CSTAR_ReadGlyphData_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_ReadGlyphData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_ReadGlyphData_Response::IsInitialized() const {
  return true;
}

void CSTAR_ReadGlyphData_Response::InternalSwap(CSTAR_ReadGlyphData_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  glyph_data_.InternalSwap(&other->glyph_data_);
  swap(bundle_id_, other->bundle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_ReadGlyphData_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_WriteGlyphData_Response::_Internal {
 public:
};

CSTAR_WriteGlyphData_Response::CSTAR_WriteGlyphData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_WriteGlyphData_Response)
}
CSTAR_WriteGlyphData_Response::CSTAR_WriteGlyphData_Response(const CSTAR_WriteGlyphData_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSTAR_WriteGlyphData_Response)
}

void CSTAR_WriteGlyphData_Response::SharedCtor() {
}

CSTAR_WriteGlyphData_Response::~CSTAR_WriteGlyphData_Response() {
  // @@protoc_insertion_point(destructor:CSTAR_WriteGlyphData_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_WriteGlyphData_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTAR_WriteGlyphData_Response::ArenaDtor(void* object) {
  CSTAR_WriteGlyphData_Response* _this = reinterpret_cast< CSTAR_WriteGlyphData_Response* >(object);
  (void)_this;
}
void CSTAR_WriteGlyphData_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_WriteGlyphData_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_WriteGlyphData_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_WriteGlyphData_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_WriteGlyphData_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .E_STAR_GlyphWriteResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::E_STAR_GlyphWriteResult_IsValid(val))) {
              _internal_add_result(static_cast<::E_STAR_GlyphWriteResult>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_result(), ptr, ctx, ::E_STAR_GlyphWriteResult_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_WriteGlyphData_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_WriteGlyphData_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .E_STAR_GlyphWriteResult result = 1;
  for (int i = 0, n = this->_internal_result_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_WriteGlyphData_Response)
  return target;
}

size_t CSTAR_WriteGlyphData_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_WriteGlyphData_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .E_STAR_GlyphWriteResult result = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_result_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_result(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_WriteGlyphData_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_WriteGlyphData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_WriteGlyphData_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_WriteGlyphData_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_WriteGlyphData_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_WriteGlyphData_Response)
    MergeFrom(*source);
  }
}

void CSTAR_WriteGlyphData_Response::MergeFrom(const CSTAR_WriteGlyphData_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_WriteGlyphData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void CSTAR_WriteGlyphData_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_WriteGlyphData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_WriteGlyphData_Response::CopyFrom(const CSTAR_WriteGlyphData_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_WriteGlyphData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_WriteGlyphData_Response::IsInitialized() const {
  return true;
}

void CSTAR_WriteGlyphData_Response::InternalSwap(CSTAR_WriteGlyphData_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_WriteGlyphData_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTAR_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSTAR_Response>()._has_bits_);
  static const ::CSTAR_ReadGlyphData_Response& read_glyph_data(const CSTAR_Response* msg);
  static void set_has_read_glyph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSTAR_WriteGlyphData_Response& write_glyph_data(const CSTAR_Response* msg);
  static void set_has_write_glyph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CSTAR_ReadGlyphData_Response&
CSTAR_Response::_Internal::read_glyph_data(const CSTAR_Response* msg) {
  return *msg->read_glyph_data_;
}
const ::CSTAR_WriteGlyphData_Response&
CSTAR_Response::_Internal::write_glyph_data(const CSTAR_Response* msg) {
  return *msg->write_glyph_data_;
}
CSTAR_Response::CSTAR_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSTAR_Response)
}
CSTAR_Response::CSTAR_Response(const CSTAR_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_read_glyph_data()) {
    read_glyph_data_ = new ::CSTAR_ReadGlyphData_Response(*from.read_glyph_data_);
  } else {
    read_glyph_data_ = nullptr;
  }
  if (from._internal_has_write_glyph_data()) {
    write_glyph_data_ = new ::CSTAR_WriteGlyphData_Response(*from.write_glyph_data_);
  } else {
    write_glyph_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSTAR_Response)
}

void CSTAR_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_glyph_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_glyph_data_) -
    reinterpret_cast<char*>(&read_glyph_data_)) + sizeof(write_glyph_data_));
}

CSTAR_Response::~CSTAR_Response() {
  // @@protoc_insertion_point(destructor:CSTAR_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTAR_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete read_glyph_data_;
  if (this != internal_default_instance()) delete write_glyph_data_;
}

void CSTAR_Response::ArenaDtor(void* object) {
  CSTAR_Response* _this = reinterpret_cast< CSTAR_Response* >(object);
  (void)_this;
}
void CSTAR_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTAR_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSTAR_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTAR_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(read_glyph_data_ != nullptr);
      read_glyph_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(write_glyph_data_ != nullptr);
      write_glyph_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTAR_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_glyph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_glyph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTAR_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSTAR_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::read_glyph_data(this), target, stream);
  }

  // optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::write_glyph_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTAR_Response)
  return target;
}

size_t CSTAR_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTAR_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_glyph_data_);
    }

    // optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_glyph_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTAR_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTAR_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTAR_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTAR_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTAR_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTAR_Response)
    MergeFrom(*source);
  }
}

void CSTAR_Response::MergeFrom(const CSTAR_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTAR_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_read_glyph_data()->::CSTAR_ReadGlyphData_Response::MergeFrom(from._internal_read_glyph_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_write_glyph_data()->::CSTAR_WriteGlyphData_Response::MergeFrom(from._internal_write_glyph_data());
    }
  }
}

void CSTAR_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTAR_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTAR_Response::CopyFrom(const CSTAR_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTAR_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTAR_Response::IsInitialized() const {
  return true;
}

void CSTAR_Response::InternalSwap(CSTAR_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSTAR_Response, write_glyph_data_)
      + sizeof(CSTAR_Response::write_glyph_data_)
      - PROTOBUF_FIELD_OFFSET(CSTAR_Response, read_glyph_data_)>(
          reinterpret_cast<char*>(&read_glyph_data_),
          reinterpret_cast<char*>(&other->read_glyph_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTAR_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

STAR::~STAR() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* STAR::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstar_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fstar_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* STAR::GetDescriptor() {
  return descriptor();
}

void STAR::ProcessMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSTAR_Request*,
                         ::CSTAR_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ProcessMessage() not implemented.");
  done->Run();
}

void STAR::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fstar_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      ProcessMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSTAR_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSTAR_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& STAR::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSTAR_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& STAR::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSTAR_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

STAR_Stub::STAR_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
STAR_Stub::STAR_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
STAR_Stub::~STAR_Stub() {
  if (owns_channel_) delete channel_;
}

void STAR_Stub::ProcessMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSTAR_Request* request,
                              ::CSTAR_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSTAR_KeyValueQuery* Arena::CreateMaybeMessage< ::CSTAR_KeyValueQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_KeyValueQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_GlyphQueryParams* Arena::CreateMaybeMessage< ::CSTAR_GlyphQueryParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_GlyphQueryParams >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_ReadGlyphData_Request* Arena::CreateMaybeMessage< ::CSTAR_ReadGlyphData_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_ReadGlyphData_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_GlyphData* Arena::CreateMaybeMessage< ::CSTAR_GlyphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_GlyphData >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_WriteGlyphData_Request* Arena::CreateMaybeMessage< ::CSTAR_WriteGlyphData_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_WriteGlyphData_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_Request* Arena::CreateMaybeMessage< ::CSTAR_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_ReadGlyphData_Response* Arena::CreateMaybeMessage< ::CSTAR_ReadGlyphData_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_ReadGlyphData_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_WriteGlyphData_Response* Arena::CreateMaybeMessage< ::CSTAR_WriteGlyphData_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_WriteGlyphData_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSTAR_Response* Arena::CreateMaybeMessage< ::CSTAR_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSTAR_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
