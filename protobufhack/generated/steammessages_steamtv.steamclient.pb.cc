// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_steamtv.steamclient.proto

#include "steammessages_steamtv.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSteamTV_CreateBroadcastChannel_Request::CSteamTV_CreateBroadcastChannel_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_CreateBroadcastChannel_RequestDefaultTypeInternal {
  constexpr CSteamTV_CreateBroadcastChannel_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_CreateBroadcastChannel_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_CreateBroadcastChannel_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_CreateBroadcastChannel_RequestDefaultTypeInternal _CSteamTV_CreateBroadcastChannel_Request_default_instance_;
constexpr CSteamTV_CreateBroadcastChannel_Response::CSteamTV_CreateBroadcastChannel_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_CreateBroadcastChannel_ResponseDefaultTypeInternal {
  constexpr CSteamTV_CreateBroadcastChannel_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_CreateBroadcastChannel_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_CreateBroadcastChannel_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_CreateBroadcastChannel_ResponseDefaultTypeInternal _CSteamTV_CreateBroadcastChannel_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelID_Request::CSteamTV_GetBroadcastChannelID_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_GetBroadcastChannelID_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelID_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelID_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelID_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelID_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelID_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelID_Response::CSteamTV_GetBroadcastChannelID_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelID_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelID_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelID_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelID_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelID_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelID_Response_default_instance_;
constexpr CSteamTV_SetBroadcastChannelProfile_Request::CSteamTV_SetBroadcastChannelProfile_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schedule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rules_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , panels_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_SetBroadcastChannelProfile_RequestDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelProfile_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelProfile_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelProfile_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelProfile_RequestDefaultTypeInternal _CSteamTV_SetBroadcastChannelProfile_Request_default_instance_;
constexpr CSteamTV_SetBroadcastChannelProfile_Response::CSteamTV_SetBroadcastChannelProfile_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_SetBroadcastChannelProfile_ResponseDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelProfile_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelProfile_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelProfile_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelProfile_ResponseDefaultTypeInternal _CSteamTV_SetBroadcastChannelProfile_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelProfile_Request::CSteamTV_GetBroadcastChannelProfile_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelProfile_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelProfile_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelProfile_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelProfile_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelProfile_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelProfile_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelProfile_Response::CSteamTV_GetBroadcastChannelProfile_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schedule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rules_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , panels_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_steamid_(PROTOBUF_ULONGLONG(0))
  , is_partnered_(false){}
struct CSteamTV_GetBroadcastChannelProfile_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelProfile_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelProfile_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelProfile_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelProfile_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelProfile_Response_default_instance_;
constexpr CSteamTV_SetBroadcastChannelImage_Request::CSteamTV_SetBroadcastChannelImage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_extension_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , image_type_(0)

  , image_index_(0u)
  , image_width_(0u)
  , image_height_(0u)
  , file_size_(0u)
  , undo_(false){}
struct CSteamTV_SetBroadcastChannelImage_RequestDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelImage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelImage_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelImage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelImage_RequestDefaultTypeInternal _CSteamTV_SetBroadcastChannelImage_Request_default_instance_;
constexpr CSteamTV_SetBroadcastChannelImage_Response::CSteamTV_SetBroadcastChannelImage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replace_image_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_SetBroadcastChannelImage_ResponseDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelImage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelImage_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelImage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelImage_ResponseDefaultTypeInternal _CSteamTV_SetBroadcastChannelImage_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelImages_Request::CSteamTV_GetBroadcastChannelImages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_types_()
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelImages_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelImages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelImages_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelImages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelImages_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelImages_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelImages_Response_Images::CSteamTV_GetBroadcastChannelImages_Response_Images(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_type_(0)

  , image_index_(0u){}
struct CSteamTV_GetBroadcastChannelImages_Response_ImagesDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelImages_Response_ImagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelImages_Response_ImagesDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelImages_Response_Images _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelImages_Response_ImagesDefaultTypeInternal _CSteamTV_GetBroadcastChannelImages_Response_Images_default_instance_;
constexpr CSteamTV_GetBroadcastChannelImages_Response::CSteamTV_GetBroadcastChannelImages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_(){}
struct CSteamTV_GetBroadcastChannelImages_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelImages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelImages_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelImages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelImages_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelImages_Response_default_instance_;
constexpr CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lindescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linindex_(0u)
  , left_(0u)
  , top_(0u)
  , width_(0u)
  , height_(0u){}
struct CSteamTV_SetBroadcastChannelLinkRegions_Request_LinksDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelLinkRegions_Request_LinksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelLinkRegions_Request_LinksDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelLinkRegions_Request_Links _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelLinkRegions_Request_LinksDefaultTypeInternal _CSteamTV_SetBroadcastChannelLinkRegions_Request_Links_default_instance_;
constexpr CSteamTV_SetBroadcastChannelLinkRegions_Request::CSteamTV_SetBroadcastChannelLinkRegions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : links_()
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_SetBroadcastChannelLinkRegions_RequestDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelLinkRegions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelLinkRegions_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelLinkRegions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelLinkRegions_RequestDefaultTypeInternal _CSteamTV_SetBroadcastChannelLinkRegions_Request_default_instance_;
constexpr CSteamTV_SetBroadcastChannelLinkRegions_Response::CSteamTV_SetBroadcastChannelLinkRegions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_SetBroadcastChannelLinkRegions_ResponseDefaultTypeInternal {
  constexpr CSteamTV_SetBroadcastChannelLinkRegions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetBroadcastChannelLinkRegions_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_SetBroadcastChannelLinkRegions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetBroadcastChannelLinkRegions_ResponseDefaultTypeInternal _CSteamTV_SetBroadcastChannelLinkRegions_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelLinks_Request::CSteamTV_GetBroadcastChannelLinks_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelLinks_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelLinks_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelLinks_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelLinks_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelLinks_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelLinks_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelLinks_Response_Links::CSteamTV_GetBroadcastChannelLinks_Response_Links(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lindescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linindex_(0u)
  , left_(0u)
  , top_(0u)
  , width_(0u)
  , height_(0u){}
struct CSteamTV_GetBroadcastChannelLinks_Response_LinksDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelLinks_Response_LinksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelLinks_Response_LinksDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelLinks_Response_Links _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelLinks_Response_LinksDefaultTypeInternal _CSteamTV_GetBroadcastChannelLinks_Response_Links_default_instance_;
constexpr CSteamTV_GetBroadcastChannelLinks_Response::CSteamTV_GetBroadcastChannelLinks_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : links_(){}
struct CSteamTV_GetBroadcastChannelLinks_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelLinks_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelLinks_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelLinks_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelLinks_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelLinks_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelBroadcasters_Request::CSteamTV_GetBroadcastChannelBroadcasters_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelBroadcasters_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelBroadcasters_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelBroadcasters_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelBroadcasters_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelBroadcasters_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelBroadcasters_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtmp_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelBroadcasters_Response_BroadcasterDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelBroadcasters_Response_BroadcasterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelBroadcasters_Response_BroadcasterDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelBroadcasters_Response_BroadcasterDefaultTypeInternal _CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster_default_instance_;
constexpr CSteamTV_GetBroadcastChannelBroadcasters_Response::CSteamTV_GetBroadcastChannelBroadcasters_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcasters_(){}
struct CSteamTV_GetBroadcastChannelBroadcasters_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelBroadcasters_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelBroadcasters_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelBroadcasters_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelBroadcasters_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelBroadcasters_Response_default_instance_;
constexpr CSteamTV_GetFollowedChannels_Request::CSteamTV_GetFollowedChannels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_GetFollowedChannels_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetFollowedChannels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetFollowedChannels_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetFollowedChannels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetFollowedChannels_RequestDefaultTypeInternal _CSteamTV_GetFollowedChannels_Request_default_instance_;
constexpr GetBroadcastChannelEntry::GetBroadcastChannelEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , background_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , viewers_(PROTOBUF_ULONGLONG(0))
  , views_(PROTOBUF_ULONGLONG(0))
  , followers_(PROTOBUF_ULONGLONG(0))
  , broadcaster_steamid_(PROTOBUF_ULONGLONG(0))
  , subscribers_(PROTOBUF_ULONGLONG(0))
  , appid_(0u)
  , is_featured_(false)
  , is_disabled_(false)
  , is_live_(false)
  , is_partnered_(false)
  , reports_(0u){}
struct GetBroadcastChannelEntryDefaultTypeInternal {
  constexpr GetBroadcastChannelEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBroadcastChannelEntryDefaultTypeInternal() {}
  union {
    GetBroadcastChannelEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBroadcastChannelEntryDefaultTypeInternal _GetBroadcastChannelEntry_default_instance_;
constexpr CSteamTV_GetFollowedChannels_Response::CSteamTV_GetFollowedChannels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetFollowedChannels_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetFollowedChannels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetFollowedChannels_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetFollowedChannels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetFollowedChannels_ResponseDefaultTypeInternal _CSteamTV_GetFollowedChannels_Response_default_instance_;
constexpr CSteamTV_GetSubscribedChannels_Request::CSteamTV_GetSubscribedChannels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_GetSubscribedChannels_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetSubscribedChannels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetSubscribedChannels_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetSubscribedChannels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetSubscribedChannels_RequestDefaultTypeInternal _CSteamTV_GetSubscribedChannels_Request_default_instance_;
constexpr CSteamTV_GetSubscribedChannels_Response::CSteamTV_GetSubscribedChannels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetSubscribedChannels_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetSubscribedChannels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetSubscribedChannels_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetSubscribedChannels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetSubscribedChannels_ResponseDefaultTypeInternal _CSteamTV_GetSubscribedChannels_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelStatus_Request::CSteamTV_GetBroadcastChannelStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelStatus_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelStatus_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelStatus_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelStatus_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelStatus_Response::CSteamTV_GetBroadcastChannelStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_live_(false)
  , is_disabled_(false)
  , appid_(0u)
  , viewers_(PROTOBUF_ULONGLONG(0))
  , views_(PROTOBUF_ULONGLONG(0))
  , broadcaster_steamid_(PROTOBUF_ULONGLONG(0))
  , followers_(PROTOBUF_ULONGLONG(0))
  , subscribers_(PROTOBUF_ULONGLONG(0))
  , broadcast_session_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelStatus_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelStatus_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelStatus_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelStatus_Response_default_instance_;
constexpr CSteamTV_FollowBroadcastChannel_Request::CSteamTV_FollowBroadcastChannel_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , undo_(false){}
struct CSteamTV_FollowBroadcastChannel_RequestDefaultTypeInternal {
  constexpr CSteamTV_FollowBroadcastChannel_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_FollowBroadcastChannel_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_FollowBroadcastChannel_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_FollowBroadcastChannel_RequestDefaultTypeInternal _CSteamTV_FollowBroadcastChannel_Request_default_instance_;
constexpr CSteamTV_FollowBroadcastChannel_Response::CSteamTV_FollowBroadcastChannel_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_followed_(false){}
struct CSteamTV_FollowBroadcastChannel_ResponseDefaultTypeInternal {
  constexpr CSteamTV_FollowBroadcastChannel_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_FollowBroadcastChannel_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_FollowBroadcastChannel_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_FollowBroadcastChannel_ResponseDefaultTypeInternal _CSteamTV_FollowBroadcastChannel_Response_default_instance_;
constexpr CSteamTV_SubscribeBroadcastChannel_Request::CSteamTV_SubscribeBroadcastChannel_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_SubscribeBroadcastChannel_RequestDefaultTypeInternal {
  constexpr CSteamTV_SubscribeBroadcastChannel_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SubscribeBroadcastChannel_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_SubscribeBroadcastChannel_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SubscribeBroadcastChannel_RequestDefaultTypeInternal _CSteamTV_SubscribeBroadcastChannel_Request_default_instance_;
constexpr CSteamTV_SubscribeBroadcastChannel_Response::CSteamTV_SubscribeBroadcastChannel_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_subscribed_(false){}
struct CSteamTV_SubscribeBroadcastChannel_ResponseDefaultTypeInternal {
  constexpr CSteamTV_SubscribeBroadcastChannel_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SubscribeBroadcastChannel_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_SubscribeBroadcastChannel_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SubscribeBroadcastChannel_ResponseDefaultTypeInternal _CSteamTV_SubscribeBroadcastChannel_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelClips_Request::CSteamTV_GetBroadcastChannelClips_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelClips_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelClips_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelClips_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelClips_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelClips_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelClips_Request_default_instance_;
constexpr CSteamTV_BroadcastClipInfo::CSteamTV_BroadcastClipInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_clip_id_(PROTOBUF_ULONGLONG(0))
  , channel_id_(PROTOBUF_ULONGLONG(0))
  , broadcaster_steamid_(PROTOBUF_ULONGLONG(0))
  , creator_steamid_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , live_time_(0u)
  , length_ms_(0u){}
struct CSteamTV_BroadcastClipInfoDefaultTypeInternal {
  constexpr CSteamTV_BroadcastClipInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_BroadcastClipInfoDefaultTypeInternal() {}
  union {
    CSteamTV_BroadcastClipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_BroadcastClipInfoDefaultTypeInternal _CSteamTV_BroadcastClipInfo_default_instance_;
constexpr CSteamTV_GetBroadcastChannelClips_Response::CSteamTV_GetBroadcastChannelClips_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clips_()
  , thumbnail_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_GetBroadcastChannelClips_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelClips_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelClips_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelClips_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelClips_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelClips_Response_default_instance_;
constexpr CSteamTV_ReportBroadcastChannel_Request::CSteamTV_ReportBroadcastChannel_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_ReportBroadcastChannel_RequestDefaultTypeInternal {
  constexpr CSteamTV_ReportBroadcastChannel_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_ReportBroadcastChannel_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_ReportBroadcastChannel_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_ReportBroadcastChannel_RequestDefaultTypeInternal _CSteamTV_ReportBroadcastChannel_Request_default_instance_;
constexpr CSteamTV_ReportBroadcastChannel_Response::CSteamTV_ReportBroadcastChannel_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_ReportBroadcastChannel_ResponseDefaultTypeInternal {
  constexpr CSteamTV_ReportBroadcastChannel_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_ReportBroadcastChannel_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_ReportBroadcastChannel_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_ReportBroadcastChannel_ResponseDefaultTypeInternal _CSteamTV_ReportBroadcastChannel_Response_default_instance_;
constexpr CSteamTV_GetBroadcastChannelInteraction_Request::CSteamTV_GetBroadcastChannelInteraction_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetBroadcastChannelInteraction_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelInteraction_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelInteraction_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelInteraction_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelInteraction_RequestDefaultTypeInternal _CSteamTV_GetBroadcastChannelInteraction_Request_default_instance_;
constexpr CSteamTV_GetBroadcastChannelInteraction_Response::CSteamTV_GetBroadcastChannelInteraction_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_followed_(false)
  , is_subscribed_(false){}
struct CSteamTV_GetBroadcastChannelInteraction_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetBroadcastChannelInteraction_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetBroadcastChannelInteraction_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetBroadcastChannelInteraction_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetBroadcastChannelInteraction_ResponseDefaultTypeInternal _CSteamTV_GetBroadcastChannelInteraction_Response_default_instance_;
constexpr CSteamTV_GetGames_Request::CSteamTV_GetGames_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , count_(0u)
  , algorithm_(1)
{}
struct CSteamTV_GetGames_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetGames_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetGames_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetGames_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetGames_RequestDefaultTypeInternal _CSteamTV_GetGames_Request_default_instance_;
constexpr CSteamTV_Game::CSteamTV_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , release_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , developer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publisher_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , viewers_(PROTOBUF_ULONGLONG(0))
  , appid_(0u){}
struct CSteamTV_GameDefaultTypeInternal {
  constexpr CSteamTV_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GameDefaultTypeInternal() {}
  union {
    CSteamTV_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GameDefaultTypeInternal _CSteamTV_Game_default_instance_;
constexpr CSteamTV_GetGames_Response::CSteamTV_GetGames_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetGames_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetGames_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetGames_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetGames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetGames_ResponseDefaultTypeInternal _CSteamTV_GetGames_Response_default_instance_;
constexpr CSteamTV_GetChannels_Request::CSteamTV_GetChannels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(0u)
  , appid_(0u)
  , algorithm_(1)
{}
struct CSteamTV_GetChannels_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetChannels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChannels_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetChannels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChannels_RequestDefaultTypeInternal _CSteamTV_GetChannels_Request_default_instance_;
constexpr CSteamTV_GetChannels_Response::CSteamTV_GetChannels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetChannels_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetChannels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChannels_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetChannels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChannels_ResponseDefaultTypeInternal _CSteamTV_GetChannels_Response_default_instance_;
constexpr CSteamTV_AddChatBan_Request::CSteamTV_AddChatBan_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , chatter_steamid_(PROTOBUF_ULONGLONG(0))
  , duration_(0u)
  , permanent_(false)
  , undo_(false){}
struct CSteamTV_AddChatBan_RequestDefaultTypeInternal {
  constexpr CSteamTV_AddChatBan_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddChatBan_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_AddChatBan_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddChatBan_RequestDefaultTypeInternal _CSteamTV_AddChatBan_Request_default_instance_;
constexpr CSteamTV_AddChatBan_Response::CSteamTV_AddChatBan_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_AddChatBan_ResponseDefaultTypeInternal {
  constexpr CSteamTV_AddChatBan_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddChatBan_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_AddChatBan_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddChatBan_ResponseDefaultTypeInternal _CSteamTV_AddChatBan_Response_default_instance_;
constexpr CSteamTV_GetChatBans_Request::CSteamTV_GetChatBans_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetChatBans_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetChatBans_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChatBans_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetChatBans_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChatBans_RequestDefaultTypeInternal _CSteamTV_GetChatBans_Request_default_instance_;
constexpr CSteamTV_ChatBan::CSteamTV_ChatBan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_expires_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , issuer_steamid_(PROTOBUF_ULONGLONG(0))
  , chatter_steamid_(PROTOBUF_ULONGLONG(0))
  , permanent_(false){}
struct CSteamTV_ChatBanDefaultTypeInternal {
  constexpr CSteamTV_ChatBanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_ChatBanDefaultTypeInternal() {}
  union {
    CSteamTV_ChatBan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_ChatBanDefaultTypeInternal _CSteamTV_ChatBan_default_instance_;
constexpr CSteamTV_GetChatBans_Response::CSteamTV_GetChatBans_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetChatBans_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetChatBans_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChatBans_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetChatBans_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChatBans_ResponseDefaultTypeInternal _CSteamTV_GetChatBans_Response_default_instance_;
constexpr CSteamTV_AddChatModerator_Request::CSteamTV_AddChatModerator_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , moderator_steamid_(PROTOBUF_ULONGLONG(0))
  , undo_(false){}
struct CSteamTV_AddChatModerator_RequestDefaultTypeInternal {
  constexpr CSteamTV_AddChatModerator_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddChatModerator_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_AddChatModerator_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddChatModerator_RequestDefaultTypeInternal _CSteamTV_AddChatModerator_Request_default_instance_;
constexpr CSteamTV_AddChatModerator_Response::CSteamTV_AddChatModerator_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_AddChatModerator_ResponseDefaultTypeInternal {
  constexpr CSteamTV_AddChatModerator_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddChatModerator_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_AddChatModerator_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddChatModerator_ResponseDefaultTypeInternal _CSteamTV_AddChatModerator_Response_default_instance_;
constexpr CSteamTV_GetChatModerators_Request::CSteamTV_GetChatModerators_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetChatModerators_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetChatModerators_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChatModerators_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetChatModerators_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChatModerators_RequestDefaultTypeInternal _CSteamTV_GetChatModerators_Request_default_instance_;
constexpr CSteamTV_ChatModerator::CSteamTV_ChatModerator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_ChatModeratorDefaultTypeInternal {
  constexpr CSteamTV_ChatModeratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_ChatModeratorDefaultTypeInternal() {}
  union {
    CSteamTV_ChatModerator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_ChatModeratorDefaultTypeInternal _CSteamTV_ChatModerator_default_instance_;
constexpr CSteamTV_GetChatModerators_Response::CSteamTV_GetChatModerators_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetChatModerators_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetChatModerators_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetChatModerators_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetChatModerators_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetChatModerators_ResponseDefaultTypeInternal _CSteamTV_GetChatModerators_Response_default_instance_;
constexpr CSteamTV_AddWordBan_Request::CSteamTV_AddWordBan_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(PROTOBUF_ULONGLONG(0))
  , undo_(false){}
struct CSteamTV_AddWordBan_RequestDefaultTypeInternal {
  constexpr CSteamTV_AddWordBan_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddWordBan_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_AddWordBan_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddWordBan_RequestDefaultTypeInternal _CSteamTV_AddWordBan_Request_default_instance_;
constexpr CSteamTV_AddWordBan_Response::CSteamTV_AddWordBan_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_AddWordBan_ResponseDefaultTypeInternal {
  constexpr CSteamTV_AddWordBan_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AddWordBan_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_AddWordBan_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AddWordBan_ResponseDefaultTypeInternal _CSteamTV_AddWordBan_Response_default_instance_;
constexpr CSteamTV_GetWordBans_Request::CSteamTV_GetWordBans_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_GetWordBans_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetWordBans_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetWordBans_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetWordBans_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetWordBans_RequestDefaultTypeInternal _CSteamTV_GetWordBans_Request_default_instance_;
constexpr CSteamTV_GetWordBans_Response::CSteamTV_GetWordBans_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetWordBans_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetWordBans_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetWordBans_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetWordBans_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetWordBans_ResponseDefaultTypeInternal _CSteamTV_GetWordBans_Response_default_instance_;
constexpr CSteamTV_JoinChat_Request::CSteamTV_JoinChat_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_JoinChat_RequestDefaultTypeInternal {
  constexpr CSteamTV_JoinChat_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_JoinChat_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_JoinChat_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_JoinChat_RequestDefaultTypeInternal _CSteamTV_JoinChat_Request_default_instance_;
constexpr CSteamTV_JoinChat_Response::CSteamTV_JoinChat_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flair_group_ids_()
  , view_url_template_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_JoinChat_ResponseDefaultTypeInternal {
  constexpr CSteamTV_JoinChat_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_JoinChat_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_JoinChat_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_JoinChat_ResponseDefaultTypeInternal _CSteamTV_JoinChat_Response_default_instance_;
constexpr CSteamTV_Search_Request::CSteamTV_Search_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_Search_RequestDefaultTypeInternal {
  constexpr CSteamTV_Search_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_Search_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_Search_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_Search_RequestDefaultTypeInternal _CSteamTV_Search_Request_default_instance_;
constexpr CSteamTV_Search_Response::CSteamTV_Search_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_Search_ResponseDefaultTypeInternal {
  constexpr CSteamTV_Search_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_Search_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_Search_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_Search_ResponseDefaultTypeInternal _CSteamTV_Search_Response_default_instance_;
constexpr CSteamTV_GetSteamTVUserSettings_Request::CSteamTV_GetSteamTVUserSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_GetSteamTVUserSettings_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetSteamTVUserSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetSteamTVUserSettings_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetSteamTVUserSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetSteamTVUserSettings_RequestDefaultTypeInternal _CSteamTV_GetSteamTVUserSettings_Request_default_instance_;
constexpr CSteamTV_GetSteamTVUserSettings_Response::CSteamTV_GetSteamTVUserSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_live_email_(false)
  , stream_live_notification_(false){}
struct CSteamTV_GetSteamTVUserSettings_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetSteamTVUserSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetSteamTVUserSettings_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetSteamTVUserSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetSteamTVUserSettings_ResponseDefaultTypeInternal _CSteamTV_GetSteamTVUserSettings_Response_default_instance_;
constexpr CSteamTV_SetSteamTVUserSettings_Request::CSteamTV_SetSteamTVUserSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_live_email_(false)
  , stream_live_notification_(false){}
struct CSteamTV_SetSteamTVUserSettings_RequestDefaultTypeInternal {
  constexpr CSteamTV_SetSteamTVUserSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetSteamTVUserSettings_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_SetSteamTVUserSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetSteamTVUserSettings_RequestDefaultTypeInternal _CSteamTV_SetSteamTVUserSettings_Request_default_instance_;
constexpr CSteamTV_SetSteamTVUserSettings_Response::CSteamTV_SetSteamTVUserSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_SetSteamTVUserSettings_ResponseDefaultTypeInternal {
  constexpr CSteamTV_SetSteamTVUserSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_SetSteamTVUserSettings_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_SetSteamTVUserSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_SetSteamTVUserSettings_ResponseDefaultTypeInternal _CSteamTV_SetSteamTVUserSettings_Response_default_instance_;
constexpr CSteamTV_GetMyBroadcastChannels_Request::CSteamTV_GetMyBroadcastChannels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_GetMyBroadcastChannels_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetMyBroadcastChannels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetMyBroadcastChannels_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetMyBroadcastChannels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetMyBroadcastChannels_RequestDefaultTypeInternal _CSteamTV_GetMyBroadcastChannels_Request_default_instance_;
constexpr CSteamTV_GetMyBroadcastChannels_Response::CSteamTV_GetMyBroadcastChannels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CSteamTV_GetMyBroadcastChannels_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetMyBroadcastChannels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetMyBroadcastChannels_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetMyBroadcastChannels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetMyBroadcastChannels_ResponseDefaultTypeInternal _CSteamTV_GetMyBroadcastChannels_Response_default_instance_;
constexpr CSteamTV_GetHomePageContents_Request::CSteamTV_GetHomePageContents_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamTV_GetHomePageContents_RequestDefaultTypeInternal {
  constexpr CSteamTV_GetHomePageContents_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetHomePageContents_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_GetHomePageContents_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetHomePageContents_RequestDefaultTypeInternal _CSteamTV_GetHomePageContents_Request_default_instance_;
constexpr CSteamTV_HomePageTemplate_Takeover::CSteamTV_HomePageTemplate_Takeover(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcasts_(){}
struct CSteamTV_HomePageTemplate_TakeoverDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_TakeoverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_TakeoverDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_Takeover _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_TakeoverDefaultTypeInternal _CSteamTV_HomePageTemplate_Takeover_default_instance_;
constexpr CSteamTV_HomePageTemplate_SingleGame::CSteamTV_HomePageTemplate_SingleGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcasts_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CSteamTV_HomePageTemplate_SingleGameDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_SingleGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_SingleGameDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_SingleGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_SingleGameDefaultTypeInternal _CSteamTV_HomePageTemplate_SingleGame_default_instance_;
constexpr GameListEntry::GameListEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_(nullptr)
  , appid_(0u){}
struct GameListEntryDefaultTypeInternal {
  constexpr GameListEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameListEntryDefaultTypeInternal() {}
  union {
    GameListEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameListEntryDefaultTypeInternal _GameListEntry_default_instance_;
constexpr CSteamTV_HomePageTemplate_GameList::CSteamTV_HomePageTemplate_GameList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_HomePageTemplate_GameListDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_GameListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_GameListDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_GameList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_GameListDefaultTypeInternal _CSteamTV_HomePageTemplate_GameList_default_instance_;
constexpr CSteamTV_HomePageTemplate_QuickExplore::CSteamTV_HomePageTemplate_QuickExplore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcasts_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_HomePageTemplate_QuickExploreDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_QuickExploreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_QuickExploreDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_QuickExplore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_QuickExploreDefaultTypeInternal _CSteamTV_HomePageTemplate_QuickExplore_default_instance_;
constexpr CSteamTV_HomePageTemplate_ConveyorBelt::CSteamTV_HomePageTemplate_ConveyorBelt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcasts_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_HomePageTemplate_ConveyorBeltDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_ConveyorBeltDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_ConveyorBeltDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_ConveyorBelt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_ConveyorBeltDefaultTypeInternal _CSteamTV_HomePageTemplate_ConveyorBelt_default_instance_;
constexpr CSteamTV_HomePageTemplate_WatchParty::CSteamTV_HomePageTemplate_WatchParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_(nullptr)
  , chat_group_id_(PROTOBUF_ULONGLONG(0)){}
struct CSteamTV_HomePageTemplate_WatchPartyDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_WatchPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_WatchPartyDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_WatchParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_WatchPartyDefaultTypeInternal _CSteamTV_HomePageTemplate_WatchParty_default_instance_;
constexpr CSteamTV_HomePageTemplate_Developer::CSteamTV_HomePageTemplate_Developer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_(nullptr){}
struct CSteamTV_HomePageTemplate_DeveloperDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_DeveloperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_DeveloperDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_Developer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_DeveloperDefaultTypeInternal _CSteamTV_HomePageTemplate_Developer_default_instance_;
constexpr CSteamTV_HomePageTemplate_Event::CSteamTV_HomePageTemplate_Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamTV_HomePageTemplate_EventDefaultTypeInternal {
  constexpr CSteamTV_HomePageTemplate_EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageTemplate_EventDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageTemplate_Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageTemplate_EventDefaultTypeInternal _CSteamTV_HomePageTemplate_Event_default_instance_;
constexpr CSteamTV_HomePageContentRow::CSteamTV_HomePageContentRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : takeover_(nullptr)
  , single_game_(nullptr)
  , game_list_(nullptr)
  , quicexplore_(nullptr)
  , conveyor_belt_(nullptr)
  , watch_party_(nullptr)
  , developer_(nullptr)
  , event_(nullptr)
  , template_type_(0)
{}
struct CSteamTV_HomePageContentRowDefaultTypeInternal {
  constexpr CSteamTV_HomePageContentRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_HomePageContentRowDefaultTypeInternal() {}
  union {
    CSteamTV_HomePageContentRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_HomePageContentRowDefaultTypeInternal _CSteamTV_HomePageContentRow_default_instance_;
constexpr CSteamTV_GetHomePageContents_Response::CSteamTV_GetHomePageContents_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_(){}
struct CSteamTV_GetHomePageContents_ResponseDefaultTypeInternal {
  constexpr CSteamTV_GetHomePageContents_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_GetHomePageContents_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_GetHomePageContents_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_GetHomePageContents_ResponseDefaultTypeInternal _CSteamTV_GetHomePageContents_Response_default_instance_;
constexpr CSteamTV_AppCheer_SingleCheerType::CSteamTV_AppCheer_SingleCheerType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheer_type_(0u)
  , cheer_amount_(0u){}
struct CSteamTV_AppCheer_SingleCheerTypeDefaultTypeInternal {
  constexpr CSteamTV_AppCheer_SingleCheerTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AppCheer_SingleCheerTypeDefaultTypeInternal() {}
  union {
    CSteamTV_AppCheer_SingleCheerType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AppCheer_SingleCheerTypeDefaultTypeInternal _CSteamTV_AppCheer_SingleCheerType_default_instance_;
constexpr CSteamTV_AppCheer_Request::CSteamTV_AppCheer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cheers_()
  , cheer_target_id_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CSteamTV_AppCheer_RequestDefaultTypeInternal {
  constexpr CSteamTV_AppCheer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AppCheer_RequestDefaultTypeInternal() {}
  union {
    CSteamTV_AppCheer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AppCheer_RequestDefaultTypeInternal _CSteamTV_AppCheer_Request_default_instance_;
constexpr CSteamTV_AppCheer_Response::CSteamTV_AppCheer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aggregation_delay_ms_(0u){}
struct CSteamTV_AppCheer_ResponseDefaultTypeInternal {
  constexpr CSteamTV_AppCheer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamTV_AppCheer_ResponseDefaultTypeInternal() {}
  union {
    CSteamTV_AppCheer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamTV_AppCheer_ResponseDefaultTypeInternal _CSteamTV_AppCheer_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fsteamtv_2esteamclient_2eproto[84];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fsteamtv_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Request, unique_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_CreateBroadcastChannel_Response, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Request, unique_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Response, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Response, unique_name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelID_Response, steamid_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, headline_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, summary_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, avatar_hash_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, schedule_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, rules_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Request, panels_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelProfile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, unique_name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, owner_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, language_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, headline_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, summary_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, schedule_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, rules_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, panels_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelProfile_Response, is_partnered_),
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, image_type_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, image_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, image_width_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, image_height_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, file_extension_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, file_hash_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Request, undo_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelImage_Response, replace_image_hash_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Request, image_types_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response_Images, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response_Images, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response_Images, image_type_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response_Images, image_path_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response_Images, image_index_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelImages_Response, images_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, linindex_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, url_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, lindescription_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, left_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, top_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, width_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, height_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Request, links_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetBroadcastChannelLinkRegions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, linindex_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, url_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, lindescription_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, left_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, top_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, width_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response_Links, height_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelLinks_Response, links_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster, name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster, rtmp_token_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelBroadcasters_Response, broadcasters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetFollowedChannels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, unique_name_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, name_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, appid_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, viewers_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, views_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, followers_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, headline_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, subscribers_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, background_url_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, is_featured_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, is_disabled_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, is_live_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, language_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, reports_),
  PROTOBUF_FIELD_OFFSET(::GetBroadcastChannelEntry, is_partnered_),
  7,
  0,
  1,
  13,
  8,
  9,
  2,
  10,
  3,
  4,
  11,
  12,
  5,
  14,
  15,
  16,
  6,
  18,
  17,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetFollowedChannels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetFollowedChannels_Response, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSubscribedChannels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSubscribedChannels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSubscribedChannels_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, is_live_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, is_disabled_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, viewers_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, views_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, followers_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, subscribers_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, unique_name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelStatus_Response, broadcast_session_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  1,
  10,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Request, undo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_FollowBroadcastChannel_Response, is_followed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SubscribeBroadcastChannel_Response, is_subscribed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, broadcast_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, creator_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, video_description_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, live_time_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, length_ms_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_BroadcastClipInfo, thumbnail_path_),
  2,
  3,
  6,
  4,
  5,
  0,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Response, clips_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelClips_Response, thumbnail_host_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ReportBroadcastChannel_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ReportBroadcastChannel_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ReportBroadcastChannel_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ReportBroadcastChannel_Request, reason_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ReportBroadcastChannel_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Response, is_followed_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetBroadcastChannelInteraction_Response, is_subscribed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Request, algorithm_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Request, count_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, name_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, image_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, viewers_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, channels_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, release_date_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, developer_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Game, publisher_),
  6,
  0,
  1,
  5,
  ~0u,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetGames_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Request, algorithm_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Request, appid_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChannels_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, chatter_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, duration_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, permanent_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Request, undo_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatBan_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatBans_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatBans_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatBans_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, issuer_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, chatter_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, time_expires_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, permanent_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatBan, name_),
  2,
  3,
  0,
  4,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatBans_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatBans_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Request, moderator_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Request, undo_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddChatModerator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatModerators_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatModerators_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatModerators_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatModerator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatModerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatModerator, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_ChatModerator, name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatModerators_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetChatModerators_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Request, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Request, word_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Request, undo_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AddWordBan_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetWordBans_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetWordBans_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetWordBans_Request, broadcast_channel_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetWordBans_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetWordBans_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Request, broadcast_channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Response, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Response, view_url_template_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_JoinChat_Response, flair_group_ids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Search_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Search_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Search_Request, term_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Search_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_Search_Response, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSteamTVUserSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSteamTVUserSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSteamTVUserSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSteamTVUserSettings_Response, stream_live_email_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetSteamTVUserSettings_Response, stream_live_notification_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetSteamTVUserSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetSteamTVUserSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetSteamTVUserSettings_Request, stream_live_email_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetSteamTVUserSettings_Request, stream_live_notification_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_SetSteamTVUserSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetMyBroadcastChannels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetMyBroadcastChannels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetMyBroadcastChannels_Response, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetHomePageContents_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Takeover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Takeover, broadcasts_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_SingleGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_SingleGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_SingleGame, broadcasts_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_SingleGame, appid_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_SingleGame, title_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameListEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameListEntry, appid_),
  PROTOBUF_FIELD_OFFSET(::GameListEntry, game_name_),
  PROTOBUF_FIELD_OFFSET(::GameListEntry, broadcast_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_GameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_GameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_GameList, entries_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_GameList, title_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_QuickExplore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_QuickExplore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_QuickExplore, broadcasts_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_QuickExplore, title_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_ConveyorBelt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_ConveyorBelt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_ConveyorBelt, broadcasts_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_ConveyorBelt, title_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_WatchParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_WatchParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_WatchParty, broadcast_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_WatchParty, title_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_WatchParty, chat_group_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Developer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Developer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Developer, broadcast_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Developer, title_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageTemplate_Event, title_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, template_type_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, takeover_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, single_game_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, game_list_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, quicexplore_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, conveyor_belt_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, watch_party_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, developer_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_HomePageContentRow, event_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetHomePageContents_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_GetHomePageContents_Response, rows_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_SingleCheerType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_SingleCheerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_SingleCheerType, cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_SingleCheerType, cheer_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Request, cheer_target_id_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Request, cheers_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamTV_AppCheer_Response, aggregation_delay_ms_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CSteamTV_CreateBroadcastChannel_Request)},
  { 7, 13, sizeof(::CSteamTV_CreateBroadcastChannel_Response)},
  { 14, 20, sizeof(::CSteamTV_GetBroadcastChannelID_Request)},
  { 21, 29, sizeof(::CSteamTV_GetBroadcastChannelID_Response)},
  { 32, 46, sizeof(::CSteamTV_SetBroadcastChannelProfile_Request)},
  { 55, -1, sizeof(::CSteamTV_SetBroadcastChannelProfile_Response)},
  { 60, 66, sizeof(::CSteamTV_GetBroadcastChannelProfile_Request)},
  { 67, 82, sizeof(::CSteamTV_GetBroadcastChannelProfile_Response)},
  { 92, 106, sizeof(::CSteamTV_SetBroadcastChannelImage_Request)},
  { 115, 121, sizeof(::CSteamTV_SetBroadcastChannelImage_Response)},
  { 122, 129, sizeof(::CSteamTV_GetBroadcastChannelImages_Request)},
  { 131, 139, sizeof(::CSteamTV_GetBroadcastChannelImages_Response_Images)},
  { 142, -1, sizeof(::CSteamTV_GetBroadcastChannelImages_Response)},
  { 148, 160, sizeof(::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links)},
  { 167, 174, sizeof(::CSteamTV_SetBroadcastChannelLinkRegions_Request)},
  { 176, -1, sizeof(::CSteamTV_SetBroadcastChannelLinkRegions_Response)},
  { 181, 187, sizeof(::CSteamTV_GetBroadcastChannelLinks_Request)},
  { 188, 200, sizeof(::CSteamTV_GetBroadcastChannelLinks_Response_Links)},
  { 207, -1, sizeof(::CSteamTV_GetBroadcastChannelLinks_Response)},
  { 213, 219, sizeof(::CSteamTV_GetBroadcastChannelBroadcasters_Request)},
  { 220, 228, sizeof(::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster)},
  { 231, -1, sizeof(::CSteamTV_GetBroadcastChannelBroadcasters_Response)},
  { 237, -1, sizeof(::CSteamTV_GetFollowedChannels_Request)},
  { 242, 266, sizeof(::GetBroadcastChannelEntry)},
  { 285, -1, sizeof(::CSteamTV_GetFollowedChannels_Response)},
  { 291, -1, sizeof(::CSteamTV_GetSubscribedChannels_Request)},
  { 296, -1, sizeof(::CSteamTV_GetSubscribedChannels_Response)},
  { 302, 308, sizeof(::CSteamTV_GetBroadcastChannelStatus_Request)},
  { 309, 325, sizeof(::CSteamTV_GetBroadcastChannelStatus_Response)},
  { 336, 343, sizeof(::CSteamTV_FollowBroadcastChannel_Request)},
  { 345, 351, sizeof(::CSteamTV_FollowBroadcastChannel_Response)},
  { 352, 358, sizeof(::CSteamTV_SubscribeBroadcastChannel_Request)},
  { 359, 365, sizeof(::CSteamTV_SubscribeBroadcastChannel_Response)},
  { 366, 372, sizeof(::CSteamTV_GetBroadcastChannelClips_Request)},
  { 373, 387, sizeof(::CSteamTV_BroadcastClipInfo)},
  { 396, 403, sizeof(::CSteamTV_GetBroadcastChannelClips_Response)},
  { 405, 412, sizeof(::CSteamTV_ReportBroadcastChannel_Request)},
  { 414, -1, sizeof(::CSteamTV_ReportBroadcastChannel_Response)},
  { 419, 425, sizeof(::CSteamTV_GetBroadcastChannelInteraction_Request)},
  { 426, 433, sizeof(::CSteamTV_GetBroadcastChannelInteraction_Response)},
  { 435, 443, sizeof(::CSteamTV_GetGames_Request)},
  { 446, 459, sizeof(::CSteamTV_Game)},
  { 467, -1, sizeof(::CSteamTV_GetGames_Response)},
  { 473, 481, sizeof(::CSteamTV_GetChannels_Request)},
  { 484, -1, sizeof(::CSteamTV_GetChannels_Response)},
  { 490, 500, sizeof(::CSteamTV_AddChatBan_Request)},
  { 505, -1, sizeof(::CSteamTV_AddChatBan_Response)},
  { 510, 516, sizeof(::CSteamTV_GetChatBans_Request)},
  { 517, 527, sizeof(::CSteamTV_ChatBan)},
  { 532, -1, sizeof(::CSteamTV_GetChatBans_Response)},
  { 538, 546, sizeof(::CSteamTV_AddChatModerator_Request)},
  { 549, -1, sizeof(::CSteamTV_AddChatModerator_Response)},
  { 554, 560, sizeof(::CSteamTV_GetChatModerators_Request)},
  { 561, 568, sizeof(::CSteamTV_ChatModerator)},
  { 570, -1, sizeof(::CSteamTV_GetChatModerators_Response)},
  { 576, 584, sizeof(::CSteamTV_AddWordBan_Request)},
  { 587, -1, sizeof(::CSteamTV_AddWordBan_Response)},
  { 592, 598, sizeof(::CSteamTV_GetWordBans_Request)},
  { 599, -1, sizeof(::CSteamTV_GetWordBans_Response)},
  { 605, 611, sizeof(::CSteamTV_JoinChat_Request)},
  { 612, 620, sizeof(::CSteamTV_JoinChat_Response)},
  { 623, 629, sizeof(::CSteamTV_Search_Request)},
  { 630, -1, sizeof(::CSteamTV_Search_Response)},
  { 636, -1, sizeof(::CSteamTV_GetSteamTVUserSettings_Request)},
  { 641, 648, sizeof(::CSteamTV_GetSteamTVUserSettings_Response)},
  { 650, 657, sizeof(::CSteamTV_SetSteamTVUserSettings_Request)},
  { 659, -1, sizeof(::CSteamTV_SetSteamTVUserSettings_Response)},
  { 664, -1, sizeof(::CSteamTV_GetMyBroadcastChannels_Request)},
  { 669, -1, sizeof(::CSteamTV_GetMyBroadcastChannels_Response)},
  { 675, -1, sizeof(::CSteamTV_GetHomePageContents_Request)},
  { 680, -1, sizeof(::CSteamTV_HomePageTemplate_Takeover)},
  { 686, 694, sizeof(::CSteamTV_HomePageTemplate_SingleGame)},
  { 697, 705, sizeof(::GameListEntry)},
  { 708, 715, sizeof(::CSteamTV_HomePageTemplate_GameList)},
  { 717, 724, sizeof(::CSteamTV_HomePageTemplate_QuickExplore)},
  { 726, 733, sizeof(::CSteamTV_HomePageTemplate_ConveyorBelt)},
  { 735, 743, sizeof(::CSteamTV_HomePageTemplate_WatchParty)},
  { 746, 753, sizeof(::CSteamTV_HomePageTemplate_Developer)},
  { 755, 761, sizeof(::CSteamTV_HomePageTemplate_Event)},
  { 762, 776, sizeof(::CSteamTV_HomePageContentRow)},
  { 785, -1, sizeof(::CSteamTV_GetHomePageContents_Response)},
  { 791, 798, sizeof(::CSteamTV_AppCheer_SingleCheerType)},
  { 800, 808, sizeof(::CSteamTV_AppCheer_Request)},
  { 811, 817, sizeof(::CSteamTV_AppCheer_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_CreateBroadcastChannel_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_CreateBroadcastChannel_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelID_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelID_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelProfile_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelProfile_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelProfile_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelProfile_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelImage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelImage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelImages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelImages_Response_Images_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelImages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelLinkRegions_Request_Links_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelLinkRegions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetBroadcastChannelLinkRegions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelLinks_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelLinks_Response_Links_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelLinks_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelBroadcasters_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelBroadcasters_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetFollowedChannels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetBroadcastChannelEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetFollowedChannels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetSubscribedChannels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetSubscribedChannels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_FollowBroadcastChannel_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_FollowBroadcastChannel_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SubscribeBroadcastChannel_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SubscribeBroadcastChannel_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelClips_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_BroadcastClipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelClips_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_ReportBroadcastChannel_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_ReportBroadcastChannel_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelInteraction_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetBroadcastChannelInteraction_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetGames_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetGames_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChannels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChannels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddChatBan_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddChatBan_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChatBans_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_ChatBan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChatBans_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddChatModerator_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddChatModerator_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChatModerators_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_ChatModerator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetChatModerators_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddWordBan_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AddWordBan_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetWordBans_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetWordBans_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_JoinChat_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_JoinChat_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_Search_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_Search_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetSteamTVUserSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetSteamTVUserSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetSteamTVUserSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_SetSteamTVUserSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetMyBroadcastChannels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetMyBroadcastChannels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetHomePageContents_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_Takeover_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_SingleGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameListEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_GameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_QuickExplore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_ConveyorBelt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_WatchParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_Developer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageTemplate_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_HomePageContentRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_GetHomePageContents_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AppCheer_SingleCheerType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AppCheer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamTV_AppCheer_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fsteamtv_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'steammessages_steamtv.steamclient.prot"
  "o\032 google/protobuf/descriptor.proto\032\030ste"
  "ammessages_base.proto\032,steammessages_uni"
  "fied_base.steamclient.proto\">\n\'CSteamTV_"
  "CreateBroadcastChannel_Request\022\023\n\013unique"
  "_name\030\001 \001(\t\"H\n(CSteamTV_CreateBroadcastC"
  "hannel_Response\022\034\n\024broadcast_channel_id\030"
  "\001 \001(\006\"=\n&CSteamTV_GetBroadcastChannelID_"
  "Request\022\023\n\013unique_name\030\001 \001(\t\"m\n\'CSteamTV"
  "_GetBroadcastChannelID_Response\022\034\n\024broad"
  "cast_channel_id\030\001 \001(\006\022\023\n\013unique_name\030\002 \001"
  "(\t\022\017\n\007steamid\030\003 \001(\006\"\324\001\n+CSteamTV_SetBroa"
  "dcastChannelProfile_Request\022\034\n\024broadcast"
  "_channel_id\030\001 \001(\006\022\014\n\004name\030\002 \001(\t\022\020\n\010langu"
  "age\030\003 \001(\t\022\020\n\010headline\030\004 \001(\t\022\017\n\007summary\030\005"
  " \001(\t\022\023\n\013avatar_hash\030\006 \001(\t\022\020\n\010schedule\030\007 "
  "\001(\t\022\r\n\005rules\030\010 \001(\t\022\016\n\006panels\030\t \001(\t\".\n,CS"
  "teamTV_SetBroadcastChannelProfile_Respon"
  "se\"K\n+CSteamTV_GetBroadcastChannelProfil"
  "e_Request\022\034\n\024broadcast_channel_id\030\001 \001(\006\""
  "\344\001\n,CSteamTV_GetBroadcastChannelProfile_"
  "Response\022\023\n\013unique_name\030\001 \001(\t\022\025\n\rowner_s"
  "teamid\030\002 \001(\006\022\014\n\004name\030\003 \001(\t\022\020\n\010language\030\004"
  " \001(\t\022\020\n\010headline\030\005 \001(\t\022\017\n\007summary\030\006 \001(\t\022"
  "\020\n\010schedule\030\007 \001(\t\022\r\n\005rules\030\010 \001(\t\022\016\n\006pane"
  "ls\030\t \001(\t\022\024\n\014is_partnered\030\n \001(\010\"\231\002\n)CStea"
  "mTV_SetBroadcastChannelImage_Request\022\034\n\024"
  "broadcast_channel_id\030\001 \001(\006\022B\n\nimage_type"
  "\030\002 \001(\0162\024.EBroadcastImageType:\030EBroadcast"
  "ImageType_None\022\023\n\013image_index\030\003 \001(\r\022\023\n\013i"
  "mage_width\030\004 \001(\r\022\024\n\014image_height\030\005 \001(\r\022\021"
  "\n\tfile_size\030\006 \001(\r\022\026\n\016file_extension\030\007 \001("
  "\t\022\021\n\tfile_hash\030\010 \001(\t\022\014\n\004undo\030\t \001(\010\"H\n*CS"
  "teamTV_SetBroadcastChannelImage_Response"
  "\022\032\n\022replace_image_hash\030\001 \001(\t\"u\n*CSteamTV"
  "_GetBroadcastChannelImages_Request\022\034\n\024br"
  "oadcast_channel_id\030\001 \001(\006\022)\n\013image_types\030"
  "\002 \003(\0162\024.EBroadcastImageType\"\351\001\n+CSteamTV"
  "_GetBroadcastChannelImages_Response\022C\n\006i"
  "mages\030\001 \003(\01323.CSteamTV_GetBroadcastChann"
  "elImages_Response.Images\032u\n\006Images\022B\n\nim"
  "age_type\030\001 \001(\0162\024.EBroadcastImageType:\030EB"
  "roadcastImageType_None\022\022\n\nimage_path\030\002 \001"
  "(\t\022\023\n\013image_index\030\003 \001(\r\"\220\002\n/CSteamTV_Set"
  "BroadcastChannelLinkRegions_Request\022\034\n\024b"
  "roadcast_channel_id\030\001 \001(\006\022E\n\005links\030\002 \003(\013"
  "26.CSteamTV_SetBroadcastChannelLinkRegio"
  "ns_Request.Links\032x\n\005Links\022\020\n\010linindex\030\001 "
  "\001(\r\022\013\n\003url\030\002 \001(\t\022\026\n\016lindescription\030\003 \001(\t"
  "\022\014\n\004left\030\004 \001(\r\022\013\n\003top\030\005 \001(\r\022\r\n\005width\030\006 \001"
  "(\r\022\016\n\006height\030\007 \001(\r\"2\n0CSteamTV_SetBroadc"
  "astChannelLinkRegions_Response\"I\n)CSteam"
  "TV_GetBroadcastChannelLinks_Request\022\034\n\024b"
  "roadcast_channel_id\030\001 \001(\006\"\350\001\n*CSteamTV_G"
  "etBroadcastChannelLinks_Response\022@\n\005link"
  "s\030\001 \003(\01321.CSteamTV_GetBroadcastChannelLi"
  "nks_Response.Links\032x\n\005Links\022\020\n\010linindex\030"
  "\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\026\n\016lindescription\030\003 \001"
  "(\t\022\014\n\004left\030\004 \001(\r\022\013\n\003top\030\005 \001(\r\022\r\n\005width\030\006"
  " \001(\r\022\016\n\006height\030\007 \001(\r\"P\n0CSteamTV_GetBroa"
  "dcastChannelBroadcasters_Request\022\034\n\024broa"
  "dcast_channel_id\030\001 \001(\006\"\313\001\n1CSteamTV_GetB"
  "roadcastChannelBroadcasters_Response\022T\n\014"
  "broadcasters\030\001 \003(\0132>.CSteamTV_GetBroadca"
  "stChannelBroadcasters_Response.Broadcast"
  "er\032@\n\013Broadcaster\022\017\n\007steamid\030\001 \001(\006\022\014\n\004na"
  "me\030\002 \001(\t\022\022\n\nrtmp_token\030\003 \001(\t\"&\n$CSteamTV"
  "_GetFollowedChannels_Request\"\230\003\n\030GetBroa"
  "dcastChannelEntry\022\034\n\024broadcast_channel_i"
  "d\030\001 \001(\006\022\023\n\013unique_name\030\002 \001(\t\022\014\n\004name\030\003 \001"
  "(\t\022\r\n\005appid\030\004 \001(\r\022\017\n\007viewers\030\005 \001(\004\022\r\n\005vi"
  "ews\030\006 \001(\004\022\025\n\rthumbnail_url\030\007 \001(\t\022\021\n\tfoll"
  "owers\030\010 \001(\004\022\020\n\010headline\030\t \001(\t\022\022\n\navatar_"
  "url\030\n \001(\t\022\033\n\023broadcaster_steamid\030\013 \001(\006\022\023"
  "\n\013subscribers\030\014 \001(\004\022\026\n\016background_url\030\r "
  "\001(\t\022\023\n\013is_featured\030\016 \001(\010\022\023\n\013is_disabled\030"
  "\017 \001(\010\022\017\n\007is_live\030\020 \001(\010\022\020\n\010language\030\021 \001(\t"
  "\022\017\n\007reports\030\022 \001(\r\022\024\n\014is_partnered\030\023 \001(\010\""
  "S\n%CSteamTV_GetFollowedChannels_Response"
  "\022*\n\007results\030\001 \003(\0132\031.GetBroadcastChannelE"
  "ntry\"(\n&CSteamTV_GetSubscribedChannels_R"
  "equest\"U\n\'CSteamTV_GetSubscribedChannels"
  "_Response\022*\n\007results\030\001 \003(\0132\031.GetBroadcas"
  "tChannelEntry\"J\n*CSteamTV_GetBroadcastCh"
  "annelStatus_Request\022\034\n\024broadcast_channel"
  "_id\030\001 \001(\006\"\221\002\n+CSteamTV_GetBroadcastChann"
  "elStatus_Response\022\017\n\007is_live\030\001 \001(\010\022\023\n\013is"
  "_disabled\030\002 \001(\010\022\r\n\005appid\030\003 \001(\r\022\017\n\007viewer"
  "s\030\004 \001(\004\022\r\n\005views\030\005 \001(\004\022\033\n\023broadcaster_st"
  "eamid\030\006 \001(\006\022\025\n\rthumbnail_url\030\007 \001(\t\022\021\n\tfo"
  "llowers\030\010 \001(\004\022\023\n\013subscribers\030\t \001(\004\022\023\n\013un"
  "ique_name\030\n \001(\t\022\034\n\024broadcast_session_id\030"
  "\013 \001(\004\"U\n\'CSteamTV_FollowBroadcastChannel"
  "_Request\022\034\n\024broadcast_channel_id\030\001 \001(\006\022\014"
  "\n\004undo\030\002 \001(\010\"\?\n(CSteamTV_FollowBroadcast"
  "Channel_Response\022\023\n\013is_followed\030\001 \001(\010\"J\n"
  "*CSteamTV_SubscribeBroadcastChannel_Requ"
  "est\022\034\n\024broadcast_channel_id\030\001 \001(\006\"D\n+CSt"
  "eamTV_SubscribeBroadcastChannel_Response"
  "\022\025\n\ris_subscribed\030\001 \001(\010\"I\n)CSteamTV_GetB"
  "roadcastChannelClips_Request\022\034\n\024broadcas"
  "t_channel_id\030\001 \001(\006\"\352\001\n\032CSteamTV_Broadcas"
  "tClipInfo\022\031\n\021broadcast_clip_id\030\001 \001(\004\022\022\n\n"
  "channel_id\030\002 \001(\004\022\016\n\006app_id\030\003 \001(\r\022\033\n\023broa"
  "dcaster_steamid\030\004 \001(\006\022\027\n\017creator_steamid"
  "\030\005 \001(\006\022\031\n\021video_description\030\006 \001(\t\022\021\n\tliv"
  "e_time\030\007 \001(\r\022\021\n\tlength_ms\030\010 \001(\r\022\026\n\016thumb"
  "nail_path\030\t \001(\t\"p\n*CSteamTV_GetBroadcast"
  "ChannelClips_Response\022*\n\005clips\030\001 \003(\0132\033.C"
  "SteamTV_BroadcastClipInfo\022\026\n\016thumbnail_h"
  "ost\030\002 \001(\t\"W\n\'CSteamTV_ReportBroadcastCha"
  "nnel_Request\022\034\n\024broadcast_channel_id\030\001 \001"
  "(\006\022\016\n\006reason\030\002 \001(\t\"*\n(CSteamTV_ReportBro"
  "adcastChannel_Response\"O\n/CSteamTV_GetBr"
  "oadcastChannelInteraction_Request\022\034\n\024bro"
  "adcast_channel_id\030\001 \001(\006\"^\n0CSteamTV_GetB"
  "roadcastChannelInteraction_Response\022\023\n\013i"
  "s_followed\030\001 \001(\010\022\025\n\ris_subscribed\030\002 \001(\010\""
  "}\n\031CSteamTV_GetGames_Request\022\r\n\005appid\030\001 "
  "\001(\r\022B\n\talgorithm\030\002 \001(\0162\023.EGetGamesAlgori"
  "thm:\032EGetGamesAlgorithm_Default\022\r\n\005count"
  "\030\003 \001(\r\"\265\001\n\rCSteamTV_Game\022\r\n\005appid\030\001 \001(\r\022"
  "\014\n\004name\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\017\n\007viewers\030"
  "\004 \001(\004\022+\n\010channels\030\005 \003(\0132\031.GetBroadcastCh"
  "annelEntry\022\024\n\014release_date\030\006 \001(\t\022\021\n\tdeve"
  "loper\030\007 \001(\t\022\021\n\tpublisher\030\010 \001(\t\"=\n\032CSteam"
  "TV_GetGames_Response\022\037\n\007results\030\001 \003(\0132\016."
  "CSteamTV_Game\"\206\001\n\034CSteamTV_GetChannels_R"
  "equest\022H\n\talgorithm\030\001 \001(\0162\026.EGetChannels"
  "Algorithm:\035EGetChannelsAlgorithm_Default"
  "\022\r\n\005count\030\002 \001(\r\022\r\n\005appid\030\003 \001(\r\"K\n\035CSteam"
  "TV_GetChannels_Response\022*\n\007results\030\001 \003(\013"
  "2\031.GetBroadcastChannelEntry\"\207\001\n\033CSteamTV"
  "_AddChatBan_Request\022\034\n\024broadcast_channel"
  "_id\030\001 \001(\006\022\027\n\017chatter_steamid\030\002 \001(\006\022\020\n\010du"
  "ration\030\003 \001(\r\022\021\n\tpermanent\030\004 \001(\010\022\014\n\004undo\030"
  "\005 \001(\010\"\036\n\034CSteamTV_AddChatBan_Response\"<\n"
  "\034CSteamTV_GetChatBans_Request\022\034\n\024broadca"
  "st_channel_id\030\001 \001(\006\"z\n\020CSteamTV_ChatBan\022"
  "\026\n\016issuer_steamid\030\001 \001(\006\022\027\n\017chatter_steam"
  "id\030\002 \001(\006\022\024\n\014time_expires\030\003 \001(\t\022\021\n\tperman"
  "ent\030\004 \001(\010\022\014\n\004name\030\005 \001(\t\"C\n\035CSteamTV_GetC"
  "hatBans_Response\022\"\n\007results\030\001 \003(\0132\021.CSte"
  "amTV_ChatBan\"j\n!CSteamTV_AddChatModerato"
  "r_Request\022\034\n\024broadcast_channel_id\030\001 \001(\006\022"
  "\031\n\021moderator_steamid\030\002 \001(\006\022\014\n\004undo\030\003 \001(\010"
  "\"$\n\"CSteamTV_AddChatModerator_Response\"B"
  "\n\"CSteamTV_GetChatModerators_Request\022\034\n\024"
  "broadcast_channel_id\030\001 \001(\006\"7\n\026CSteamTV_C"
  "hatModerator\022\017\n\007steamid\030\001 \001(\006\022\014\n\004name\030\002 "
  "\001(\t\"O\n#CSteamTV_GetChatModerators_Respon"
  "se\022(\n\007results\030\001 \003(\0132\027.CSteamTV_ChatModer"
  "ator\"W\n\033CSteamTV_AddWordBan_Request\022\034\n\024b"
  "roadcast_channel_id\030\001 \001(\006\022\014\n\004word\030\002 \001(\t\022"
  "\014\n\004undo\030\003 \001(\010\"\036\n\034CSteamTV_AddWordBan_Res"
  "ponse\"<\n\034CSteamTV_GetWordBans_Request\022\034\n"
  "\024broadcast_channel_id\030\001 \001(\006\"0\n\035CSteamTV_"
  "GetWordBans_Response\022\017\n\007results\030\001 \003(\t\"9\n"
  "\031CSteamTV_JoinChat_Request\022\034\n\024broadcast_"
  "channel_id\030\001 \001(\006\"a\n\032CSteamTV_JoinChat_Re"
  "sponse\022\017\n\007chat_id\030\001 \001(\006\022\031\n\021view_url_temp"
  "late\030\002 \001(\t\022\027\n\017flair_group_ids\030\003 \003(\004\"\'\n\027C"
  "SteamTV_Search_Request\022\014\n\004term\030\001 \001(\t\"F\n\030"
  "CSteamTV_Search_Response\022*\n\007results\030\001 \003("
  "\0132\031.GetBroadcastChannelEntry\")\n\'CSteamTV"
  "_GetSteamTVUserSettings_Request\"g\n(CStea"
  "mTV_GetSteamTVUserSettings_Response\022\031\n\021s"
  "tream_live_email\030\001 \001(\010\022 \n\030stream_live_no"
  "tification\030\002 \001(\010\"f\n\'CSteamTV_SetSteamTVU"
  "serSettings_Request\022\031\n\021stream_live_email"
  "\030\001 \001(\010\022 \n\030stream_live_notification\030\002 \001(\010"
  "\"*\n(CSteamTV_SetSteamTVUserSettings_Resp"
  "onse\")\n\'CSteamTV_GetMyBroadcastChannels_"
  "Request\"V\n(CSteamTV_GetMyBroadcastChanne"
  "ls_Response\022*\n\007results\030\001 \003(\0132\031.GetBroadc"
  "astChannelEntry\"&\n$CSteamTV_GetHomePageC"
  "ontents_Request\"S\n\"CSteamTV_HomePageTemp"
  "late_Takeover\022-\n\nbroadcasts\030\001 \003(\0132\031.GetB"
  "roadcastChannelEntry\"s\n$CSteamTV_HomePag"
  "eTemplate_SingleGame\022-\n\nbroadcasts\030\001 \003(\013"
  "2\031.GetBroadcastChannelEntry\022\r\n\005appid\030\002 \001"
  "(\r\022\r\n\005title\030\003 \001(\t\"_\n\rGameListEntry\022\r\n\005ap"
  "pid\030\001 \001(\r\022\021\n\tgame_name\030\002 \001(\t\022,\n\tbroadcas"
  "t\030\003 \001(\0132\031.GetBroadcastChannelEntry\"T\n\"CS"
  "teamTV_HomePageTemplate_GameList\022\037\n\007entr"
  "ies\030\001 \003(\0132\016.GameListEntry\022\r\n\005title\030\002 \001(\t"
  "\"f\n&CSteamTV_HomePageTemplate_QuickExplo"
  "re\022-\n\nbroadcasts\030\001 \003(\0132\031.GetBroadcastCha"
  "nnelEntry\022\r\n\005title\030\002 \001(\t\"f\n&CSteamTV_Hom"
  "ePageTemplate_ConveyorBelt\022-\n\nbroadcasts"
  "\030\001 \003(\0132\031.GetBroadcastChannelEntry\022\r\n\005tit"
  "le\030\002 \001(\t\"z\n$CSteamTV_HomePageTemplate_Wa"
  "tchParty\022,\n\tbroadcast\030\001 \001(\0132\031.GetBroadca"
  "stChannelEntry\022\r\n\005title\030\002 \001(\t\022\025\n\rchat_gr"
  "oup_id\030\003 \001(\004\"b\n#CSteamTV_HomePageTemplat"
  "e_Developer\022,\n\tbroadcast\030\001 \001(\0132\031.GetBroa"
  "dcastChannelEntry\022\r\n\005title\030\002 \001(\t\"0\n\037CSte"
  "amTV_HomePageTemplate_Event\022\r\n\005title\030\001 \001"
  "(\t\"\276\004\n\033CSteamTV_HomePageContentRow\022P\n\rte"
  "mplate_type\030\001 \001(\0162\030.ESteamTVContentTempl"
  "ate:\037ESteamTVContentTemplate_Invalid\0225\n\010"
  "takeover\030\002 \001(\0132#.CSteamTV_HomePageTempla"
  "te_Takeover\022:\n\013single_game\030\003 \001(\0132%.CStea"
  "mTV_HomePageTemplate_SingleGame\0226\n\tgame_"
  "list\030\004 \001(\0132#.CSteamTV_HomePageTemplate_G"
  "ameList\022<\n\013quicexplore\030\005 \001(\0132\'.CSteamTV_"
  "HomePageTemplate_QuickExplore\022>\n\rconveyo"
  "r_belt\030\006 \001(\0132\'.CSteamTV_HomePageTemplate"
  "_ConveyorBelt\022:\n\013watch_party\030\007 \001(\0132%.CSt"
  "eamTV_HomePageTemplate_WatchParty\0227\n\tdev"
  "eloper\030\010 \001(\0132$.CSteamTV_HomePageTemplate"
  "_Developer\022/\n\005event\030\t \001(\0132 .CSteamTV_Hom"
  "ePageTemplate_Event\"S\n%CSteamTV_GetHomeP"
  "ageContents_Response\022*\n\004rows\030\001 \003(\0132\034.CSt"
  "eamTV_HomePageContentRow\"M\n!CSteamTV_App"
  "Cheer_SingleCheerType\022\022\n\ncheer_type\030\001 \001("
  "\r\022\024\n\014cheer_amount\030\002 \001(\r\"x\n\031CSteamTV_AppC"
  "heer_Request\022\016\n\006app_id\030\001 \001(\r\022\027\n\017cheer_ta"
  "rget_id\030\002 \001(\006\0222\n\006cheers\030\003 \003(\0132\".CSteamTV"
  "_AppCheer_SingleCheerType\":\n\032CSteamTV_Ap"
  "pCheer_Response\022\034\n\024aggregation_delay_ms\030"
  "\001 \001(\r*\374\001\n\023EBroadcastImageType\022\034\n\030EBroadc"
  "astImageType_None\020\000\022\037\n\033EBroadcastImageTy"
  "pe_Offline\020\001\022\037\n\033EBroadcastImageType_Stan"
  "dby\020\002\022\036\n\032EBroadcastImageType_Avatar\020\003\022\037\n"
  "\033EBroadcastImageType_Summary\020\004\022\"\n\036EBroad"
  "castImageType_Background\020\005\022 \n\034EBroadcast"
  "ImageType_Emoticon\020\006*z\n\022EGetGamesAlgorit"
  "hm\022\036\n\032EGetGamesAlgorithm_Default\020\001\022!\n\035EG"
  "etGamesAlgorithm_MostPlayed\020\002\022!\n\035EGetGam"
  "esAlgorithm_PopularNew\020\003*\313\001\n\025EGetChannel"
  "sAlgorithm\022!\n\035EGetChannelsAlgorithm_Defa"
  "ult\020\001\022!\n\035EGetChannelsAlgorithm_Friends\020\002"
  "\022\"\n\036EGetChannelsAlgorithm_Featured\020\003\022#\n\037"
  "EGetChannelsAlgorithm_Developer\020\004\022#\n\037EGe"
  "tChannelsAlgorithm_Following\020\005*\370\002\n\027EStea"
  "mTVContentTemplate\022#\n\037ESteamTVContentTem"
  "plate_Invalid\020\000\022$\n ESteamTVContentTempla"
  "te_Takeover\020\001\022&\n\"ESteamTVContentTemplate"
  "_SingleGame\020\002\022$\n ESteamTVContentTemplate"
  "_GameList\020\003\022(\n$ESteamTVContentTemplate_Q"
  "uickExplore\020\004\022(\n$ESteamTVContentTemplate"
  "_ConveyorBelt\020\005\022&\n\"ESteamTVContentTempla"
  "te_WatchParty\020\006\022%\n!ESteamTVContentTempla"
  "te_Developer\020\007\022!\n\035ESteamTVContentTemplat"
  "e_Event\020\0102\352\031\n\007SteamTV\022m\n\026CreateBroadcast"
  "Channel\022(.CSteamTV_CreateBroadcastChanne"
  "l_Request\032).CSteamTV_CreateBroadcastChan"
  "nel_Response\022j\n\025GetBroadcastChannelID\022\'."
  "CSteamTV_GetBroadcastChannelID_Request\032("
  ".CSteamTV_GetBroadcastChannelID_Response"
  "\022y\n\032SetBroadcastChannelProfile\022,.CSteamT"
  "V_SetBroadcastChannelProfile_Request\032-.C"
  "SteamTV_SetBroadcastChannelProfile_Respo"
  "nse\022y\n\032GetBroadcastChannelProfile\022,.CSte"
  "amTV_GetBroadcastChannelProfile_Request\032"
  "-.CSteamTV_GetBroadcastChannelProfile_Re"
  "sponse\022s\n\030SetBroadcastChannelImage\022*.CSt"
  "eamTV_SetBroadcastChannelImage_Request\032+"
  ".CSteamTV_SetBroadcastChannelImage_Respo"
  "nse\022v\n\031GetBroadcastChannelImages\022+.CStea"
  "mTV_GetBroadcastChannelImages_Request\032,."
  "CSteamTV_GetBroadcastChannelImages_Respo"
  "nse\022\205\001\n\036SetBroadcastChannelLinkRegions\0220"
  ".CSteamTV_SetBroadcastChannelLinkRegions"
  "_Request\0321.CSteamTV_SetBroadcastChannelL"
  "inkRegions_Response\022s\n\030GetBroadcastChann"
  "elLinks\022*.CSteamTV_GetBroadcastChannelLi"
  "nks_Request\032+.CSteamTV_GetBroadcastChann"
  "elLinks_Response\022\210\001\n\037GetBroadcastChannel"
  "Broadcasters\0221.CSteamTV_GetBroadcastChan"
  "nelBroadcasters_Request\0322.CSteamTV_GetBr"
  "oadcastChannelBroadcasters_Response\022d\n\023G"
  "etFollowedChannels\022%.CSteamTV_GetFollowe"
  "dChannels_Request\032&.CSteamTV_GetFollowed"
  "Channels_Response\022j\n\025GetSubscribedChanne"
  "ls\022\'.CSteamTV_GetSubscribedChannels_Requ"
  "est\032(.CSteamTV_GetSubscribedChannels_Res"
  "ponse\022v\n\031GetBroadcastChannelStatus\022+.CSt"
  "eamTV_GetBroadcastChannelStatus_Request\032"
  ",.CSteamTV_GetBroadcastChannelStatus_Res"
  "ponse\022m\n\026FollowBroadcastChannel\022(.CSteam"
  "TV_FollowBroadcastChannel_Request\032).CSte"
  "amTV_FollowBroadcastChannel_Response\022v\n\031"
  "SubscribeBroadcastChannel\022+.CSteamTV_Sub"
  "scribeBroadcastChannel_Request\032,.CSteamT"
  "V_SubscribeBroadcastChannel_Response\022s\n\030"
  "GetBroadcastChannelClips\022*.CSteamTV_GetB"
  "roadcastChannelClips_Request\032+.CSteamTV_"
  "GetBroadcastChannelClips_Response\022m\n\026Rep"
  "ortBroadcastChannel\022(.CSteamTV_ReportBro"
  "adcastChannel_Request\032).CSteamTV_ReportB"
  "roadcastChannel_Response\022\205\001\n\036GetBroadcas"
  "tChannelInteraction\0220.CSteamTV_GetBroadc"
  "astChannelInteraction_Request\0321.CSteamTV"
  "_GetBroadcastChannelInteraction_Response"
  "\022C\n\010GetGames\022\032.CSteamTV_GetGames_Request"
  "\032\033.CSteamTV_GetGames_Response\022L\n\013GetChan"
  "nels\022\035.CSteamTV_GetChannels_Request\032\036.CS"
  "teamTV_GetChannels_Response\022I\n\nAddChatBa"
  "n\022\034.CSteamTV_AddChatBan_Request\032\035.CSteam"
  "TV_AddChatBan_Response\022L\n\013GetChatBans\022\035."
  "CSteamTV_GetChatBans_Request\032\036.CSteamTV_"
  "GetChatBans_Response\022[\n\020AddChatModerator"
  "\022\".CSteamTV_AddChatModerator_Request\032#.C"
  "SteamTV_AddChatModerator_Response\022^\n\021Get"
  "ChatModerators\022#.CSteamTV_GetChatModerat"
  "ors_Request\032$.CSteamTV_GetChatModerators"
  "_Response\022I\n\nAddWordBan\022\034.CSteamTV_AddWo"
  "rdBan_Request\032\035.CSteamTV_AddWordBan_Resp"
  "onse\022L\n\013GetWordBans\022\035.CSteamTV_GetWordBa"
  "ns_Request\032\036.CSteamTV_GetWordBans_Respon"
  "se\022C\n\010JoinChat\022\032.CSteamTV_JoinChat_Reque"
  "st\032\033.CSteamTV_JoinChat_Response\022=\n\006Searc"
  "h\022\030.CSteamTV_Search_Request\032\031.CSteamTV_S"
  "earch_Response\022m\n\026GetSteamTVUserSettings"
  "\022(.CSteamTV_GetSteamTVUserSettings_Reque"
  "st\032).CSteamTV_GetSteamTVUserSettings_Res"
  "ponse\022m\n\026SetSteamTVUserSettings\022(.CSteam"
  "TV_SetSteamTVUserSettings_Request\032).CSte"
  "amTV_SetSteamTVUserSettings_Response\022m\n\026"
  "GetMyBroadcastChannels\022(.CSteamTV_GetMyB"
  "roadcastChannels_Request\032).CSteamTV_GetM"
  "yBroadcastChannels_Response\022d\n\023GetHomePa"
  "geContents\022%.CSteamTV_GetHomePageContent"
  "s_Request\032&.CSteamTV_GetHomePageContents"
  "_Response\022C\n\010AppCheer\022\032.CSteamTV_AppChee"
  "r_Request\032\033.CSteamTV_AppCheer_ResponseB\035"
  "\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto = {
  false, false, 13149, descriptor_table_protodef_steammessages_5fsteamtv_2esteamclient_2eproto, "steammessages_steamtv.steamclient.proto", 
  &descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto_once, descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto_deps, 3, 84,
  schemas, file_default_instances, TableStruct_steammessages_5fsteamtv_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fsteamtv_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fsteamtv_2esteamclient_2eproto(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastImageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[0];
}
bool EBroadcastImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGetGamesAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[1];
}
bool EGetGamesAlgorithm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGetChannelsAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[2];
}
bool EGetChannelsAlgorithm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamTVContentTemplate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[3];
}
bool ESteamTVContentTemplate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSteamTV_CreateBroadcastChannel_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_CreateBroadcastChannel_Request>()._has_bits_);
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_CreateBroadcastChannel_Request::CSteamTV_CreateBroadcastChannel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_CreateBroadcastChannel_Request)
}
CSteamTV_CreateBroadcastChannel_Request::CSteamTV_CreateBroadcastChannel_Request(const CSteamTV_CreateBroadcastChannel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_CreateBroadcastChannel_Request)
}

void CSteamTV_CreateBroadcastChannel_Request::SharedCtor() {
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_CreateBroadcastChannel_Request::~CSteamTV_CreateBroadcastChannel_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_CreateBroadcastChannel_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_CreateBroadcastChannel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_CreateBroadcastChannel_Request::ArenaDtor(void* object) {
  CSteamTV_CreateBroadcastChannel_Request* _this = reinterpret_cast< CSteamTV_CreateBroadcastChannel_Request* >(object);
  (void)_this;
}
void CSteamTV_CreateBroadcastChannel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_CreateBroadcastChannel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_CreateBroadcastChannel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_CreateBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unique_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_CreateBroadcastChannel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_CreateBroadcastChannel_Request.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_CreateBroadcastChannel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_CreateBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_CreateBroadcastChannel_Request.unique_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_CreateBroadcastChannel_Request)
  return target;
}

size_t CSteamTV_CreateBroadcastChannel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_CreateBroadcastChannel_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string unique_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_CreateBroadcastChannel_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_CreateBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_CreateBroadcastChannel_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_CreateBroadcastChannel_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_CreateBroadcastChannel_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_CreateBroadcastChannel_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_CreateBroadcastChannel_Request::MergeFrom(const CSteamTV_CreateBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_CreateBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unique_name()) {
    _internal_set_unique_name(from._internal_unique_name());
  }
}

void CSteamTV_CreateBroadcastChannel_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_CreateBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_CreateBroadcastChannel_Request::CopyFrom(const CSteamTV_CreateBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_CreateBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_CreateBroadcastChannel_Request::IsInitialized() const {
  return true;
}

void CSteamTV_CreateBroadcastChannel_Request::InternalSwap(CSteamTV_CreateBroadcastChannel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_CreateBroadcastChannel_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_CreateBroadcastChannel_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_CreateBroadcastChannel_Response>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_CreateBroadcastChannel_Response::CSteamTV_CreateBroadcastChannel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_CreateBroadcastChannel_Response)
}
CSteamTV_CreateBroadcastChannel_Response::CSteamTV_CreateBroadcastChannel_Response(const CSteamTV_CreateBroadcastChannel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_CreateBroadcastChannel_Response)
}

void CSteamTV_CreateBroadcastChannel_Response::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_CreateBroadcastChannel_Response::~CSteamTV_CreateBroadcastChannel_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_CreateBroadcastChannel_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_CreateBroadcastChannel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_CreateBroadcastChannel_Response::ArenaDtor(void* object) {
  CSteamTV_CreateBroadcastChannel_Response* _this = reinterpret_cast< CSteamTV_CreateBroadcastChannel_Response* >(object);
  (void)_this;
}
void CSteamTV_CreateBroadcastChannel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_CreateBroadcastChannel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_CreateBroadcastChannel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_CreateBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_CreateBroadcastChannel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_CreateBroadcastChannel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_CreateBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_CreateBroadcastChannel_Response)
  return target;
}

size_t CSteamTV_CreateBroadcastChannel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_CreateBroadcastChannel_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_CreateBroadcastChannel_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_CreateBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_CreateBroadcastChannel_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_CreateBroadcastChannel_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_CreateBroadcastChannel_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_CreateBroadcastChannel_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_CreateBroadcastChannel_Response::MergeFrom(const CSteamTV_CreateBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_CreateBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_CreateBroadcastChannel_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_CreateBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_CreateBroadcastChannel_Response::CopyFrom(const CSteamTV_CreateBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_CreateBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_CreateBroadcastChannel_Response::IsInitialized() const {
  return true;
}

void CSteamTV_CreateBroadcastChannel_Response::InternalSwap(CSteamTV_CreateBroadcastChannel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_CreateBroadcastChannel_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelID_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelID_Request>()._has_bits_);
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelID_Request::CSteamTV_GetBroadcastChannelID_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelID_Request)
}
CSteamTV_GetBroadcastChannelID_Request::CSteamTV_GetBroadcastChannelID_Request(const CSteamTV_GetBroadcastChannelID_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelID_Request)
}

void CSteamTV_GetBroadcastChannelID_Request::SharedCtor() {
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_GetBroadcastChannelID_Request::~CSteamTV_GetBroadcastChannelID_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelID_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelID_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelID_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelID_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelID_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelID_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelID_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelID_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelID_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unique_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelID_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelID_Request.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelID_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelID_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelID_Request.unique_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelID_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelID_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelID_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string unique_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelID_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelID_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelID_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelID_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelID_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelID_Request::MergeFrom(const CSteamTV_GetBroadcastChannelID_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unique_name()) {
    _internal_set_unique_name(from._internal_unique_name());
  }
}

void CSteamTV_GetBroadcastChannelID_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelID_Request::CopyFrom(const CSteamTV_GetBroadcastChannelID_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelID_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelID_Request::InternalSwap(CSteamTV_GetBroadcastChannelID_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelID_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelID_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelID_Response>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamTV_GetBroadcastChannelID_Response::CSteamTV_GetBroadcastChannelID_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelID_Response)
}
CSteamTV_GetBroadcastChannelID_Response::CSteamTV_GetBroadcastChannelID_Response(const CSteamTV_GetBroadcastChannelID_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelID_Response)
}

void CSteamTV_GetBroadcastChannelID_Response::SharedCtor() {
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(steamid_));
}

CSteamTV_GetBroadcastChannelID_Response::~CSteamTV_GetBroadcastChannelID_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelID_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelID_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelID_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelID_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelID_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelID_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelID_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelID_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelID_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unique_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelID_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string unique_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelID_Response.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelID_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelID_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string unique_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelID_Response.unique_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unique_name(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelID_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelID_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelID_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string unique_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_name());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelID_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelID_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelID_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelID_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelID_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelID_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelID_Response::MergeFrom(const CSteamTV_GetBroadcastChannelID_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelID_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_name(from._internal_unique_name());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelID_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelID_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelID_Response::CopyFrom(const CSteamTV_GetBroadcastChannelID_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelID_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelID_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelID_Response::InternalSwap(CSteamTV_GetBroadcastChannelID_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelID_Response, steamid_)
      + sizeof(CSteamTV_GetBroadcastChannelID_Response::steamid_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelID_Response, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelID_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelProfile_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetBroadcastChannelProfile_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avatar_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_panels(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSteamTV_SetBroadcastChannelProfile_Request::CSteamTV_SetBroadcastChannelProfile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelProfile_Request)
}
CSteamTV_SetBroadcastChannelProfile_Request::CSteamTV_SetBroadcastChannelProfile_Request(const CSteamTV_SetBroadcastChannelProfile_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headline()) {
    headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headline(), 
      GetArena());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_summary()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArena());
  }
  avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatar_hash()) {
    avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_hash(), 
      GetArena());
  }
  schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schedule()) {
    schedule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schedule(), 
      GetArena());
  }
  rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rules()) {
    rules_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rules(), 
      GetArena());
  }
  panels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_panels()) {
    panels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_panels(), 
      GetArena());
  }
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelProfile_Request)
}

void CSteamTV_SetBroadcastChannelProfile_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
panels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_SetBroadcastChannelProfile_Request::~CSteamTV_SetBroadcastChannelProfile_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelProfile_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelProfile_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rules_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  panels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_SetBroadcastChannelProfile_Request::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelProfile_Request* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelProfile_Request* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelProfile_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelProfile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelProfile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelProfile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      summary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      avatar_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      schedule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      rules_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      panels_.ClearNonDefaultToEmpty();
    }
  }
  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelProfile_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.summary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string avatar_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_avatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.avatar_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string schedule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.schedule");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rules = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rules();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.rules");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string panels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_panels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelProfile_Request.panels");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelProfile_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelProfile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  // optional string headline = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headline().data(), static_cast<int>(this->_internal_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.headline");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_headline(), target);
  }

  // optional string summary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.summary");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_summary(), target);
  }

  // optional string avatar_hash = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_hash().data(), static_cast<int>(this->_internal_avatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.avatar_hash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar_hash(), target);
  }

  // optional string schedule = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schedule().data(), static_cast<int>(this->_internal_schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.schedule");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_schedule(), target);
  }

  // optional string rules = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rules().data(), static_cast<int>(this->_internal_rules().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.rules");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rules(), target);
  }

  // optional string panels = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_panels().data(), static_cast<int>(this->_internal_panels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelProfile_Request.panels");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_panels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelProfile_Request)
  return target;
}

size_t CSteamTV_SetBroadcastChannelProfile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelProfile_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string language = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string headline = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headline());
    }

    // optional string summary = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_summary());
    }

    // optional string avatar_hash = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_hash());
    }

    // optional string schedule = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schedule());
    }

    // optional string rules = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rules());
    }

    // optional string panels = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_panels());
    }

  }
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelProfile_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelProfile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelProfile_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelProfile_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelProfile_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelProfile_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelProfile_Request::MergeFrom(const CSteamTV_SetBroadcastChannelProfile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelProfile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_summary(from._internal_summary());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_avatar_hash(from._internal_avatar_hash());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_schedule(from._internal_schedule());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_rules(from._internal_rules());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_panels(from._internal_panels());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_SetBroadcastChannelProfile_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelProfile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelProfile_Request::CopyFrom(const CSteamTV_SetBroadcastChannelProfile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelProfile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelProfile_Request::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelProfile_Request::InternalSwap(CSteamTV_SetBroadcastChannelProfile_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headline_.Swap(&other->headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  summary_.Swap(&other->summary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_hash_.Swap(&other->avatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schedule_.Swap(&other->schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rules_.Swap(&other->rules_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  panels_.Swap(&other->panels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelProfile_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelProfile_Response::_Internal {
 public:
};

CSteamTV_SetBroadcastChannelProfile_Response::CSteamTV_SetBroadcastChannelProfile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelProfile_Response)
}
CSteamTV_SetBroadcastChannelProfile_Response::CSteamTV_SetBroadcastChannelProfile_Response(const CSteamTV_SetBroadcastChannelProfile_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelProfile_Response)
}

void CSteamTV_SetBroadcastChannelProfile_Response::SharedCtor() {
}

CSteamTV_SetBroadcastChannelProfile_Response::~CSteamTV_SetBroadcastChannelProfile_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelProfile_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelProfile_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SetBroadcastChannelProfile_Response::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelProfile_Response* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelProfile_Response* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelProfile_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelProfile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelProfile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelProfile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelProfile_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelProfile_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelProfile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelProfile_Response)
  return target;
}

size_t CSteamTV_SetBroadcastChannelProfile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelProfile_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelProfile_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelProfile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelProfile_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelProfile_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelProfile_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelProfile_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelProfile_Response::MergeFrom(const CSteamTV_SetBroadcastChannelProfile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelProfile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_SetBroadcastChannelProfile_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelProfile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelProfile_Response::CopyFrom(const CSteamTV_SetBroadcastChannelProfile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelProfile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelProfile_Response::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelProfile_Response::InternalSwap(CSteamTV_SetBroadcastChannelProfile_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelProfile_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelProfile_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelProfile_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelProfile_Request::CSteamTV_GetBroadcastChannelProfile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelProfile_Request)
}
CSteamTV_GetBroadcastChannelProfile_Request::CSteamTV_GetBroadcastChannelProfile_Request(const CSteamTV_GetBroadcastChannelProfile_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelProfile_Request)
}

void CSteamTV_GetBroadcastChannelProfile_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelProfile_Request::~CSteamTV_GetBroadcastChannelProfile_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelProfile_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelProfile_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelProfile_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelProfile_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelProfile_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelProfile_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelProfile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelProfile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelProfile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelProfile_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelProfile_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelProfile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelProfile_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelProfile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelProfile_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelProfile_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelProfile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelProfile_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelProfile_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelProfile_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelProfile_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelProfile_Request::MergeFrom(const CSteamTV_GetBroadcastChannelProfile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelProfile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelProfile_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelProfile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelProfile_Request::CopyFrom(const CSteamTV_GetBroadcastChannelProfile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelProfile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelProfile_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelProfile_Request::InternalSwap(CSteamTV_GetBroadcastChannelProfile_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelProfile_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelProfile_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelProfile_Response>()._has_bits_);
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_panels(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_partnered(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CSteamTV_GetBroadcastChannelProfile_Response::CSteamTV_GetBroadcastChannelProfile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelProfile_Response)
}
CSteamTV_GetBroadcastChannelProfile_Response::CSteamTV_GetBroadcastChannelProfile_Response(const CSteamTV_GetBroadcastChannelProfile_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headline()) {
    headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headline(), 
      GetArena());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_summary()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArena());
  }
  schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schedule()) {
    schedule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schedule(), 
      GetArena());
  }
  rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rules()) {
    rules_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rules(), 
      GetArena());
  }
  panels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_panels()) {
    panels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_panels(), 
      GetArena());
  }
  ::memcpy(&owner_steamid_, &from.owner_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_partnered_) -
    reinterpret_cast<char*>(&owner_steamid_)) + sizeof(is_partnered_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelProfile_Response)
}

void CSteamTV_GetBroadcastChannelProfile_Response::SharedCtor() {
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
panels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_partnered_) -
    reinterpret_cast<char*>(&owner_steamid_)) + sizeof(is_partnered_));
}

CSteamTV_GetBroadcastChannelProfile_Response::~CSteamTV_GetBroadcastChannelProfile_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelProfile_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelProfile_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rules_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  panels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelProfile_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelProfile_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelProfile_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelProfile_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelProfile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelProfile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelProfile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      unique_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      summary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      schedule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      rules_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      panels_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&owner_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_partnered_) -
        reinterpret_cast<char*>(&owner_steamid_)) + sizeof(is_partnered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelProfile_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 owner_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_owner_steamid(&has_bits);
          owner_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string summary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.summary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string schedule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.schedule");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rules = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rules();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.rules");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string panels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_panels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelProfile_Response.panels");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_partnered = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_partnered(&has_bits);
          is_partnered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelProfile_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelProfile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.unique_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_name(), target);
  }

  // optional fixed64 owner_steamid = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_owner_steamid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string language = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // optional string headline = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headline().data(), static_cast<int>(this->_internal_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.headline");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_headline(), target);
  }

  // optional string summary = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.summary");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_summary(), target);
  }

  // optional string schedule = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_schedule().data(), static_cast<int>(this->_internal_schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.schedule");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_schedule(), target);
  }

  // optional string rules = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rules().data(), static_cast<int>(this->_internal_rules().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.rules");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rules(), target);
  }

  // optional string panels = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_panels().data(), static_cast<int>(this->_internal_panels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelProfile_Response.panels");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_panels(), target);
  }

  // optional bool is_partnered = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_partnered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelProfile_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelProfile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelProfile_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_name());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string language = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string headline = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headline());
    }

    // optional string summary = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_summary());
    }

    // optional string schedule = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_schedule());
    }

    // optional string rules = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rules());
    }

    // optional string panels = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_panels());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed64 owner_steamid = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional bool is_partnered = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelProfile_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelProfile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelProfile_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelProfile_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelProfile_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelProfile_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelProfile_Response::MergeFrom(const CSteamTV_GetBroadcastChannelProfile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelProfile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_name(from._internal_unique_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_summary(from._internal_summary());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_schedule(from._internal_schedule());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_rules(from._internal_rules());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_panels(from._internal_panels());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      owner_steamid_ = from.owner_steamid_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_partnered_ = from.is_partnered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelProfile_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelProfile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelProfile_Response::CopyFrom(const CSteamTV_GetBroadcastChannelProfile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelProfile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelProfile_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelProfile_Response::InternalSwap(CSteamTV_GetBroadcastChannelProfile_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headline_.Swap(&other->headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  summary_.Swap(&other->summary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schedule_.Swap(&other->schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rules_.Swap(&other->rules_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  panels_.Swap(&other->panels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelProfile_Response, is_partnered_)
      + sizeof(CSteamTV_GetBroadcastChannelProfile_Response::is_partnered_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelProfile_Response, owner_steamid_)>(
          reinterpret_cast<char*>(&owner_steamid_),
          reinterpret_cast<char*>(&other->owner_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelProfile_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelImage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetBroadcastChannelImage_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_file_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CSteamTV_SetBroadcastChannelImage_Request::CSteamTV_SetBroadcastChannelImage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelImage_Request)
}
CSteamTV_SetBroadcastChannelImage_Request::CSteamTV_SetBroadcastChannelImage_Request(const CSteamTV_SetBroadcastChannelImage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_extension()) {
    file_extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_extension(), 
      GetArena());
  }
  file_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_hash()) {
    file_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_hash(), 
      GetArena());
  }
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelImage_Request)
}

void CSteamTV_SetBroadcastChannelImage_Request::SharedCtor() {
file_extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
}

CSteamTV_SetBroadcastChannelImage_Request::~CSteamTV_SetBroadcastChannelImage_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelImage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelImage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_SetBroadcastChannelImage_Request::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelImage_Request* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelImage_Request* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelImage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelImage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelImage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelImage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_extension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_hash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(file_size_));
  }
  undo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelImage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .EBroadcastImageType image_type = 2 [default = EBroadcastImageType_None];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastImageType_IsValid(val))) {
            _internal_set_image_type(static_cast<::EBroadcastImageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 image_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_image_index(&has_bits);
          image_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_image_width(&has_bits);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_image_height(&has_bits);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_file_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelImage_Request.file_extension");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_file_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelImage_Request.file_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool undo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_undo(&has_bits);
          undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelImage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelImage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional .EBroadcastImageType image_type = 2 [default = EBroadcastImageType_None];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_image_type(), target);
  }

  // optional uint32 image_index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_image_index(), target);
  }

  // optional uint32 image_width = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_image_width(), target);
  }

  // optional uint32 image_height = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_image_height(), target);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_size(), target);
  }

  // optional string file_extension = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_extension().data(), static_cast<int>(this->_internal_file_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelImage_Request.file_extension");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_file_extension(), target);
  }

  // optional string file_hash = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_hash().data(), static_cast<int>(this->_internal_file_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelImage_Request.file_hash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_file_hash(), target);
  }

  // optional bool undo = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelImage_Request)
  return target;
}

size_t CSteamTV_SetBroadcastChannelImage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelImage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_extension = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_extension());
    }

    // optional string file_hash = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_hash());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .EBroadcastImageType image_type = 2 [default = EBroadcastImageType_None];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_type());
    }

    // optional uint32 image_index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_index());
    }

    // optional uint32 image_width = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_width());
    }

    // optional uint32 image_height = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_height());
    }

    // optional uint32 file_size = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_size());
    }

  }
  // optional bool undo = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelImage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelImage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelImage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelImage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelImage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelImage_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelImage_Request::MergeFrom(const CSteamTV_SetBroadcastChannelImage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelImage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_extension(from._internal_file_extension());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_hash(from._internal_file_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      image_type_ = from.image_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      image_index_ = from.image_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      image_height_ = from.image_height_;
    }
    if (cached_has_bits & 0x00000080u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_undo(from._internal_undo());
  }
}

void CSteamTV_SetBroadcastChannelImage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelImage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelImage_Request::CopyFrom(const CSteamTV_SetBroadcastChannelImage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelImage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelImage_Request::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelImage_Request::InternalSwap(CSteamTV_SetBroadcastChannelImage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_extension_.Swap(&other->file_extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_hash_.Swap(&other->file_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_SetBroadcastChannelImage_Request, undo_)
      + sizeof(CSteamTV_SetBroadcastChannelImage_Request::undo_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_SetBroadcastChannelImage_Request, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelImage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelImage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetBroadcastChannelImage_Response>()._has_bits_);
  static void set_has_replace_image_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_SetBroadcastChannelImage_Response::CSteamTV_SetBroadcastChannelImage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelImage_Response)
}
CSteamTV_SetBroadcastChannelImage_Response::CSteamTV_SetBroadcastChannelImage_Response(const CSteamTV_SetBroadcastChannelImage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replace_image_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_replace_image_hash()) {
    replace_image_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_replace_image_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelImage_Response)
}

void CSteamTV_SetBroadcastChannelImage_Response::SharedCtor() {
replace_image_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_SetBroadcastChannelImage_Response::~CSteamTV_SetBroadcastChannelImage_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelImage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelImage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  replace_image_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_SetBroadcastChannelImage_Response::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelImage_Response* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelImage_Response* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelImage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelImage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelImage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelImage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    replace_image_hash_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelImage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string replace_image_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_replace_image_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelImage_Response.replace_image_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelImage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelImage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string replace_image_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replace_image_hash().data(), static_cast<int>(this->_internal_replace_image_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelImage_Response.replace_image_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_replace_image_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelImage_Response)
  return target;
}

size_t CSteamTV_SetBroadcastChannelImage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelImage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string replace_image_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_replace_image_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelImage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelImage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelImage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelImage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelImage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelImage_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelImage_Response::MergeFrom(const CSteamTV_SetBroadcastChannelImage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelImage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_replace_image_hash()) {
    _internal_set_replace_image_hash(from._internal_replace_image_hash());
  }
}

void CSteamTV_SetBroadcastChannelImage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelImage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelImage_Response::CopyFrom(const CSteamTV_SetBroadcastChannelImage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelImage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelImage_Response::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelImage_Response::InternalSwap(CSteamTV_SetBroadcastChannelImage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  replace_image_hash_.Swap(&other->replace_image_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelImage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelImages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelImages_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelImages_Request::CSteamTV_GetBroadcastChannelImages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelImages_Request)
}
CSteamTV_GetBroadcastChannelImages_Request::CSteamTV_GetBroadcastChannelImages_Request(const CSteamTV_GetBroadcastChannelImages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      image_types_(from.image_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelImages_Request)
}

void CSteamTV_GetBroadcastChannelImages_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelImages_Request::~CSteamTV_GetBroadcastChannelImages_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelImages_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelImages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelImages_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelImages_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelImages_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelImages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelImages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelImages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelImages_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_types_.Clear();
  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelImages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .EBroadcastImageType image_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EBroadcastImageType_IsValid(val))) {
              _internal_add_image_types(static_cast<::EBroadcastImageType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_image_types(), ptr, ctx, ::EBroadcastImageType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelImages_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelImages_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // repeated .EBroadcastImageType image_types = 2;
  for (int i = 0, n = this->_internal_image_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_image_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelImages_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelImages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelImages_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EBroadcastImageType image_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_image_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_image_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelImages_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelImages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelImages_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelImages_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelImages_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelImages_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelImages_Request::MergeFrom(const CSteamTV_GetBroadcastChannelImages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelImages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_types_.MergeFrom(from.image_types_);
  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelImages_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelImages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelImages_Request::CopyFrom(const CSteamTV_GetBroadcastChannelImages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelImages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelImages_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelImages_Request::InternalSwap(CSteamTV_GetBroadcastChannelImages_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_types_.InternalSwap(&other->image_types_);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelImages_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelImages_Response_Images::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelImages_Response_Images>()._has_bits_);
  static void set_has_image_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamTV_GetBroadcastChannelImages_Response_Images::CSteamTV_GetBroadcastChannelImages_Response_Images(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelImages_Response.Images)
}
CSteamTV_GetBroadcastChannelImages_Response_Images::CSteamTV_GetBroadcastChannelImages_Response_Images(const CSteamTV_GetBroadcastChannelImages_Response_Images& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_path()) {
    image_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_path(), 
      GetArena());
  }
  ::memcpy(&image_type_, &from.image_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_index_) -
    reinterpret_cast<char*>(&image_type_)) + sizeof(image_index_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelImages_Response.Images)
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::SharedCtor() {
image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_index_) -
    reinterpret_cast<char*>(&image_type_)) + sizeof(image_index_));
}

CSteamTV_GetBroadcastChannelImages_Response_Images::~CSteamTV_GetBroadcastChannelImages_Response_Images() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelImages_Response.Images)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelImages_Response_Images* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelImages_Response_Images* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelImages_Response_Images::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelImages_Response_Images::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&image_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_index_) -
        reinterpret_cast<char*>(&image_type_)) + sizeof(image_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelImages_Response_Images::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EBroadcastImageType image_type = 1 [default = EBroadcastImageType_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastImageType_IsValid(val))) {
            _internal_set_image_type(static_cast<::EBroadcastImageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string image_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelImages_Response.Images.image_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_image_index(&has_bits);
          image_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelImages_Response_Images::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EBroadcastImageType image_type = 1 [default = EBroadcastImageType_None];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_image_type(), target);
  }

  // optional string image_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_path().data(), static_cast<int>(this->_internal_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelImages_Response.Images.image_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_path(), target);
  }

  // optional uint32 image_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_image_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelImages_Response.Images)
  return target;
}

size_t CSteamTV_GetBroadcastChannelImages_Response_Images::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string image_path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_path());
    }

    // optional .EBroadcastImageType image_type = 1 [default = EBroadcastImageType_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_type());
    }

    // optional uint32 image_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelImages_Response_Images* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelImages_Response_Images>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelImages_Response.Images)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelImages_Response.Images)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::MergeFrom(const CSteamTV_GetBroadcastChannelImages_Response_Images& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_path(from._internal_image_path());
    }
    if (cached_has_bits & 0x00000002u) {
      image_type_ = from.image_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      image_index_ = from.image_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::CopyFrom(const CSteamTV_GetBroadcastChannelImages_Response_Images& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelImages_Response.Images)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelImages_Response_Images::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelImages_Response_Images::InternalSwap(CSteamTV_GetBroadcastChannelImages_Response_Images* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_path_.Swap(&other->image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelImages_Response_Images, image_index_)
      + sizeof(CSteamTV_GetBroadcastChannelImages_Response_Images::image_index_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelImages_Response_Images, image_type_)>(
          reinterpret_cast<char*>(&image_type_),
          reinterpret_cast<char*>(&other->image_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelImages_Response_Images::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelImages_Response::_Internal {
 public:
};

CSteamTV_GetBroadcastChannelImages_Response::CSteamTV_GetBroadcastChannelImages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  images_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelImages_Response)
}
CSteamTV_GetBroadcastChannelImages_Response::CSteamTV_GetBroadcastChannelImages_Response(const CSteamTV_GetBroadcastChannelImages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelImages_Response)
}

void CSteamTV_GetBroadcastChannelImages_Response::SharedCtor() {
}

CSteamTV_GetBroadcastChannelImages_Response::~CSteamTV_GetBroadcastChannelImages_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelImages_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelImages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelImages_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelImages_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelImages_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelImages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelImages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelImages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelImages_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelImages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_GetBroadcastChannelImages_Response.Images images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelImages_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelImages_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelImages_Response.Images images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelImages_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelImages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelImages_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelImages_Response.Images images = 1;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelImages_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelImages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelImages_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelImages_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelImages_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelImages_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelImages_Response::MergeFrom(const CSteamTV_GetBroadcastChannelImages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelImages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
}

void CSteamTV_GetBroadcastChannelImages_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelImages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelImages_Response::CopyFrom(const CSteamTV_GetBroadcastChannelImages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelImages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelImages_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelImages_Response::InternalSwap(CSteamTV_GetBroadcastChannelImages_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelImages_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetBroadcastChannelLinkRegions_Request_Links>()._has_bits_);
  static void set_has_linindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lindescription(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
}
CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links(const CSteamTV_SetBroadcastChannelLinkRegions_Request_Links& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  lindescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lindescription()) {
    lindescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lindescription(), 
      GetArena());
  }
  ::memcpy(&linindex_, &from.linindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lindescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
}

CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::~CSteamTV_SetBroadcastChannelLinkRegions_Request_Links() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lindescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelLinkRegions_Request_Links* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelLinkRegions_Request_Links* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lindescription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&linindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 linindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_linindex(&has_bits);
          linindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelLinkRegions_Request.Links.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lindescription = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lindescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_SetBroadcastChannelLinkRegions_Request.Links.lindescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 linindex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_linindex(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelLinkRegions_Request.Links.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string lindescription = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lindescription().data(), static_cast<int>(this->_internal_lindescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_SetBroadcastChannelLinkRegions_Request.Links.lindescription");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lindescription(), target);
  }

  // optional uint32 left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_left(), target);
  }

  // optional uint32 top = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_top(), target);
  }

  // optional uint32 width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // optional uint32 height = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  return target;
}

size_t CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string lindescription = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lindescription());
    }

    // optional uint32 linindex = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_linindex());
    }

    // optional uint32 left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_left());
    }

    // optional uint32 top = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top());
    }

    // optional uint32 width = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelLinkRegions_Request_Links* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelLinkRegions_Request_Links>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::MergeFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Request_Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lindescription(from._internal_lindescription());
    }
    if (cached_has_bits & 0x00000004u) {
      linindex_ = from.linindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000010u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::CopyFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Request_Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::InternalSwap(CSteamTV_SetBroadcastChannelLinkRegions_Request_Links* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lindescription_.Swap(&other->lindescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, height_)
      + sizeof(CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::height_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_SetBroadcastChannelLinkRegions_Request_Links, linindex_)>(
          reinterpret_cast<char*>(&linindex_),
          reinterpret_cast<char*>(&other->linindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelLinkRegions_Request_Links::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelLinkRegions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetBroadcastChannelLinkRegions_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_SetBroadcastChannelLinkRegions_Request::CSteamTV_SetBroadcastChannelLinkRegions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Request)
}
CSteamTV_SetBroadcastChannelLinkRegions_Request::CSteamTV_SetBroadcastChannelLinkRegions_Request(const CSteamTV_SetBroadcastChannelLinkRegions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Request)
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_SetBroadcastChannelLinkRegions_Request::~CSteamTV_SetBroadcastChannelLinkRegions_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelLinkRegions_Request* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelLinkRegions_Request* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelLinkRegions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelLinkRegions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelLinkRegions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CSteamTV_SetBroadcastChannelLinkRegions_Request.Links links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelLinkRegions_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // repeated .CSteamTV_SetBroadcastChannelLinkRegions_Request.Links links = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  return target;
}

size_t CSteamTV_SetBroadcastChannelLinkRegions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_SetBroadcastChannelLinkRegions_Request.Links links = 2;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelLinkRegions_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelLinkRegions_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelLinkRegions_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelLinkRegions_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::MergeFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::CopyFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelLinkRegions_Request::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Request::InternalSwap(CSteamTV_SetBroadcastChannelLinkRegions_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  links_.InternalSwap(&other->links_);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelLinkRegions_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetBroadcastChannelLinkRegions_Response::_Internal {
 public:
};

CSteamTV_SetBroadcastChannelLinkRegions_Response::CSteamTV_SetBroadcastChannelLinkRegions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Response)
}
CSteamTV_SetBroadcastChannelLinkRegions_Response::CSteamTV_SetBroadcastChannelLinkRegions_Response(const CSteamTV_SetBroadcastChannelLinkRegions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetBroadcastChannelLinkRegions_Response)
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::SharedCtor() {
}

CSteamTV_SetBroadcastChannelLinkRegions_Response::~CSteamTV_SetBroadcastChannelLinkRegions_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::ArenaDtor(void* object) {
  CSteamTV_SetBroadcastChannelLinkRegions_Response* _this = reinterpret_cast< CSteamTV_SetBroadcastChannelLinkRegions_Response* >(object);
  (void)_this;
}
void CSteamTV_SetBroadcastChannelLinkRegions_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetBroadcastChannelLinkRegions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetBroadcastChannelLinkRegions_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetBroadcastChannelLinkRegions_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  return target;
}

size_t CSteamTV_SetBroadcastChannelLinkRegions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetBroadcastChannelLinkRegions_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetBroadcastChannelLinkRegions_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetBroadcastChannelLinkRegions_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetBroadcastChannelLinkRegions_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::MergeFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::CopyFrom(const CSteamTV_SetBroadcastChannelLinkRegions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetBroadcastChannelLinkRegions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetBroadcastChannelLinkRegions_Response::IsInitialized() const {
  return true;
}

void CSteamTV_SetBroadcastChannelLinkRegions_Response::InternalSwap(CSteamTV_SetBroadcastChannelLinkRegions_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetBroadcastChannelLinkRegions_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelLinks_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelLinks_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelLinks_Request::CSteamTV_GetBroadcastChannelLinks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelLinks_Request)
}
CSteamTV_GetBroadcastChannelLinks_Request::CSteamTV_GetBroadcastChannelLinks_Request(const CSteamTV_GetBroadcastChannelLinks_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelLinks_Request)
}

void CSteamTV_GetBroadcastChannelLinks_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelLinks_Request::~CSteamTV_GetBroadcastChannelLinks_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelLinks_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelLinks_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelLinks_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelLinks_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelLinks_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelLinks_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelLinks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelLinks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelLinks_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelLinks_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelLinks_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelLinks_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelLinks_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelLinks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelLinks_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelLinks_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelLinks_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelLinks_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelLinks_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelLinks_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelLinks_Request::MergeFrom(const CSteamTV_GetBroadcastChannelLinks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelLinks_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelLinks_Request::CopyFrom(const CSteamTV_GetBroadcastChannelLinks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelLinks_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelLinks_Request::InternalSwap(CSteamTV_GetBroadcastChannelLinks_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelLinks_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelLinks_Response_Links::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelLinks_Response_Links>()._has_bits_);
  static void set_has_linindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lindescription(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSteamTV_GetBroadcastChannelLinks_Response_Links::CSteamTV_GetBroadcastChannelLinks_Response_Links(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelLinks_Response.Links)
}
CSteamTV_GetBroadcastChannelLinks_Response_Links::CSteamTV_GetBroadcastChannelLinks_Response_Links(const CSteamTV_GetBroadcastChannelLinks_Response_Links& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  lindescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lindescription()) {
    lindescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lindescription(), 
      GetArena());
  }
  ::memcpy(&linindex_, &from.linindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelLinks_Response.Links)
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lindescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
}

CSteamTV_GetBroadcastChannelLinks_Response_Links::~CSteamTV_GetBroadcastChannelLinks_Response_Links() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lindescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelLinks_Response_Links* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelLinks_Response_Links* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelLinks_Response_Links::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelLinks_Response_Links::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lindescription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&linindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&linindex_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelLinks_Response_Links::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 linindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_linindex(&has_bits);
          linindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelLinks_Response.Links.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lindescription = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lindescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelLinks_Response.Links.lindescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelLinks_Response_Links::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 linindex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_linindex(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelLinks_Response.Links.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string lindescription = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lindescription().data(), static_cast<int>(this->_internal_lindescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelLinks_Response.Links.lindescription");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lindescription(), target);
  }

  // optional uint32 left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_left(), target);
  }

  // optional uint32 top = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_top(), target);
  }

  // optional uint32 width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // optional uint32 height = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  return target;
}

size_t CSteamTV_GetBroadcastChannelLinks_Response_Links::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string lindescription = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lindescription());
    }

    // optional uint32 linindex = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_linindex());
    }

    // optional uint32 left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_left());
    }

    // optional uint32 top = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top());
    }

    // optional uint32 width = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelLinks_Response_Links* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelLinks_Response_Links>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelLinks_Response.Links)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelLinks_Response.Links)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::MergeFrom(const CSteamTV_GetBroadcastChannelLinks_Response_Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lindescription(from._internal_lindescription());
    }
    if (cached_has_bits & 0x00000004u) {
      linindex_ = from.linindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000010u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::CopyFrom(const CSteamTV_GetBroadcastChannelLinks_Response_Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Response.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelLinks_Response_Links::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelLinks_Response_Links::InternalSwap(CSteamTV_GetBroadcastChannelLinks_Response_Links* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lindescription_.Swap(&other->lindescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelLinks_Response_Links, height_)
      + sizeof(CSteamTV_GetBroadcastChannelLinks_Response_Links::height_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelLinks_Response_Links, linindex_)>(
          reinterpret_cast<char*>(&linindex_),
          reinterpret_cast<char*>(&other->linindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelLinks_Response_Links::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelLinks_Response::_Internal {
 public:
};

CSteamTV_GetBroadcastChannelLinks_Response::CSteamTV_GetBroadcastChannelLinks_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelLinks_Response)
}
CSteamTV_GetBroadcastChannelLinks_Response::CSteamTV_GetBroadcastChannelLinks_Response(const CSteamTV_GetBroadcastChannelLinks_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelLinks_Response)
}

void CSteamTV_GetBroadcastChannelLinks_Response::SharedCtor() {
}

CSteamTV_GetBroadcastChannelLinks_Response::~CSteamTV_GetBroadcastChannelLinks_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelLinks_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelLinks_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelLinks_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelLinks_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelLinks_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelLinks_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelLinks_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelLinks_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelLinks_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelLinks_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_GetBroadcastChannelLinks_Response.Links links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelLinks_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelLinks_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelLinks_Response.Links links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelLinks_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelLinks_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelLinks_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelLinks_Response.Links links = 1;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelLinks_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelLinks_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelLinks_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelLinks_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelLinks_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelLinks_Response::MergeFrom(const CSteamTV_GetBroadcastChannelLinks_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelLinks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
}

void CSteamTV_GetBroadcastChannelLinks_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelLinks_Response::CopyFrom(const CSteamTV_GetBroadcastChannelLinks_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelLinks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelLinks_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelLinks_Response::InternalSwap(CSteamTV_GetBroadcastChannelLinks_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelLinks_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelBroadcasters_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelBroadcasters_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelBroadcasters_Request::CSteamTV_GetBroadcastChannelBroadcasters_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Request)
}
CSteamTV_GetBroadcastChannelBroadcasters_Request::CSteamTV_GetBroadcastChannelBroadcasters_Request(const CSteamTV_GetBroadcastChannelBroadcasters_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Request)
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelBroadcasters_Request::~CSteamTV_GetBroadcastChannelBroadcasters_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelBroadcasters_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelBroadcasters_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelBroadcasters_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelBroadcasters_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelBroadcasters_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelBroadcasters_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelBroadcasters_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelBroadcasters_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelBroadcasters_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelBroadcasters_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelBroadcasters_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::MergeFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::CopyFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelBroadcasters_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Request::InternalSwap(CSteamTV_GetBroadcastChannelBroadcasters_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelBroadcasters_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtmp_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
}
CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster(const CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  rtmp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rtmp_token()) {
    rtmp_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtmp_token(), 
      GetArena());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rtmp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamid_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::~CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtmp_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rtmp_token_.ClearNonDefaultToEmpty();
    }
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rtmp_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rtmp_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster.rtmp_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string rtmp_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtmp_token().data(), static_cast<int>(this->_internal_rtmp_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster.rtmp_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rtmp_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  return target;
}

size_t CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string rtmp_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtmp_token());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::MergeFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rtmp_token(from._internal_rtmp_token());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::CopyFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::InternalSwap(CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rtmp_token_.Swap(&other->rtmp_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelBroadcasters_Response::_Internal {
 public:
};

CSteamTV_GetBroadcastChannelBroadcasters_Response::CSteamTV_GetBroadcastChannelBroadcasters_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcasters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Response)
}
CSteamTV_GetBroadcastChannelBroadcasters_Response::CSteamTV_GetBroadcastChannelBroadcasters_Response(const CSteamTV_GetBroadcastChannelBroadcasters_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broadcasters_(from.broadcasters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelBroadcasters_Response)
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::SharedCtor() {
}

CSteamTV_GetBroadcastChannelBroadcasters_Response::~CSteamTV_GetBroadcastChannelBroadcasters_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelBroadcasters_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelBroadcasters_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelBroadcasters_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelBroadcasters_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcasters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelBroadcasters_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster broadcasters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelBroadcasters_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster broadcasters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcasters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelBroadcasters_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster broadcasters = 1;
  total_size += 1UL * this->_internal_broadcasters_size();
  for (const auto& msg : this->broadcasters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelBroadcasters_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelBroadcasters_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelBroadcasters_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelBroadcasters_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::MergeFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcasters_.MergeFrom(from.broadcasters_);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::CopyFrom(const CSteamTV_GetBroadcastChannelBroadcasters_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelBroadcasters_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelBroadcasters_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelBroadcasters_Response::InternalSwap(CSteamTV_GetBroadcastChannelBroadcasters_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  broadcasters_.InternalSwap(&other->broadcasters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelBroadcasters_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetFollowedChannels_Request::_Internal {
 public:
};

CSteamTV_GetFollowedChannels_Request::CSteamTV_GetFollowedChannels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetFollowedChannels_Request)
}
CSteamTV_GetFollowedChannels_Request::CSteamTV_GetFollowedChannels_Request(const CSteamTV_GetFollowedChannels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetFollowedChannels_Request)
}

void CSteamTV_GetFollowedChannels_Request::SharedCtor() {
}

CSteamTV_GetFollowedChannels_Request::~CSteamTV_GetFollowedChannels_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetFollowedChannels_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetFollowedChannels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetFollowedChannels_Request::ArenaDtor(void* object) {
  CSteamTV_GetFollowedChannels_Request* _this = reinterpret_cast< CSteamTV_GetFollowedChannels_Request* >(object);
  (void)_this;
}
void CSteamTV_GetFollowedChannels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetFollowedChannels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetFollowedChannels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetFollowedChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetFollowedChannels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetFollowedChannels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetFollowedChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetFollowedChannels_Request)
  return target;
}

size_t CSteamTV_GetFollowedChannels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetFollowedChannels_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetFollowedChannels_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetFollowedChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetFollowedChannels_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetFollowedChannels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetFollowedChannels_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetFollowedChannels_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetFollowedChannels_Request::MergeFrom(const CSteamTV_GetFollowedChannels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetFollowedChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_GetFollowedChannels_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetFollowedChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetFollowedChannels_Request::CopyFrom(const CSteamTV_GetFollowedChannels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetFollowedChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetFollowedChannels_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetFollowedChannels_Request::InternalSwap(CSteamTV_GetFollowedChannels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetFollowedChannels_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBroadcastChannelEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBroadcastChannelEntry>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_views(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_followers(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_subscribers(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_background_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_featured(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_live(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reports(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_partnered(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

GetBroadcastChannelEntry::GetBroadcastChannelEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetBroadcastChannelEntry)
}
GetBroadcastChannelEntry::GetBroadcastChannelEntry(const GetBroadcastChannelEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArena());
  }
  headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headline()) {
    headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headline(), 
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatar_url()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArena());
  }
  background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_background_url()) {
    background_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_background_url(), 
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reports_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(reports_));
  // @@protoc_insertion_point(copy_constructor:GetBroadcastChannelEntry)
}

void GetBroadcastChannelEntry::SharedCtor() {
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reports_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(reports_));
}

GetBroadcastChannelEntry::~GetBroadcastChannelEntry() {
  // @@protoc_insertion_point(destructor:GetBroadcastChannelEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBroadcastChannelEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBroadcastChannelEntry::ArenaDtor(void* object) {
  GetBroadcastChannelEntry* _this = reinterpret_cast< GetBroadcastChannelEntry* >(object);
  (void)_this;
}
void GetBroadcastChannelEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBroadcastChannelEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBroadcastChannelEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBroadcastChannelEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      unique_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      avatar_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      background_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      language_.ClearNonDefaultToEmpty();
    }
  }
  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&viewers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_disabled_) -
        reinterpret_cast<char*>(&viewers_)) + sizeof(is_disabled_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&is_live_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reports_) -
        reinterpret_cast<char*>(&is_live_)) + sizeof(reports_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBroadcastChannelEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string unique_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 viewers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_viewers(&has_bits);
          viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 views = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_views(&has_bits);
          views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 followers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_followers(&has_bits);
          followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headline = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string avatar_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.avatar_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 broadcaster_steamid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 subscribers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_subscribers(&has_bits);
          subscribers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string background_url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_background_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.background_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_featured = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_featured(&has_bits);
          is_featured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_disabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_live = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_live(&has_bits);
          is_live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBroadcastChannelEntry.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reports = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_reports(&has_bits);
          reports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_partnered = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_partnered(&has_bits);
          is_partnered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBroadcastChannelEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBroadcastChannelEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string unique_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.unique_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unique_name(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 appid = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appid(), target);
  }

  // optional uint64 viewers = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_viewers(), target);
  }

  // optional uint64 views = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_views(), target);
  }

  // optional string thumbnail_url = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_thumbnail_url(), target);
  }

  // optional uint64 followers = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_followers(), target);
  }

  // optional string headline = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headline().data(), static_cast<int>(this->_internal_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.headline");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_headline(), target);
  }

  // optional string avatar_url = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.avatar_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_avatar_url(), target);
  }

  // optional fixed64 broadcaster_steamid = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_broadcaster_steamid(), target);
  }

  // optional uint64 subscribers = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_subscribers(), target);
  }

  // optional string background_url = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_url().data(), static_cast<int>(this->_internal_background_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.background_url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_background_url(), target);
  }

  // optional bool is_featured = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_featured(), target);
  }

  // optional bool is_disabled = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_disabled(), target);
  }

  // optional bool is_live = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_live(), target);
  }

  // optional string language = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GetBroadcastChannelEntry.language");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_language(), target);
  }

  // optional uint32 reports = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_reports(), target);
  }

  // optional bool is_partnered = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_partnered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBroadcastChannelEntry)
  return target;
}

size_t GetBroadcastChannelEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBroadcastChannelEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_name());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string thumbnail_url = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional string headline = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headline());
    }

    // optional string avatar_url = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

    // optional string background_url = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_url());
    }

    // optional string language = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 viewers = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_viewers());
    }

    // optional uint64 views = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_views());
    }

    // optional uint64 followers = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_followers());
    }

    // optional fixed64 broadcaster_steamid = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint64 subscribers = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscribers());
    }

    // optional uint32 appid = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool is_featured = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_disabled = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool is_live = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_partnered = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 reports = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reports());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBroadcastChannelEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetBroadcastChannelEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBroadcastChannelEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBroadcastChannelEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetBroadcastChannelEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetBroadcastChannelEntry)
    MergeFrom(*source);
  }
}

void GetBroadcastChannelEntry::MergeFrom(const GetBroadcastChannelEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetBroadcastChannelEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_name(from._internal_unique_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_avatar_url(from._internal_avatar_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_background_url(from._internal_background_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      viewers_ = from.viewers_;
    }
    if (cached_has_bits & 0x00000200u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000400u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000800u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00001000u) {
      subscribers_ = from.subscribers_;
    }
    if (cached_has_bits & 0x00002000u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_featured_ = from.is_featured_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_disabled_ = from.is_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      is_live_ = from.is_live_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_partnered_ = from.is_partnered_;
    }
    if (cached_has_bits & 0x00040000u) {
      reports_ = from.reports_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBroadcastChannelEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetBroadcastChannelEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBroadcastChannelEntry::CopyFrom(const GetBroadcastChannelEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBroadcastChannelEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBroadcastChannelEntry::IsInitialized() const {
  return true;
}

void GetBroadcastChannelEntry::InternalSwap(GetBroadcastChannelEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headline_.Swap(&other->headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  background_url_.Swap(&other->background_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBroadcastChannelEntry, reports_)
      + sizeof(GetBroadcastChannelEntry::reports_)
      - PROTOBUF_FIELD_OFFSET(GetBroadcastChannelEntry, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBroadcastChannelEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetFollowedChannels_Response::_Internal {
 public:
};

CSteamTV_GetFollowedChannels_Response::CSteamTV_GetFollowedChannels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetFollowedChannels_Response)
}
CSteamTV_GetFollowedChannels_Response::CSteamTV_GetFollowedChannels_Response(const CSteamTV_GetFollowedChannels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetFollowedChannels_Response)
}

void CSteamTV_GetFollowedChannels_Response::SharedCtor() {
}

CSteamTV_GetFollowedChannels_Response::~CSteamTV_GetFollowedChannels_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetFollowedChannels_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetFollowedChannels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetFollowedChannels_Response::ArenaDtor(void* object) {
  CSteamTV_GetFollowedChannels_Response* _this = reinterpret_cast< CSteamTV_GetFollowedChannels_Response* >(object);
  (void)_this;
}
void CSteamTV_GetFollowedChannels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetFollowedChannels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetFollowedChannels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetFollowedChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetFollowedChannels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetFollowedChannels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetFollowedChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetFollowedChannels_Response)
  return target;
}

size_t CSteamTV_GetFollowedChannels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetFollowedChannels_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetFollowedChannels_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetFollowedChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetFollowedChannels_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetFollowedChannels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetFollowedChannels_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetFollowedChannels_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetFollowedChannels_Response::MergeFrom(const CSteamTV_GetFollowedChannels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetFollowedChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetFollowedChannels_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetFollowedChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetFollowedChannels_Response::CopyFrom(const CSteamTV_GetFollowedChannels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetFollowedChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetFollowedChannels_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetFollowedChannels_Response::InternalSwap(CSteamTV_GetFollowedChannels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetFollowedChannels_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetSubscribedChannels_Request::_Internal {
 public:
};

CSteamTV_GetSubscribedChannels_Request::CSteamTV_GetSubscribedChannels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetSubscribedChannels_Request)
}
CSteamTV_GetSubscribedChannels_Request::CSteamTV_GetSubscribedChannels_Request(const CSteamTV_GetSubscribedChannels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetSubscribedChannels_Request)
}

void CSteamTV_GetSubscribedChannels_Request::SharedCtor() {
}

CSteamTV_GetSubscribedChannels_Request::~CSteamTV_GetSubscribedChannels_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetSubscribedChannels_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetSubscribedChannels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetSubscribedChannels_Request::ArenaDtor(void* object) {
  CSteamTV_GetSubscribedChannels_Request* _this = reinterpret_cast< CSteamTV_GetSubscribedChannels_Request* >(object);
  (void)_this;
}
void CSteamTV_GetSubscribedChannels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetSubscribedChannels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetSubscribedChannels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetSubscribedChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetSubscribedChannels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetSubscribedChannels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetSubscribedChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetSubscribedChannels_Request)
  return target;
}

size_t CSteamTV_GetSubscribedChannels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetSubscribedChannels_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetSubscribedChannels_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetSubscribedChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetSubscribedChannels_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetSubscribedChannels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetSubscribedChannels_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetSubscribedChannels_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetSubscribedChannels_Request::MergeFrom(const CSteamTV_GetSubscribedChannels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetSubscribedChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_GetSubscribedChannels_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetSubscribedChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetSubscribedChannels_Request::CopyFrom(const CSteamTV_GetSubscribedChannels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetSubscribedChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetSubscribedChannels_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetSubscribedChannels_Request::InternalSwap(CSteamTV_GetSubscribedChannels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetSubscribedChannels_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetSubscribedChannels_Response::_Internal {
 public:
};

CSteamTV_GetSubscribedChannels_Response::CSteamTV_GetSubscribedChannels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetSubscribedChannels_Response)
}
CSteamTV_GetSubscribedChannels_Response::CSteamTV_GetSubscribedChannels_Response(const CSteamTV_GetSubscribedChannels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetSubscribedChannels_Response)
}

void CSteamTV_GetSubscribedChannels_Response::SharedCtor() {
}

CSteamTV_GetSubscribedChannels_Response::~CSteamTV_GetSubscribedChannels_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetSubscribedChannels_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetSubscribedChannels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetSubscribedChannels_Response::ArenaDtor(void* object) {
  CSteamTV_GetSubscribedChannels_Response* _this = reinterpret_cast< CSteamTV_GetSubscribedChannels_Response* >(object);
  (void)_this;
}
void CSteamTV_GetSubscribedChannels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetSubscribedChannels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetSubscribedChannels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetSubscribedChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetSubscribedChannels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetSubscribedChannels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetSubscribedChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetSubscribedChannels_Response)
  return target;
}

size_t CSteamTV_GetSubscribedChannels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetSubscribedChannels_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetSubscribedChannels_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetSubscribedChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetSubscribedChannels_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetSubscribedChannels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetSubscribedChannels_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetSubscribedChannels_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetSubscribedChannels_Response::MergeFrom(const CSteamTV_GetSubscribedChannels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetSubscribedChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetSubscribedChannels_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetSubscribedChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetSubscribedChannels_Response::CopyFrom(const CSteamTV_GetSubscribedChannels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetSubscribedChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetSubscribedChannels_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetSubscribedChannels_Response::InternalSwap(CSteamTV_GetSubscribedChannels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetSubscribedChannels_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelStatus_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelStatus_Request::CSteamTV_GetBroadcastChannelStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelStatus_Request)
}
CSteamTV_GetBroadcastChannelStatus_Request::CSteamTV_GetBroadcastChannelStatus_Request(const CSteamTV_GetBroadcastChannelStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelStatus_Request)
}

void CSteamTV_GetBroadcastChannelStatus_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelStatus_Request::~CSteamTV_GetBroadcastChannelStatus_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelStatus_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelStatus_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelStatus_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelStatus_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelStatus_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelStatus_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelStatus_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelStatus_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelStatus_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelStatus_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelStatus_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelStatus_Request::MergeFrom(const CSteamTV_GetBroadcastChannelStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelStatus_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelStatus_Request::CopyFrom(const CSteamTV_GetBroadcastChannelStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelStatus_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelStatus_Request::InternalSwap(CSteamTV_GetBroadcastChannelStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelStatus_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelStatus_Response>()._has_bits_);
  static void set_has_is_live(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_views(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_followers(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_subscribers(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CSteamTV_GetBroadcastChannelStatus_Response::CSteamTV_GetBroadcastChannelStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelStatus_Response)
}
CSteamTV_GetBroadcastChannelStatus_Response::CSteamTV_GetBroadcastChannelStatus_Response(const CSteamTV_GetBroadcastChannelStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArena());
  }
  unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_name()) {
    unique_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_name(), 
      GetArena());
  }
  ::memcpy(&is_live_, &from.is_live_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_session_id_) -
    reinterpret_cast<char*>(&is_live_)) + sizeof(broadcast_session_id_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelStatus_Response)
}

void CSteamTV_GetBroadcastChannelStatus_Response::SharedCtor() {
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_live_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_session_id_) -
    reinterpret_cast<char*>(&is_live_)) + sizeof(broadcast_session_id_));
}

CSteamTV_GetBroadcastChannelStatus_Response::~CSteamTV_GetBroadcastChannelStatus_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelStatus_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelStatus_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelStatus_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelStatus_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_live_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcaster_steamid_) -
        reinterpret_cast<char*>(&is_live_)) + sizeof(broadcaster_steamid_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&followers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_session_id_) -
        reinterpret_cast<char*>(&followers_)) + sizeof(broadcast_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_live = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_live(&has_bits);
          is_live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 viewers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_viewers(&has_bits);
          viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 views = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_views(&has_bits);
          views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 broadcaster_steamid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelStatus_Response.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 followers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_followers(&has_bits);
          followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 subscribers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_subscribers(&has_bits);
          subscribers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unique_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_unique_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelStatus_Response.unique_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 broadcast_session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelStatus_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_live = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_live(), target);
  }

  // optional bool is_disabled = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_disabled(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional uint64 viewers = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_viewers(), target);
  }

  // optional uint64 views = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_views(), target);
  }

  // optional fixed64 broadcaster_steamid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_broadcaster_steamid(), target);
  }

  // optional string thumbnail_url = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelStatus_Response.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_thumbnail_url(), target);
  }

  // optional uint64 followers = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_followers(), target);
  }

  // optional uint64 subscribers = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_subscribers(), target);
  }

  // optional string unique_name = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_name().data(), static_cast<int>(this->_internal_unique_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelStatus_Response.unique_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_unique_name(), target);
  }

  // optional uint64 broadcast_session_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_broadcast_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelStatus_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelStatus_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string thumbnail_url = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional string unique_name = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_name());
    }

    // optional bool is_live = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_disabled = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint64 viewers = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_viewers());
    }

    // optional uint64 views = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_views());
    }

    // optional fixed64 broadcaster_steamid = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 followers = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_followers());
    }

    // optional uint64 subscribers = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscribers());
    }

    // optional uint64 broadcast_session_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_broadcast_session_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelStatus_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelStatus_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelStatus_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelStatus_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelStatus_Response::MergeFrom(const CSteamTV_GetBroadcastChannelStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_name(from._internal_unique_name());
    }
    if (cached_has_bits & 0x00000004u) {
      is_live_ = from.is_live_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      viewers_ = from.viewers_;
    }
    if (cached_has_bits & 0x00000040u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000200u) {
      subscribers_ = from.subscribers_;
    }
    if (cached_has_bits & 0x00000400u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelStatus_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelStatus_Response::CopyFrom(const CSteamTV_GetBroadcastChannelStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelStatus_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelStatus_Response::InternalSwap(CSteamTV_GetBroadcastChannelStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thumbnail_url_.Swap(&other->thumbnail_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unique_name_.Swap(&other->unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelStatus_Response, broadcast_session_id_)
      + sizeof(CSteamTV_GetBroadcastChannelStatus_Response::broadcast_session_id_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelStatus_Response, is_live_)>(
          reinterpret_cast<char*>(&is_live_),
          reinterpret_cast<char*>(&other->is_live_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelStatus_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_FollowBroadcastChannel_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_FollowBroadcastChannel_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_FollowBroadcastChannel_Request::CSteamTV_FollowBroadcastChannel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_FollowBroadcastChannel_Request)
}
CSteamTV_FollowBroadcastChannel_Request::CSteamTV_FollowBroadcastChannel_Request(const CSteamTV_FollowBroadcastChannel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_FollowBroadcastChannel_Request)
}

void CSteamTV_FollowBroadcastChannel_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
}

CSteamTV_FollowBroadcastChannel_Request::~CSteamTV_FollowBroadcastChannel_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_FollowBroadcastChannel_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_FollowBroadcastChannel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_FollowBroadcastChannel_Request::ArenaDtor(void* object) {
  CSteamTV_FollowBroadcastChannel_Request* _this = reinterpret_cast< CSteamTV_FollowBroadcastChannel_Request* >(object);
  (void)_this;
}
void CSteamTV_FollowBroadcastChannel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_FollowBroadcastChannel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_FollowBroadcastChannel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_FollowBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_FollowBroadcastChannel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool undo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_undo(&has_bits);
          undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_FollowBroadcastChannel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_FollowBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional bool undo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_FollowBroadcastChannel_Request)
  return target;
}

size_t CSteamTV_FollowBroadcastChannel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_FollowBroadcastChannel_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool undo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_FollowBroadcastChannel_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_FollowBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_FollowBroadcastChannel_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_FollowBroadcastChannel_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_FollowBroadcastChannel_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_FollowBroadcastChannel_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_FollowBroadcastChannel_Request::MergeFrom(const CSteamTV_FollowBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_FollowBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      undo_ = from.undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_FollowBroadcastChannel_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_FollowBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_FollowBroadcastChannel_Request::CopyFrom(const CSteamTV_FollowBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_FollowBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_FollowBroadcastChannel_Request::IsInitialized() const {
  return true;
}

void CSteamTV_FollowBroadcastChannel_Request::InternalSwap(CSteamTV_FollowBroadcastChannel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_FollowBroadcastChannel_Request, undo_)
      + sizeof(CSteamTV_FollowBroadcastChannel_Request::undo_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_FollowBroadcastChannel_Request, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_FollowBroadcastChannel_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_FollowBroadcastChannel_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_FollowBroadcastChannel_Response>()._has_bits_);
  static void set_has_is_followed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_FollowBroadcastChannel_Response::CSteamTV_FollowBroadcastChannel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_FollowBroadcastChannel_Response)
}
CSteamTV_FollowBroadcastChannel_Response::CSteamTV_FollowBroadcastChannel_Response(const CSteamTV_FollowBroadcastChannel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_followed_ = from.is_followed_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_FollowBroadcastChannel_Response)
}

void CSteamTV_FollowBroadcastChannel_Response::SharedCtor() {
is_followed_ = false;
}

CSteamTV_FollowBroadcastChannel_Response::~CSteamTV_FollowBroadcastChannel_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_FollowBroadcastChannel_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_FollowBroadcastChannel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_FollowBroadcastChannel_Response::ArenaDtor(void* object) {
  CSteamTV_FollowBroadcastChannel_Response* _this = reinterpret_cast< CSteamTV_FollowBroadcastChannel_Response* >(object);
  (void)_this;
}
void CSteamTV_FollowBroadcastChannel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_FollowBroadcastChannel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_FollowBroadcastChannel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_FollowBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_followed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_FollowBroadcastChannel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_followed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_followed(&has_bits);
          is_followed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_FollowBroadcastChannel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_FollowBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_followed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_followed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_FollowBroadcastChannel_Response)
  return target;
}

size_t CSteamTV_FollowBroadcastChannel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_FollowBroadcastChannel_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_followed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_FollowBroadcastChannel_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_FollowBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_FollowBroadcastChannel_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_FollowBroadcastChannel_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_FollowBroadcastChannel_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_FollowBroadcastChannel_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_FollowBroadcastChannel_Response::MergeFrom(const CSteamTV_FollowBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_FollowBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_followed()) {
    _internal_set_is_followed(from._internal_is_followed());
  }
}

void CSteamTV_FollowBroadcastChannel_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_FollowBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_FollowBroadcastChannel_Response::CopyFrom(const CSteamTV_FollowBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_FollowBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_FollowBroadcastChannel_Response::IsInitialized() const {
  return true;
}

void CSteamTV_FollowBroadcastChannel_Response::InternalSwap(CSteamTV_FollowBroadcastChannel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_followed_, other->is_followed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_FollowBroadcastChannel_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SubscribeBroadcastChannel_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SubscribeBroadcastChannel_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_SubscribeBroadcastChannel_Request::CSteamTV_SubscribeBroadcastChannel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SubscribeBroadcastChannel_Request)
}
CSteamTV_SubscribeBroadcastChannel_Request::CSteamTV_SubscribeBroadcastChannel_Request(const CSteamTV_SubscribeBroadcastChannel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SubscribeBroadcastChannel_Request)
}

void CSteamTV_SubscribeBroadcastChannel_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_SubscribeBroadcastChannel_Request::~CSteamTV_SubscribeBroadcastChannel_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_SubscribeBroadcastChannel_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SubscribeBroadcastChannel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SubscribeBroadcastChannel_Request::ArenaDtor(void* object) {
  CSteamTV_SubscribeBroadcastChannel_Request* _this = reinterpret_cast< CSteamTV_SubscribeBroadcastChannel_Request* >(object);
  (void)_this;
}
void CSteamTV_SubscribeBroadcastChannel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SubscribeBroadcastChannel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SubscribeBroadcastChannel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SubscribeBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SubscribeBroadcastChannel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SubscribeBroadcastChannel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SubscribeBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SubscribeBroadcastChannel_Request)
  return target;
}

size_t CSteamTV_SubscribeBroadcastChannel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SubscribeBroadcastChannel_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SubscribeBroadcastChannel_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SubscribeBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SubscribeBroadcastChannel_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SubscribeBroadcastChannel_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SubscribeBroadcastChannel_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SubscribeBroadcastChannel_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_SubscribeBroadcastChannel_Request::MergeFrom(const CSteamTV_SubscribeBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SubscribeBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_SubscribeBroadcastChannel_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SubscribeBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SubscribeBroadcastChannel_Request::CopyFrom(const CSteamTV_SubscribeBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SubscribeBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SubscribeBroadcastChannel_Request::IsInitialized() const {
  return true;
}

void CSteamTV_SubscribeBroadcastChannel_Request::InternalSwap(CSteamTV_SubscribeBroadcastChannel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SubscribeBroadcastChannel_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SubscribeBroadcastChannel_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SubscribeBroadcastChannel_Response>()._has_bits_);
  static void set_has_is_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_SubscribeBroadcastChannel_Response::CSteamTV_SubscribeBroadcastChannel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SubscribeBroadcastChannel_Response)
}
CSteamTV_SubscribeBroadcastChannel_Response::CSteamTV_SubscribeBroadcastChannel_Response(const CSteamTV_SubscribeBroadcastChannel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_subscribed_ = from.is_subscribed_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SubscribeBroadcastChannel_Response)
}

void CSteamTV_SubscribeBroadcastChannel_Response::SharedCtor() {
is_subscribed_ = false;
}

CSteamTV_SubscribeBroadcastChannel_Response::~CSteamTV_SubscribeBroadcastChannel_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_SubscribeBroadcastChannel_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SubscribeBroadcastChannel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SubscribeBroadcastChannel_Response::ArenaDtor(void* object) {
  CSteamTV_SubscribeBroadcastChannel_Response* _this = reinterpret_cast< CSteamTV_SubscribeBroadcastChannel_Response* >(object);
  (void)_this;
}
void CSteamTV_SubscribeBroadcastChannel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SubscribeBroadcastChannel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SubscribeBroadcastChannel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SubscribeBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_subscribed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SubscribeBroadcastChannel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_subscribed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_subscribed(&has_bits);
          is_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SubscribeBroadcastChannel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SubscribeBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_subscribed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_subscribed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SubscribeBroadcastChannel_Response)
  return target;
}

size_t CSteamTV_SubscribeBroadcastChannel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SubscribeBroadcastChannel_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_subscribed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SubscribeBroadcastChannel_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SubscribeBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SubscribeBroadcastChannel_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SubscribeBroadcastChannel_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SubscribeBroadcastChannel_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SubscribeBroadcastChannel_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_SubscribeBroadcastChannel_Response::MergeFrom(const CSteamTV_SubscribeBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SubscribeBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_subscribed()) {
    _internal_set_is_subscribed(from._internal_is_subscribed());
  }
}

void CSteamTV_SubscribeBroadcastChannel_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SubscribeBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SubscribeBroadcastChannel_Response::CopyFrom(const CSteamTV_SubscribeBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SubscribeBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SubscribeBroadcastChannel_Response::IsInitialized() const {
  return true;
}

void CSteamTV_SubscribeBroadcastChannel_Response::InternalSwap(CSteamTV_SubscribeBroadcastChannel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_subscribed_, other->is_subscribed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SubscribeBroadcastChannel_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelClips_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelClips_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelClips_Request::CSteamTV_GetBroadcastChannelClips_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelClips_Request)
}
CSteamTV_GetBroadcastChannelClips_Request::CSteamTV_GetBroadcastChannelClips_Request(const CSteamTV_GetBroadcastChannelClips_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelClips_Request)
}

void CSteamTV_GetBroadcastChannelClips_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelClips_Request::~CSteamTV_GetBroadcastChannelClips_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelClips_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelClips_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelClips_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelClips_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelClips_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelClips_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelClips_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelClips_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelClips_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelClips_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelClips_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelClips_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelClips_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelClips_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelClips_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelClips_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelClips_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelClips_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelClips_Request::MergeFrom(const CSteamTV_GetBroadcastChannelClips_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelClips_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelClips_Request::CopyFrom(const CSteamTV_GetBroadcastChannelClips_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelClips_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelClips_Request::InternalSwap(CSteamTV_GetBroadcastChannelClips_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelClips_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_BroadcastClipInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_BroadcastClipInfo>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creator_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_video_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_live_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbnail_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_BroadcastClipInfo::CSteamTV_BroadcastClipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_BroadcastClipInfo)
}
CSteamTV_BroadcastClipInfo::CSteamTV_BroadcastClipInfo(const CSteamTV_BroadcastClipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_video_description()) {
    video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_description(), 
      GetArena());
  }
  thumbnail_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_path()) {
    thumbnail_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_path(), 
      GetArena());
  }
  ::memcpy(&broadcast_clip_id_, &from.broadcast_clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_ms_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(length_ms_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_BroadcastClipInfo)
}

void CSteamTV_BroadcastClipInfo::SharedCtor() {
video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnail_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_ms_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(length_ms_));
}

CSteamTV_BroadcastClipInfo::~CSteamTV_BroadcastClipInfo() {
  // @@protoc_insertion_point(destructor:CSteamTV_BroadcastClipInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_BroadcastClipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  video_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_BroadcastClipInfo::ArenaDtor(void* object) {
  CSteamTV_BroadcastClipInfo* _this = reinterpret_cast< CSteamTV_BroadcastClipInfo* >(object);
  (void)_this;
}
void CSteamTV_BroadcastClipInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_BroadcastClipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_BroadcastClipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_BroadcastClipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      video_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&broadcast_clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&live_time_) -
        reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(live_time_));
  }
  length_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_BroadcastClipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 broadcast_clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 broadcaster_steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 creator_steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_creator_steamid(&has_bits);
          creator_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string video_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_video_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_BroadcastClipInfo.video_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 live_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_live_time(&has_bits);
          live_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_length_ms(&has_bits);
          length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_thumbnail_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_BroadcastClipInfo.thumbnail_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_BroadcastClipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_BroadcastClipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 broadcast_clip_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional fixed64 broadcaster_steamid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_broadcaster_steamid(), target);
  }

  // optional fixed64 creator_steamid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_creator_steamid(), target);
  }

  // optional string video_description = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_description().data(), static_cast<int>(this->_internal_video_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_BroadcastClipInfo.video_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_video_description(), target);
  }

  // optional uint32 live_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_live_time(), target);
  }

  // optional uint32 length_ms = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_length_ms(), target);
  }

  // optional string thumbnail_path = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_path().data(), static_cast<int>(this->_internal_thumbnail_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_BroadcastClipInfo.thumbnail_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_thumbnail_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_BroadcastClipInfo)
  return target;
}

size_t CSteamTV_BroadcastClipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_BroadcastClipInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string video_description = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_description());
    }

    // optional string thumbnail_path = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_path());
    }

    // optional uint64 broadcast_clip_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_broadcast_clip_id());
    }

    // optional uint64 channel_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_id());
    }

    // optional fixed64 broadcaster_steamid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 creator_steamid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 live_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_live_time());
    }

  }
  // optional uint32 length_ms = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_BroadcastClipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_BroadcastClipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_BroadcastClipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_BroadcastClipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_BroadcastClipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_BroadcastClipInfo)
    MergeFrom(*source);
  }
}

void CSteamTV_BroadcastClipInfo::MergeFrom(const CSteamTV_BroadcastClipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_BroadcastClipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_description(from._internal_video_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnail_path(from._internal_thumbnail_path());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_clip_id_ = from.broadcast_clip_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      creator_steamid_ = from.creator_steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      live_time_ = from.live_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_length_ms(from._internal_length_ms());
  }
}

void CSteamTV_BroadcastClipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_BroadcastClipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_BroadcastClipInfo::CopyFrom(const CSteamTV_BroadcastClipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_BroadcastClipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_BroadcastClipInfo::IsInitialized() const {
  return true;
}

void CSteamTV_BroadcastClipInfo::InternalSwap(CSteamTV_BroadcastClipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_description_.Swap(&other->video_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_path_.Swap(&other->thumbnail_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_BroadcastClipInfo, length_ms_)
      + sizeof(CSteamTV_BroadcastClipInfo::length_ms_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_BroadcastClipInfo, broadcast_clip_id_)>(
          reinterpret_cast<char*>(&broadcast_clip_id_),
          reinterpret_cast<char*>(&other->broadcast_clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_BroadcastClipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelClips_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelClips_Response>()._has_bits_);
  static void set_has_thumbnail_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelClips_Response::CSteamTV_GetBroadcastChannelClips_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelClips_Response)
}
CSteamTV_GetBroadcastChannelClips_Response::CSteamTV_GetBroadcastChannelClips_Response(const CSteamTV_GetBroadcastChannelClips_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      clips_(from.clips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thumbnail_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_host()) {
    thumbnail_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_host(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelClips_Response)
}

void CSteamTV_GetBroadcastChannelClips_Response::SharedCtor() {
thumbnail_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_GetBroadcastChannelClips_Response::~CSteamTV_GetBroadcastChannelClips_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelClips_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelClips_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  thumbnail_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_GetBroadcastChannelClips_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelClips_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelClips_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelClips_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelClips_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelClips_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thumbnail_host_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelClips_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_BroadcastClipInfo clips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thumbnail_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetBroadcastChannelClips_Response.thumbnail_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelClips_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_BroadcastClipInfo clips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_clips(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_host().data(), static_cast<int>(this->_internal_thumbnail_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetBroadcastChannelClips_Response.thumbnail_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thumbnail_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelClips_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelClips_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelClips_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_BroadcastClipInfo clips = 1;
  total_size += 1UL * this->_internal_clips_size();
  for (const auto& msg : this->clips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string thumbnail_host = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelClips_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelClips_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelClips_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelClips_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelClips_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelClips_Response::MergeFrom(const CSteamTV_GetBroadcastChannelClips_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clips_.MergeFrom(from.clips_);
  if (from._internal_has_thumbnail_host()) {
    _internal_set_thumbnail_host(from._internal_thumbnail_host());
  }
}

void CSteamTV_GetBroadcastChannelClips_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelClips_Response::CopyFrom(const CSteamTV_GetBroadcastChannelClips_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelClips_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelClips_Response::InternalSwap(CSteamTV_GetBroadcastChannelClips_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clips_.InternalSwap(&other->clips_);
  thumbnail_host_.Swap(&other->thumbnail_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelClips_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_ReportBroadcastChannel_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_ReportBroadcastChannel_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_ReportBroadcastChannel_Request::CSteamTV_ReportBroadcastChannel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_ReportBroadcastChannel_Request)
}
CSteamTV_ReportBroadcastChannel_Request::CSteamTV_ReportBroadcastChannel_Request(const CSteamTV_ReportBroadcastChannel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_ReportBroadcastChannel_Request)
}

void CSteamTV_ReportBroadcastChannel_Request::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_ReportBroadcastChannel_Request::~CSteamTV_ReportBroadcastChannel_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_ReportBroadcastChannel_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_ReportBroadcastChannel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_ReportBroadcastChannel_Request::ArenaDtor(void* object) {
  CSteamTV_ReportBroadcastChannel_Request* _this = reinterpret_cast< CSteamTV_ReportBroadcastChannel_Request* >(object);
  (void)_this;
}
void CSteamTV_ReportBroadcastChannel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_ReportBroadcastChannel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_ReportBroadcastChannel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_ReportBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_ReportBroadcastChannel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_ReportBroadcastChannel_Request.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_ReportBroadcastChannel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_ReportBroadcastChannel_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_ReportBroadcastChannel_Request.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_ReportBroadcastChannel_Request)
  return target;
}

size_t CSteamTV_ReportBroadcastChannel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_ReportBroadcastChannel_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_ReportBroadcastChannel_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_ReportBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_ReportBroadcastChannel_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_ReportBroadcastChannel_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_ReportBroadcastChannel_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_ReportBroadcastChannel_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_ReportBroadcastChannel_Request::MergeFrom(const CSteamTV_ReportBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_ReportBroadcastChannel_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_ReportBroadcastChannel_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_ReportBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_ReportBroadcastChannel_Request::CopyFrom(const CSteamTV_ReportBroadcastChannel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_ReportBroadcastChannel_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_ReportBroadcastChannel_Request::IsInitialized() const {
  return true;
}

void CSteamTV_ReportBroadcastChannel_Request::InternalSwap(CSteamTV_ReportBroadcastChannel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_ReportBroadcastChannel_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_ReportBroadcastChannel_Response::_Internal {
 public:
};

CSteamTV_ReportBroadcastChannel_Response::CSteamTV_ReportBroadcastChannel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_ReportBroadcastChannel_Response)
}
CSteamTV_ReportBroadcastChannel_Response::CSteamTV_ReportBroadcastChannel_Response(const CSteamTV_ReportBroadcastChannel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_ReportBroadcastChannel_Response)
}

void CSteamTV_ReportBroadcastChannel_Response::SharedCtor() {
}

CSteamTV_ReportBroadcastChannel_Response::~CSteamTV_ReportBroadcastChannel_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_ReportBroadcastChannel_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_ReportBroadcastChannel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_ReportBroadcastChannel_Response::ArenaDtor(void* object) {
  CSteamTV_ReportBroadcastChannel_Response* _this = reinterpret_cast< CSteamTV_ReportBroadcastChannel_Response* >(object);
  (void)_this;
}
void CSteamTV_ReportBroadcastChannel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_ReportBroadcastChannel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_ReportBroadcastChannel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_ReportBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_ReportBroadcastChannel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_ReportBroadcastChannel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_ReportBroadcastChannel_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_ReportBroadcastChannel_Response)
  return target;
}

size_t CSteamTV_ReportBroadcastChannel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_ReportBroadcastChannel_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_ReportBroadcastChannel_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_ReportBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_ReportBroadcastChannel_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_ReportBroadcastChannel_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_ReportBroadcastChannel_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_ReportBroadcastChannel_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_ReportBroadcastChannel_Response::MergeFrom(const CSteamTV_ReportBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_ReportBroadcastChannel_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_ReportBroadcastChannel_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_ReportBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_ReportBroadcastChannel_Response::CopyFrom(const CSteamTV_ReportBroadcastChannel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_ReportBroadcastChannel_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_ReportBroadcastChannel_Response::IsInitialized() const {
  return true;
}

void CSteamTV_ReportBroadcastChannel_Response::InternalSwap(CSteamTV_ReportBroadcastChannel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_ReportBroadcastChannel_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelInteraction_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelInteraction_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetBroadcastChannelInteraction_Request::CSteamTV_GetBroadcastChannelInteraction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelInteraction_Request)
}
CSteamTV_GetBroadcastChannelInteraction_Request::CSteamTV_GetBroadcastChannelInteraction_Request(const CSteamTV_GetBroadcastChannelInteraction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelInteraction_Request)
}

void CSteamTV_GetBroadcastChannelInteraction_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetBroadcastChannelInteraction_Request::~CSteamTV_GetBroadcastChannelInteraction_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelInteraction_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelInteraction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelInteraction_Request::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelInteraction_Request* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelInteraction_Request* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelInteraction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelInteraction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelInteraction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelInteraction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelInteraction_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelInteraction_Request)
  return target;
}

size_t CSteamTV_GetBroadcastChannelInteraction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelInteraction_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelInteraction_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelInteraction_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelInteraction_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelInteraction_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelInteraction_Request::MergeFrom(const CSteamTV_GetBroadcastChannelInteraction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetBroadcastChannelInteraction_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelInteraction_Request::CopyFrom(const CSteamTV_GetBroadcastChannelInteraction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelInteraction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelInteraction_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelInteraction_Request::InternalSwap(CSteamTV_GetBroadcastChannelInteraction_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelInteraction_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetBroadcastChannelInteraction_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetBroadcastChannelInteraction_Response>()._has_bits_);
  static void set_has_is_followed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_GetBroadcastChannelInteraction_Response::CSteamTV_GetBroadcastChannelInteraction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetBroadcastChannelInteraction_Response)
}
CSteamTV_GetBroadcastChannelInteraction_Response::CSteamTV_GetBroadcastChannelInteraction_Response(const CSteamTV_GetBroadcastChannelInteraction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_followed_, &from.is_followed_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_subscribed_) -
    reinterpret_cast<char*>(&is_followed_)) + sizeof(is_subscribed_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetBroadcastChannelInteraction_Response)
}

void CSteamTV_GetBroadcastChannelInteraction_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_followed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_subscribed_) -
    reinterpret_cast<char*>(&is_followed_)) + sizeof(is_subscribed_));
}

CSteamTV_GetBroadcastChannelInteraction_Response::~CSteamTV_GetBroadcastChannelInteraction_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetBroadcastChannelInteraction_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetBroadcastChannelInteraction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetBroadcastChannelInteraction_Response::ArenaDtor(void* object) {
  CSteamTV_GetBroadcastChannelInteraction_Response* _this = reinterpret_cast< CSteamTV_GetBroadcastChannelInteraction_Response* >(object);
  (void)_this;
}
void CSteamTV_GetBroadcastChannelInteraction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetBroadcastChannelInteraction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetBroadcastChannelInteraction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_followed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_subscribed_) -
      reinterpret_cast<char*>(&is_followed_)) + sizeof(is_subscribed_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetBroadcastChannelInteraction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_followed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_followed(&has_bits);
          is_followed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_subscribed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_subscribed(&has_bits);
          is_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetBroadcastChannelInteraction_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_followed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_followed(), target);
  }

  // optional bool is_subscribed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_subscribed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetBroadcastChannelInteraction_Response)
  return target;
}

size_t CSteamTV_GetBroadcastChannelInteraction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_followed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetBroadcastChannelInteraction_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetBroadcastChannelInteraction_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetBroadcastChannelInteraction_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetBroadcastChannelInteraction_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetBroadcastChannelInteraction_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetBroadcastChannelInteraction_Response::MergeFrom(const CSteamTV_GetBroadcastChannelInteraction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_followed_ = from.is_followed_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_subscribed_ = from.is_subscribed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetBroadcastChannelInteraction_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetBroadcastChannelInteraction_Response::CopyFrom(const CSteamTV_GetBroadcastChannelInteraction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetBroadcastChannelInteraction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetBroadcastChannelInteraction_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetBroadcastChannelInteraction_Response::InternalSwap(CSteamTV_GetBroadcastChannelInteraction_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelInteraction_Response, is_subscribed_)
      + sizeof(CSteamTV_GetBroadcastChannelInteraction_Response::is_subscribed_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetBroadcastChannelInteraction_Response, is_followed_)>(
          reinterpret_cast<char*>(&is_followed_),
          reinterpret_cast<char*>(&other->is_followed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetBroadcastChannelInteraction_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetGames_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetGames_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_GetGames_Request::CSteamTV_GetGames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetGames_Request)
}
CSteamTV_GetGames_Request::CSteamTV_GetGames_Request(const CSteamTV_GetGames_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetGames_Request)
}

void CSteamTV_GetGames_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(count_));
algorithm_ = 1;
}

CSteamTV_GetGames_Request::~CSteamTV_GetGames_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetGames_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetGames_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetGames_Request::ArenaDtor(void* object) {
  CSteamTV_GetGames_Request* _this = reinterpret_cast< CSteamTV_GetGames_Request* >(object);
  (void)_this;
}
void CSteamTV_GetGames_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetGames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetGames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetGames_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(count_));
    algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetGames_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGetGamesAlgorithm algorithm = 2 [default = EGetGamesAlgorithm_Default];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGetGamesAlgorithm_IsValid(val))) {
            _internal_set_algorithm(static_cast<::EGetGamesAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetGames_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetGames_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .EGetGamesAlgorithm algorithm = 2 [default = EGetGamesAlgorithm_Default];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetGames_Request)
  return target;
}

size_t CSteamTV_GetGames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetGames_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional .EGetGamesAlgorithm algorithm = 2 [default = EGetGamesAlgorithm_Default];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetGames_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetGames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetGames_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetGames_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetGames_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetGames_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetGames_Request::MergeFrom(const CSteamTV_GetGames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetGames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetGames_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetGames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetGames_Request::CopyFrom(const CSteamTV_GetGames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetGames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetGames_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetGames_Request::InternalSwap(CSteamTV_GetGames_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetGames_Request, count_)
      + sizeof(CSteamTV_GetGames_Request::count_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetGames_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetGames_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_release_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_developer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_publisher(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSteamTV_Game::CSteamTV_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_Game)
}
CSteamTV_Game::CSteamTV_Game(const CSteamTV_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  release_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_date()) {
    release_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_release_date(), 
      GetArena());
  }
  developer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_developer()) {
    developer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_developer(), 
      GetArena());
  }
  publisher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_publisher()) {
    publisher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publisher(), 
      GetArena());
  }
  ::memcpy(&viewers_, &from.viewers_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&viewers_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_Game)
}

void CSteamTV_Game::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
release_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
developer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publisher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&viewers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&viewers_)) + sizeof(appid_));
}

CSteamTV_Game::~CSteamTV_Game() {
  // @@protoc_insertion_point(destructor:CSteamTV_Game)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  developer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publisher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_Game::ArenaDtor(void* object) {
  CSteamTV_Game* _this = reinterpret_cast< CSteamTV_Game* >(object);
  (void)_this;
}
void CSteamTV_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      release_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      developer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      publisher_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&viewers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&viewers_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Game.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Game.image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 viewers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_viewers(&has_bits);
          viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GetBroadcastChannelEntry channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string release_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_release_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Game.release_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string developer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_developer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Game.developer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string publisher = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_publisher();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Game.publisher");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_Game::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Game.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Game.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // optional uint64 viewers = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_viewers(), target);
  }

  // repeated .GetBroadcastChannelEntry channels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_channels(i), target, stream);
  }

  // optional string release_date = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_date().data(), static_cast<int>(this->_internal_release_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Game.release_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_release_date(), target);
  }

  // optional string developer = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_developer().data(), static_cast<int>(this->_internal_developer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Game.developer");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_developer(), target);
  }

  // optional string publisher = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_publisher().data(), static_cast<int>(this->_internal_publisher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Game.publisher");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_publisher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_Game)
  return target;
}

size_t CSteamTV_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_Game)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry channels = 5;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string image = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

    // optional string release_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_date());
    }

    // optional string developer = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_developer());
    }

    // optional string publisher = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_publisher());
    }

    // optional uint64 viewers = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_viewers());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_Game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_Game* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_Game)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_Game)
    MergeFrom(*source);
  }
}

void CSteamTV_Game::MergeFrom(const CSteamTV_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_release_date(from._internal_release_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_developer(from._internal_developer());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_publisher(from._internal_publisher());
    }
    if (cached_has_bits & 0x00000020u) {
      viewers_ = from.viewers_;
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_Game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_Game::CopyFrom(const CSteamTV_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_Game::IsInitialized() const {
  return true;
}

void CSteamTV_Game::InternalSwap(CSteamTV_Game* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channels_.InternalSwap(&other->channels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  release_date_.Swap(&other->release_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  developer_.Swap(&other->developer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publisher_.Swap(&other->publisher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_Game, appid_)
      + sizeof(CSteamTV_Game::appid_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_Game, viewers_)>(
          reinterpret_cast<char*>(&viewers_),
          reinterpret_cast<char*>(&other->viewers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_Game::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetGames_Response::_Internal {
 public:
};

CSteamTV_GetGames_Response::CSteamTV_GetGames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetGames_Response)
}
CSteamTV_GetGames_Response::CSteamTV_GetGames_Response(const CSteamTV_GetGames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetGames_Response)
}

void CSteamTV_GetGames_Response::SharedCtor() {
}

CSteamTV_GetGames_Response::~CSteamTV_GetGames_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetGames_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetGames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetGames_Response::ArenaDtor(void* object) {
  CSteamTV_GetGames_Response* _this = reinterpret_cast< CSteamTV_GetGames_Response* >(object);
  (void)_this;
}
void CSteamTV_GetGames_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetGames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetGames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetGames_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetGames_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_Game results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetGames_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetGames_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_Game results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetGames_Response)
  return target;
}

size_t CSteamTV_GetGames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetGames_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_Game results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetGames_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetGames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetGames_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetGames_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetGames_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetGames_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetGames_Response::MergeFrom(const CSteamTV_GetGames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetGames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetGames_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetGames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetGames_Response::CopyFrom(const CSteamTV_GetGames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetGames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetGames_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetGames_Response::InternalSwap(CSteamTV_GetGames_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetGames_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChannels_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetChannels_Request>()._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_GetChannels_Request::CSteamTV_GetChannels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChannels_Request)
}
CSteamTV_GetChannels_Request::CSteamTV_GetChannels_Request(const CSteamTV_GetChannels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&count_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChannels_Request)
}

void CSteamTV_GetChannels_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
algorithm_ = 1;
}

CSteamTV_GetChannels_Request::~CSteamTV_GetChannels_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChannels_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChannels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChannels_Request::ArenaDtor(void* object) {
  CSteamTV_GetChannels_Request* _this = reinterpret_cast< CSteamTV_GetChannels_Request* >(object);
  (void)_this;
}
void CSteamTV_GetChannels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChannels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChannels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&count_)) + sizeof(appid_));
    algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChannels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGetChannelsAlgorithm algorithm = 1 [default = EGetChannelsAlgorithm_Default];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGetChannelsAlgorithm_IsValid(val))) {
            _internal_set_algorithm(static_cast<::EGetChannelsAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChannels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGetChannelsAlgorithm algorithm = 1 [default = EGetChannelsAlgorithm_Default];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_algorithm(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChannels_Request)
  return target;
}

size_t CSteamTV_GetChannels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChannels_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional .EGetChannelsAlgorithm algorithm = 1 [default = EGetChannelsAlgorithm_Default];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChannels_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChannels_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChannels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChannels_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChannels_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChannels_Request::MergeFrom(const CSteamTV_GetChannels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetChannels_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChannels_Request::CopyFrom(const CSteamTV_GetChannels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChannels_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetChannels_Request::InternalSwap(CSteamTV_GetChannels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetChannels_Request, appid_)
      + sizeof(CSteamTV_GetChannels_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetChannels_Request, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChannels_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChannels_Response::_Internal {
 public:
};

CSteamTV_GetChannels_Response::CSteamTV_GetChannels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChannels_Response)
}
CSteamTV_GetChannels_Response::CSteamTV_GetChannels_Response(const CSteamTV_GetChannels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChannels_Response)
}

void CSteamTV_GetChannels_Response::SharedCtor() {
}

CSteamTV_GetChannels_Response::~CSteamTV_GetChannels_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChannels_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChannels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChannels_Response::ArenaDtor(void* object) {
  CSteamTV_GetChannels_Response* _this = reinterpret_cast< CSteamTV_GetChannels_Response* >(object);
  (void)_this;
}
void CSteamTV_GetChannels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChannels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChannels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChannels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChannels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChannels_Response)
  return target;
}

size_t CSteamTV_GetChannels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChannels_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChannels_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChannels_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChannels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChannels_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChannels_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChannels_Response::MergeFrom(const CSteamTV_GetChannels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetChannels_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChannels_Response::CopyFrom(const CSteamTV_GetChannels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChannels_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetChannels_Response::InternalSwap(CSteamTV_GetChannels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChannels_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddChatBan_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AddChatBan_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chatter_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_permanent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSteamTV_AddChatBan_Request::CSteamTV_AddChatBan_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddChatBan_Request)
}
CSteamTV_AddChatBan_Request::CSteamTV_AddChatBan_Request(const CSteamTV_AddChatBan_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddChatBan_Request)
}

void CSteamTV_AddChatBan_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
}

CSteamTV_AddChatBan_Request::~CSteamTV_AddChatBan_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddChatBan_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddChatBan_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AddChatBan_Request::ArenaDtor(void* object) {
  CSteamTV_AddChatBan_Request* _this = reinterpret_cast< CSteamTV_AddChatBan_Request* >(object);
  (void)_this;
}
void CSteamTV_AddChatBan_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddChatBan_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddChatBan_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddChatBan_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddChatBan_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 chatter_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_chatter_steamid(&has_bits);
          chatter_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool permanent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_permanent(&has_bits);
          permanent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool undo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_undo(&has_bits);
          undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddChatBan_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddChatBan_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional fixed64 chatter_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_chatter_steamid(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional bool permanent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_permanent(), target);
  }

  // optional bool undo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddChatBan_Request)
  return target;
}

size_t CSteamTV_AddChatBan_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddChatBan_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 chatter_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional bool permanent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool undo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddChatBan_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddChatBan_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddChatBan_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddChatBan_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddChatBan_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddChatBan_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_AddChatBan_Request::MergeFrom(const CSteamTV_AddChatBan_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddChatBan_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chatter_steamid_ = from.chatter_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      permanent_ = from.permanent_;
    }
    if (cached_has_bits & 0x00000010u) {
      undo_ = from.undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_AddChatBan_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddChatBan_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddChatBan_Request::CopyFrom(const CSteamTV_AddChatBan_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddChatBan_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddChatBan_Request::IsInitialized() const {
  return true;
}

void CSteamTV_AddChatBan_Request::InternalSwap(CSteamTV_AddChatBan_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_AddChatBan_Request, undo_)
      + sizeof(CSteamTV_AddChatBan_Request::undo_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_AddChatBan_Request, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddChatBan_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddChatBan_Response::_Internal {
 public:
};

CSteamTV_AddChatBan_Response::CSteamTV_AddChatBan_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddChatBan_Response)
}
CSteamTV_AddChatBan_Response::CSteamTV_AddChatBan_Response(const CSteamTV_AddChatBan_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddChatBan_Response)
}

void CSteamTV_AddChatBan_Response::SharedCtor() {
}

CSteamTV_AddChatBan_Response::~CSteamTV_AddChatBan_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddChatBan_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddChatBan_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AddChatBan_Response::ArenaDtor(void* object) {
  CSteamTV_AddChatBan_Response* _this = reinterpret_cast< CSteamTV_AddChatBan_Response* >(object);
  (void)_this;
}
void CSteamTV_AddChatBan_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddChatBan_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddChatBan_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddChatBan_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddChatBan_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddChatBan_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddChatBan_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddChatBan_Response)
  return target;
}

size_t CSteamTV_AddChatBan_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddChatBan_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddChatBan_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddChatBan_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddChatBan_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddChatBan_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddChatBan_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddChatBan_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_AddChatBan_Response::MergeFrom(const CSteamTV_AddChatBan_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddChatBan_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_AddChatBan_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddChatBan_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddChatBan_Response::CopyFrom(const CSteamTV_AddChatBan_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddChatBan_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddChatBan_Response::IsInitialized() const {
  return true;
}

void CSteamTV_AddChatBan_Response::InternalSwap(CSteamTV_AddChatBan_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddChatBan_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChatBans_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetChatBans_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetChatBans_Request::CSteamTV_GetChatBans_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChatBans_Request)
}
CSteamTV_GetChatBans_Request::CSteamTV_GetChatBans_Request(const CSteamTV_GetChatBans_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChatBans_Request)
}

void CSteamTV_GetChatBans_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetChatBans_Request::~CSteamTV_GetChatBans_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChatBans_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChatBans_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChatBans_Request::ArenaDtor(void* object) {
  CSteamTV_GetChatBans_Request* _this = reinterpret_cast< CSteamTV_GetChatBans_Request* >(object);
  (void)_this;
}
void CSteamTV_GetChatBans_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChatBans_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChatBans_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChatBans_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChatBans_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChatBans_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChatBans_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChatBans_Request)
  return target;
}

size_t CSteamTV_GetChatBans_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChatBans_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChatBans_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChatBans_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChatBans_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChatBans_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChatBans_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChatBans_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChatBans_Request::MergeFrom(const CSteamTV_GetChatBans_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChatBans_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetChatBans_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChatBans_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChatBans_Request::CopyFrom(const CSteamTV_GetChatBans_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChatBans_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChatBans_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetChatBans_Request::InternalSwap(CSteamTV_GetChatBans_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChatBans_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_ChatBan::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_ChatBan>()._has_bits_);
  static void set_has_issuer_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chatter_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permanent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_ChatBan::CSteamTV_ChatBan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_ChatBan)
}
CSteamTV_ChatBan::CSteamTV_ChatBan(const CSteamTV_ChatBan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_expires_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time_expires()) {
    time_expires_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_expires(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&issuer_steamid_, &from.issuer_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&permanent_) -
    reinterpret_cast<char*>(&issuer_steamid_)) + sizeof(permanent_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_ChatBan)
}

void CSteamTV_ChatBan::SharedCtor() {
time_expires_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&issuer_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permanent_) -
    reinterpret_cast<char*>(&issuer_steamid_)) + sizeof(permanent_));
}

CSteamTV_ChatBan::~CSteamTV_ChatBan() {
  // @@protoc_insertion_point(destructor:CSteamTV_ChatBan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_ChatBan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_expires_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_ChatBan::ArenaDtor(void* object) {
  CSteamTV_ChatBan* _this = reinterpret_cast< CSteamTV_ChatBan* >(object);
  (void)_this;
}
void CSteamTV_ChatBan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_ChatBan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_ChatBan::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_ChatBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_expires_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&issuer_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permanent_) -
        reinterpret_cast<char*>(&issuer_steamid_)) + sizeof(permanent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_ChatBan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 issuer_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_issuer_steamid(&has_bits);
          issuer_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 chatter_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_chatter_steamid(&has_bits);
          chatter_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string time_expires = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_expires();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_ChatBan.time_expires");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool permanent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_permanent(&has_bits);
          permanent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_ChatBan.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_ChatBan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_ChatBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 issuer_steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_issuer_steamid(), target);
  }

  // optional fixed64 chatter_steamid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_chatter_steamid(), target);
  }

  // optional string time_expires = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time_expires().data(), static_cast<int>(this->_internal_time_expires().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_ChatBan.time_expires");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_expires(), target);
  }

  // optional bool permanent = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_permanent(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_ChatBan.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_ChatBan)
  return target;
}

size_t CSteamTV_ChatBan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_ChatBan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string time_expires = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time_expires());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 issuer_steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 chatter_steamid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool permanent = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_ChatBan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_ChatBan)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_ChatBan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_ChatBan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_ChatBan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_ChatBan)
    MergeFrom(*source);
  }
}

void CSteamTV_ChatBan::MergeFrom(const CSteamTV_ChatBan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_ChatBan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_time_expires(from._internal_time_expires());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      issuer_steamid_ = from.issuer_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chatter_steamid_ = from.chatter_steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      permanent_ = from.permanent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_ChatBan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_ChatBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_ChatBan::CopyFrom(const CSteamTV_ChatBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_ChatBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_ChatBan::IsInitialized() const {
  return true;
}

void CSteamTV_ChatBan::InternalSwap(CSteamTV_ChatBan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_expires_.Swap(&other->time_expires_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_ChatBan, permanent_)
      + sizeof(CSteamTV_ChatBan::permanent_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_ChatBan, issuer_steamid_)>(
          reinterpret_cast<char*>(&issuer_steamid_),
          reinterpret_cast<char*>(&other->issuer_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_ChatBan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChatBans_Response::_Internal {
 public:
};

CSteamTV_GetChatBans_Response::CSteamTV_GetChatBans_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChatBans_Response)
}
CSteamTV_GetChatBans_Response::CSteamTV_GetChatBans_Response(const CSteamTV_GetChatBans_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChatBans_Response)
}

void CSteamTV_GetChatBans_Response::SharedCtor() {
}

CSteamTV_GetChatBans_Response::~CSteamTV_GetChatBans_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChatBans_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChatBans_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChatBans_Response::ArenaDtor(void* object) {
  CSteamTV_GetChatBans_Response* _this = reinterpret_cast< CSteamTV_GetChatBans_Response* >(object);
  (void)_this;
}
void CSteamTV_GetChatBans_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChatBans_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChatBans_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChatBans_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChatBans_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_ChatBan results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChatBans_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChatBans_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_ChatBan results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChatBans_Response)
  return target;
}

size_t CSteamTV_GetChatBans_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChatBans_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_ChatBan results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChatBans_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChatBans_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChatBans_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChatBans_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChatBans_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChatBans_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChatBans_Response::MergeFrom(const CSteamTV_GetChatBans_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChatBans_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetChatBans_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChatBans_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChatBans_Response::CopyFrom(const CSteamTV_GetChatBans_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChatBans_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChatBans_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetChatBans_Response::InternalSwap(CSteamTV_GetChatBans_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChatBans_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddChatModerator_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AddChatModerator_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moderator_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamTV_AddChatModerator_Request::CSteamTV_AddChatModerator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddChatModerator_Request)
}
CSteamTV_AddChatModerator_Request::CSteamTV_AddChatModerator_Request(const CSteamTV_AddChatModerator_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddChatModerator_Request)
}

void CSteamTV_AddChatModerator_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
}

CSteamTV_AddChatModerator_Request::~CSteamTV_AddChatModerator_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddChatModerator_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddChatModerator_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AddChatModerator_Request::ArenaDtor(void* object) {
  CSteamTV_AddChatModerator_Request* _this = reinterpret_cast< CSteamTV_AddChatModerator_Request* >(object);
  (void)_this;
}
void CSteamTV_AddChatModerator_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddChatModerator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddChatModerator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddChatModerator_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddChatModerator_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 moderator_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_moderator_steamid(&has_bits);
          moderator_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_undo(&has_bits);
          undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddChatModerator_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddChatModerator_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional fixed64 moderator_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_moderator_steamid(), target);
  }

  // optional bool undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddChatModerator_Request)
  return target;
}

size_t CSteamTV_AddChatModerator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddChatModerator_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 moderator_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool undo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddChatModerator_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddChatModerator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddChatModerator_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddChatModerator_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddChatModerator_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddChatModerator_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_AddChatModerator_Request::MergeFrom(const CSteamTV_AddChatModerator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddChatModerator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      moderator_steamid_ = from.moderator_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      undo_ = from.undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_AddChatModerator_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddChatModerator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddChatModerator_Request::CopyFrom(const CSteamTV_AddChatModerator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddChatModerator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddChatModerator_Request::IsInitialized() const {
  return true;
}

void CSteamTV_AddChatModerator_Request::InternalSwap(CSteamTV_AddChatModerator_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_AddChatModerator_Request, undo_)
      + sizeof(CSteamTV_AddChatModerator_Request::undo_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_AddChatModerator_Request, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddChatModerator_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddChatModerator_Response::_Internal {
 public:
};

CSteamTV_AddChatModerator_Response::CSteamTV_AddChatModerator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddChatModerator_Response)
}
CSteamTV_AddChatModerator_Response::CSteamTV_AddChatModerator_Response(const CSteamTV_AddChatModerator_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddChatModerator_Response)
}

void CSteamTV_AddChatModerator_Response::SharedCtor() {
}

CSteamTV_AddChatModerator_Response::~CSteamTV_AddChatModerator_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddChatModerator_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddChatModerator_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AddChatModerator_Response::ArenaDtor(void* object) {
  CSteamTV_AddChatModerator_Response* _this = reinterpret_cast< CSteamTV_AddChatModerator_Response* >(object);
  (void)_this;
}
void CSteamTV_AddChatModerator_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddChatModerator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddChatModerator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddChatModerator_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddChatModerator_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddChatModerator_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddChatModerator_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddChatModerator_Response)
  return target;
}

size_t CSteamTV_AddChatModerator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddChatModerator_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddChatModerator_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddChatModerator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddChatModerator_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddChatModerator_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddChatModerator_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddChatModerator_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_AddChatModerator_Response::MergeFrom(const CSteamTV_AddChatModerator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddChatModerator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_AddChatModerator_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddChatModerator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddChatModerator_Response::CopyFrom(const CSteamTV_AddChatModerator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddChatModerator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddChatModerator_Response::IsInitialized() const {
  return true;
}

void CSteamTV_AddChatModerator_Response::InternalSwap(CSteamTV_AddChatModerator_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddChatModerator_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChatModerators_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetChatModerators_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetChatModerators_Request::CSteamTV_GetChatModerators_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChatModerators_Request)
}
CSteamTV_GetChatModerators_Request::CSteamTV_GetChatModerators_Request(const CSteamTV_GetChatModerators_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChatModerators_Request)
}

void CSteamTV_GetChatModerators_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetChatModerators_Request::~CSteamTV_GetChatModerators_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChatModerators_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChatModerators_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChatModerators_Request::ArenaDtor(void* object) {
  CSteamTV_GetChatModerators_Request* _this = reinterpret_cast< CSteamTV_GetChatModerators_Request* >(object);
  (void)_this;
}
void CSteamTV_GetChatModerators_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChatModerators_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChatModerators_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChatModerators_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChatModerators_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChatModerators_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChatModerators_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChatModerators_Request)
  return target;
}

size_t CSteamTV_GetChatModerators_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChatModerators_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChatModerators_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChatModerators_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChatModerators_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChatModerators_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChatModerators_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChatModerators_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChatModerators_Request::MergeFrom(const CSteamTV_GetChatModerators_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChatModerators_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetChatModerators_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChatModerators_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChatModerators_Request::CopyFrom(const CSteamTV_GetChatModerators_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChatModerators_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChatModerators_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetChatModerators_Request::InternalSwap(CSteamTV_GetChatModerators_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChatModerators_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_ChatModerator::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_ChatModerator>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_ChatModerator::CSteamTV_ChatModerator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_ChatModerator)
}
CSteamTV_ChatModerator::CSteamTV_ChatModerator(const CSteamTV_ChatModerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_ChatModerator)
}

void CSteamTV_ChatModerator::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamid_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_ChatModerator::~CSteamTV_ChatModerator() {
  // @@protoc_insertion_point(destructor:CSteamTV_ChatModerator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_ChatModerator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_ChatModerator::ArenaDtor(void* object) {
  CSteamTV_ChatModerator* _this = reinterpret_cast< CSteamTV_ChatModerator* >(object);
  (void)_this;
}
void CSteamTV_ChatModerator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_ChatModerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_ChatModerator::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_ChatModerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_ChatModerator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_ChatModerator.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_ChatModerator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_ChatModerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_ChatModerator.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_ChatModerator)
  return target;
}

size_t CSteamTV_ChatModerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_ChatModerator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_ChatModerator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_ChatModerator)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_ChatModerator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_ChatModerator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_ChatModerator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_ChatModerator)
    MergeFrom(*source);
  }
}

void CSteamTV_ChatModerator::MergeFrom(const CSteamTV_ChatModerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_ChatModerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_ChatModerator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_ChatModerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_ChatModerator::CopyFrom(const CSteamTV_ChatModerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_ChatModerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_ChatModerator::IsInitialized() const {
  return true;
}

void CSteamTV_ChatModerator::InternalSwap(CSteamTV_ChatModerator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_ChatModerator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetChatModerators_Response::_Internal {
 public:
};

CSteamTV_GetChatModerators_Response::CSteamTV_GetChatModerators_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetChatModerators_Response)
}
CSteamTV_GetChatModerators_Response::CSteamTV_GetChatModerators_Response(const CSteamTV_GetChatModerators_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetChatModerators_Response)
}

void CSteamTV_GetChatModerators_Response::SharedCtor() {
}

CSteamTV_GetChatModerators_Response::~CSteamTV_GetChatModerators_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetChatModerators_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetChatModerators_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetChatModerators_Response::ArenaDtor(void* object) {
  CSteamTV_GetChatModerators_Response* _this = reinterpret_cast< CSteamTV_GetChatModerators_Response* >(object);
  (void)_this;
}
void CSteamTV_GetChatModerators_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetChatModerators_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetChatModerators_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetChatModerators_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetChatModerators_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_ChatModerator results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetChatModerators_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetChatModerators_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_ChatModerator results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetChatModerators_Response)
  return target;
}

size_t CSteamTV_GetChatModerators_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetChatModerators_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_ChatModerator results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetChatModerators_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetChatModerators_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetChatModerators_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetChatModerators_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetChatModerators_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetChatModerators_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetChatModerators_Response::MergeFrom(const CSteamTV_GetChatModerators_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetChatModerators_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetChatModerators_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetChatModerators_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetChatModerators_Response::CopyFrom(const CSteamTV_GetChatModerators_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetChatModerators_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetChatModerators_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetChatModerators_Response::InternalSwap(CSteamTV_GetChatModerators_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetChatModerators_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddWordBan_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AddWordBan_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamTV_AddWordBan_Request::CSteamTV_AddWordBan_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddWordBan_Request)
}
CSteamTV_AddWordBan_Request::CSteamTV_AddWordBan_Request(const CSteamTV_AddWordBan_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_word()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArena());
  }
  ::memcpy(&broadcast_channel_id_, &from.broadcast_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddWordBan_Request)
}

void CSteamTV_AddWordBan_Request::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_) -
    reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
}

CSteamTV_AddWordBan_Request::~CSteamTV_AddWordBan_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddWordBan_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddWordBan_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_AddWordBan_Request::ArenaDtor(void* object) {
  CSteamTV_AddWordBan_Request* _this = reinterpret_cast< CSteamTV_AddWordBan_Request* >(object);
  (void)_this;
}
void CSteamTV_AddWordBan_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddWordBan_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddWordBan_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddWordBan_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    word_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_) -
        reinterpret_cast<char*>(&broadcast_channel_id_)) + sizeof(undo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddWordBan_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string word = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_AddWordBan_Request.word");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_undo(&has_bits);
          undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddWordBan_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddWordBan_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string word = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_AddWordBan_Request.word");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_word(), target);
  }

  // optional bool undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddWordBan_Request)
  return target;
}

size_t CSteamTV_AddWordBan_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddWordBan_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string word = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_word());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool undo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddWordBan_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddWordBan_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddWordBan_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddWordBan_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddWordBan_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddWordBan_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_AddWordBan_Request::MergeFrom(const CSteamTV_AddWordBan_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddWordBan_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_word(from._internal_word());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      undo_ = from.undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_AddWordBan_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddWordBan_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddWordBan_Request::CopyFrom(const CSteamTV_AddWordBan_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddWordBan_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddWordBan_Request::IsInitialized() const {
  return true;
}

void CSteamTV_AddWordBan_Request::InternalSwap(CSteamTV_AddWordBan_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_AddWordBan_Request, undo_)
      + sizeof(CSteamTV_AddWordBan_Request::undo_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_AddWordBan_Request, broadcast_channel_id_)>(
          reinterpret_cast<char*>(&broadcast_channel_id_),
          reinterpret_cast<char*>(&other->broadcast_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddWordBan_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AddWordBan_Response::_Internal {
 public:
};

CSteamTV_AddWordBan_Response::CSteamTV_AddWordBan_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AddWordBan_Response)
}
CSteamTV_AddWordBan_Response::CSteamTV_AddWordBan_Response(const CSteamTV_AddWordBan_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AddWordBan_Response)
}

void CSteamTV_AddWordBan_Response::SharedCtor() {
}

CSteamTV_AddWordBan_Response::~CSteamTV_AddWordBan_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_AddWordBan_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AddWordBan_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AddWordBan_Response::ArenaDtor(void* object) {
  CSteamTV_AddWordBan_Response* _this = reinterpret_cast< CSteamTV_AddWordBan_Response* >(object);
  (void)_this;
}
void CSteamTV_AddWordBan_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AddWordBan_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AddWordBan_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AddWordBan_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AddWordBan_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AddWordBan_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AddWordBan_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AddWordBan_Response)
  return target;
}

size_t CSteamTV_AddWordBan_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AddWordBan_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AddWordBan_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AddWordBan_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AddWordBan_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AddWordBan_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AddWordBan_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AddWordBan_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_AddWordBan_Response::MergeFrom(const CSteamTV_AddWordBan_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AddWordBan_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_AddWordBan_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AddWordBan_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AddWordBan_Response::CopyFrom(const CSteamTV_AddWordBan_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AddWordBan_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AddWordBan_Response::IsInitialized() const {
  return true;
}

void CSteamTV_AddWordBan_Response::InternalSwap(CSteamTV_AddWordBan_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AddWordBan_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetWordBans_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetWordBans_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_GetWordBans_Request::CSteamTV_GetWordBans_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetWordBans_Request)
}
CSteamTV_GetWordBans_Request::CSteamTV_GetWordBans_Request(const CSteamTV_GetWordBans_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetWordBans_Request)
}

void CSteamTV_GetWordBans_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_GetWordBans_Request::~CSteamTV_GetWordBans_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetWordBans_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetWordBans_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetWordBans_Request::ArenaDtor(void* object) {
  CSteamTV_GetWordBans_Request* _this = reinterpret_cast< CSteamTV_GetWordBans_Request* >(object);
  (void)_this;
}
void CSteamTV_GetWordBans_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetWordBans_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetWordBans_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetWordBans_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetWordBans_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetWordBans_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetWordBans_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetWordBans_Request)
  return target;
}

size_t CSteamTV_GetWordBans_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetWordBans_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetWordBans_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetWordBans_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetWordBans_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetWordBans_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetWordBans_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetWordBans_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetWordBans_Request::MergeFrom(const CSteamTV_GetWordBans_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetWordBans_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_GetWordBans_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetWordBans_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetWordBans_Request::CopyFrom(const CSteamTV_GetWordBans_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetWordBans_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetWordBans_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetWordBans_Request::InternalSwap(CSteamTV_GetWordBans_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetWordBans_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetWordBans_Response::_Internal {
 public:
};

CSteamTV_GetWordBans_Response::CSteamTV_GetWordBans_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetWordBans_Response)
}
CSteamTV_GetWordBans_Response::CSteamTV_GetWordBans_Response(const CSteamTV_GetWordBans_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetWordBans_Response)
}

void CSteamTV_GetWordBans_Response::SharedCtor() {
}

CSteamTV_GetWordBans_Response::~CSteamTV_GetWordBans_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetWordBans_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetWordBans_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetWordBans_Response::ArenaDtor(void* object) {
  CSteamTV_GetWordBans_Response* _this = reinterpret_cast< CSteamTV_GetWordBans_Response* >(object);
  (void)_this;
}
void CSteamTV_GetWordBans_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetWordBans_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetWordBans_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetWordBans_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetWordBans_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_results();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_GetWordBans_Response.results");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetWordBans_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetWordBans_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string results = 1;
  for (int i = 0, n = this->_internal_results_size(); i < n; i++) {
    const auto& s = this->_internal_results(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_GetWordBans_Response.results");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetWordBans_Response)
  return target;
}

size_t CSteamTV_GetWordBans_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetWordBans_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string results = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(results_.size());
  for (int i = 0, n = results_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      results_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetWordBans_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetWordBans_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetWordBans_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetWordBans_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetWordBans_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetWordBans_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetWordBans_Response::MergeFrom(const CSteamTV_GetWordBans_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetWordBans_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetWordBans_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetWordBans_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetWordBans_Response::CopyFrom(const CSteamTV_GetWordBans_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetWordBans_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetWordBans_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetWordBans_Response::InternalSwap(CSteamTV_GetWordBans_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetWordBans_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_JoinChat_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_JoinChat_Request>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_JoinChat_Request::CSteamTV_JoinChat_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_JoinChat_Request)
}
CSteamTV_JoinChat_Request::CSteamTV_JoinChat_Request(const CSteamTV_JoinChat_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_JoinChat_Request)
}

void CSteamTV_JoinChat_Request::SharedCtor() {
broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_JoinChat_Request::~CSteamTV_JoinChat_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_JoinChat_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_JoinChat_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_JoinChat_Request::ArenaDtor(void* object) {
  CSteamTV_JoinChat_Request* _this = reinterpret_cast< CSteamTV_JoinChat_Request* >(object);
  (void)_this;
}
void CSteamTV_JoinChat_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_JoinChat_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_JoinChat_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_JoinChat_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_JoinChat_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_JoinChat_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_JoinChat_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_JoinChat_Request)
  return target;
}

size_t CSteamTV_JoinChat_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_JoinChat_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_JoinChat_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_JoinChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_JoinChat_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_JoinChat_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_JoinChat_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_JoinChat_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_JoinChat_Request::MergeFrom(const CSteamTV_JoinChat_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_JoinChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_channel_id()) {
    _internal_set_broadcast_channel_id(from._internal_broadcast_channel_id());
  }
}

void CSteamTV_JoinChat_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_JoinChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_JoinChat_Request::CopyFrom(const CSteamTV_JoinChat_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_JoinChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_JoinChat_Request::IsInitialized() const {
  return true;
}

void CSteamTV_JoinChat_Request::InternalSwap(CSteamTV_JoinChat_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_JoinChat_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_JoinChat_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_JoinChat_Response>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_url_template(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_JoinChat_Response::CSteamTV_JoinChat_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  flair_group_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_JoinChat_Response)
}
CSteamTV_JoinChat_Response::CSteamTV_JoinChat_Response(const CSteamTV_JoinChat_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      flair_group_ids_(from.flair_group_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_url_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_view_url_template()) {
    view_url_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_url_template(), 
      GetArena());
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_JoinChat_Response)
}

void CSteamTV_JoinChat_Response::SharedCtor() {
view_url_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_id_ = PROTOBUF_ULONGLONG(0);
}

CSteamTV_JoinChat_Response::~CSteamTV_JoinChat_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_JoinChat_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_JoinChat_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  view_url_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_JoinChat_Response::ArenaDtor(void* object) {
  CSteamTV_JoinChat_Response* _this = reinterpret_cast< CSteamTV_JoinChat_Response* >(object);
  (void)_this;
}
void CSteamTV_JoinChat_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_JoinChat_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_JoinChat_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_JoinChat_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flair_group_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    view_url_template_.ClearNonDefaultToEmpty();
  }
  chat_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_JoinChat_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string view_url_template = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_view_url_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_JoinChat_Response.view_url_template");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 flair_group_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_flair_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_flair_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_JoinChat_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_JoinChat_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional string view_url_template = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_view_url_template().data(), static_cast<int>(this->_internal_view_url_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_JoinChat_Response.view_url_template");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_url_template(), target);
  }

  // repeated uint64 flair_group_ids = 3;
  for (int i = 0, n = this->_internal_flair_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_flair_group_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_JoinChat_Response)
  return target;
}

size_t CSteamTV_JoinChat_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_JoinChat_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 flair_group_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->flair_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flair_group_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string view_url_template = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_view_url_template());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_JoinChat_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_JoinChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_JoinChat_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_JoinChat_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_JoinChat_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_JoinChat_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_JoinChat_Response::MergeFrom(const CSteamTV_JoinChat_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_JoinChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flair_group_ids_.MergeFrom(from.flair_group_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_view_url_template(from._internal_view_url_template());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_JoinChat_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_JoinChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_JoinChat_Response::CopyFrom(const CSteamTV_JoinChat_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_JoinChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_JoinChat_Response::IsInitialized() const {
  return true;
}

void CSteamTV_JoinChat_Response::InternalSwap(CSteamTV_JoinChat_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flair_group_ids_.InternalSwap(&other->flair_group_ids_);
  view_url_template_.Swap(&other->view_url_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chat_id_, other->chat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_JoinChat_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_Search_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_Search_Request>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_Search_Request::CSteamTV_Search_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_Search_Request)
}
CSteamTV_Search_Request::CSteamTV_Search_Request(const CSteamTV_Search_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_term()) {
    term_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_term(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_Search_Request)
}

void CSteamTV_Search_Request::SharedCtor() {
term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_Search_Request::~CSteamTV_Search_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_Search_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_Search_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  term_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_Search_Request::ArenaDtor(void* object) {
  CSteamTV_Search_Request* _this = reinterpret_cast< CSteamTV_Search_Request* >(object);
  (void)_this;
}
void CSteamTV_Search_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_Search_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_Search_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_Search_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    term_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_Search_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_term();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_Search_Request.term");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_Search_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_Search_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_term().data(), static_cast<int>(this->_internal_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_Search_Request.term");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_Search_Request)
  return target;
}

size_t CSteamTV_Search_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_Search_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string term = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_Search_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_Search_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_Search_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_Search_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_Search_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_Search_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_Search_Request::MergeFrom(const CSteamTV_Search_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_Search_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_term()) {
    _internal_set_term(from._internal_term());
  }
}

void CSteamTV_Search_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_Search_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_Search_Request::CopyFrom(const CSteamTV_Search_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_Search_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_Search_Request::IsInitialized() const {
  return true;
}

void CSteamTV_Search_Request::InternalSwap(CSteamTV_Search_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  term_.Swap(&other->term_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_Search_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_Search_Response::_Internal {
 public:
};

CSteamTV_Search_Response::CSteamTV_Search_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_Search_Response)
}
CSteamTV_Search_Response::CSteamTV_Search_Response(const CSteamTV_Search_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_Search_Response)
}

void CSteamTV_Search_Response::SharedCtor() {
}

CSteamTV_Search_Response::~CSteamTV_Search_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_Search_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_Search_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_Search_Response::ArenaDtor(void* object) {
  CSteamTV_Search_Response* _this = reinterpret_cast< CSteamTV_Search_Response* >(object);
  (void)_this;
}
void CSteamTV_Search_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_Search_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_Search_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_Search_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_Search_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_Search_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_Search_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_Search_Response)
  return target;
}

size_t CSteamTV_Search_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_Search_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_Search_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_Search_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_Search_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_Search_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_Search_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_Search_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_Search_Response::MergeFrom(const CSteamTV_Search_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_Search_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_Search_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_Search_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_Search_Response::CopyFrom(const CSteamTV_Search_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_Search_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_Search_Response::IsInitialized() const {
  return true;
}

void CSteamTV_Search_Response::InternalSwap(CSteamTV_Search_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_Search_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetSteamTVUserSettings_Request::_Internal {
 public:
};

CSteamTV_GetSteamTVUserSettings_Request::CSteamTV_GetSteamTVUserSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetSteamTVUserSettings_Request)
}
CSteamTV_GetSteamTVUserSettings_Request::CSteamTV_GetSteamTVUserSettings_Request(const CSteamTV_GetSteamTVUserSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetSteamTVUserSettings_Request)
}

void CSteamTV_GetSteamTVUserSettings_Request::SharedCtor() {
}

CSteamTV_GetSteamTVUserSettings_Request::~CSteamTV_GetSteamTVUserSettings_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetSteamTVUserSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetSteamTVUserSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetSteamTVUserSettings_Request::ArenaDtor(void* object) {
  CSteamTV_GetSteamTVUserSettings_Request* _this = reinterpret_cast< CSteamTV_GetSteamTVUserSettings_Request* >(object);
  (void)_this;
}
void CSteamTV_GetSteamTVUserSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetSteamTVUserSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetSteamTVUserSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetSteamTVUserSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetSteamTVUserSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetSteamTVUserSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetSteamTVUserSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetSteamTVUserSettings_Request)
  return target;
}

size_t CSteamTV_GetSteamTVUserSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetSteamTVUserSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetSteamTVUserSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetSteamTVUserSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetSteamTVUserSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetSteamTVUserSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetSteamTVUserSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetSteamTVUserSettings_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetSteamTVUserSettings_Request::MergeFrom(const CSteamTV_GetSteamTVUserSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetSteamTVUserSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_GetSteamTVUserSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetSteamTVUserSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetSteamTVUserSettings_Request::CopyFrom(const CSteamTV_GetSteamTVUserSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetSteamTVUserSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetSteamTVUserSettings_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetSteamTVUserSettings_Request::InternalSwap(CSteamTV_GetSteamTVUserSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetSteamTVUserSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetSteamTVUserSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_GetSteamTVUserSettings_Response>()._has_bits_);
  static void set_has_stream_live_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_live_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_GetSteamTVUserSettings_Response::CSteamTV_GetSteamTVUserSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetSteamTVUserSettings_Response)
}
CSteamTV_GetSteamTVUserSettings_Response::CSteamTV_GetSteamTVUserSettings_Response(const CSteamTV_GetSteamTVUserSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stream_live_email_, &from.stream_live_email_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_live_notification_) -
    reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetSteamTVUserSettings_Response)
}

void CSteamTV_GetSteamTVUserSettings_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_live_email_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_live_notification_) -
    reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
}

CSteamTV_GetSteamTVUserSettings_Response::~CSteamTV_GetSteamTVUserSettings_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetSteamTVUserSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetSteamTVUserSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetSteamTVUserSettings_Response::ArenaDtor(void* object) {
  CSteamTV_GetSteamTVUserSettings_Response* _this = reinterpret_cast< CSteamTV_GetSteamTVUserSettings_Response* >(object);
  (void)_this;
}
void CSteamTV_GetSteamTVUserSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetSteamTVUserSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetSteamTVUserSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetSteamTVUserSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stream_live_email_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_live_notification_) -
      reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetSteamTVUserSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool stream_live_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_live_email(&has_bits);
          stream_live_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stream_live_notification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_live_notification(&has_bits);
          stream_live_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetSteamTVUserSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetSteamTVUserSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool stream_live_email = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_stream_live_email(), target);
  }

  // optional bool stream_live_notification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stream_live_notification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetSteamTVUserSettings_Response)
  return target;
}

size_t CSteamTV_GetSteamTVUserSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetSteamTVUserSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool stream_live_email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool stream_live_notification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetSteamTVUserSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetSteamTVUserSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetSteamTVUserSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetSteamTVUserSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetSteamTVUserSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetSteamTVUserSettings_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetSteamTVUserSettings_Response::MergeFrom(const CSteamTV_GetSteamTVUserSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetSteamTVUserSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_live_email_ = from.stream_live_email_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_live_notification_ = from.stream_live_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_GetSteamTVUserSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetSteamTVUserSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetSteamTVUserSettings_Response::CopyFrom(const CSteamTV_GetSteamTVUserSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetSteamTVUserSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetSteamTVUserSettings_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetSteamTVUserSettings_Response::InternalSwap(CSteamTV_GetSteamTVUserSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_GetSteamTVUserSettings_Response, stream_live_notification_)
      + sizeof(CSteamTV_GetSteamTVUserSettings_Response::stream_live_notification_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_GetSteamTVUserSettings_Response, stream_live_email_)>(
          reinterpret_cast<char*>(&stream_live_email_),
          reinterpret_cast<char*>(&other->stream_live_email_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetSteamTVUserSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetSteamTVUserSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_SetSteamTVUserSettings_Request>()._has_bits_);
  static void set_has_stream_live_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_live_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_SetSteamTVUserSettings_Request::CSteamTV_SetSteamTVUserSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetSteamTVUserSettings_Request)
}
CSteamTV_SetSteamTVUserSettings_Request::CSteamTV_SetSteamTVUserSettings_Request(const CSteamTV_SetSteamTVUserSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stream_live_email_, &from.stream_live_email_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_live_notification_) -
    reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetSteamTVUserSettings_Request)
}

void CSteamTV_SetSteamTVUserSettings_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_live_email_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_live_notification_) -
    reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
}

CSteamTV_SetSteamTVUserSettings_Request::~CSteamTV_SetSteamTVUserSettings_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetSteamTVUserSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetSteamTVUserSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SetSteamTVUserSettings_Request::ArenaDtor(void* object) {
  CSteamTV_SetSteamTVUserSettings_Request* _this = reinterpret_cast< CSteamTV_SetSteamTVUserSettings_Request* >(object);
  (void)_this;
}
void CSteamTV_SetSteamTVUserSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetSteamTVUserSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetSteamTVUserSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetSteamTVUserSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stream_live_email_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_live_notification_) -
      reinterpret_cast<char*>(&stream_live_email_)) + sizeof(stream_live_notification_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetSteamTVUserSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool stream_live_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_live_email(&has_bits);
          stream_live_email_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stream_live_notification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_live_notification(&has_bits);
          stream_live_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetSteamTVUserSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetSteamTVUserSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool stream_live_email = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_stream_live_email(), target);
  }

  // optional bool stream_live_notification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stream_live_notification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetSteamTVUserSettings_Request)
  return target;
}

size_t CSteamTV_SetSteamTVUserSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetSteamTVUserSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool stream_live_email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool stream_live_notification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetSteamTVUserSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetSteamTVUserSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetSteamTVUserSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetSteamTVUserSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetSteamTVUserSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetSteamTVUserSettings_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_SetSteamTVUserSettings_Request::MergeFrom(const CSteamTV_SetSteamTVUserSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetSteamTVUserSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_live_email_ = from.stream_live_email_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_live_notification_ = from.stream_live_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_SetSteamTVUserSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetSteamTVUserSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetSteamTVUserSettings_Request::CopyFrom(const CSteamTV_SetSteamTVUserSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetSteamTVUserSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetSteamTVUserSettings_Request::IsInitialized() const {
  return true;
}

void CSteamTV_SetSteamTVUserSettings_Request::InternalSwap(CSteamTV_SetSteamTVUserSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_SetSteamTVUserSettings_Request, stream_live_notification_)
      + sizeof(CSteamTV_SetSteamTVUserSettings_Request::stream_live_notification_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_SetSteamTVUserSettings_Request, stream_live_email_)>(
          reinterpret_cast<char*>(&stream_live_email_),
          reinterpret_cast<char*>(&other->stream_live_email_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetSteamTVUserSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_SetSteamTVUserSettings_Response::_Internal {
 public:
};

CSteamTV_SetSteamTVUserSettings_Response::CSteamTV_SetSteamTVUserSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_SetSteamTVUserSettings_Response)
}
CSteamTV_SetSteamTVUserSettings_Response::CSteamTV_SetSteamTVUserSettings_Response(const CSteamTV_SetSteamTVUserSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_SetSteamTVUserSettings_Response)
}

void CSteamTV_SetSteamTVUserSettings_Response::SharedCtor() {
}

CSteamTV_SetSteamTVUserSettings_Response::~CSteamTV_SetSteamTVUserSettings_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_SetSteamTVUserSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_SetSteamTVUserSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_SetSteamTVUserSettings_Response::ArenaDtor(void* object) {
  CSteamTV_SetSteamTVUserSettings_Response* _this = reinterpret_cast< CSteamTV_SetSteamTVUserSettings_Response* >(object);
  (void)_this;
}
void CSteamTV_SetSteamTVUserSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_SetSteamTVUserSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_SetSteamTVUserSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_SetSteamTVUserSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_SetSteamTVUserSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_SetSteamTVUserSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_SetSteamTVUserSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_SetSteamTVUserSettings_Response)
  return target;
}

size_t CSteamTV_SetSteamTVUserSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_SetSteamTVUserSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_SetSteamTVUserSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_SetSteamTVUserSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_SetSteamTVUserSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_SetSteamTVUserSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_SetSteamTVUserSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_SetSteamTVUserSettings_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_SetSteamTVUserSettings_Response::MergeFrom(const CSteamTV_SetSteamTVUserSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_SetSteamTVUserSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_SetSteamTVUserSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_SetSteamTVUserSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_SetSteamTVUserSettings_Response::CopyFrom(const CSteamTV_SetSteamTVUserSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_SetSteamTVUserSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_SetSteamTVUserSettings_Response::IsInitialized() const {
  return true;
}

void CSteamTV_SetSteamTVUserSettings_Response::InternalSwap(CSteamTV_SetSteamTVUserSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_SetSteamTVUserSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetMyBroadcastChannels_Request::_Internal {
 public:
};

CSteamTV_GetMyBroadcastChannels_Request::CSteamTV_GetMyBroadcastChannels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetMyBroadcastChannels_Request)
}
CSteamTV_GetMyBroadcastChannels_Request::CSteamTV_GetMyBroadcastChannels_Request(const CSteamTV_GetMyBroadcastChannels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetMyBroadcastChannels_Request)
}

void CSteamTV_GetMyBroadcastChannels_Request::SharedCtor() {
}

CSteamTV_GetMyBroadcastChannels_Request::~CSteamTV_GetMyBroadcastChannels_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetMyBroadcastChannels_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetMyBroadcastChannels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetMyBroadcastChannels_Request::ArenaDtor(void* object) {
  CSteamTV_GetMyBroadcastChannels_Request* _this = reinterpret_cast< CSteamTV_GetMyBroadcastChannels_Request* >(object);
  (void)_this;
}
void CSteamTV_GetMyBroadcastChannels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetMyBroadcastChannels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetMyBroadcastChannels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetMyBroadcastChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetMyBroadcastChannels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetMyBroadcastChannels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetMyBroadcastChannels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetMyBroadcastChannels_Request)
  return target;
}

size_t CSteamTV_GetMyBroadcastChannels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetMyBroadcastChannels_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetMyBroadcastChannels_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetMyBroadcastChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetMyBroadcastChannels_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetMyBroadcastChannels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetMyBroadcastChannels_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetMyBroadcastChannels_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetMyBroadcastChannels_Request::MergeFrom(const CSteamTV_GetMyBroadcastChannels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetMyBroadcastChannels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_GetMyBroadcastChannels_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetMyBroadcastChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetMyBroadcastChannels_Request::CopyFrom(const CSteamTV_GetMyBroadcastChannels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetMyBroadcastChannels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetMyBroadcastChannels_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetMyBroadcastChannels_Request::InternalSwap(CSteamTV_GetMyBroadcastChannels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetMyBroadcastChannels_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetMyBroadcastChannels_Response::_Internal {
 public:
};

CSteamTV_GetMyBroadcastChannels_Response::CSteamTV_GetMyBroadcastChannels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetMyBroadcastChannels_Response)
}
CSteamTV_GetMyBroadcastChannels_Response::CSteamTV_GetMyBroadcastChannels_Response(const CSteamTV_GetMyBroadcastChannels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetMyBroadcastChannels_Response)
}

void CSteamTV_GetMyBroadcastChannels_Response::SharedCtor() {
}

CSteamTV_GetMyBroadcastChannels_Response::~CSteamTV_GetMyBroadcastChannels_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetMyBroadcastChannels_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetMyBroadcastChannels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetMyBroadcastChannels_Response::ArenaDtor(void* object) {
  CSteamTV_GetMyBroadcastChannels_Response* _this = reinterpret_cast< CSteamTV_GetMyBroadcastChannels_Response* >(object);
  (void)_this;
}
void CSteamTV_GetMyBroadcastChannels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetMyBroadcastChannels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetMyBroadcastChannels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetMyBroadcastChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetMyBroadcastChannels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetMyBroadcastChannels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetMyBroadcastChannels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetMyBroadcastChannels_Response)
  return target;
}

size_t CSteamTV_GetMyBroadcastChannels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetMyBroadcastChannels_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetMyBroadcastChannels_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetMyBroadcastChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetMyBroadcastChannels_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetMyBroadcastChannels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetMyBroadcastChannels_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetMyBroadcastChannels_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetMyBroadcastChannels_Response::MergeFrom(const CSteamTV_GetMyBroadcastChannels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetMyBroadcastChannels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CSteamTV_GetMyBroadcastChannels_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetMyBroadcastChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetMyBroadcastChannels_Response::CopyFrom(const CSteamTV_GetMyBroadcastChannels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetMyBroadcastChannels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetMyBroadcastChannels_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetMyBroadcastChannels_Response::InternalSwap(CSteamTV_GetMyBroadcastChannels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetMyBroadcastChannels_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetHomePageContents_Request::_Internal {
 public:
};

CSteamTV_GetHomePageContents_Request::CSteamTV_GetHomePageContents_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetHomePageContents_Request)
}
CSteamTV_GetHomePageContents_Request::CSteamTV_GetHomePageContents_Request(const CSteamTV_GetHomePageContents_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetHomePageContents_Request)
}

void CSteamTV_GetHomePageContents_Request::SharedCtor() {
}

CSteamTV_GetHomePageContents_Request::~CSteamTV_GetHomePageContents_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetHomePageContents_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetHomePageContents_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetHomePageContents_Request::ArenaDtor(void* object) {
  CSteamTV_GetHomePageContents_Request* _this = reinterpret_cast< CSteamTV_GetHomePageContents_Request* >(object);
  (void)_this;
}
void CSteamTV_GetHomePageContents_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetHomePageContents_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetHomePageContents_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetHomePageContents_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetHomePageContents_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetHomePageContents_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetHomePageContents_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetHomePageContents_Request)
  return target;
}

size_t CSteamTV_GetHomePageContents_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetHomePageContents_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetHomePageContents_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetHomePageContents_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetHomePageContents_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetHomePageContents_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetHomePageContents_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetHomePageContents_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_GetHomePageContents_Request::MergeFrom(const CSteamTV_GetHomePageContents_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetHomePageContents_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamTV_GetHomePageContents_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetHomePageContents_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetHomePageContents_Request::CopyFrom(const CSteamTV_GetHomePageContents_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetHomePageContents_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetHomePageContents_Request::IsInitialized() const {
  return true;
}

void CSteamTV_GetHomePageContents_Request::InternalSwap(CSteamTV_GetHomePageContents_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetHomePageContents_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_Takeover::_Internal {
 public:
};

CSteamTV_HomePageTemplate_Takeover::CSteamTV_HomePageTemplate_Takeover(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcasts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_Takeover)
}
CSteamTV_HomePageTemplate_Takeover::CSteamTV_HomePageTemplate_Takeover(const CSteamTV_HomePageTemplate_Takeover& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broadcasts_(from.broadcasts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_Takeover)
}

void CSteamTV_HomePageTemplate_Takeover::SharedCtor() {
}

CSteamTV_HomePageTemplate_Takeover::~CSteamTV_HomePageTemplate_Takeover() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_Takeover)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_Takeover::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_HomePageTemplate_Takeover::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_Takeover* _this = reinterpret_cast< CSteamTV_HomePageTemplate_Takeover* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_Takeover::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_Takeover::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_Takeover::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_Takeover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcasts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_Takeover::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry broadcasts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_Takeover::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_Takeover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcasts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_Takeover)
  return target;
}

size_t CSteamTV_HomePageTemplate_Takeover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_Takeover)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  total_size += 1UL * this->_internal_broadcasts_size();
  for (const auto& msg : this->broadcasts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_Takeover::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_Takeover)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_Takeover* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_Takeover>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_Takeover)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_Takeover)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_Takeover::MergeFrom(const CSteamTV_HomePageTemplate_Takeover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_Takeover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcasts_.MergeFrom(from.broadcasts_);
}

void CSteamTV_HomePageTemplate_Takeover::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_Takeover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_Takeover::CopyFrom(const CSteamTV_HomePageTemplate_Takeover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_Takeover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_Takeover::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_Takeover::InternalSwap(CSteamTV_HomePageTemplate_Takeover* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  broadcasts_.InternalSwap(&other->broadcasts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_Takeover::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_SingleGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_SingleGame>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_HomePageTemplate_SingleGame::CSteamTV_HomePageTemplate_SingleGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcasts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_SingleGame)
}
CSteamTV_HomePageTemplate_SingleGame::CSteamTV_HomePageTemplate_SingleGame(const CSteamTV_HomePageTemplate_SingleGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      broadcasts_(from.broadcasts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_SingleGame)
}

void CSteamTV_HomePageTemplate_SingleGame::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CSteamTV_HomePageTemplate_SingleGame::~CSteamTV_HomePageTemplate_SingleGame() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_SingleGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_SingleGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_HomePageTemplate_SingleGame::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_SingleGame* _this = reinterpret_cast< CSteamTV_HomePageTemplate_SingleGame* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_SingleGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_SingleGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_SingleGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_SingleGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcasts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_SingleGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry broadcasts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_SingleGame.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_SingleGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_SingleGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcasts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_SingleGame.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_SingleGame)
  return target;
}

size_t CSteamTV_HomePageTemplate_SingleGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_SingleGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  total_size += 1UL * this->_internal_broadcasts_size();
  for (const auto& msg : this->broadcasts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_SingleGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_SingleGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_SingleGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_SingleGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_SingleGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_SingleGame)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_SingleGame::MergeFrom(const CSteamTV_HomePageTemplate_SingleGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_SingleGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcasts_.MergeFrom(from.broadcasts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_HomePageTemplate_SingleGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_SingleGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_SingleGame::CopyFrom(const CSteamTV_HomePageTemplate_SingleGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_SingleGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_SingleGame::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_SingleGame::InternalSwap(CSteamTV_HomePageTemplate_SingleGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  broadcasts_.InternalSwap(&other->broadcasts_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_SingleGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameListEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListEntry>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GetBroadcastChannelEntry& broadcast(const GameListEntry* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::GetBroadcastChannelEntry&
GameListEntry::_Internal::broadcast(const GameListEntry* msg) {
  return *msg->broadcast_;
}
GameListEntry::GameListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListEntry)
}
GameListEntry::GameListEntry(const GameListEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::GetBroadcastChannelEntry(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:GameListEntry)
}

void GameListEntry::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&broadcast_)) + sizeof(appid_));
}

GameListEntry::~GameListEntry() {
  // @@protoc_insertion_point(destructor:GameListEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameListEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
}

void GameListEntry::ArenaDtor(void* object) {
  GameListEntry* _this = reinterpret_cast< GameListEntry* >(object);
  (void)_this;
}
void GameListEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameListEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameListEntry.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GetBroadcastChannelEntry broadcast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameListEntry.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional .GetBroadcastChannelEntry broadcast = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::broadcast(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListEntry)
  return target;
}

size_t GameListEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional .GetBroadcastChannelEntry broadcast = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameListEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GameListEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameListEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameListEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameListEntry)
    MergeFrom(*source);
  }
}

void GameListEntry::MergeFrom(const GameListEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_broadcast()->::GetBroadcastChannelEntry::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameListEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListEntry::CopyFrom(const GameListEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListEntry::IsInitialized() const {
  return true;
}

void GameListEntry::InternalSwap(GameListEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListEntry, appid_)
      + sizeof(GameListEntry::appid_)
      - PROTOBUF_FIELD_OFFSET(GameListEntry, broadcast_)>(
          reinterpret_cast<char*>(&broadcast_),
          reinterpret_cast<char*>(&other->broadcast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_GameList::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_GameList>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_HomePageTemplate_GameList::CSteamTV_HomePageTemplate_GameList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_GameList)
}
CSteamTV_HomePageTemplate_GameList::CSteamTV_HomePageTemplate_GameList(const CSteamTV_HomePageTemplate_GameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_GameList)
}

void CSteamTV_HomePageTemplate_GameList::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_HomePageTemplate_GameList::~CSteamTV_HomePageTemplate_GameList() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_GameList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_GameList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_HomePageTemplate_GameList::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_GameList* _this = reinterpret_cast< CSteamTV_HomePageTemplate_GameList* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_GameList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_GameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_GameList::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_GameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_GameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameListEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_GameList.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_GameList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_GameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameListEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_GameList.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_GameList)
  return target;
}

size_t CSteamTV_HomePageTemplate_GameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_GameList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameListEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_GameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_GameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_GameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_GameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_GameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_GameList)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_GameList::MergeFrom(const CSteamTV_HomePageTemplate_GameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_GameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
}

void CSteamTV_HomePageTemplate_GameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_GameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_GameList::CopyFrom(const CSteamTV_HomePageTemplate_GameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_GameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_GameList::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_GameList::InternalSwap(CSteamTV_HomePageTemplate_GameList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_GameList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_QuickExplore::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_QuickExplore>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_HomePageTemplate_QuickExplore::CSteamTV_HomePageTemplate_QuickExplore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcasts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_QuickExplore)
}
CSteamTV_HomePageTemplate_QuickExplore::CSteamTV_HomePageTemplate_QuickExplore(const CSteamTV_HomePageTemplate_QuickExplore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      broadcasts_(from.broadcasts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_QuickExplore)
}

void CSteamTV_HomePageTemplate_QuickExplore::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_HomePageTemplate_QuickExplore::~CSteamTV_HomePageTemplate_QuickExplore() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_QuickExplore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_QuickExplore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_HomePageTemplate_QuickExplore::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_QuickExplore* _this = reinterpret_cast< CSteamTV_HomePageTemplate_QuickExplore* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_QuickExplore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_QuickExplore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_QuickExplore::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_QuickExplore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcasts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_QuickExplore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry broadcasts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_QuickExplore.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_QuickExplore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_QuickExplore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcasts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_QuickExplore.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_QuickExplore)
  return target;
}

size_t CSteamTV_HomePageTemplate_QuickExplore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_QuickExplore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  total_size += 1UL * this->_internal_broadcasts_size();
  for (const auto& msg : this->broadcasts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_QuickExplore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_QuickExplore)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_QuickExplore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_QuickExplore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_QuickExplore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_QuickExplore)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_QuickExplore::MergeFrom(const CSteamTV_HomePageTemplate_QuickExplore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_QuickExplore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcasts_.MergeFrom(from.broadcasts_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
}

void CSteamTV_HomePageTemplate_QuickExplore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_QuickExplore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_QuickExplore::CopyFrom(const CSteamTV_HomePageTemplate_QuickExplore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_QuickExplore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_QuickExplore::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_QuickExplore::InternalSwap(CSteamTV_HomePageTemplate_QuickExplore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  broadcasts_.InternalSwap(&other->broadcasts_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_QuickExplore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_ConveyorBelt::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_ConveyorBelt>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_HomePageTemplate_ConveyorBelt::CSteamTV_HomePageTemplate_ConveyorBelt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcasts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_ConveyorBelt)
}
CSteamTV_HomePageTemplate_ConveyorBelt::CSteamTV_HomePageTemplate_ConveyorBelt(const CSteamTV_HomePageTemplate_ConveyorBelt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      broadcasts_(from.broadcasts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_ConveyorBelt)
}

void CSteamTV_HomePageTemplate_ConveyorBelt::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_HomePageTemplate_ConveyorBelt::~CSteamTV_HomePageTemplate_ConveyorBelt() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_ConveyorBelt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_ConveyorBelt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_HomePageTemplate_ConveyorBelt::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_ConveyorBelt* _this = reinterpret_cast< CSteamTV_HomePageTemplate_ConveyorBelt* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_ConveyorBelt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_ConveyorBelt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_ConveyorBelt::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcasts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_ConveyorBelt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GetBroadcastChannelEntry broadcasts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_ConveyorBelt.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_ConveyorBelt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcasts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_ConveyorBelt.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_ConveyorBelt)
  return target;
}

size_t CSteamTV_HomePageTemplate_ConveyorBelt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GetBroadcastChannelEntry broadcasts = 1;
  total_size += 1UL * this->_internal_broadcasts_size();
  for (const auto& msg : this->broadcasts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_ConveyorBelt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_ConveyorBelt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_ConveyorBelt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_ConveyorBelt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_ConveyorBelt)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_ConveyorBelt::MergeFrom(const CSteamTV_HomePageTemplate_ConveyorBelt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcasts_.MergeFrom(from.broadcasts_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
}

void CSteamTV_HomePageTemplate_ConveyorBelt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_ConveyorBelt::CopyFrom(const CSteamTV_HomePageTemplate_ConveyorBelt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_ConveyorBelt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_ConveyorBelt::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_ConveyorBelt::InternalSwap(CSteamTV_HomePageTemplate_ConveyorBelt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  broadcasts_.InternalSwap(&other->broadcasts_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_ConveyorBelt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_WatchParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_WatchParty>()._has_bits_);
  static const ::GetBroadcastChannelEntry& broadcast(const CSteamTV_HomePageTemplate_WatchParty* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::GetBroadcastChannelEntry&
CSteamTV_HomePageTemplate_WatchParty::_Internal::broadcast(const CSteamTV_HomePageTemplate_WatchParty* msg) {
  return *msg->broadcast_;
}
CSteamTV_HomePageTemplate_WatchParty::CSteamTV_HomePageTemplate_WatchParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_WatchParty)
}
CSteamTV_HomePageTemplate_WatchParty::CSteamTV_HomePageTemplate_WatchParty(const CSteamTV_HomePageTemplate_WatchParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::GetBroadcastChannelEntry(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_WatchParty)
}

void CSteamTV_HomePageTemplate_WatchParty::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&broadcast_)) + sizeof(chat_group_id_));
}

CSteamTV_HomePageTemplate_WatchParty::~CSteamTV_HomePageTemplate_WatchParty() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_WatchParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_WatchParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
}

void CSteamTV_HomePageTemplate_WatchParty::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_WatchParty* _this = reinterpret_cast< CSteamTV_HomePageTemplate_WatchParty* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_WatchParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_WatchParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_WatchParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_WatchParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
  }
  chat_group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_WatchParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GetBroadcastChannelEntry broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_WatchParty.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chat_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_WatchParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_WatchParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GetBroadcastChannelEntry broadcast = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::broadcast(this), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_WatchParty.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional uint64 chat_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_WatchParty)
  return target;
}

size_t CSteamTV_HomePageTemplate_WatchParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_WatchParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .GetBroadcastChannelEntry broadcast = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional uint64 chat_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chat_group_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_WatchParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_WatchParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_WatchParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_WatchParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_WatchParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_WatchParty)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_WatchParty::MergeFrom(const CSteamTV_HomePageTemplate_WatchParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_WatchParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_broadcast()->::GetBroadcastChannelEntry::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_HomePageTemplate_WatchParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_WatchParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_WatchParty::CopyFrom(const CSteamTV_HomePageTemplate_WatchParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_WatchParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_WatchParty::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_WatchParty::InternalSwap(CSteamTV_HomePageTemplate_WatchParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_HomePageTemplate_WatchParty, chat_group_id_)
      + sizeof(CSteamTV_HomePageTemplate_WatchParty::chat_group_id_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_HomePageTemplate_WatchParty, broadcast_)>(
          reinterpret_cast<char*>(&broadcast_),
          reinterpret_cast<char*>(&other->broadcast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_WatchParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_Developer::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_Developer>()._has_bits_);
  static const ::GetBroadcastChannelEntry& broadcast(const CSteamTV_HomePageTemplate_Developer* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GetBroadcastChannelEntry&
CSteamTV_HomePageTemplate_Developer::_Internal::broadcast(const CSteamTV_HomePageTemplate_Developer* msg) {
  return *msg->broadcast_;
}
CSteamTV_HomePageTemplate_Developer::CSteamTV_HomePageTemplate_Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_Developer)
}
CSteamTV_HomePageTemplate_Developer::CSteamTV_HomePageTemplate_Developer(const CSteamTV_HomePageTemplate_Developer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::GetBroadcastChannelEntry(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_Developer)
}

void CSteamTV_HomePageTemplate_Developer::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
broadcast_ = nullptr;
}

CSteamTV_HomePageTemplate_Developer::~CSteamTV_HomePageTemplate_Developer() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_Developer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_Developer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
}

void CSteamTV_HomePageTemplate_Developer::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_Developer* _this = reinterpret_cast< CSteamTV_HomePageTemplate_Developer* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_Developer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_Developer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_Developer::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_Developer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_Developer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GetBroadcastChannelEntry broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_Developer.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_Developer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_Developer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GetBroadcastChannelEntry broadcast = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::broadcast(this), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_Developer.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_Developer)
  return target;
}

size_t CSteamTV_HomePageTemplate_Developer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_Developer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .GetBroadcastChannelEntry broadcast = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_Developer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_Developer)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_Developer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_Developer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_Developer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_Developer)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_Developer::MergeFrom(const CSteamTV_HomePageTemplate_Developer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_Developer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_broadcast()->::GetBroadcastChannelEntry::MergeFrom(from._internal_broadcast());
    }
  }
}

void CSteamTV_HomePageTemplate_Developer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_Developer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_Developer::CopyFrom(const CSteamTV_HomePageTemplate_Developer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_Developer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_Developer::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_Developer::InternalSwap(CSteamTV_HomePageTemplate_Developer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_Developer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageTemplate_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageTemplate_Event>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_HomePageTemplate_Event::CSteamTV_HomePageTemplate_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageTemplate_Event)
}
CSteamTV_HomePageTemplate_Event::CSteamTV_HomePageTemplate_Event(const CSteamTV_HomePageTemplate_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageTemplate_Event)
}

void CSteamTV_HomePageTemplate_Event::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamTV_HomePageTemplate_Event::~CSteamTV_HomePageTemplate_Event() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageTemplate_Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageTemplate_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamTV_HomePageTemplate_Event::ArenaDtor(void* object) {
  CSteamTV_HomePageTemplate_Event* _this = reinterpret_cast< CSteamTV_HomePageTemplate_Event* >(object);
  (void)_this;
}
void CSteamTV_HomePageTemplate_Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageTemplate_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageTemplate_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageTemplate_Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageTemplate_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamTV_HomePageTemplate_Event.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageTemplate_Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageTemplate_Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamTV_HomePageTemplate_Event.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageTemplate_Event)
  return target;
}

size_t CSteamTV_HomePageTemplate_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageTemplate_Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string title = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageTemplate_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageTemplate_Event)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageTemplate_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageTemplate_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageTemplate_Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageTemplate_Event)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageTemplate_Event::MergeFrom(const CSteamTV_HomePageTemplate_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageTemplate_Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
}

void CSteamTV_HomePageTemplate_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageTemplate_Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageTemplate_Event::CopyFrom(const CSteamTV_HomePageTemplate_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageTemplate_Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageTemplate_Event::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageTemplate_Event::InternalSwap(CSteamTV_HomePageTemplate_Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageTemplate_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_HomePageContentRow::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_HomePageContentRow>()._has_bits_);
  static void set_has_template_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CSteamTV_HomePageTemplate_Takeover& takeover(const CSteamTV_HomePageContentRow* msg);
  static void set_has_takeover(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSteamTV_HomePageTemplate_SingleGame& single_game(const CSteamTV_HomePageContentRow* msg);
  static void set_has_single_game(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSteamTV_HomePageTemplate_GameList& game_list(const CSteamTV_HomePageContentRow* msg);
  static void set_has_game_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CSteamTV_HomePageTemplate_QuickExplore& quicexplore(const CSteamTV_HomePageContentRow* msg);
  static void set_has_quicexplore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CSteamTV_HomePageTemplate_ConveyorBelt& conveyor_belt(const CSteamTV_HomePageContentRow* msg);
  static void set_has_conveyor_belt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CSteamTV_HomePageTemplate_WatchParty& watch_party(const CSteamTV_HomePageContentRow* msg);
  static void set_has_watch_party(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CSteamTV_HomePageTemplate_Developer& developer(const CSteamTV_HomePageContentRow* msg);
  static void set_has_developer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSteamTV_HomePageTemplate_Event& event(const CSteamTV_HomePageContentRow* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CSteamTV_HomePageTemplate_Takeover&
CSteamTV_HomePageContentRow::_Internal::takeover(const CSteamTV_HomePageContentRow* msg) {
  return *msg->takeover_;
}
const ::CSteamTV_HomePageTemplate_SingleGame&
CSteamTV_HomePageContentRow::_Internal::single_game(const CSteamTV_HomePageContentRow* msg) {
  return *msg->single_game_;
}
const ::CSteamTV_HomePageTemplate_GameList&
CSteamTV_HomePageContentRow::_Internal::game_list(const CSteamTV_HomePageContentRow* msg) {
  return *msg->game_list_;
}
const ::CSteamTV_HomePageTemplate_QuickExplore&
CSteamTV_HomePageContentRow::_Internal::quicexplore(const CSteamTV_HomePageContentRow* msg) {
  return *msg->quicexplore_;
}
const ::CSteamTV_HomePageTemplate_ConveyorBelt&
CSteamTV_HomePageContentRow::_Internal::conveyor_belt(const CSteamTV_HomePageContentRow* msg) {
  return *msg->conveyor_belt_;
}
const ::CSteamTV_HomePageTemplate_WatchParty&
CSteamTV_HomePageContentRow::_Internal::watch_party(const CSteamTV_HomePageContentRow* msg) {
  return *msg->watch_party_;
}
const ::CSteamTV_HomePageTemplate_Developer&
CSteamTV_HomePageContentRow::_Internal::developer(const CSteamTV_HomePageContentRow* msg) {
  return *msg->developer_;
}
const ::CSteamTV_HomePageTemplate_Event&
CSteamTV_HomePageContentRow::_Internal::event(const CSteamTV_HomePageContentRow* msg) {
  return *msg->event_;
}
CSteamTV_HomePageContentRow::CSteamTV_HomePageContentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_HomePageContentRow)
}
CSteamTV_HomePageContentRow::CSteamTV_HomePageContentRow(const CSteamTV_HomePageContentRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_takeover()) {
    takeover_ = new ::CSteamTV_HomePageTemplate_Takeover(*from.takeover_);
  } else {
    takeover_ = nullptr;
  }
  if (from._internal_has_single_game()) {
    single_game_ = new ::CSteamTV_HomePageTemplate_SingleGame(*from.single_game_);
  } else {
    single_game_ = nullptr;
  }
  if (from._internal_has_game_list()) {
    game_list_ = new ::CSteamTV_HomePageTemplate_GameList(*from.game_list_);
  } else {
    game_list_ = nullptr;
  }
  if (from._internal_has_quicexplore()) {
    quicexplore_ = new ::CSteamTV_HomePageTemplate_QuickExplore(*from.quicexplore_);
  } else {
    quicexplore_ = nullptr;
  }
  if (from._internal_has_conveyor_belt()) {
    conveyor_belt_ = new ::CSteamTV_HomePageTemplate_ConveyorBelt(*from.conveyor_belt_);
  } else {
    conveyor_belt_ = nullptr;
  }
  if (from._internal_has_watch_party()) {
    watch_party_ = new ::CSteamTV_HomePageTemplate_WatchParty(*from.watch_party_);
  } else {
    watch_party_ = nullptr;
  }
  if (from._internal_has_developer()) {
    developer_ = new ::CSteamTV_HomePageTemplate_Developer(*from.developer_);
  } else {
    developer_ = nullptr;
  }
  if (from._internal_has_event()) {
    event_ = new ::CSteamTV_HomePageTemplate_Event(*from.event_);
  } else {
    event_ = nullptr;
  }
  template_type_ = from.template_type_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_HomePageContentRow)
}

void CSteamTV_HomePageContentRow::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&takeover_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&template_type_) -
    reinterpret_cast<char*>(&takeover_)) + sizeof(template_type_));
}

CSteamTV_HomePageContentRow::~CSteamTV_HomePageContentRow() {
  // @@protoc_insertion_point(destructor:CSteamTV_HomePageContentRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_HomePageContentRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete takeover_;
  if (this != internal_default_instance()) delete single_game_;
  if (this != internal_default_instance()) delete game_list_;
  if (this != internal_default_instance()) delete quicexplore_;
  if (this != internal_default_instance()) delete conveyor_belt_;
  if (this != internal_default_instance()) delete watch_party_;
  if (this != internal_default_instance()) delete developer_;
  if (this != internal_default_instance()) delete event_;
}

void CSteamTV_HomePageContentRow::ArenaDtor(void* object) {
  CSteamTV_HomePageContentRow* _this = reinterpret_cast< CSteamTV_HomePageContentRow* >(object);
  (void)_this;
}
void CSteamTV_HomePageContentRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_HomePageContentRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_HomePageContentRow::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_HomePageContentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(takeover_ != nullptr);
      takeover_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(single_game_ != nullptr);
      single_game_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_list_ != nullptr);
      game_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(quicexplore_ != nullptr);
      quicexplore_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(conveyor_belt_ != nullptr);
      conveyor_belt_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(watch_party_ != nullptr);
      watch_party_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(developer_ != nullptr);
      developer_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
  }
  template_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_HomePageContentRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ESteamTVContentTemplate template_type = 1 [default = ESteamTVContentTemplate_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamTVContentTemplate_IsValid(val))) {
            _internal_set_template_type(static_cast<::ESteamTVContentTemplate>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_Takeover takeover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_takeover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_SingleGame single_game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_GameList game_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_QuickExplore quicexplore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quicexplore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_ConveyorBelt conveyor_belt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_conveyor_belt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_WatchParty watch_party = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_watch_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_Developer developer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_developer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSteamTV_HomePageTemplate_Event event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_HomePageContentRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_HomePageContentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESteamTVContentTemplate template_type = 1 [default = ESteamTVContentTemplate_Invalid];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_template_type(), target);
  }

  // optional .CSteamTV_HomePageTemplate_Takeover takeover = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::takeover(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_SingleGame single_game = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::single_game(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_GameList game_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::game_list(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_QuickExplore quicexplore = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::quicexplore(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_ConveyorBelt conveyor_belt = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::conveyor_belt(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_WatchParty watch_party = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::watch_party(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_Developer developer = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::developer(this), target, stream);
  }

  // optional .CSteamTV_HomePageTemplate_Event event = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_HomePageContentRow)
  return target;
}

size_t CSteamTV_HomePageContentRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_HomePageContentRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CSteamTV_HomePageTemplate_Takeover takeover = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *takeover_);
    }

    // optional .CSteamTV_HomePageTemplate_SingleGame single_game = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *single_game_);
    }

    // optional .CSteamTV_HomePageTemplate_GameList game_list = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_list_);
    }

    // optional .CSteamTV_HomePageTemplate_QuickExplore quicexplore = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quicexplore_);
    }

    // optional .CSteamTV_HomePageTemplate_ConveyorBelt conveyor_belt = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conveyor_belt_);
    }

    // optional .CSteamTV_HomePageTemplate_WatchParty watch_party = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watch_party_);
    }

    // optional .CSteamTV_HomePageTemplate_Developer developer = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *developer_);
    }

    // optional .CSteamTV_HomePageTemplate_Event event = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_);
    }

  }
  // optional .ESteamTVContentTemplate template_type = 1 [default = ESteamTVContentTemplate_Invalid];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_template_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_HomePageContentRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_HomePageContentRow)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_HomePageContentRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_HomePageContentRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_HomePageContentRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_HomePageContentRow)
    MergeFrom(*source);
  }
}

void CSteamTV_HomePageContentRow::MergeFrom(const CSteamTV_HomePageContentRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_HomePageContentRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_takeover()->::CSteamTV_HomePageTemplate_Takeover::MergeFrom(from._internal_takeover());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_single_game()->::CSteamTV_HomePageTemplate_SingleGame::MergeFrom(from._internal_single_game());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_game_list()->::CSteamTV_HomePageTemplate_GameList::MergeFrom(from._internal_game_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_quicexplore()->::CSteamTV_HomePageTemplate_QuickExplore::MergeFrom(from._internal_quicexplore());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_conveyor_belt()->::CSteamTV_HomePageTemplate_ConveyorBelt::MergeFrom(from._internal_conveyor_belt());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_watch_party()->::CSteamTV_HomePageTemplate_WatchParty::MergeFrom(from._internal_watch_party());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_developer()->::CSteamTV_HomePageTemplate_Developer::MergeFrom(from._internal_developer());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_event()->::CSteamTV_HomePageTemplate_Event::MergeFrom(from._internal_event());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_template_type(from._internal_template_type());
  }
}

void CSteamTV_HomePageContentRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_HomePageContentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_HomePageContentRow::CopyFrom(const CSteamTV_HomePageContentRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_HomePageContentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_HomePageContentRow::IsInitialized() const {
  return true;
}

void CSteamTV_HomePageContentRow::InternalSwap(CSteamTV_HomePageContentRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_HomePageContentRow, template_type_)
      + sizeof(CSteamTV_HomePageContentRow::template_type_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_HomePageContentRow, takeover_)>(
          reinterpret_cast<char*>(&takeover_),
          reinterpret_cast<char*>(&other->takeover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_HomePageContentRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_GetHomePageContents_Response::_Internal {
 public:
};

CSteamTV_GetHomePageContents_Response::CSteamTV_GetHomePageContents_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rows_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_GetHomePageContents_Response)
}
CSteamTV_GetHomePageContents_Response::CSteamTV_GetHomePageContents_Response(const CSteamTV_GetHomePageContents_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamTV_GetHomePageContents_Response)
}

void CSteamTV_GetHomePageContents_Response::SharedCtor() {
}

CSteamTV_GetHomePageContents_Response::~CSteamTV_GetHomePageContents_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_GetHomePageContents_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_GetHomePageContents_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_GetHomePageContents_Response::ArenaDtor(void* object) {
  CSteamTV_GetHomePageContents_Response* _this = reinterpret_cast< CSteamTV_GetHomePageContents_Response* >(object);
  (void)_this;
}
void CSteamTV_GetHomePageContents_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_GetHomePageContents_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_GetHomePageContents_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_GetHomePageContents_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_GetHomePageContents_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSteamTV_HomePageContentRow rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_GetHomePageContents_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_GetHomePageContents_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSteamTV_HomePageContentRow rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_GetHomePageContents_Response)
  return target;
}

size_t CSteamTV_GetHomePageContents_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_GetHomePageContents_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_HomePageContentRow rows = 1;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_GetHomePageContents_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_GetHomePageContents_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_GetHomePageContents_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_GetHomePageContents_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_GetHomePageContents_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_GetHomePageContents_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_GetHomePageContents_Response::MergeFrom(const CSteamTV_GetHomePageContents_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_GetHomePageContents_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
}

void CSteamTV_GetHomePageContents_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_GetHomePageContents_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_GetHomePageContents_Response::CopyFrom(const CSteamTV_GetHomePageContents_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_GetHomePageContents_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_GetHomePageContents_Response::IsInitialized() const {
  return true;
}

void CSteamTV_GetHomePageContents_Response::InternalSwap(CSteamTV_GetHomePageContents_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_GetHomePageContents_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AppCheer_SingleCheerType::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AppCheer_SingleCheerType>()._has_bits_);
  static void set_has_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamTV_AppCheer_SingleCheerType::CSteamTV_AppCheer_SingleCheerType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AppCheer_SingleCheerType)
}
CSteamTV_AppCheer_SingleCheerType::CSteamTV_AppCheer_SingleCheerType(const CSteamTV_AppCheer_SingleCheerType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cheer_type_, &from.cheer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cheer_amount_) -
    reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_amount_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AppCheer_SingleCheerType)
}

void CSteamTV_AppCheer_SingleCheerType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cheer_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cheer_amount_) -
    reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_amount_));
}

CSteamTV_AppCheer_SingleCheerType::~CSteamTV_AppCheer_SingleCheerType() {
  // @@protoc_insertion_point(destructor:CSteamTV_AppCheer_SingleCheerType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AppCheer_SingleCheerType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AppCheer_SingleCheerType::ArenaDtor(void* object) {
  CSteamTV_AppCheer_SingleCheerType* _this = reinterpret_cast< CSteamTV_AppCheer_SingleCheerType* >(object);
  (void)_this;
}
void CSteamTV_AppCheer_SingleCheerType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AppCheer_SingleCheerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AppCheer_SingleCheerType::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AppCheer_SingleCheerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cheer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cheer_amount_) -
        reinterpret_cast<char*>(&cheer_type_)) + sizeof(cheer_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AppCheer_SingleCheerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cheer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cheer_type(&has_bits);
          cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheer_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cheer_amount(&has_bits);
          cheer_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AppCheer_SingleCheerType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AppCheer_SingleCheerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cheer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_type(), target);
  }

  // optional uint32 cheer_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cheer_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AppCheer_SingleCheerType)
  return target;
}

size_t CSteamTV_AppCheer_SingleCheerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AppCheer_SingleCheerType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cheer_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_type());
    }

    // optional uint32 cheer_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheer_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AppCheer_SingleCheerType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AppCheer_SingleCheerType)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AppCheer_SingleCheerType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AppCheer_SingleCheerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AppCheer_SingleCheerType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AppCheer_SingleCheerType)
    MergeFrom(*source);
  }
}

void CSteamTV_AppCheer_SingleCheerType::MergeFrom(const CSteamTV_AppCheer_SingleCheerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AppCheer_SingleCheerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cheer_type_ = from.cheer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      cheer_amount_ = from.cheer_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_AppCheer_SingleCheerType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AppCheer_SingleCheerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AppCheer_SingleCheerType::CopyFrom(const CSteamTV_AppCheer_SingleCheerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AppCheer_SingleCheerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AppCheer_SingleCheerType::IsInitialized() const {
  return true;
}

void CSteamTV_AppCheer_SingleCheerType::InternalSwap(CSteamTV_AppCheer_SingleCheerType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_AppCheer_SingleCheerType, cheer_amount_)
      + sizeof(CSteamTV_AppCheer_SingleCheerType::cheer_amount_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_AppCheer_SingleCheerType, cheer_type_)>(
          reinterpret_cast<char*>(&cheer_type_),
          reinterpret_cast<char*>(&other->cheer_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AppCheer_SingleCheerType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AppCheer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AppCheer_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cheer_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_AppCheer_Request::CSteamTV_AppCheer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cheers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AppCheer_Request)
}
CSteamTV_AppCheer_Request::CSteamTV_AppCheer_Request(const CSteamTV_AppCheer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cheers_(from.cheers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cheer_target_id_, &from.cheer_target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&cheer_target_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AppCheer_Request)
}

void CSteamTV_AppCheer_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cheer_target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&cheer_target_id_)) + sizeof(app_id_));
}

CSteamTV_AppCheer_Request::~CSteamTV_AppCheer_Request() {
  // @@protoc_insertion_point(destructor:CSteamTV_AppCheer_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AppCheer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AppCheer_Request::ArenaDtor(void* object) {
  CSteamTV_AppCheer_Request* _this = reinterpret_cast< CSteamTV_AppCheer_Request* >(object);
  (void)_this;
}
void CSteamTV_AppCheer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AppCheer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AppCheer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AppCheer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cheers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cheer_target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&cheer_target_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AppCheer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 cheer_target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cheer_target_id(&has_bits);
          cheer_target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CSteamTV_AppCheer_SingleCheerType cheers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AppCheer_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AppCheer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 cheer_target_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_cheer_target_id(), target);
  }

  // repeated .CSteamTV_AppCheer_SingleCheerType cheers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cheers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cheers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AppCheer_Request)
  return target;
}

size_t CSteamTV_AppCheer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AppCheer_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamTV_AppCheer_SingleCheerType cheers = 3;
  total_size += 1UL * this->_internal_cheers_size();
  for (const auto& msg : this->cheers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 cheer_target_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AppCheer_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AppCheer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AppCheer_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AppCheer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AppCheer_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AppCheer_Request)
    MergeFrom(*source);
  }
}

void CSteamTV_AppCheer_Request::MergeFrom(const CSteamTV_AppCheer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AppCheer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cheers_.MergeFrom(from.cheers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cheer_target_id_ = from.cheer_target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamTV_AppCheer_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AppCheer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AppCheer_Request::CopyFrom(const CSteamTV_AppCheer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AppCheer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AppCheer_Request::IsInitialized() const {
  return true;
}

void CSteamTV_AppCheer_Request::InternalSwap(CSteamTV_AppCheer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cheers_.InternalSwap(&other->cheers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamTV_AppCheer_Request, app_id_)
      + sizeof(CSteamTV_AppCheer_Request::app_id_)
      - PROTOBUF_FIELD_OFFSET(CSteamTV_AppCheer_Request, cheer_target_id_)>(
          reinterpret_cast<char*>(&cheer_target_id_),
          reinterpret_cast<char*>(&other->cheer_target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AppCheer_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamTV_AppCheer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamTV_AppCheer_Response>()._has_bits_);
  static void set_has_aggregation_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamTV_AppCheer_Response::CSteamTV_AppCheer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamTV_AppCheer_Response)
}
CSteamTV_AppCheer_Response::CSteamTV_AppCheer_Response(const CSteamTV_AppCheer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_delay_ms_ = from.aggregation_delay_ms_;
  // @@protoc_insertion_point(copy_constructor:CSteamTV_AppCheer_Response)
}

void CSteamTV_AppCheer_Response::SharedCtor() {
aggregation_delay_ms_ = 0u;
}

CSteamTV_AppCheer_Response::~CSteamTV_AppCheer_Response() {
  // @@protoc_insertion_point(destructor:CSteamTV_AppCheer_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamTV_AppCheer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamTV_AppCheer_Response::ArenaDtor(void* object) {
  CSteamTV_AppCheer_Response* _this = reinterpret_cast< CSteamTV_AppCheer_Response* >(object);
  (void)_this;
}
void CSteamTV_AppCheer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamTV_AppCheer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamTV_AppCheer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamTV_AppCheer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregation_delay_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamTV_AppCheer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 aggregation_delay_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_aggregation_delay_ms(&has_bits);
          aggregation_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamTV_AppCheer_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamTV_AppCheer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 aggregation_delay_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aggregation_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamTV_AppCheer_Response)
  return target;
}

size_t CSteamTV_AppCheer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamTV_AppCheer_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 aggregation_delay_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aggregation_delay_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamTV_AppCheer_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamTV_AppCheer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamTV_AppCheer_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamTV_AppCheer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamTV_AppCheer_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamTV_AppCheer_Response)
    MergeFrom(*source);
  }
}

void CSteamTV_AppCheer_Response::MergeFrom(const CSteamTV_AppCheer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamTV_AppCheer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_aggregation_delay_ms()) {
    _internal_set_aggregation_delay_ms(from._internal_aggregation_delay_ms());
  }
}

void CSteamTV_AppCheer_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamTV_AppCheer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamTV_AppCheer_Response::CopyFrom(const CSteamTV_AppCheer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamTV_AppCheer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamTV_AppCheer_Response::IsInitialized() const {
  return true;
}

void CSteamTV_AppCheer_Response::InternalSwap(CSteamTV_AppCheer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(aggregation_delay_ms_, other->aggregation_delay_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamTV_AppCheer_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SteamTV::~SteamTV() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamTV::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsteamtv_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamTV::GetDescriptor() {
  return descriptor();
}

void SteamTV::CreateBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_CreateBroadcastChannel_Request*,
                         ::CSteamTV_CreateBroadcastChannel_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateBroadcastChannel() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelID_Request*,
                         ::CSteamTV_GetBroadcastChannelID_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelID() not implemented.");
  done->Run();
}

void SteamTV::SetBroadcastChannelProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_SetBroadcastChannelProfile_Request*,
                         ::CSteamTV_SetBroadcastChannelProfile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetBroadcastChannelProfile() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelProfile_Request*,
                         ::CSteamTV_GetBroadcastChannelProfile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelProfile() not implemented.");
  done->Run();
}

void SteamTV::SetBroadcastChannelImage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_SetBroadcastChannelImage_Request*,
                         ::CSteamTV_SetBroadcastChannelImage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetBroadcastChannelImage() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelImages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelImages_Request*,
                         ::CSteamTV_GetBroadcastChannelImages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelImages() not implemented.");
  done->Run();
}

void SteamTV::SetBroadcastChannelLinkRegions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_SetBroadcastChannelLinkRegions_Request*,
                         ::CSteamTV_SetBroadcastChannelLinkRegions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetBroadcastChannelLinkRegions() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelLinks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelLinks_Request*,
                         ::CSteamTV_GetBroadcastChannelLinks_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelLinks() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelBroadcasters(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelBroadcasters_Request*,
                         ::CSteamTV_GetBroadcastChannelBroadcasters_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelBroadcasters() not implemented.");
  done->Run();
}

void SteamTV::GetFollowedChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetFollowedChannels_Request*,
                         ::CSteamTV_GetFollowedChannels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollowedChannels() not implemented.");
  done->Run();
}

void SteamTV::GetSubscribedChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetSubscribedChannels_Request*,
                         ::CSteamTV_GetSubscribedChannels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSubscribedChannels() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelStatus_Request*,
                         ::CSteamTV_GetBroadcastChannelStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelStatus() not implemented.");
  done->Run();
}

void SteamTV::FollowBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_FollowBroadcastChannel_Request*,
                         ::CSteamTV_FollowBroadcastChannel_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FollowBroadcastChannel() not implemented.");
  done->Run();
}

void SteamTV::SubscribeBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_SubscribeBroadcastChannel_Request*,
                         ::CSteamTV_SubscribeBroadcastChannel_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubscribeBroadcastChannel() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelClips_Request*,
                         ::CSteamTV_GetBroadcastChannelClips_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelClips() not implemented.");
  done->Run();
}

void SteamTV::ReportBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_ReportBroadcastChannel_Request*,
                         ::CSteamTV_ReportBroadcastChannel_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportBroadcastChannel() not implemented.");
  done->Run();
}

void SteamTV::GetBroadcastChannelInteraction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetBroadcastChannelInteraction_Request*,
                         ::CSteamTV_GetBroadcastChannelInteraction_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChannelInteraction() not implemented.");
  done->Run();
}

void SteamTV::GetGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetGames_Request*,
                         ::CSteamTV_GetGames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGames() not implemented.");
  done->Run();
}

void SteamTV::GetChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetChannels_Request*,
                         ::CSteamTV_GetChannels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChannels() not implemented.");
  done->Run();
}

void SteamTV::AddChatBan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_AddChatBan_Request*,
                         ::CSteamTV_AddChatBan_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChatBan() not implemented.");
  done->Run();
}

void SteamTV::GetChatBans(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetChatBans_Request*,
                         ::CSteamTV_GetChatBans_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatBans() not implemented.");
  done->Run();
}

void SteamTV::AddChatModerator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_AddChatModerator_Request*,
                         ::CSteamTV_AddChatModerator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChatModerator() not implemented.");
  done->Run();
}

void SteamTV::GetChatModerators(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetChatModerators_Request*,
                         ::CSteamTV_GetChatModerators_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatModerators() not implemented.");
  done->Run();
}

void SteamTV::AddWordBan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_AddWordBan_Request*,
                         ::CSteamTV_AddWordBan_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddWordBan() not implemented.");
  done->Run();
}

void SteamTV::GetWordBans(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetWordBans_Request*,
                         ::CSteamTV_GetWordBans_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetWordBans() not implemented.");
  done->Run();
}

void SteamTV::JoinChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_JoinChat_Request*,
                         ::CSteamTV_JoinChat_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinChat() not implemented.");
  done->Run();
}

void SteamTV::Search(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_Search_Request*,
                         ::CSteamTV_Search_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Search() not implemented.");
  done->Run();
}

void SteamTV::GetSteamTVUserSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetSteamTVUserSettings_Request*,
                         ::CSteamTV_GetSteamTVUserSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSteamTVUserSettings() not implemented.");
  done->Run();
}

void SteamTV::SetSteamTVUserSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_SetSteamTVUserSettings_Request*,
                         ::CSteamTV_SetSteamTVUserSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetSteamTVUserSettings() not implemented.");
  done->Run();
}

void SteamTV::GetMyBroadcastChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetMyBroadcastChannels_Request*,
                         ::CSteamTV_GetMyBroadcastChannels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMyBroadcastChannels() not implemented.");
  done->Run();
}

void SteamTV::GetHomePageContents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_GetHomePageContents_Request*,
                         ::CSteamTV_GetHomePageContents_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetHomePageContents() not implemented.");
  done->Run();
}

void SteamTV::AppCheer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamTV_AppCheer_Request*,
                         ::CSteamTV_AppCheer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppCheer() not implemented.");
  done->Run();
}

void SteamTV::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fsteamtv_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateBroadcastChannel(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_CreateBroadcastChannel_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_CreateBroadcastChannel_Response*>(
                 response),
             done);
      break;
    case 1:
      GetBroadcastChannelID(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelID_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelID_Response*>(
                 response),
             done);
      break;
    case 2:
      SetBroadcastChannelProfile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_SetBroadcastChannelProfile_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_SetBroadcastChannelProfile_Response*>(
                 response),
             done);
      break;
    case 3:
      GetBroadcastChannelProfile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelProfile_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelProfile_Response*>(
                 response),
             done);
      break;
    case 4:
      SetBroadcastChannelImage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_SetBroadcastChannelImage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_SetBroadcastChannelImage_Response*>(
                 response),
             done);
      break;
    case 5:
      GetBroadcastChannelImages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelImages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelImages_Response*>(
                 response),
             done);
      break;
    case 6:
      SetBroadcastChannelLinkRegions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_SetBroadcastChannelLinkRegions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_SetBroadcastChannelLinkRegions_Response*>(
                 response),
             done);
      break;
    case 7:
      GetBroadcastChannelLinks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelLinks_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelLinks_Response*>(
                 response),
             done);
      break;
    case 8:
      GetBroadcastChannelBroadcasters(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelBroadcasters_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelBroadcasters_Response*>(
                 response),
             done);
      break;
    case 9:
      GetFollowedChannels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetFollowedChannels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetFollowedChannels_Response*>(
                 response),
             done);
      break;
    case 10:
      GetSubscribedChannels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetSubscribedChannels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetSubscribedChannels_Response*>(
                 response),
             done);
      break;
    case 11:
      GetBroadcastChannelStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelStatus_Response*>(
                 response),
             done);
      break;
    case 12:
      FollowBroadcastChannel(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_FollowBroadcastChannel_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_FollowBroadcastChannel_Response*>(
                 response),
             done);
      break;
    case 13:
      SubscribeBroadcastChannel(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_SubscribeBroadcastChannel_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_SubscribeBroadcastChannel_Response*>(
                 response),
             done);
      break;
    case 14:
      GetBroadcastChannelClips(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelClips_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelClips_Response*>(
                 response),
             done);
      break;
    case 15:
      ReportBroadcastChannel(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_ReportBroadcastChannel_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_ReportBroadcastChannel_Response*>(
                 response),
             done);
      break;
    case 16:
      GetBroadcastChannelInteraction(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetBroadcastChannelInteraction_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetBroadcastChannelInteraction_Response*>(
                 response),
             done);
      break;
    case 17:
      GetGames(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetGames_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetGames_Response*>(
                 response),
             done);
      break;
    case 18:
      GetChannels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetChannels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetChannels_Response*>(
                 response),
             done);
      break;
    case 19:
      AddChatBan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_AddChatBan_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_AddChatBan_Response*>(
                 response),
             done);
      break;
    case 20:
      GetChatBans(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetChatBans_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetChatBans_Response*>(
                 response),
             done);
      break;
    case 21:
      AddChatModerator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_AddChatModerator_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_AddChatModerator_Response*>(
                 response),
             done);
      break;
    case 22:
      GetChatModerators(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetChatModerators_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetChatModerators_Response*>(
                 response),
             done);
      break;
    case 23:
      AddWordBan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_AddWordBan_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_AddWordBan_Response*>(
                 response),
             done);
      break;
    case 24:
      GetWordBans(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetWordBans_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetWordBans_Response*>(
                 response),
             done);
      break;
    case 25:
      JoinChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_JoinChat_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_JoinChat_Response*>(
                 response),
             done);
      break;
    case 26:
      Search(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_Search_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_Search_Response*>(
                 response),
             done);
      break;
    case 27:
      GetSteamTVUserSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetSteamTVUserSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetSteamTVUserSettings_Response*>(
                 response),
             done);
      break;
    case 28:
      SetSteamTVUserSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_SetSteamTVUserSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_SetSteamTVUserSettings_Response*>(
                 response),
             done);
      break;
    case 29:
      GetMyBroadcastChannels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetMyBroadcastChannels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetMyBroadcastChannels_Response*>(
                 response),
             done);
      break;
    case 30:
      GetHomePageContents(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_GetHomePageContents_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_GetHomePageContents_Response*>(
                 response),
             done);
      break;
    case 31:
      AppCheer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamTV_AppCheer_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamTV_AppCheer_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamTV::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamTV_CreateBroadcastChannel_Request::default_instance();
    case 1:
      return ::CSteamTV_GetBroadcastChannelID_Request::default_instance();
    case 2:
      return ::CSteamTV_SetBroadcastChannelProfile_Request::default_instance();
    case 3:
      return ::CSteamTV_GetBroadcastChannelProfile_Request::default_instance();
    case 4:
      return ::CSteamTV_SetBroadcastChannelImage_Request::default_instance();
    case 5:
      return ::CSteamTV_GetBroadcastChannelImages_Request::default_instance();
    case 6:
      return ::CSteamTV_SetBroadcastChannelLinkRegions_Request::default_instance();
    case 7:
      return ::CSteamTV_GetBroadcastChannelLinks_Request::default_instance();
    case 8:
      return ::CSteamTV_GetBroadcastChannelBroadcasters_Request::default_instance();
    case 9:
      return ::CSteamTV_GetFollowedChannels_Request::default_instance();
    case 10:
      return ::CSteamTV_GetSubscribedChannels_Request::default_instance();
    case 11:
      return ::CSteamTV_GetBroadcastChannelStatus_Request::default_instance();
    case 12:
      return ::CSteamTV_FollowBroadcastChannel_Request::default_instance();
    case 13:
      return ::CSteamTV_SubscribeBroadcastChannel_Request::default_instance();
    case 14:
      return ::CSteamTV_GetBroadcastChannelClips_Request::default_instance();
    case 15:
      return ::CSteamTV_ReportBroadcastChannel_Request::default_instance();
    case 16:
      return ::CSteamTV_GetBroadcastChannelInteraction_Request::default_instance();
    case 17:
      return ::CSteamTV_GetGames_Request::default_instance();
    case 18:
      return ::CSteamTV_GetChannels_Request::default_instance();
    case 19:
      return ::CSteamTV_AddChatBan_Request::default_instance();
    case 20:
      return ::CSteamTV_GetChatBans_Request::default_instance();
    case 21:
      return ::CSteamTV_AddChatModerator_Request::default_instance();
    case 22:
      return ::CSteamTV_GetChatModerators_Request::default_instance();
    case 23:
      return ::CSteamTV_AddWordBan_Request::default_instance();
    case 24:
      return ::CSteamTV_GetWordBans_Request::default_instance();
    case 25:
      return ::CSteamTV_JoinChat_Request::default_instance();
    case 26:
      return ::CSteamTV_Search_Request::default_instance();
    case 27:
      return ::CSteamTV_GetSteamTVUserSettings_Request::default_instance();
    case 28:
      return ::CSteamTV_SetSteamTVUserSettings_Request::default_instance();
    case 29:
      return ::CSteamTV_GetMyBroadcastChannels_Request::default_instance();
    case 30:
      return ::CSteamTV_GetHomePageContents_Request::default_instance();
    case 31:
      return ::CSteamTV_AppCheer_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamTV::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamTV_CreateBroadcastChannel_Response::default_instance();
    case 1:
      return ::CSteamTV_GetBroadcastChannelID_Response::default_instance();
    case 2:
      return ::CSteamTV_SetBroadcastChannelProfile_Response::default_instance();
    case 3:
      return ::CSteamTV_GetBroadcastChannelProfile_Response::default_instance();
    case 4:
      return ::CSteamTV_SetBroadcastChannelImage_Response::default_instance();
    case 5:
      return ::CSteamTV_GetBroadcastChannelImages_Response::default_instance();
    case 6:
      return ::CSteamTV_SetBroadcastChannelLinkRegions_Response::default_instance();
    case 7:
      return ::CSteamTV_GetBroadcastChannelLinks_Response::default_instance();
    case 8:
      return ::CSteamTV_GetBroadcastChannelBroadcasters_Response::default_instance();
    case 9:
      return ::CSteamTV_GetFollowedChannels_Response::default_instance();
    case 10:
      return ::CSteamTV_GetSubscribedChannels_Response::default_instance();
    case 11:
      return ::CSteamTV_GetBroadcastChannelStatus_Response::default_instance();
    case 12:
      return ::CSteamTV_FollowBroadcastChannel_Response::default_instance();
    case 13:
      return ::CSteamTV_SubscribeBroadcastChannel_Response::default_instance();
    case 14:
      return ::CSteamTV_GetBroadcastChannelClips_Response::default_instance();
    case 15:
      return ::CSteamTV_ReportBroadcastChannel_Response::default_instance();
    case 16:
      return ::CSteamTV_GetBroadcastChannelInteraction_Response::default_instance();
    case 17:
      return ::CSteamTV_GetGames_Response::default_instance();
    case 18:
      return ::CSteamTV_GetChannels_Response::default_instance();
    case 19:
      return ::CSteamTV_AddChatBan_Response::default_instance();
    case 20:
      return ::CSteamTV_GetChatBans_Response::default_instance();
    case 21:
      return ::CSteamTV_AddChatModerator_Response::default_instance();
    case 22:
      return ::CSteamTV_GetChatModerators_Response::default_instance();
    case 23:
      return ::CSteamTV_AddWordBan_Response::default_instance();
    case 24:
      return ::CSteamTV_GetWordBans_Response::default_instance();
    case 25:
      return ::CSteamTV_JoinChat_Response::default_instance();
    case 26:
      return ::CSteamTV_Search_Response::default_instance();
    case 27:
      return ::CSteamTV_GetSteamTVUserSettings_Response::default_instance();
    case 28:
      return ::CSteamTV_SetSteamTVUserSettings_Response::default_instance();
    case 29:
      return ::CSteamTV_GetMyBroadcastChannels_Response::default_instance();
    case 30:
      return ::CSteamTV_GetHomePageContents_Response::default_instance();
    case 31:
      return ::CSteamTV_AppCheer_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamTV_Stub::SteamTV_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamTV_Stub::SteamTV_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamTV_Stub::~SteamTV_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamTV_Stub::CreateBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_CreateBroadcastChannel_Request* request,
                              ::CSteamTV_CreateBroadcastChannel_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelID_Request* request,
                              ::CSteamTV_GetBroadcastChannelID_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SteamTV_Stub::SetBroadcastChannelProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_SetBroadcastChannelProfile_Request* request,
                              ::CSteamTV_SetBroadcastChannelProfile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelProfile_Request* request,
                              ::CSteamTV_GetBroadcastChannelProfile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SteamTV_Stub::SetBroadcastChannelImage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_SetBroadcastChannelImage_Request* request,
                              ::CSteamTV_SetBroadcastChannelImage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelImages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelImages_Request* request,
                              ::CSteamTV_GetBroadcastChannelImages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void SteamTV_Stub::SetBroadcastChannelLinkRegions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_SetBroadcastChannelLinkRegions_Request* request,
                              ::CSteamTV_SetBroadcastChannelLinkRegions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelLinks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelLinks_Request* request,
                              ::CSteamTV_GetBroadcastChannelLinks_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelBroadcasters(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelBroadcasters_Request* request,
                              ::CSteamTV_GetBroadcastChannelBroadcasters_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void SteamTV_Stub::GetFollowedChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetFollowedChannels_Request* request,
                              ::CSteamTV_GetFollowedChannels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void SteamTV_Stub::GetSubscribedChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetSubscribedChannels_Request* request,
                              ::CSteamTV_GetSubscribedChannels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelStatus_Request* request,
                              ::CSteamTV_GetBroadcastChannelStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void SteamTV_Stub::FollowBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_FollowBroadcastChannel_Request* request,
                              ::CSteamTV_FollowBroadcastChannel_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void SteamTV_Stub::SubscribeBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_SubscribeBroadcastChannel_Request* request,
                              ::CSteamTV_SubscribeBroadcastChannel_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelClips_Request* request,
                              ::CSteamTV_GetBroadcastChannelClips_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void SteamTV_Stub::ReportBroadcastChannel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_ReportBroadcastChannel_Request* request,
                              ::CSteamTV_ReportBroadcastChannel_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void SteamTV_Stub::GetBroadcastChannelInteraction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetBroadcastChannelInteraction_Request* request,
                              ::CSteamTV_GetBroadcastChannelInteraction_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void SteamTV_Stub::GetGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetGames_Request* request,
                              ::CSteamTV_GetGames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void SteamTV_Stub::GetChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetChannels_Request* request,
                              ::CSteamTV_GetChannels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void SteamTV_Stub::AddChatBan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_AddChatBan_Request* request,
                              ::CSteamTV_AddChatBan_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void SteamTV_Stub::GetChatBans(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetChatBans_Request* request,
                              ::CSteamTV_GetChatBans_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void SteamTV_Stub::AddChatModerator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_AddChatModerator_Request* request,
                              ::CSteamTV_AddChatModerator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void SteamTV_Stub::GetChatModerators(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetChatModerators_Request* request,
                              ::CSteamTV_GetChatModerators_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void SteamTV_Stub::AddWordBan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_AddWordBan_Request* request,
                              ::CSteamTV_AddWordBan_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void SteamTV_Stub::GetWordBans(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetWordBans_Request* request,
                              ::CSteamTV_GetWordBans_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void SteamTV_Stub::JoinChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_JoinChat_Request* request,
                              ::CSteamTV_JoinChat_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void SteamTV_Stub::Search(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_Search_Request* request,
                              ::CSteamTV_Search_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void SteamTV_Stub::GetSteamTVUserSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetSteamTVUserSettings_Request* request,
                              ::CSteamTV_GetSteamTVUserSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void SteamTV_Stub::SetSteamTVUserSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_SetSteamTVUserSettings_Request* request,
                              ::CSteamTV_SetSteamTVUserSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void SteamTV_Stub::GetMyBroadcastChannels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetMyBroadcastChannels_Request* request,
                              ::CSteamTV_GetMyBroadcastChannels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void SteamTV_Stub::GetHomePageContents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_GetHomePageContents_Request* request,
                              ::CSteamTV_GetHomePageContents_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void SteamTV_Stub::AppCheer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamTV_AppCheer_Request* request,
                              ::CSteamTV_AppCheer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSteamTV_CreateBroadcastChannel_Request* Arena::CreateMaybeMessage< ::CSteamTV_CreateBroadcastChannel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_CreateBroadcastChannel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_CreateBroadcastChannel_Response* Arena::CreateMaybeMessage< ::CSteamTV_CreateBroadcastChannel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_CreateBroadcastChannel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelID_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelID_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelID_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelID_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelID_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelID_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelProfile_Request* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelProfile_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelProfile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelProfile_Response* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelProfile_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelProfile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelProfile_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelProfile_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelProfile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelProfile_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelProfile_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelProfile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelImage_Request* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelImage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelImage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelImage_Response* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelImage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelImage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelImages_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelImages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelImages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelImages_Response_Images* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelImages_Response_Images >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelImages_Response_Images >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelImages_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelImages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelImages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelLinkRegions_Request_Links >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelLinkRegions_Request* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelLinkRegions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelLinkRegions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetBroadcastChannelLinkRegions_Response* Arena::CreateMaybeMessage< ::CSteamTV_SetBroadcastChannelLinkRegions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetBroadcastChannelLinkRegions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelLinks_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelLinks_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelLinks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelLinks_Response_Links* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelLinks_Response_Links >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelLinks_Response_Links >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelLinks_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelLinks_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelLinks_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelBroadcasters_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelBroadcasters_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelBroadcasters_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelBroadcasters_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelBroadcasters_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelBroadcasters_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetFollowedChannels_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetFollowedChannels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetFollowedChannels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::GetBroadcastChannelEntry* Arena::CreateMaybeMessage< ::GetBroadcastChannelEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetBroadcastChannelEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetFollowedChannels_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetFollowedChannels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetFollowedChannels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetSubscribedChannels_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetSubscribedChannels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetSubscribedChannels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetSubscribedChannels_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetSubscribedChannels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetSubscribedChannels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelStatus_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelStatus_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_FollowBroadcastChannel_Request* Arena::CreateMaybeMessage< ::CSteamTV_FollowBroadcastChannel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_FollowBroadcastChannel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_FollowBroadcastChannel_Response* Arena::CreateMaybeMessage< ::CSteamTV_FollowBroadcastChannel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_FollowBroadcastChannel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SubscribeBroadcastChannel_Request* Arena::CreateMaybeMessage< ::CSteamTV_SubscribeBroadcastChannel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SubscribeBroadcastChannel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SubscribeBroadcastChannel_Response* Arena::CreateMaybeMessage< ::CSteamTV_SubscribeBroadcastChannel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SubscribeBroadcastChannel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelClips_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelClips_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelClips_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_BroadcastClipInfo* Arena::CreateMaybeMessage< ::CSteamTV_BroadcastClipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_BroadcastClipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelClips_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelClips_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelClips_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_ReportBroadcastChannel_Request* Arena::CreateMaybeMessage< ::CSteamTV_ReportBroadcastChannel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_ReportBroadcastChannel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_ReportBroadcastChannel_Response* Arena::CreateMaybeMessage< ::CSteamTV_ReportBroadcastChannel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_ReportBroadcastChannel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelInteraction_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelInteraction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelInteraction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetBroadcastChannelInteraction_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetBroadcastChannelInteraction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetBroadcastChannelInteraction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetGames_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetGames_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetGames_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_Game* Arena::CreateMaybeMessage< ::CSteamTV_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetGames_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetGames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetGames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChannels_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetChannels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChannels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChannels_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetChannels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChannels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddChatBan_Request* Arena::CreateMaybeMessage< ::CSteamTV_AddChatBan_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddChatBan_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddChatBan_Response* Arena::CreateMaybeMessage< ::CSteamTV_AddChatBan_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddChatBan_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChatBans_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetChatBans_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChatBans_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_ChatBan* Arena::CreateMaybeMessage< ::CSteamTV_ChatBan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_ChatBan >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChatBans_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetChatBans_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChatBans_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddChatModerator_Request* Arena::CreateMaybeMessage< ::CSteamTV_AddChatModerator_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddChatModerator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddChatModerator_Response* Arena::CreateMaybeMessage< ::CSteamTV_AddChatModerator_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddChatModerator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChatModerators_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetChatModerators_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChatModerators_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_ChatModerator* Arena::CreateMaybeMessage< ::CSteamTV_ChatModerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_ChatModerator >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetChatModerators_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetChatModerators_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetChatModerators_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddWordBan_Request* Arena::CreateMaybeMessage< ::CSteamTV_AddWordBan_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddWordBan_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AddWordBan_Response* Arena::CreateMaybeMessage< ::CSteamTV_AddWordBan_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AddWordBan_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetWordBans_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetWordBans_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetWordBans_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetWordBans_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetWordBans_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetWordBans_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_JoinChat_Request* Arena::CreateMaybeMessage< ::CSteamTV_JoinChat_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_JoinChat_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_JoinChat_Response* Arena::CreateMaybeMessage< ::CSteamTV_JoinChat_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_JoinChat_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_Search_Request* Arena::CreateMaybeMessage< ::CSteamTV_Search_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_Search_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_Search_Response* Arena::CreateMaybeMessage< ::CSteamTV_Search_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_Search_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetSteamTVUserSettings_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetSteamTVUserSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetSteamTVUserSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetSteamTVUserSettings_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetSteamTVUserSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetSteamTVUserSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetSteamTVUserSettings_Request* Arena::CreateMaybeMessage< ::CSteamTV_SetSteamTVUserSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetSteamTVUserSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_SetSteamTVUserSettings_Response* Arena::CreateMaybeMessage< ::CSteamTV_SetSteamTVUserSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_SetSteamTVUserSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetMyBroadcastChannels_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetMyBroadcastChannels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetMyBroadcastChannels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetMyBroadcastChannels_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetMyBroadcastChannels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetMyBroadcastChannels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetHomePageContents_Request* Arena::CreateMaybeMessage< ::CSteamTV_GetHomePageContents_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetHomePageContents_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_Takeover* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_Takeover >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_Takeover >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_SingleGame* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_SingleGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_SingleGame >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListEntry* Arena::CreateMaybeMessage< ::GameListEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_GameList* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_GameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_GameList >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_QuickExplore* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_QuickExplore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_QuickExplore >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_ConveyorBelt* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_ConveyorBelt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_ConveyorBelt >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_WatchParty* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_WatchParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_WatchParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_Developer* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_Developer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_Developer >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageTemplate_Event* Arena::CreateMaybeMessage< ::CSteamTV_HomePageTemplate_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageTemplate_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_HomePageContentRow* Arena::CreateMaybeMessage< ::CSteamTV_HomePageContentRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_HomePageContentRow >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_GetHomePageContents_Response* Arena::CreateMaybeMessage< ::CSteamTV_GetHomePageContents_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_GetHomePageContents_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AppCheer_SingleCheerType* Arena::CreateMaybeMessage< ::CSteamTV_AppCheer_SingleCheerType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AppCheer_SingleCheerType >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AppCheer_Request* Arena::CreateMaybeMessage< ::CSteamTV_AppCheer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AppCheer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamTV_AppCheer_Response* Arena::CreateMaybeMessage< ::CSteamTV_AppCheer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamTV_AppCheer_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
