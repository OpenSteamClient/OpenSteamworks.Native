// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_store.steamclient.proto

#include "steammessages_store.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CStore_RegisterCDKey_Request::CStore_RegisterCDKey_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , purchase_platform_(0)
  , is_request_from_client_(false){}
struct CStore_RegisterCDKey_RequestDefaultTypeInternal {
  constexpr CStore_RegisterCDKey_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_RegisterCDKey_RequestDefaultTypeInternal() {}
  union {
    CStore_RegisterCDKey_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_RegisterCDKey_RequestDefaultTypeInternal _CStore_RegisterCDKey_Request_default_instance_;
constexpr CStore_PurchaseReceiptInfo_LineItem::CStore_PurchaseReceiptInfo_LineItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_item_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , packageid_(0u)
  , appid_(0u){}
struct CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal {
  constexpr CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal() {}
  union {
    CStore_PurchaseReceiptInfo_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal _CStore_PurchaseReceiptInfo_LineItem_default_instance_;
constexpr CStore_PurchaseReceiptInfo::CStore_PurchaseReceiptInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_items_()
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_lintext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_linurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transactionid_(PROTOBUF_ULONGLONG(0))
  , packageid_(0u)
  , purchase_status_(0u)
  , result_detail_(0u)
  , transaction_time_(0u)
  , base_price_(PROTOBUF_ULONGLONG(0))
  , total_discount_(PROTOBUF_ULONGLONG(0))
  , payment_method_(0u)
  , currency_code_(0u)
  , tax_(PROTOBUF_ULONGLONG(0))
  , shipping_(PROTOBUF_ULONGLONG(0))
  , error_appid_(0u){}
struct CStore_PurchaseReceiptInfoDefaultTypeInternal {
  constexpr CStore_PurchaseReceiptInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_PurchaseReceiptInfoDefaultTypeInternal() {}
  union {
    CStore_PurchaseReceiptInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_PurchaseReceiptInfoDefaultTypeInternal _CStore_PurchaseReceiptInfo_default_instance_;
constexpr CStore_RegisterCDKey_Response::CStore_RegisterCDKey_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchase_receipt_info_(nullptr)
  , purchase_result_details_(0){}
struct CStore_RegisterCDKey_ResponseDefaultTypeInternal {
  constexpr CStore_RegisterCDKey_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_RegisterCDKey_ResponseDefaultTypeInternal() {}
  union {
    CStore_RegisterCDKey_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_RegisterCDKey_ResponseDefaultTypeInternal _CStore_RegisterCDKey_Response_default_instance_;
constexpr CStore_GetMostPopularTags_Request::CStore_GetMostPopularTags_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStore_GetMostPopularTags_RequestDefaultTypeInternal {
  constexpr CStore_GetMostPopularTags_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetMostPopularTags_RequestDefaultTypeInternal() {}
  union {
    CStore_GetMostPopularTags_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetMostPopularTags_RequestDefaultTypeInternal _CStore_GetMostPopularTags_Request_default_instance_;
constexpr CStore_GetMostPopularTags_Response_Tag::CStore_GetMostPopularTags_Response_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagid_(0u){}
struct CStore_GetMostPopularTags_Response_TagDefaultTypeInternal {
  constexpr CStore_GetMostPopularTags_Response_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetMostPopularTags_Response_TagDefaultTypeInternal() {}
  union {
    CStore_GetMostPopularTags_Response_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetMostPopularTags_Response_TagDefaultTypeInternal _CStore_GetMostPopularTags_Response_Tag_default_instance_;
constexpr CStore_GetMostPopularTags_Response::CStore_GetMostPopularTags_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct CStore_GetMostPopularTags_ResponseDefaultTypeInternal {
  constexpr CStore_GetMostPopularTags_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetMostPopularTags_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetMostPopularTags_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetMostPopularTags_ResponseDefaultTypeInternal _CStore_GetMostPopularTags_Response_default_instance_;
constexpr CStore_GetLocalizedNameForTags_Request::CStore_GetLocalizedNameForTags_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagids_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal {
  constexpr CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal() {}
  union {
    CStore_GetLocalizedNameForTags_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal _CStore_GetLocalizedNameForTags_Request_default_instance_;
constexpr CStore_GetLocalizedNameForTags_Response_Tag::CStore_GetLocalizedNameForTags_Response_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : english_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , normalized_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagid_(0u){}
struct CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal {
  constexpr CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal() {}
  union {
    CStore_GetLocalizedNameForTags_Response_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal _CStore_GetLocalizedNameForTags_Response_Tag_default_instance_;
constexpr CStore_GetLocalizedNameForTags_Response::CStore_GetLocalizedNameForTags_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal {
  constexpr CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetLocalizedNameForTags_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal _CStore_GetLocalizedNameForTags_Response_default_instance_;
constexpr CStore_GetTagList_Request::CStore_GetTagList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , have_version_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStore_GetTagList_RequestDefaultTypeInternal {
  constexpr CStore_GetTagList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTagList_RequestDefaultTypeInternal() {}
  union {
    CStore_GetTagList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTagList_RequestDefaultTypeInternal _CStore_GetTagList_Request_default_instance_;
constexpr CStore_GetTagList_Response_Tag::CStore_GetTagList_Response_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagid_(0u){}
struct CStore_GetTagList_Response_TagDefaultTypeInternal {
  constexpr CStore_GetTagList_Response_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTagList_Response_TagDefaultTypeInternal() {}
  union {
    CStore_GetTagList_Response_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTagList_Response_TagDefaultTypeInternal _CStore_GetTagList_Response_Tag_default_instance_;
constexpr CStore_GetTagList_Response::CStore_GetTagList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , version_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStore_GetTagList_ResponseDefaultTypeInternal {
  constexpr CStore_GetTagList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTagList_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetTagList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTagList_ResponseDefaultTypeInternal _CStore_GetTagList_Response_default_instance_;
constexpr CStoreDiscoveryQueueSettings::CStoreDiscoveryQueueSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : excluded_tagids_()
  , featured_tagids_()
  , os_win_(false)
  , os_mac_(false)
  , os_linux_(false)
  , full_controller_support_(false)
  , native_steam_controller_(false)
  , include_coming_soon_(false)
  , exclude_early_access_(false)
  , exclude_videos_(false)
  , exclude_software_(false)
  , exclude_dlc_(false)
  , exclude_soundtracks_(false){}
struct CStoreDiscoveryQueueSettingsDefaultTypeInternal {
  constexpr CStoreDiscoveryQueueSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStoreDiscoveryQueueSettingsDefaultTypeInternal() {}
  union {
    CStoreDiscoveryQueueSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStoreDiscoveryQueueSettingsDefaultTypeInternal _CStoreDiscoveryQueueSettings_default_instance_;
constexpr CStore_GetDiscoveryQueue_Request::CStore_GetDiscoveryQueue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr)
  , store_page_filter_(nullptr)
  , queue_type_(0)

  , rebuild_queue_(false)
  , settings_changed_(false)
  , rebuild_queue_if_stale_(false)
  , ignore_user_preferences_(false)
  , experimental_cohort_(0u)
  , no_experimental_results_(false)
  , debug_get_solr_query_(false){}
struct CStore_GetDiscoveryQueue_RequestDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueue_RequestDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueue_RequestDefaultTypeInternal _CStore_GetDiscoveryQueue_Request_default_instance_;
constexpr CStore_GetDiscoveryQueue_Response::CStore_GetDiscoveryQueue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , debug_solr_query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr)
  , skipped_(0)
  , exhausted_(false)
  , experimental_cohort_(0u){}
struct CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueue_Response_default_instance_;
constexpr CStore_GetDiscoveryQueueSettings_Request::CStore_GetDiscoveryQueueSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_page_filter_(nullptr)
  , queue_type_(0)
{}
struct CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueueSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal _CStore_GetDiscoveryQueueSettings_Request_default_instance_;
constexpr CStore_GetDiscoveryQueueSettings_Response::CStore_GetDiscoveryQueueSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr){}
struct CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueueSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueueSettings_Response_default_instance_;
constexpr CStore_SkipDiscoveryQueueItem_Request::CStore_SkipDiscoveryQueueItem_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_page_filter_(nullptr)
  , queue_type_(0)

  , appid_(0u){}
struct CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal {
  constexpr CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal() {}
  union {
    CStore_SkipDiscoveryQueueItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal _CStore_SkipDiscoveryQueueItem_Request_default_instance_;
constexpr CStore_SkipDiscoveryQueueItem_Response::CStore_SkipDiscoveryQueueItem_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal {
  constexpr CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal() {}
  union {
    CStore_SkipDiscoveryQueueItem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal _CStore_SkipDiscoveryQueueItem_Response_default_instance_;
constexpr CStore_GetUserGameInterestState_Request::CStore_GetUserGameInterestState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , store_appid_(0u)
  , beta_appid_(0u){}
struct CStore_GetUserGameInterestState_RequestDefaultTypeInternal {
  constexpr CStore_GetUserGameInterestState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetUserGameInterestState_RequestDefaultTypeInternal() {}
  union {
    CStore_GetUserGameInterestState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetUserGameInterestState_RequestDefaultTypeInternal _CStore_GetUserGameInterestState_Request_default_instance_;
constexpr CStore_GetUserGameInterestState_Response_InQueue::CStore_GetUserGameInterestState_Response_InQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , skipped_(false)
  , items_remaining_(0)
  , next_appid_(0u)
  , experimental_cohort_(0u){}
struct CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal {
  constexpr CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal() {}
  union {
    CStore_GetUserGameInterestState_Response_InQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal _CStore_GetUserGameInterestState_Response_InQueue_default_instance_;
constexpr CStore_GetUserGameInterestState_Response::CStore_GetUserGameInterestState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_queues_()
  , queues_with_skip_()
  , queue_items_remaining_()
  , queue_items_next_appid_()
  , queues_()
  , owned_(false)
  , wishlist_(false)
  , ignored_(false)
  , following_(false)
  , temporarily_owned_(false)
  , ignored_reason_(0)
  , beta_status_(0)
{}
struct CStore_GetUserGameInterestState_ResponseDefaultTypeInternal {
  constexpr CStore_GetUserGameInterestState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetUserGameInterestState_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetUserGameInterestState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetUserGameInterestState_ResponseDefaultTypeInternal _CStore_GetUserGameInterestState_Response_default_instance_;
constexpr CStore_GetDiscoveryQueueSkippedApps_Request::CStore_GetDiscoveryQueueSkippedApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_page_filter_(nullptr)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , queue_type_(0)
{}
struct CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueueSkippedApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal _CStore_GetDiscoveryQueueSkippedApps_Request_default_instance_;
constexpr CStore_GetDiscoveryQueueSkippedApps_Response::CStore_GetDiscoveryQueueSkippedApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_(){}
struct CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal {
  constexpr CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetDiscoveryQueueSkippedApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueueSkippedApps_Response_default_instance_;
constexpr CStore_ReportApp_Request::CStore_ReportApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , report_type_(0)
{}
struct CStore_ReportApp_RequestDefaultTypeInternal {
  constexpr CStore_ReportApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_ReportApp_RequestDefaultTypeInternal() {}
  union {
    CStore_ReportApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_ReportApp_RequestDefaultTypeInternal _CStore_ReportApp_Request_default_instance_;
constexpr CStore_ReportApp_Response::CStore_ReportApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_ReportApp_ResponseDefaultTypeInternal {
  constexpr CStore_ReportApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_ReportApp_ResponseDefaultTypeInternal() {}
  union {
    CStore_ReportApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_ReportApp_ResponseDefaultTypeInternal _CStore_ReportApp_Response_default_instance_;
constexpr CStore_GetStorePreferences_Request::CStore_GetStorePreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_GetStorePreferences_RequestDefaultTypeInternal {
  constexpr CStore_GetStorePreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetStorePreferences_RequestDefaultTypeInternal() {}
  union {
    CStore_GetStorePreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetStorePreferences_RequestDefaultTypeInternal _CStore_GetStorePreferences_Request_default_instance_;
constexpr CStore_UserPreferences::CStore_UserPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_languages_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primary_language_(0)
  , secondary_languages_(0u)
  , platform_windows_(false)
  , platform_mac_(false)
  , platform_linux_(false)
  , hide_store_broadcast_(false)
  , timestamp_updated_(0u)
  , review_score_preference_(0)

  , timestamp_content_descriptor_preferences_updated_(0)
  , provide_decfeedback_(0)
{}
struct CStore_UserPreferencesDefaultTypeInternal {
  constexpr CStore_UserPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_UserPreferencesDefaultTypeInternal() {}
  union {
    CStore_UserPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_UserPreferencesDefaultTypeInternal _CStore_UserPreferences_default_instance_;
constexpr CStore_UserTagPreferences_Tag::CStore_UserTagPreferences_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagid_(0u)
  , timestamp_added_(0u){}
struct CStore_UserTagPreferences_TagDefaultTypeInternal {
  constexpr CStore_UserTagPreferences_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_UserTagPreferences_TagDefaultTypeInternal() {}
  union {
    CStore_UserTagPreferences_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_UserTagPreferences_TagDefaultTypeInternal _CStore_UserTagPreferences_Tag_default_instance_;
constexpr CStore_UserTagPreferences::CStore_UserTagPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_to_exclude_(){}
struct CStore_UserTagPreferencesDefaultTypeInternal {
  constexpr CStore_UserTagPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_UserTagPreferencesDefaultTypeInternal() {}
  union {
    CStore_UserTagPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_UserTagPreferencesDefaultTypeInternal _CStore_UserTagPreferences_default_instance_;
constexpr CStore_GetStorePreferences_Response::CStore_GetStorePreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr)
  , tag_preferences_(nullptr)
  , content_descriptor_preferences_(nullptr){}
struct CStore_GetStorePreferences_ResponseDefaultTypeInternal {
  constexpr CStore_GetStorePreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetStorePreferences_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetStorePreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetStorePreferences_ResponseDefaultTypeInternal _CStore_GetStorePreferences_Response_default_instance_;
constexpr CStore_GetTrendingAppsAmongFriends_Request::CStore_GetTrendingAppsAmongFriends_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_apps_(0u)
  , num_top_friends_(0u){}
struct CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal {
  constexpr CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal() {}
  union {
    CStore_GetTrendingAppsAmongFriends_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Request_default_instance_;
constexpr CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamids_top_friends_()
  , appid_(0u)
  , total_friends_(0u){}
struct CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal {
  constexpr CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal() {}
  union {
    CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData_default_instance_;
constexpr CStore_GetTrendingAppsAmongFriends_Response::CStore_GetTrendingAppsAmongFriends_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trending_apps_(){}
struct CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal {
  constexpr CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetTrendingAppsAmongFriends_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Response_default_instance_;
constexpr CStore_MigratePartnerLinkTracking_Notification::CStore_MigratePartnerLinkTracking_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browserid_(PROTOBUF_ULONGLONG(0))
  , accountid_(0u)
  , backfill_source_(0)
{}
struct CStore_MigratePartnerLinkTracking_NotificationDefaultTypeInternal {
  constexpr CStore_MigratePartnerLinkTracking_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_MigratePartnerLinkTracking_NotificationDefaultTypeInternal() {}
  union {
    CStore_MigratePartnerLinkTracking_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_MigratePartnerLinkTracking_NotificationDefaultTypeInternal _CStore_MigratePartnerLinkTracking_Notification_default_instance_;
constexpr CStore_UpdatePackageReservations_Request::CStore_UpdatePackageReservations_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packages_to_reserve_()
  , packages_to_unreserve_()
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStore_UpdatePackageReservations_RequestDefaultTypeInternal {
  constexpr CStore_UpdatePackageReservations_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_UpdatePackageReservations_RequestDefaultTypeInternal() {}
  union {
    CStore_UpdatePackageReservations_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_UpdatePackageReservations_RequestDefaultTypeInternal _CStore_UpdatePackageReservations_Request_default_instance_;
constexpr CStore_UpdatePackageReservations_Response::CStore_UpdatePackageReservations_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reservation_status_(){}
struct CStore_UpdatePackageReservations_ResponseDefaultTypeInternal {
  constexpr CStore_UpdatePackageReservations_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_UpdatePackageReservations_ResponseDefaultTypeInternal() {}
  union {
    CStore_UpdatePackageReservations_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_UpdatePackageReservations_ResponseDefaultTypeInternal _CStore_UpdatePackageReservations_Response_default_instance_;
constexpr CReservationPositionMessage::CReservationPositionMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localization_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edistributor_(0u)
  , start_queue_position_(0u)
  , rtime_estimated_notification_(0u)
  , accountid_(0u)
  , rtime_created_(0u){}
struct CReservationPositionMessageDefaultTypeInternal {
  constexpr CReservationPositionMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CReservationPositionMessageDefaultTypeInternal() {}
  union {
    CReservationPositionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CReservationPositionMessageDefaultTypeInternal _CReservationPositionMessage_default_instance_;
constexpr CStore_SetReservationPositionMessage_Request::CStore_SetReservationPositionMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(){}
struct CStore_SetReservationPositionMessage_RequestDefaultTypeInternal {
  constexpr CStore_SetReservationPositionMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_SetReservationPositionMessage_RequestDefaultTypeInternal() {}
  union {
    CStore_SetReservationPositionMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_SetReservationPositionMessage_RequestDefaultTypeInternal _CStore_SetReservationPositionMessage_Request_default_instance_;
constexpr CStore_SetReservationPositionMessage_Response::CStore_SetReservationPositionMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_SetReservationPositionMessage_ResponseDefaultTypeInternal {
  constexpr CStore_SetReservationPositionMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_SetReservationPositionMessage_ResponseDefaultTypeInternal() {}
  union {
    CStore_SetReservationPositionMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_SetReservationPositionMessage_ResponseDefaultTypeInternal _CStore_SetReservationPositionMessage_Response_default_instance_;
constexpr CStore_DeleteReservationPositionMessage_Request::CStore_DeleteReservationPositionMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edistributor_(0u)
  , start_queue_position_(0u){}
struct CStore_DeleteReservationPositionMessage_RequestDefaultTypeInternal {
  constexpr CStore_DeleteReservationPositionMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_DeleteReservationPositionMessage_RequestDefaultTypeInternal() {}
  union {
    CStore_DeleteReservationPositionMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_DeleteReservationPositionMessage_RequestDefaultTypeInternal _CStore_DeleteReservationPositionMessage_Request_default_instance_;
constexpr CStore_DeleteReservationPositionMessage_Response::CStore_DeleteReservationPositionMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_DeleteReservationPositionMessage_ResponseDefaultTypeInternal {
  constexpr CStore_DeleteReservationPositionMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_DeleteReservationPositionMessage_ResponseDefaultTypeInternal() {}
  union {
    CStore_DeleteReservationPositionMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_DeleteReservationPositionMessage_ResponseDefaultTypeInternal _CStore_DeleteReservationPositionMessage_Response_default_instance_;
constexpr CStore_GetAllReservationPositionMessages_Request::CStore_GetAllReservationPositionMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_GetAllReservationPositionMessages_RequestDefaultTypeInternal {
  constexpr CStore_GetAllReservationPositionMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetAllReservationPositionMessages_RequestDefaultTypeInternal() {}
  union {
    CStore_GetAllReservationPositionMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetAllReservationPositionMessages_RequestDefaultTypeInternal _CStore_GetAllReservationPositionMessages_Request_default_instance_;
constexpr CStore_GetAllReservationPositionMessages_Response::CStore_GetAllReservationPositionMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(){}
struct CStore_GetAllReservationPositionMessages_ResponseDefaultTypeInternal {
  constexpr CStore_GetAllReservationPositionMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_GetAllReservationPositionMessages_ResponseDefaultTypeInternal() {}
  union {
    CStore_GetAllReservationPositionMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_GetAllReservationPositionMessages_ResponseDefaultTypeInternal _CStore_GetAllReservationPositionMessages_Response_default_instance_;
constexpr CStore_ReloadAllReservationPositionMessages_Notification::CStore_ReloadAllReservationPositionMessages_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStore_ReloadAllReservationPositionMessages_NotificationDefaultTypeInternal {
  constexpr CStore_ReloadAllReservationPositionMessages_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_ReloadAllReservationPositionMessages_NotificationDefaultTypeInternal() {}
  union {
    CStore_ReloadAllReservationPositionMessages_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_ReloadAllReservationPositionMessages_NotificationDefaultTypeInternal _CStore_ReloadAllReservationPositionMessages_Notification_default_instance_;
constexpr CSteamDeckCompatibility_SetFeedbacRequest::CSteamDeckCompatibility_SetFeedbacRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , feedback_(0)
{}
struct CSteamDeckCompatibility_SetFeedbacRequestDefaultTypeInternal {
  constexpr CSteamDeckCompatibility_SetFeedbacRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamDeckCompatibility_SetFeedbacRequestDefaultTypeInternal() {}
  union {
    CSteamDeckCompatibility_SetFeedbacRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamDeckCompatibility_SetFeedbacRequestDefaultTypeInternal _CSteamDeckCompatibility_SetFeedbacRequest_default_instance_;
constexpr CSteamDeckCompatibility_SetFeedbacResponse::CSteamDeckCompatibility_SetFeedbacResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamDeckCompatibility_SetFeedbacResponseDefaultTypeInternal {
  constexpr CSteamDeckCompatibility_SetFeedbacResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamDeckCompatibility_SetFeedbacResponseDefaultTypeInternal() {}
  union {
    CSteamDeckCompatibility_SetFeedbacResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamDeckCompatibility_SetFeedbacResponseDefaultTypeInternal _CSteamDeckCompatibility_SetFeedbacResponse_default_instance_;
constexpr CSteamDeckCompatibility_ShouldPrompt_Request::CSteamDeckCompatibility_ShouldPrompt_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal {
  constexpr CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal() {}
  union {
    CSteamDeckCompatibility_ShouldPrompt_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal _CSteamDeckCompatibility_ShouldPrompt_Request_default_instance_;
constexpr CSteamDeckCompatibility_ShouldPrompt_Response::CSteamDeckCompatibility_ShouldPrompt_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prompt_(false)
  , feedbaceligible_(false)
  , existing_feedback_(0)
{}
struct CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal {
  constexpr CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal() {}
  union {
    CSteamDeckCompatibility_ShouldPrompt_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal _CSteamDeckCompatibility_ShouldPrompt_Response_default_instance_;
constexpr CStore_StorePreferencesChanged_Notification::CStore_StorePreferencesChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr)
  , tag_preferences_(nullptr)
  , content_descriptor_preferences_(nullptr){}
struct CStore_StorePreferencesChanged_NotificationDefaultTypeInternal {
  constexpr CStore_StorePreferencesChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStore_StorePreferencesChanged_NotificationDefaultTypeInternal() {}
  union {
    CStore_StorePreferencesChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStore_StorePreferencesChanged_NotificationDefaultTypeInternal _CStore_StorePreferencesChanged_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[51];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fstore_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Request, activation_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Request, purchase_platform_),
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Request, is_request_from_client_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo_LineItem, packageid_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo_LineItem, appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo_LineItem, line_item_description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, transactionid_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, packageid_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, purchase_status_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, result_detail_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, transaction_time_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, payment_method_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, base_price_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, total_discount_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, tax_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, shipping_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, currency_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, error_headline_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, error_string_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, error_lintext_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, error_linurl_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, error_appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_PurchaseReceiptInfo, line_items_),
  5,
  6,
  7,
  8,
  9,
  12,
  10,
  11,
  14,
  15,
  13,
  0,
  1,
  2,
  3,
  4,
  16,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Response, purchase_result_details_),
  PROTOBUF_FIELD_OFFSET(::CStore_RegisterCDKey_Response, purchase_receipt_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Request, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response_Tag, name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetMostPopularTags_Response, tags_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Request, tagids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, english_name_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, name_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response_Tag, normalized_name_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetLocalizedNameForTags_Response, tags_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Request, have_version_hash_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response_Tag, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response, version_hash_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTagList_Response, tags_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, os_win_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, os_mac_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, os_linux_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, full_controller_support_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, native_steam_controller_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, include_coming_soon_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, excluded_tagids_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, exclude_early_access_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, exclude_videos_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, exclude_software_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, exclude_dlc_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, exclude_soundtracks_),
  PROTOBUF_FIELD_OFFSET(::CStoreDiscoveryQueueSettings, featured_tagids_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, queue_type_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, country_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, rebuild_queue_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, settings_changed_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, settings_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, rebuild_queue_if_stale_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, ignore_user_preferences_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, no_experimental_results_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, experimental_cohort_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, debug_get_solr_query_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Request, store_page_filter_),
  3,
  0,
  4,
  5,
  1,
  6,
  7,
  9,
  8,
  10,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, appids_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, country_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, settings_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, skipped_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, exhausted_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, experimental_cohort_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueue_Response, debug_solr_query_),
  ~0u,
  0,
  2,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Request, queue_type_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Request, store_page_filter_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Response, country_code_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSettings_Response, settings_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Request, queue_type_),
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Request, store_page_filter_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_SkipDiscoveryQueueItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Request, store_appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Request, beta_appid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, type_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, skipped_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, items_remaining_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, next_appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response_InQueue, experimental_cohort_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, owned_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, wishlist_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, ignored_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, following_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, in_queues_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, queues_with_skip_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, queue_items_remaining_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, queue_items_next_appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, temporarily_owned_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, queues_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, ignored_reason_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetUserGameInterestState_Response, beta_status_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Request, queue_type_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Request, store_page_filter_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetDiscoveryQueueSkippedApps_Response, appids_),
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Request, report_type_),
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Request, report_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_ReportApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, primary_language_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, secondary_languages_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, platform_windows_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, platform_mac_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, platform_linux_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, timestamp_updated_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, hide_store_broadcast_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, review_score_preference_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, timestamp_content_descriptor_preferences_updated_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, provide_decfeedback_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserPreferences, additional_languages_),
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences_Tag, name_),
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences_Tag, timestamp_added_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UserTagPreferences, tags_to_exclude_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Response, preferences_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Response, tag_preferences_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetStorePreferences_Response, content_descriptor_preferences_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Request, num_apps_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Request, num_top_friends_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, appid_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, steamids_top_friends_),
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, total_friends_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetTrendingAppsAmongFriends_Response, trending_apps_),
  PROTOBUF_FIELD_OFFSET(::CStore_MigratePartnerLinkTracking_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_MigratePartnerLinkTracking_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_MigratePartnerLinkTracking_Notification, accountid_),
  PROTOBUF_FIELD_OFFSET(::CStore_MigratePartnerLinkTracking_Notification, browserid_),
  PROTOBUF_FIELD_OFFSET(::CStore_MigratePartnerLinkTracking_Notification, backfill_source_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Request, packages_to_reserve_),
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Request, packages_to_unreserve_),
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Request, country_code_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_UpdatePackageReservations_Response, reservation_status_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, edistributor_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, product_identifier_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, start_queue_position_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, rtime_estimated_notification_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, localization_token_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, accountid_),
  PROTOBUF_FIELD_OFFSET(::CReservationPositionMessage, rtime_created_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_SetReservationPositionMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_SetReservationPositionMessage_Request, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_SetReservationPositionMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Request, edistributor_),
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Request, product_identifier_),
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Request, start_queue_position_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_DeleteReservationPositionMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetAllReservationPositionMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_GetAllReservationPositionMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_GetAllReservationPositionMessages_Response, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStore_ReloadAllReservationPositionMessages_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_SetFeedbacRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_SetFeedbacRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_SetFeedbacRequest, appid_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_SetFeedbacRequest, feedback_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_SetFeedbacResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Response, prompt_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Response, feedbaceligible_),
  PROTOBUF_FIELD_OFFSET(::CSteamDeckCompatibility_ShouldPrompt_Response, existing_feedback_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CStore_StorePreferencesChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStore_StorePreferencesChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStore_StorePreferencesChanged_Notification, preferences_),
  PROTOBUF_FIELD_OFFSET(::CStore_StorePreferencesChanged_Notification, tag_preferences_),
  PROTOBUF_FIELD_OFFSET(::CStore_StorePreferencesChanged_Notification, content_descriptor_preferences_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CStore_RegisterCDKey_Request)},
  { 11, 19, sizeof(::CStore_PurchaseReceiptInfo_LineItem)},
  { 22, 45, sizeof(::CStore_PurchaseReceiptInfo)},
  { 63, 70, sizeof(::CStore_RegisterCDKey_Response)},
  { 72, 78, sizeof(::CStore_GetMostPopularTags_Request)},
  { 79, 86, sizeof(::CStore_GetMostPopularTags_Response_Tag)},
  { 88, -1, sizeof(::CStore_GetMostPopularTags_Response)},
  { 94, 101, sizeof(::CStore_GetLocalizedNameForTags_Request)},
  { 103, 112, sizeof(::CStore_GetLocalizedNameForTags_Response_Tag)},
  { 116, -1, sizeof(::CStore_GetLocalizedNameForTags_Response)},
  { 122, 129, sizeof(::CStore_GetTagList_Request)},
  { 131, 138, sizeof(::CStore_GetTagList_Response_Tag)},
  { 140, 147, sizeof(::CStore_GetTagList_Response)},
  { 149, 167, sizeof(::CStoreDiscoveryQueueSettings)},
  { 180, 196, sizeof(::CStore_GetDiscoveryQueue_Request)},
  { 207, 219, sizeof(::CStore_GetDiscoveryQueue_Response)},
  { 226, 233, sizeof(::CStore_GetDiscoveryQueueSettings_Request)},
  { 235, 242, sizeof(::CStore_GetDiscoveryQueueSettings_Response)},
  { 244, 252, sizeof(::CStore_SkipDiscoveryQueueItem_Request)},
  { 255, -1, sizeof(::CStore_SkipDiscoveryQueueItem_Response)},
  { 260, 268, sizeof(::CStore_GetUserGameInterestState_Request)},
  { 271, 281, sizeof(::CStore_GetUserGameInterestState_Response_InQueue)},
  { 286, 303, sizeof(::CStore_GetUserGameInterestState_Response)},
  { 315, 323, sizeof(::CStore_GetDiscoveryQueueSkippedApps_Request)},
  { 326, -1, sizeof(::CStore_GetDiscoveryQueueSkippedApps_Response)},
  { 332, 340, sizeof(::CStore_ReportApp_Request)},
  { 343, -1, sizeof(::CStore_ReportApp_Response)},
  { 348, -1, sizeof(::CStore_GetStorePreferences_Request)},
  { 353, 369, sizeof(::CStore_UserPreferences)},
  { 380, 388, sizeof(::CStore_UserTagPreferences_Tag)},
  { 391, -1, sizeof(::CStore_UserTagPreferences)},
  { 397, 405, sizeof(::CStore_GetStorePreferences_Response)},
  { 408, 415, sizeof(::CStore_GetTrendingAppsAmongFriends_Request)},
  { 417, 425, sizeof(::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData)},
  { 428, -1, sizeof(::CStore_GetTrendingAppsAmongFriends_Response)},
  { 434, 442, sizeof(::CStore_MigratePartnerLinkTracking_Notification)},
  { 445, 453, sizeof(::CStore_UpdatePackageReservations_Request)},
  { 456, -1, sizeof(::CStore_UpdatePackageReservations_Response)},
  { 462, 474, sizeof(::CReservationPositionMessage)},
  { 481, -1, sizeof(::CStore_SetReservationPositionMessage_Request)},
  { 487, -1, sizeof(::CStore_SetReservationPositionMessage_Response)},
  { 492, 500, sizeof(::CStore_DeleteReservationPositionMessage_Request)},
  { 503, -1, sizeof(::CStore_DeleteReservationPositionMessage_Response)},
  { 508, -1, sizeof(::CStore_GetAllReservationPositionMessages_Request)},
  { 513, -1, sizeof(::CStore_GetAllReservationPositionMessages_Response)},
  { 519, -1, sizeof(::CStore_ReloadAllReservationPositionMessages_Notification)},
  { 524, 531, sizeof(::CSteamDeckCompatibility_SetFeedbacRequest)},
  { 533, -1, sizeof(::CSteamDeckCompatibility_SetFeedbacResponse)},
  { 538, 544, sizeof(::CSteamDeckCompatibility_ShouldPrompt_Request)},
  { 545, 553, sizeof(::CSteamDeckCompatibility_ShouldPrompt_Response)},
  { 556, 564, sizeof(::CStore_StorePreferencesChanged_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_RegisterCDKey_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_PurchaseReceiptInfo_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_PurchaseReceiptInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_RegisterCDKey_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetMostPopularTags_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetMostPopularTags_Response_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetMostPopularTags_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetLocalizedNameForTags_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetLocalizedNameForTags_Response_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetLocalizedNameForTags_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTagList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTagList_Response_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTagList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStoreDiscoveryQueueSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueue_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueueSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueueSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_SkipDiscoveryQueueItem_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_SkipDiscoveryQueueItem_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetUserGameInterestState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetUserGameInterestState_Response_InQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetUserGameInterestState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueueSkippedApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetDiscoveryQueueSkippedApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_ReportApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_ReportApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetStorePreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_UserPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_UserTagPreferences_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_UserTagPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetStorePreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTrendingAppsAmongFriends_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetTrendingAppsAmongFriends_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_MigratePartnerLinkTracking_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_UpdatePackageReservations_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_UpdatePackageReservations_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CReservationPositionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_SetReservationPositionMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_SetReservationPositionMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_DeleteReservationPositionMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_DeleteReservationPositionMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetAllReservationPositionMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_GetAllReservationPositionMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_ReloadAllReservationPositionMessages_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamDeckCompatibility_SetFeedbacRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamDeckCompatibility_SetFeedbacResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamDeckCompatibility_ShouldPrompt_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamDeckCompatibility_ShouldPrompt_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStore_StorePreferencesChanged_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fstore_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_store.steamclient.proto\032"
  " google/protobuf/descriptor.proto\032\030steam"
  "messages_base.proto\032,steammessages_unifi"
  "ed_base.steamclient.proto\032\021contenthubs.p"
  "roto\032\013enums.proto\"r\n\034CStore_RegisterCDKe"
  "y_Request\022\027\n\017activation_code\030\001 \001(\t\022\031\n\021pu"
  "rchase_platform\030\002 \001(\005\022\036\n\026is_request_from"
  "_client\030\003 \001(\010\"\227\004\n\032CStore_PurchaseReceipt"
  "Info\022\025\n\rtransactionid\030\001 \001(\004\022\021\n\tpackageid"
  "\030\002 \001(\r\022\027\n\017purchase_status\030\003 \001(\r\022\025\n\rresul"
  "t_detail\030\004 \001(\r\022\030\n\020transaction_time\030\005 \001(\r"
  "\022\026\n\016payment_method\030\006 \001(\r\022\022\n\nbase_price\030\007"
  " \001(\004\022\026\n\016total_discount\030\010 \001(\004\022\013\n\003tax\030\t \001("
  "\004\022\020\n\010shipping\030\n \001(\004\022\025\n\rcurrency_code\030\013 \001"
  "(\r\022\024\n\014country_code\030\014 \001(\t\022\026\n\016error_headli"
  "ne\030\r \001(\t\022\024\n\014error_string\030\016 \001(\t\022\025\n\rerror_"
  "lintext\030\017 \001(\t\022\024\n\014error_linurl\030\020 \001(\t\022\023\n\013e"
  "rror_appid\030\021 \001(\r\0228\n\nline_items\030\022 \003(\0132$.C"
  "Store_PurchaseReceiptInfo.LineItem\032K\n\010Li"
  "neItem\022\021\n\tpackageid\030\001 \001(\r\022\r\n\005appid\030\002 \001(\r"
  "\022\035\n\025line_item_description\030\003 \001(\t\"|\n\035CStor"
  "e_RegisterCDKey_Response\022\037\n\027purchase_res"
  "ult_details\030\001 \001(\005\022:\n\025purchase_receipt_in"
  "fo\030\002 \001(\0132\033.CStore_PurchaseReceiptInfo\"5\n"
  "!CStore_GetMostPopularTags_Request\022\020\n\010la"
  "nguage\030\001 \001(\t\"\177\n\"CStore_GetMostPopularTag"
  "s_Response\0225\n\004tags\030\001 \003(\0132\'.CStore_GetMos"
  "tPopularTags_Response.Tag\032\"\n\003Tag\022\r\n\005tagi"
  "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"J\n&CStore_GetLocal"
  "izedNameForTags_Request\022\020\n\010language\030\001 \001("
  "\t\022\016\n\006tagids\030\002 \003(\r\"\270\001\n\'CStore_GetLocalize"
  "dNameForTags_Response\022:\n\004tags\030\001 \003(\0132,.CS"
  "tore_GetLocalizedNameForTags_Response.Ta"
  "g\032Q\n\003Tag\022\r\n\005tagid\030\001 \001(\r\022\024\n\014english_name\030"
  "\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\027\n\017normalized_name\030\004"
  " \001(\t\"H\n\031CStore_GetTagList_Request\022\020\n\010lan"
  "guage\030\001 \001(\t\022\031\n\021have_version_hash\030\002 \001(\t\"\205"
  "\001\n\032CStore_GetTagList_Response\022\024\n\014version"
  "_hash\030\001 \001(\t\022-\n\004tags\030\002 \003(\0132\037.CStore_GetTa"
  "gList_Response.Tag\032\"\n\003Tag\022\r\n\005tagid\030\001 \001(\r"
  "\022\014\n\004name\030\002 \001(\t\"\343\002\n\034CStoreDiscoveryQueueS"
  "ettings\022\016\n\006os_win\030\004 \001(\010\022\016\n\006os_mac\030\005 \001(\010\022"
  "\020\n\010os_linux\030\006 \001(\010\022\037\n\027full_controller_sup"
  "port\030\007 \001(\010\022\037\n\027native_steam_controller\030\010 "
  "\001(\010\022\033\n\023include_coming_soon\030\t \001(\010\022\027\n\017excl"
  "uded_tagids\030\n \003(\r\022\034\n\024exclude_early_acces"
  "s\030\013 \001(\010\022\026\n\016exclude_videos\030\014 \001(\010\022\030\n\020exclu"
  "de_software\030\r \001(\010\022\023\n\013exclude_dlc\030\016 \001(\010\022\033"
  "\n\023exclude_soundtracks\030\017 \001(\010\022\027\n\017featured_"
  "tagids\030\020 \003(\r\"\261\003\n CStore_GetDiscoveryQueu"
  "e_Request\022J\n\nqueue_type\030\001 \001(\0162\031.EStoreDi"
  "scoveryQueueType:\033EStoreDiscoveryQueueTy"
  "peNew\022\024\n\014country_code\030\002 \001(\t\022\025\n\rrebuild_q"
  "ueue\030\003 \001(\010\022\030\n\020settings_changed\030\004 \001(\010\022/\n\010"
  "settings\030\005 \001(\0132\035.CStoreDiscoveryQueueSet"
  "tings\022\036\n\026rebuild_queue_if_stale\030\006 \001(\010\022\037\n"
  "\027ignore_user_preferences\030\010 \001(\010\022\037\n\027no_exp"
  "erimental_results\030\t \001(\010\022\033\n\023experimental_"
  "cohort\030\n \001(\r\022\034\n\024debug_get_solr_query\030\013 \001"
  "(\010\022,\n\021store_page_filter\030\014 \001(\0132\021.CStorePa"
  "geFilter\"\325\001\n!CStore_GetDiscoveryQueue_Re"
  "sponse\022\016\n\006appids\030\001 \003(\r\022\024\n\014country_code\030\002"
  " \001(\t\022/\n\010settings\030\003 \001(\0132\035.CStoreDiscovery"
  "QueueSettings\022\017\n\007skipped\030\004 \001(\005\022\021\n\texhaus"
  "ted\030\005 \001(\010\022\033\n\023experimental_cohort\030\006 \001(\r\022\030"
  "\n\020debug_solr_query\030\007 \001(\t\"\244\001\n(CStore_GetD"
  "iscoveryQueueSettings_Request\022J\n\nqueue_t"
  "ype\030\001 \001(\0162\031.EStoreDiscoveryQueueType:\033ES"
  "toreDiscoveryQueueTypeNew\022,\n\021store_page_"
  "filter\030\002 \001(\0132\021.CStorePageFilter\"r\n)CStor"
  "e_GetDiscoveryQueueSettings_Response\022\024\n\014"
  "country_code\030\001 \001(\t\022/\n\010settings\030\002 \001(\0132\035.C"
  "StoreDiscoveryQueueSettings\"\260\001\n%CStore_S"
  "kipDiscoveryQueueItem_Request\022J\n\nqueue_t"
  "ype\030\001 \001(\0162\031.EStoreDiscoveryQueueType:\033ES"
  "toreDiscoveryQueueTypeNew\022\r\n\005appid\030\002 \001(\r"
  "\022,\n\021store_page_filter\030\003 \001(\0132\021.CStorePage"
  "Filter\"(\n&CStore_SkipDiscoveryQueueItem_"
  "Response\"a\n\'CStore_GetUserGameInterestSt"
  "ate_Request\022\r\n\005appid\030\001 \001(\r\022\023\n\013store_appi"
  "d\030\002 \001(\r\022\022\n\nbeta_appid\030\003 \001(\r\"\356\004\n(CStore_G"
  "etUserGameInterestState_Response\022\r\n\005owne"
  "d\030\001 \001(\010\022\020\n\010wishlist\030\002 \001(\010\022\017\n\007ignored\030\003 \001"
  "(\010\022\021\n\tfollowing\030\004 \001(\010\022,\n\tin_queues\030\005 \003(\016"
  "2\031.EStoreDiscoveryQueueType\0223\n\020queues_wi"
  "th_skip\030\006 \003(\0162\031.EStoreDiscoveryQueueType"
  "\022\035\n\025queue_items_remaining\030\007 \003(\005\022\036\n\026queue"
  "_items_next_appid\030\010 \003(\r\022\031\n\021temporarily_o"
  "wned\030\t \001(\010\022A\n\006queues\030\n \003(\01321.CStore_GetU"
  "serGameInterestState_Response.InQueue\022\026\n"
  "\016ignored_reason\030\013 \001(\005\0228\n\013beta_status\030\014 \001"
  "(\0162\020.EPlaytestStatus:\021ETesterStatusNone\032"
  "\252\001\n\007InQueue\022D\n\004type\030\001 \001(\0162\031.EStoreDiscov"
  "eryQueueType:\033EStoreDiscoveryQueueTypeNe"
  "w\022\017\n\007skipped\030\002 \001(\010\022\027\n\017items_remaining\030\003 "
  "\001(\005\022\022\n\nnext_appid\030\004 \001(\r\022\033\n\023experimental_"
  "cohort\030\005 \001(\r\"\270\001\n+CStore_GetDiscoveryQueu"
  "eSkippedApps_Request\022\017\n\007steamid\030\001 \001(\006\022J\n"
  "\nqueue_type\030\002 \001(\0162\031.EStoreDiscoveryQueue"
  "Type:\033EStoreDiscoveryQueueTypeNew\022,\n\021sto"
  "re_page_filter\030\003 \001(\0132\021.CStorePageFilter\""
  ">\n,CStore_GetDiscoveryQueueSkippedApps_R"
  "esponse\022\016\n\006appids\030\001 \003(\r\"w\n\030CStore_Report"
  "App_Request\022\r\n\005appid\030\001 \001(\r\022<\n\013report_typ"
  "e\030\002 \001(\0162\017.EAppReportType:\026EAppReportType"
  "_Invalid\022\016\n\006report\030\003 \001(\t\"\033\n\031CStore_Repor"
  "tApp_Response\"$\n\"CStore_GetStorePreferen"
  "ces_Request\"\354\003\n\026CStore_UserPreferences\022\030"
  "\n\020primary_language\030\001 \001(\005\022\033\n\023secondary_la"
  "nguages\030\002 \001(\r\022\030\n\020platform_windows\030\003 \001(\010\022"
  "\024\n\014platform_mac\030\004 \001(\010\022\026\n\016platform_linux\030"
  "\005 \001(\010\022\031\n\021timestamp_updated\030\010 \001(\r\022\034\n\024hide"
  "_store_broadcast\030\t \001(\010\022^\n\027review_score_p"
  "reference\030\n \001(\0162\033.EUserReviewScorePrefer"
  "ence: EUserReviewScorePreference_Unset\0228"
  "\n0timestamp_content_descriptor_preferenc"
  "es_updated\030\013 \001(\005\022b\n\023provide_decfeedback\030"
  "\014 \001(\0162\037.EProvideDeckFeedbackPreference:$"
  "EProvideDeckFeedbackPreference_Unset\022\034\n\024"
  "additional_languages\030\r \001(\t\"\221\001\n\031CStore_Us"
  "erTagPreferences\0227\n\017tags_to_exclude\030\001 \003("
  "\0132\036.CStore_UserTagPreferences.Tag\032;\n\003Tag"
  "\022\r\n\005tagid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\027\n\017timesta"
  "mp_added\030\003 \001(\r\"\323\001\n#CStore_GetStorePrefer"
  "ences_Response\022,\n\013preferences\030\001 \001(\0132\027.CS"
  "tore_UserPreferences\0223\n\017tag_preferences\030"
  "\002 \001(\0132\032.CStore_UserTagPreferences\022I\n\036con"
  "tent_descriptor_preferences\030\003 \001(\0132!.User"
  "ContentDescriptorPreferences\"W\n*CStore_G"
  "etTrendingAppsAmongFriends_Request\022\020\n\010nu"
  "m_apps\030\001 \001(\r\022\027\n\017num_top_friends\030\002 \001(\r\"\331\001"
  "\n+CStore_GetTrendingAppsAmongFriends_Res"
  "ponse\022S\n\rtrending_apps\030\001 \003(\0132<.CStore_Ge"
  "tTrendingAppsAmongFriends_Response.Trend"
  "ingAppData\032U\n\017TrendingAppData\022\r\n\005appid\030\001"
  " \001(\r\022\034\n\024steamids_top_friends\030\002 \003(\004\022\025\n\rto"
  "tal_friends\030\003 \001(\r\"\275\001\n.CStore_MigratePart"
  "nerLinkTracking_Notification\022\021\n\taccounti"
  "d\030\001 \001(\r\022\021\n\tbrowserid\030\002 \001(\004\022e\n\017backfill_s"
  "ource\030\003 \001(\0162#.EPartnerLinkTrackingBackfi"
  "llSource:\'EPartnerLinkTrackingBackfillSo"
  "urce_None\"|\n(CStore_UpdatePackageReserva"
  "tions_Request\022\033\n\023packages_to_reserve\030\001 \003"
  "(\r\022\035\n\025packages_to_unreserve\030\002 \003(\r\022\024\n\014cou"
  "ntry_code\030\003 \001(\t\"c\n)CStore_UpdatePackageR"
  "eservations_Response\0226\n\022reservation_stat"
  "us\030\001 \003(\0132\032.CPackageReservationStatus\"\331\001\n"
  "\033CReservationPositionMessage\022\024\n\014edistrib"
  "utor\030\001 \001(\r\022\032\n\022product_identifier\030\002 \001(\t\022\034"
  "\n\024start_queue_position\030\003 \001(\r\022$\n\034rtime_es"
  "timated_notification\030\004 \001(\r\022\032\n\022localizati"
  "on_token\030\005 \001(\t\022\021\n\taccountid\030\006 \001(\r\022\025\n\rrti"
  "me_created\030\007 \001(\r\"^\n,CStore_SetReservatio"
  "nPositionMessage_Request\022.\n\010settings\030\001 \003"
  "(\0132\034.CReservationPositionMessage\"/\n-CSto"
  "re_SetReservationPositionMessage_Respons"
  "e\"\201\001\n/CStore_DeleteReservationPositionMe"
  "ssage_Request\022\024\n\014edistributor\030\001 \001(\r\022\032\n\022p"
  "roduct_identifier\030\002 \001(\t\022\034\n\024start_queue_p"
  "osition\030\003 \001(\r\"2\n0CStore_DeleteReservatio"
  "nPositionMessage_Response\"2\n0CStore_GetA"
  "llReservationPositionMessages_Request\"c\n"
  "1CStore_GetAllReservationPositionMessage"
  "s_Response\022.\n\010settings\030\001 \003(\0132\034.CReservat"
  "ionPositionMessage\":\n8CStore_ReloadAllRe"
  "servationPositionMessages_Notification\"\223"
  "\001\n)CSteamDeckCompatibility_SetFeedbacReq"
  "uest\022\r\n\005appid\030\001 \001(\r\022W\n\010feedback\030\002 \001(\0162 ."
  "ESteamDeckCompatibilityFeedback:#ESteamD"
  "eckCompatibilityFeedbacUnset\",\n*CSteamDe"
  "ckCompatibility_SetFeedbacResponse\"=\n,CS"
  "teamDeckCompatibility_ShouldPrompt_Reque"
  "st\022\r\n\005appid\030\001 \001(\r\"\272\001\n-CSteamDeckCompatib"
  "ility_ShouldPrompt_Response\022\016\n\006prompt\030\001 "
  "\001(\010\022\027\n\017feedbaceligible\030\002 \001(\010\022`\n\021existing"
  "_feedback\030\003 \001(\0162 .ESteamDeckCompatibilit"
  "yFeedback:#ESteamDeckCompatibilityFeedba"
  "cUnset\"\333\001\n+CStore_StorePreferencesChange"
  "d_Notification\022,\n\013preferences\030\001 \001(\0132\027.CS"
  "tore_UserPreferences\0223\n\017tag_preferences\030"
  "\002 \001(\0132\032.CStore_UserTagPreferences\022I\n\036con"
  "tent_descriptor_preferences\030\003 \001(\0132!.User"
  "ContentDescriptorPreferences*\215\005\n\030EStoreD"
  "iscoveryQueueType\022\037\n\033EStoreDiscoveryQueu"
  "eTypeNew\020\000\022&\n\"EStoreDiscoveryQueueTypeCo"
  "mingSoon\020\001\022\'\n#EStoreDiscoveryQueueTypeRe"
  "commended\020\002\022+\n\'EStoreDiscoveryQueueTypeE"
  "veryNewRelease\020\003\022)\n%EStoreDiscoveryQueue"
  "TypeMLRecommender\020\005\022*\n&EStoreDiscoveryQu"
  "eueTypeWishlistOnSale\020\006\022\037\n\033EStoreDiscove"
  "ryQueueTypeDLC\020\007\022%\n!EStoreDiscoveryQueue"
  "TypeDLCOnSale\020\010\0221\n-EStoreDiscoveryQueueT"
  "ypeRecommendedComingSoon\020\t\022+\n\'EStoreDisc"
  "overyQueueTypeRecommendedFree\020\n\022-\n)EStor"
  "eDiscoveryQueueTypeRecommendedOnSale\020\013\022,"
  "\n(EStoreDiscoveryQueueTypeRecommendedDem"
  "os\020\014\022*\n&EStoreDiscoveryQueueTypeDLCNewRe"
  "leases\020\r\022)\n%EStoreDiscoveryQueueTypeDLCT"
  "opSellers\020\016\022\037\n\033EStoreDiscoveryQueueTypeM"
  "AX\020\017*v\n\017EPlaytestStatus\022\025\n\021ETesterStatus"
  "None\020\000\022\030\n\024ETesterStatusPending\020\001\022\030\n\024ETes"
  "terStatusInvited\020\002\022\030\n\024ETesterStatusGrant"
  "ed\020\003*\204\004\n\016EAppReportType\022\032\n\026EAppReportTyp"
  "e_Invalid\020\000\022\027\n\023EAppReportType_Scam\020\001\022\032\n\026"
  "EAppReportType_Malware\020\002\022\035\n\031EAppReportTy"
  "pe_HateSpeech\020\003\022\036\n\032EAppReportType_Pornog"
  "raphy\020\004\022)\n%EAppReportType_NonLabeledAdul"
  "tContent\020\005\022\033\n\027EAppReportType_Libelous\020\006\022"
  "\034\n\030EAppReportType_Offensive\020\007\022#\n\037EAppRep"
  "ortType_ExploitsChildren\020\010\0226\n2EAppReport"
  "Type_MtxWithNonSteamWalletPaymentMethods"
  "\020\t\022%\n!EAppReportType_CopyrightViolation\020"
  "\n\022\037\n\033EAppReportType_ViolatesLaws\020\013\022\030\n\024EA"
  "ppReportType_Other\020\014\022\031\n\025EAppReportType_B"
  "roken\020\r\022\"\n\036EAppReportType_AIContentRepor"
  "t\020\016*\232\001\n\032EUserReviewScorePreference\022$\n EU"
  "serReviewScorePreference_Unset\020\000\022)\n%EUse"
  "rReviewScorePreference_IncludeAll\020\001\022+\n\'E"
  "UserReviewScorePreference_ExcludeBombs\020\002"
  "*\334\001\n\"EPartnerLinkTrackingBackfillSource\022"
  "+\n\'EPartnerLinkTrackingBackfillSource_No"
  "ne\020\000\022*\n&EPartnerLinkTrackingBackfillSour"
  "ce_Web\020\001\022-\n)EPartnerLinkTrackingBackfill"
  "Source_Mobile\020\002\022.\n*EPartnerLinkTrackingB"
  "ackfillSource_Desktop\020\0032\210\021\n\005Store\022N\n\rReg"
  "isterCDKey\022\035.CStore_RegisterCDKey_Reques"
  "t\032\036.CStore_RegisterCDKey_Response\022]\n\022Get"
  "MostPopularTags\022\".CStore_GetMostPopularT"
  "ags_Request\032#.CStore_GetMostPopularTags_"
  "Response\022l\n\027GetLocalizedNameForTags\022\'.CS"
  "tore_GetLocalizedNameForTags_Request\032(.C"
  "Store_GetLocalizedNameForTags_Response\022E"
  "\n\nGetTagList\022\032.CStore_GetTagList_Request"
  "\032\033.CStore_GetTagList_Response\022Z\n\021GetDisc"
  "overyQueue\022!.CStore_GetDiscoveryQueue_Re"
  "quest\032\".CStore_GetDiscoveryQueue_Respons"
  "e\022r\n\031GetDiscoveryQueueSettings\022).CStore_"
  "GetDiscoveryQueueSettings_Request\032*.CSto"
  "re_GetDiscoveryQueueSettings_Response\022i\n"
  "\026SkipDiscoveryQueueItem\022&.CStore_SkipDis"
  "coveryQueueItem_Request\032\'.CStore_SkipDis"
  "coveryQueueItem_Response\022o\n\030GetUserGameI"
  "nterestState\022(.CStore_GetUserGameInteres"
  "tState_Request\032).CStore_GetUserGameInter"
  "estState_Response\022{\n\034GetDiscoveryQueueSk"
  "ippedApps\022,.CStore_GetDiscoveryQueueSkip"
  "pedApps_Request\032-.CStore_GetDiscoveryQue"
  "ueSkippedApps_Response\022B\n\tReportApp\022\031.CS"
  "tore_ReportApp_Request\032\032.CStore_ReportAp"
  "p_Response\022`\n\023GetStorePreferences\022#.CSto"
  "re_GetStorePreferences_Request\032$.CStore_"
  "GetStorePreferences_Response\022x\n\033GetTrend"
  "ingAppsAmongFriends\022+.CStore_GetTrending"
  "AppsAmongFriends_Request\032,.CStore_GetTre"
  "ndingAppsAmongFriends_Response\022Z\n\032Migrat"
  "ePartnerLinkTracking\022/.CStore_MigratePar"
  "tnerLinkTracking_Notification\032\013.NoRespon"
  "se\022r\n\031UpdatePackageReservations\022).CStore"
  "_UpdatePackageReservations_Request\032*.CSt"
  "ore_UpdatePackageReservations_Response\022~"
  "\n\035SetReservationPositionMessage\022-.CStore"
  "_SetReservationPositionMessage_Request\032."
  ".CStore_SetReservationPositionMessage_Re"
  "sponse\022\207\001\n DeleteReservationPositionMess"
  "age\0220.CStore_DeleteReservationPositionMe"
  "ssage_Request\0321.CStore_DeleteReservation"
  "PositionMessage_Response\022\212\001\n!GetAllReser"
  "vationPositionMessages\0221.CStore_GetAllRe"
  "servationPositionMessages_Request\0322.CSto"
  "re_GetAllReservationPositionMessages_Res"
  "ponse\022n\n$ReloadAllReservationPositionMes"
  "sages\0229.CStore_ReloadAllReservationPosit"
  "ionMessages_Notification\032\013.NoResponse\022s\n"
  "\030SetCompatibilityFeedback\022*.CSteamDeckCo"
  "mpatibility_SetFeedbacRequest\032+.CSteamDe"
  "ckCompatibility_SetFeedbacResponse\022\205\001\n$S"
  "houldPromptForCompatibilityFeedback\022-.CS"
  "teamDeckCompatibility_ShouldPrompt_Reque"
  "st\032..CSteamDeckCompatibility_ShouldPromp"
  "t_Response2o\n\013StoreClient\022Z\n\035NotifyStore"
  "PreferencesChanged\022,.CStore_StorePrefere"
  "ncesChanged_Notification\032\013.NoResponse\032\004\300"
  "\265\030\002B\035\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fstore_2esteamclient_2eproto_deps[5] = {
  &::descriptor_table_contenthubs_2eproto,
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fstore_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fstore_2esteamclient_2eproto = {
  false, false, 11314, descriptor_table_protodef_steammessages_5fstore_2esteamclient_2eproto, "steammessages_store.steamclient.proto", 
  &descriptor_table_steammessages_5fstore_2esteamclient_2eproto_once, descriptor_table_steammessages_5fstore_2esteamclient_2eproto_deps, 5, 51,
  schemas, file_default_instances, TableStruct_steammessages_5fstore_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fstore_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fstore_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fstore_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fstore_2esteamclient_2eproto(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStoreDiscoveryQueueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[0];
}
bool EStoreDiscoveryQueueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaytestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[1];
}
bool EPlaytestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppReportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[2];
}
bool EAppReportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUserReviewScorePreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[3];
}
bool EUserReviewScorePreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartnerLinkTrackingBackfillSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto[4];
}
bool EPartnerLinkTrackingBackfillSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CStore_RegisterCDKey_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_RegisterCDKey_Request>()._has_bits_);
  static void set_has_activation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purchase_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_request_from_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_RegisterCDKey_Request::CStore_RegisterCDKey_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_RegisterCDKey_Request)
}
CStore_RegisterCDKey_Request::CStore_RegisterCDKey_Request(const CStore_RegisterCDKey_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation_code()) {
    activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activation_code(), 
      GetArena());
  }
  ::memcpy(&purchase_platform_, &from.purchase_platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_request_from_client_) -
    reinterpret_cast<char*>(&purchase_platform_)) + sizeof(is_request_from_client_));
  // @@protoc_insertion_point(copy_constructor:CStore_RegisterCDKey_Request)
}

void CStore_RegisterCDKey_Request::SharedCtor() {
activation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&purchase_platform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_request_from_client_) -
    reinterpret_cast<char*>(&purchase_platform_)) + sizeof(is_request_from_client_));
}

CStore_RegisterCDKey_Request::~CStore_RegisterCDKey_Request() {
  // @@protoc_insertion_point(destructor:CStore_RegisterCDKey_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_RegisterCDKey_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_RegisterCDKey_Request::ArenaDtor(void* object) {
  CStore_RegisterCDKey_Request* _this = reinterpret_cast< CStore_RegisterCDKey_Request* >(object);
  (void)_this;
}
void CStore_RegisterCDKey_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_RegisterCDKey_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_RegisterCDKey_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_RegisterCDKey_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    activation_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&purchase_platform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_request_from_client_) -
        reinterpret_cast<char*>(&purchase_platform_)) + sizeof(is_request_from_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_RegisterCDKey_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string activation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_activation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_RegisterCDKey_Request.activation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 purchase_platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_purchase_platform(&has_bits);
          purchase_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_request_from_client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_request_from_client(&has_bits);
          is_request_from_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_RegisterCDKey_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_RegisterCDKey_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string activation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation_code().data(), static_cast<int>(this->_internal_activation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_RegisterCDKey_Request.activation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation_code(), target);
  }

  // optional int32 purchase_platform = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_platform(), target);
  }

  // optional bool is_request_from_client = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_request_from_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_RegisterCDKey_Request)
  return target;
}

size_t CStore_RegisterCDKey_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_RegisterCDKey_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string activation_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation_code());
    }

    // optional int32 purchase_platform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_purchase_platform());
    }

    // optional bool is_request_from_client = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_RegisterCDKey_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_RegisterCDKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_RegisterCDKey_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_RegisterCDKey_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_RegisterCDKey_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_RegisterCDKey_Request)
    MergeFrom(*source);
  }
}

void CStore_RegisterCDKey_Request::MergeFrom(const CStore_RegisterCDKey_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_RegisterCDKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activation_code(from._internal_activation_code());
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_platform_ = from.purchase_platform_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_request_from_client_ = from.is_request_from_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_RegisterCDKey_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_RegisterCDKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_RegisterCDKey_Request::CopyFrom(const CStore_RegisterCDKey_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_RegisterCDKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_RegisterCDKey_Request::IsInitialized() const {
  return true;
}

void CStore_RegisterCDKey_Request::InternalSwap(CStore_RegisterCDKey_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_code_.Swap(&other->activation_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_RegisterCDKey_Request, is_request_from_client_)
      + sizeof(CStore_RegisterCDKey_Request::is_request_from_client_)
      - PROTOBUF_FIELD_OFFSET(CStore_RegisterCDKey_Request, purchase_platform_)>(
          reinterpret_cast<char*>(&purchase_platform_),
          reinterpret_cast<char*>(&other->purchase_platform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_RegisterCDKey_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_PurchaseReceiptInfo_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_PurchaseReceiptInfo_LineItem>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_line_item_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_PurchaseReceiptInfo_LineItem::CStore_PurchaseReceiptInfo_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_PurchaseReceiptInfo.LineItem)
}
CStore_PurchaseReceiptInfo_LineItem::CStore_PurchaseReceiptInfo_LineItem(const CStore_PurchaseReceiptInfo_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line_item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_line_item_description()) {
    line_item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line_item_description(), 
      GetArena());
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CStore_PurchaseReceiptInfo.LineItem)
}

void CStore_PurchaseReceiptInfo_LineItem::SharedCtor() {
line_item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(appid_));
}

CStore_PurchaseReceiptInfo_LineItem::~CStore_PurchaseReceiptInfo_LineItem() {
  // @@protoc_insertion_point(destructor:CStore_PurchaseReceiptInfo.LineItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_PurchaseReceiptInfo_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  line_item_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_PurchaseReceiptInfo_LineItem::ArenaDtor(void* object) {
  CStore_PurchaseReceiptInfo_LineItem* _this = reinterpret_cast< CStore_PurchaseReceiptInfo_LineItem* >(object);
  (void)_this;
}
void CStore_PurchaseReceiptInfo_LineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_PurchaseReceiptInfo_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_PurchaseReceiptInfo_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_PurchaseReceiptInfo.LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    line_item_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_PurchaseReceiptInfo_LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string line_item_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_line_item_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.LineItem.line_item_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_PurchaseReceiptInfo_LineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_PurchaseReceiptInfo.LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string line_item_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_line_item_description().data(), static_cast<int>(this->_internal_line_item_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.LineItem.line_item_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_line_item_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_PurchaseReceiptInfo.LineItem)
  return target;
}

size_t CStore_PurchaseReceiptInfo_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_PurchaseReceiptInfo.LineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string line_item_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_line_item_description());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packageid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_PurchaseReceiptInfo_LineItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_PurchaseReceiptInfo.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_PurchaseReceiptInfo_LineItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_PurchaseReceiptInfo_LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_PurchaseReceiptInfo.LineItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_PurchaseReceiptInfo.LineItem)
    MergeFrom(*source);
  }
}

void CStore_PurchaseReceiptInfo_LineItem::MergeFrom(const CStore_PurchaseReceiptInfo_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_PurchaseReceiptInfo.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_line_item_description(from._internal_line_item_description());
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_PurchaseReceiptInfo_LineItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_PurchaseReceiptInfo.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_PurchaseReceiptInfo_LineItem::CopyFrom(const CStore_PurchaseReceiptInfo_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_PurchaseReceiptInfo.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_PurchaseReceiptInfo_LineItem::IsInitialized() const {
  return true;
}

void CStore_PurchaseReceiptInfo_LineItem::InternalSwap(CStore_PurchaseReceiptInfo_LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_item_description_.Swap(&other->line_item_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_PurchaseReceiptInfo_LineItem, appid_)
      + sizeof(CStore_PurchaseReceiptInfo_LineItem::appid_)
      - PROTOBUF_FIELD_OFFSET(CStore_PurchaseReceiptInfo_LineItem, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_PurchaseReceiptInfo_LineItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_PurchaseReceiptInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_PurchaseReceiptInfo>()._has_bits_);
  static void set_has_transactionid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_purchase_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_result_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transaction_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_payment_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_base_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_discount(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tax(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_shipping(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_lintext(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_linurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_error_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CStore_PurchaseReceiptInfo::CStore_PurchaseReceiptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  line_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_PurchaseReceiptInfo)
}
CStore_PurchaseReceiptInfo::CStore_PurchaseReceiptInfo(const CStore_PurchaseReceiptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  error_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_headline()) {
    error_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_headline(), 
      GetArena());
  }
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_string()) {
    error_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_string(), 
      GetArena());
  }
  error_lintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_lintext()) {
    error_lintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_lintext(), 
      GetArena());
  }
  error_linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_linurl()) {
    error_linurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_linurl(), 
      GetArena());
  }
  ::memcpy(&transactionid_, &from.transactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_appid_) -
    reinterpret_cast<char*>(&transactionid_)) + sizeof(error_appid_));
  // @@protoc_insertion_point(copy_constructor:CStore_PurchaseReceiptInfo)
}

void CStore_PurchaseReceiptInfo::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_lintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transactionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_appid_) -
    reinterpret_cast<char*>(&transactionid_)) + sizeof(error_appid_));
}

CStore_PurchaseReceiptInfo::~CStore_PurchaseReceiptInfo() {
  // @@protoc_insertion_point(destructor:CStore_PurchaseReceiptInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_PurchaseReceiptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_lintext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_linurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_PurchaseReceiptInfo::ArenaDtor(void* object) {
  CStore_PurchaseReceiptInfo* _this = reinterpret_cast< CStore_PurchaseReceiptInfo* >(object);
  (void)_this;
}
void CStore_PurchaseReceiptInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_PurchaseReceiptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_PurchaseReceiptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_PurchaseReceiptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      error_headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      error_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      error_lintext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      error_linurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&transactionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_status_) -
        reinterpret_cast<char*>(&transactionid_)) + sizeof(purchase_status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&result_detail_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shipping_) -
        reinterpret_cast<char*>(&result_detail_)) + sizeof(shipping_));
  }
  error_appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_PurchaseReceiptInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 transactionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transactionid(&has_bits);
          transactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 packageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purchase_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_purchase_status(&has_bits);
          purchase_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result_detail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result_detail(&has_bits);
          result_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transaction_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_transaction_time(&has_bits);
          transaction_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 payment_method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_payment_method(&has_bits);
          payment_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 base_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_base_price(&has_bits);
          base_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_discount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_discount(&has_bits);
          total_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tax = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tax(&has_bits);
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 shipping = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_shipping(&has_bits);
          shipping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currency_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_currency_code(&has_bits);
          currency_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_headline = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_error_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.error_headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_error_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.error_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_lintext = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_error_lintext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.error_lintext");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_linurl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_error_linurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_PurchaseReceiptInfo.error_linurl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 error_appid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_error_appid(&has_bits);
          error_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CStore_PurchaseReceiptInfo.LineItem line_items = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_PurchaseReceiptInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_PurchaseReceiptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 transactionid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_transactionid(), target);
  }

  // optional uint32 packageid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_packageid(), target);
  }

  // optional uint32 purchase_status = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_purchase_status(), target);
  }

  // optional uint32 result_detail = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result_detail(), target);
  }

  // optional uint32 transaction_time = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transaction_time(), target);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_payment_method(), target);
  }

  // optional uint64 base_price = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_base_price(), target);
  }

  // optional uint64 total_discount = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_total_discount(), target);
  }

  // optional uint64 tax = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tax(), target);
  }

  // optional uint64 shipping = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_shipping(), target);
  }

  // optional uint32 currency_code = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_currency_code(), target);
  }

  // optional string country_code = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_country_code(), target);
  }

  // optional string error_headline = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_headline().data(), static_cast<int>(this->_internal_error_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.error_headline");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_error_headline(), target);
  }

  // optional string error_string = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_string().data(), static_cast<int>(this->_internal_error_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.error_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_error_string(), target);
  }

  // optional string error_lintext = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_lintext().data(), static_cast<int>(this->_internal_error_lintext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.error_lintext");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_error_lintext(), target);
  }

  // optional string error_linurl = 16;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_linurl().data(), static_cast<int>(this->_internal_error_linurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_PurchaseReceiptInfo.error_linurl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_error_linurl(), target);
  }

  // optional uint32 error_appid = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_error_appid(), target);
  }

  // repeated .CStore_PurchaseReceiptInfo.LineItem line_items = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_line_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_PurchaseReceiptInfo)
  return target;
}

size_t CStore_PurchaseReceiptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_PurchaseReceiptInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_PurchaseReceiptInfo.LineItem line_items = 18;
  total_size += 2UL * this->_internal_line_items_size();
  for (const auto& msg : this->line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country_code = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string error_headline = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_headline());
    }

    // optional string error_string = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_string());
    }

    // optional string error_lintext = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_lintext());
    }

    // optional string error_linurl = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_linurl());
    }

    // optional uint64 transactionid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_transactionid());
    }

    // optional uint32 packageid = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packageid());
    }

    // optional uint32 purchase_status = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purchase_status());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 result_detail = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result_detail());
    }

    // optional uint32 transaction_time = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_transaction_time());
    }

    // optional uint64 base_price = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_base_price());
    }

    // optional uint64 total_discount = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_discount());
    }

    // optional uint32 payment_method = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_payment_method());
    }

    // optional uint32 currency_code = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_currency_code());
    }

    // optional uint64 tax = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tax());
    }

    // optional uint64 shipping = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shipping());
    }

  }
  // optional uint32 error_appid = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_PurchaseReceiptInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_PurchaseReceiptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_PurchaseReceiptInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_PurchaseReceiptInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_PurchaseReceiptInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_PurchaseReceiptInfo)
    MergeFrom(*source);
  }
}

void CStore_PurchaseReceiptInfo::MergeFrom(const CStore_PurchaseReceiptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_PurchaseReceiptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_error_headline(from._internal_error_headline());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_error_string(from._internal_error_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_error_lintext(from._internal_error_lintext());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_error_linurl(from._internal_error_linurl());
    }
    if (cached_has_bits & 0x00000020u) {
      transactionid_ = from.transactionid_;
    }
    if (cached_has_bits & 0x00000040u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000080u) {
      purchase_status_ = from.purchase_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      result_detail_ = from.result_detail_;
    }
    if (cached_has_bits & 0x00000200u) {
      transaction_time_ = from.transaction_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      base_price_ = from.base_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_discount_ = from.total_discount_;
    }
    if (cached_has_bits & 0x00001000u) {
      payment_method_ = from.payment_method_;
    }
    if (cached_has_bits & 0x00002000u) {
      currency_code_ = from.currency_code_;
    }
    if (cached_has_bits & 0x00004000u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00008000u) {
      shipping_ = from.shipping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_error_appid(from._internal_error_appid());
  }
}

void CStore_PurchaseReceiptInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_PurchaseReceiptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_PurchaseReceiptInfo::CopyFrom(const CStore_PurchaseReceiptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_PurchaseReceiptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_PurchaseReceiptInfo::IsInitialized() const {
  return true;
}

void CStore_PurchaseReceiptInfo::InternalSwap(CStore_PurchaseReceiptInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_items_.InternalSwap(&other->line_items_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_headline_.Swap(&other->error_headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_string_.Swap(&other->error_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_lintext_.Swap(&other->error_lintext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_linurl_.Swap(&other->error_linurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_PurchaseReceiptInfo, error_appid_)
      + sizeof(CStore_PurchaseReceiptInfo::error_appid_)
      - PROTOBUF_FIELD_OFFSET(CStore_PurchaseReceiptInfo, transactionid_)>(
          reinterpret_cast<char*>(&transactionid_),
          reinterpret_cast<char*>(&other->transactionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_PurchaseReceiptInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_RegisterCDKey_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_RegisterCDKey_Response>()._has_bits_);
  static void set_has_purchase_result_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CStore_PurchaseReceiptInfo& purchase_receipt_info(const CStore_RegisterCDKey_Response* msg);
  static void set_has_purchase_receipt_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CStore_PurchaseReceiptInfo&
CStore_RegisterCDKey_Response::_Internal::purchase_receipt_info(const CStore_RegisterCDKey_Response* msg) {
  return *msg->purchase_receipt_info_;
}
CStore_RegisterCDKey_Response::CStore_RegisterCDKey_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_RegisterCDKey_Response)
}
CStore_RegisterCDKey_Response::CStore_RegisterCDKey_Response(const CStore_RegisterCDKey_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_purchase_receipt_info()) {
    purchase_receipt_info_ = new ::CStore_PurchaseReceiptInfo(*from.purchase_receipt_info_);
  } else {
    purchase_receipt_info_ = nullptr;
  }
  purchase_result_details_ = from.purchase_result_details_;
  // @@protoc_insertion_point(copy_constructor:CStore_RegisterCDKey_Response)
}

void CStore_RegisterCDKey_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&purchase_receipt_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_result_details_) -
    reinterpret_cast<char*>(&purchase_receipt_info_)) + sizeof(purchase_result_details_));
}

CStore_RegisterCDKey_Response::~CStore_RegisterCDKey_Response() {
  // @@protoc_insertion_point(destructor:CStore_RegisterCDKey_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_RegisterCDKey_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete purchase_receipt_info_;
}

void CStore_RegisterCDKey_Response::ArenaDtor(void* object) {
  CStore_RegisterCDKey_Response* _this = reinterpret_cast< CStore_RegisterCDKey_Response* >(object);
  (void)_this;
}
void CStore_RegisterCDKey_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_RegisterCDKey_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_RegisterCDKey_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_RegisterCDKey_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(purchase_receipt_info_ != nullptr);
    purchase_receipt_info_->Clear();
  }
  purchase_result_details_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_RegisterCDKey_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 purchase_result_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_purchase_result_details(&has_bits);
          purchase_result_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStore_PurchaseReceiptInfo purchase_receipt_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchase_receipt_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_RegisterCDKey_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_RegisterCDKey_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 purchase_result_details = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_purchase_result_details(), target);
  }

  // optional .CStore_PurchaseReceiptInfo purchase_receipt_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::purchase_receipt_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_RegisterCDKey_Response)
  return target;
}

size_t CStore_RegisterCDKey_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_RegisterCDKey_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CStore_PurchaseReceiptInfo purchase_receipt_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *purchase_receipt_info_);
    }

    // optional int32 purchase_result_details = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_purchase_result_details());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_RegisterCDKey_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_RegisterCDKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_RegisterCDKey_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_RegisterCDKey_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_RegisterCDKey_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_RegisterCDKey_Response)
    MergeFrom(*source);
  }
}

void CStore_RegisterCDKey_Response::MergeFrom(const CStore_RegisterCDKey_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_RegisterCDKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_purchase_receipt_info()->::CStore_PurchaseReceiptInfo::MergeFrom(from._internal_purchase_receipt_info());
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_result_details_ = from.purchase_result_details_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_RegisterCDKey_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_RegisterCDKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_RegisterCDKey_Response::CopyFrom(const CStore_RegisterCDKey_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_RegisterCDKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_RegisterCDKey_Response::IsInitialized() const {
  return true;
}

void CStore_RegisterCDKey_Response::InternalSwap(CStore_RegisterCDKey_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_RegisterCDKey_Response, purchase_result_details_)
      + sizeof(CStore_RegisterCDKey_Response::purchase_result_details_)
      - PROTOBUF_FIELD_OFFSET(CStore_RegisterCDKey_Response, purchase_receipt_info_)>(
          reinterpret_cast<char*>(&purchase_receipt_info_),
          reinterpret_cast<char*>(&other->purchase_receipt_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_RegisterCDKey_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetMostPopularTags_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetMostPopularTags_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_GetMostPopularTags_Request::CStore_GetMostPopularTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetMostPopularTags_Request)
}
CStore_GetMostPopularTags_Request::CStore_GetMostPopularTags_Request(const CStore_GetMostPopularTags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetMostPopularTags_Request)
}

void CStore_GetMostPopularTags_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStore_GetMostPopularTags_Request::~CStore_GetMostPopularTags_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetMostPopularTags_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetMostPopularTags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetMostPopularTags_Request::ArenaDtor(void* object) {
  CStore_GetMostPopularTags_Request* _this = reinterpret_cast< CStore_GetMostPopularTags_Request* >(object);
  (void)_this;
}
void CStore_GetMostPopularTags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetMostPopularTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetMostPopularTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetMostPopularTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetMostPopularTags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetMostPopularTags_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetMostPopularTags_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetMostPopularTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetMostPopularTags_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetMostPopularTags_Request)
  return target;
}

size_t CStore_GetMostPopularTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetMostPopularTags_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetMostPopularTags_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetMostPopularTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetMostPopularTags_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetMostPopularTags_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetMostPopularTags_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetMostPopularTags_Request)
    MergeFrom(*source);
  }
}

void CStore_GetMostPopularTags_Request::MergeFrom(const CStore_GetMostPopularTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetMostPopularTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CStore_GetMostPopularTags_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetMostPopularTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetMostPopularTags_Request::CopyFrom(const CStore_GetMostPopularTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetMostPopularTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetMostPopularTags_Request::IsInitialized() const {
  return true;
}

void CStore_GetMostPopularTags_Request::InternalSwap(CStore_GetMostPopularTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetMostPopularTags_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetMostPopularTags_Response_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetMostPopularTags_Response_Tag>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_GetMostPopularTags_Response_Tag::CStore_GetMostPopularTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetMostPopularTags_Response.Tag)
}
CStore_GetMostPopularTags_Response_Tag::CStore_GetMostPopularTags_Response_Tag(const CStore_GetMostPopularTags_Response_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tagid_ = from.tagid_;
  // @@protoc_insertion_point(copy_constructor:CStore_GetMostPopularTags_Response.Tag)
}

void CStore_GetMostPopularTags_Response_Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tagid_ = 0u;
}

CStore_GetMostPopularTags_Response_Tag::~CStore_GetMostPopularTags_Response_Tag() {
  // @@protoc_insertion_point(destructor:CStore_GetMostPopularTags_Response.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetMostPopularTags_Response_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetMostPopularTags_Response_Tag::ArenaDtor(void* object) {
  CStore_GetMostPopularTags_Response_Tag* _this = reinterpret_cast< CStore_GetMostPopularTags_Response_Tag* >(object);
  (void)_this;
}
void CStore_GetMostPopularTags_Response_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetMostPopularTags_Response_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetMostPopularTags_Response_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetMostPopularTags_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  tagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetMostPopularTags_Response_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetMostPopularTags_Response.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetMostPopularTags_Response_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetMostPopularTags_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetMostPopularTags_Response.Tag.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetMostPopularTags_Response.Tag)
  return target;
}

size_t CStore_GetMostPopularTags_Response_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetMostPopularTags_Response.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetMostPopularTags_Response_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetMostPopularTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetMostPopularTags_Response_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetMostPopularTags_Response_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetMostPopularTags_Response.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetMostPopularTags_Response.Tag)
    MergeFrom(*source);
  }
}

void CStore_GetMostPopularTags_Response_Tag::MergeFrom(const CStore_GetMostPopularTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetMostPopularTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      tagid_ = from.tagid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetMostPopularTags_Response_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetMostPopularTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetMostPopularTags_Response_Tag::CopyFrom(const CStore_GetMostPopularTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetMostPopularTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetMostPopularTags_Response_Tag::IsInitialized() const {
  return true;
}

void CStore_GetMostPopularTags_Response_Tag::InternalSwap(CStore_GetMostPopularTags_Response_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tagid_, other->tagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetMostPopularTags_Response_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetMostPopularTags_Response::_Internal {
 public:
};

CStore_GetMostPopularTags_Response::CStore_GetMostPopularTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetMostPopularTags_Response)
}
CStore_GetMostPopularTags_Response::CStore_GetMostPopularTags_Response(const CStore_GetMostPopularTags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetMostPopularTags_Response)
}

void CStore_GetMostPopularTags_Response::SharedCtor() {
}

CStore_GetMostPopularTags_Response::~CStore_GetMostPopularTags_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetMostPopularTags_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetMostPopularTags_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetMostPopularTags_Response::ArenaDtor(void* object) {
  CStore_GetMostPopularTags_Response* _this = reinterpret_cast< CStore_GetMostPopularTags_Response* >(object);
  (void)_this;
}
void CStore_GetMostPopularTags_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetMostPopularTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetMostPopularTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetMostPopularTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetMostPopularTags_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CStore_GetMostPopularTags_Response.Tag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetMostPopularTags_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetMostPopularTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CStore_GetMostPopularTags_Response.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetMostPopularTags_Response)
  return target;
}

size_t CStore_GetMostPopularTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetMostPopularTags_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_GetMostPopularTags_Response.Tag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetMostPopularTags_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetMostPopularTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetMostPopularTags_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetMostPopularTags_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetMostPopularTags_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetMostPopularTags_Response)
    MergeFrom(*source);
  }
}

void CStore_GetMostPopularTags_Response::MergeFrom(const CStore_GetMostPopularTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetMostPopularTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void CStore_GetMostPopularTags_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetMostPopularTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetMostPopularTags_Response::CopyFrom(const CStore_GetMostPopularTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetMostPopularTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetMostPopularTags_Response::IsInitialized() const {
  return true;
}

void CStore_GetMostPopularTags_Response::InternalSwap(CStore_GetMostPopularTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetMostPopularTags_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetLocalizedNameForTags_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetLocalizedNameForTags_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_GetLocalizedNameForTags_Request::CStore_GetLocalizedNameForTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tagids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetLocalizedNameForTags_Request)
}
CStore_GetLocalizedNameForTags_Request::CStore_GetLocalizedNameForTags_Request(const CStore_GetLocalizedNameForTags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tagids_(from.tagids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetLocalizedNameForTags_Request)
}

void CStore_GetLocalizedNameForTags_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStore_GetLocalizedNameForTags_Request::~CStore_GetLocalizedNameForTags_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetLocalizedNameForTags_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetLocalizedNameForTags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetLocalizedNameForTags_Request::ArenaDtor(void* object) {
  CStore_GetLocalizedNameForTags_Request* _this = reinterpret_cast< CStore_GetLocalizedNameForTags_Request* >(object);
  (void)_this;
}
void CStore_GetLocalizedNameForTags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetLocalizedNameForTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetLocalizedNameForTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetLocalizedNameForTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetLocalizedNameForTags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetLocalizedNameForTags_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tagids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tagids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tagids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetLocalizedNameForTags_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetLocalizedNameForTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetLocalizedNameForTags_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // repeated uint32 tagids = 2;
  for (int i = 0, n = this->_internal_tagids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tagids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetLocalizedNameForTags_Request)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetLocalizedNameForTags_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tagids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tagids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tagids_size());
    total_size += data_size;
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetLocalizedNameForTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetLocalizedNameForTags_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetLocalizedNameForTags_Request)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Request::MergeFrom(const CStore_GetLocalizedNameForTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetLocalizedNameForTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tagids_.MergeFrom(from.tagids_);
  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CStore_GetLocalizedNameForTags_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetLocalizedNameForTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Request::CopyFrom(const CStore_GetLocalizedNameForTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetLocalizedNameForTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Request::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Request::InternalSwap(CStore_GetLocalizedNameForTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tagids_.InternalSwap(&other->tagids_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetLocalizedNameForTags_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetLocalizedNameForTags_Response_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetLocalizedNameForTags_Response_Tag>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_english_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_normalized_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_GetLocalizedNameForTags_Response_Tag::CStore_GetLocalizedNameForTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetLocalizedNameForTags_Response.Tag)
}
CStore_GetLocalizedNameForTags_Response_Tag::CStore_GetLocalizedNameForTags_Response_Tag(const CStore_GetLocalizedNameForTags_Response_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  english_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_english_name()) {
    english_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_english_name(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  normalized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_normalized_name()) {
    normalized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_normalized_name(), 
      GetArena());
  }
  tagid_ = from.tagid_;
  // @@protoc_insertion_point(copy_constructor:CStore_GetLocalizedNameForTags_Response.Tag)
}

void CStore_GetLocalizedNameForTags_Response_Tag::SharedCtor() {
english_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
normalized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tagid_ = 0u;
}

CStore_GetLocalizedNameForTags_Response_Tag::~CStore_GetLocalizedNameForTags_Response_Tag() {
  // @@protoc_insertion_point(destructor:CStore_GetLocalizedNameForTags_Response.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetLocalizedNameForTags_Response_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  english_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normalized_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetLocalizedNameForTags_Response_Tag::ArenaDtor(void* object) {
  CStore_GetLocalizedNameForTags_Response_Tag* _this = reinterpret_cast< CStore_GetLocalizedNameForTags_Response_Tag* >(object);
  (void)_this;
}
void CStore_GetLocalizedNameForTags_Response_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetLocalizedNameForTags_Response_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetLocalizedNameForTags_Response_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetLocalizedNameForTags_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      english_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      normalized_name_.ClearNonDefaultToEmpty();
    }
  }
  tagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetLocalizedNameForTags_Response_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string english_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_english_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetLocalizedNameForTags_Response.Tag.english_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetLocalizedNameForTags_Response.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string normalized_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_normalized_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetLocalizedNameForTags_Response.Tag.normalized_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetLocalizedNameForTags_Response_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetLocalizedNameForTags_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional string english_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_english_name().data(), static_cast<int>(this->_internal_english_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetLocalizedNameForTags_Response.Tag.english_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_english_name(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetLocalizedNameForTags_Response.Tag.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string normalized_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_normalized_name().data(), static_cast<int>(this->_internal_normalized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetLocalizedNameForTags_Response.Tag.normalized_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_normalized_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetLocalizedNameForTags_Response.Tag)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Response_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetLocalizedNameForTags_Response.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string english_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_english_name());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string normalized_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_normalized_name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Response_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetLocalizedNameForTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Response_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Response_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetLocalizedNameForTags_Response.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetLocalizedNameForTags_Response.Tag)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Response_Tag::MergeFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetLocalizedNameForTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_english_name(from._internal_english_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_normalized_name(from._internal_normalized_name());
    }
    if (cached_has_bits & 0x00000008u) {
      tagid_ = from.tagid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetLocalizedNameForTags_Response_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetLocalizedNameForTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Response_Tag::CopyFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetLocalizedNameForTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Response_Tag::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Response_Tag::InternalSwap(CStore_GetLocalizedNameForTags_Response_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  english_name_.Swap(&other->english_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  normalized_name_.Swap(&other->normalized_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tagid_, other->tagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetLocalizedNameForTags_Response_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetLocalizedNameForTags_Response::_Internal {
 public:
};

CStore_GetLocalizedNameForTags_Response::CStore_GetLocalizedNameForTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetLocalizedNameForTags_Response)
}
CStore_GetLocalizedNameForTags_Response::CStore_GetLocalizedNameForTags_Response(const CStore_GetLocalizedNameForTags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetLocalizedNameForTags_Response)
}

void CStore_GetLocalizedNameForTags_Response::SharedCtor() {
}

CStore_GetLocalizedNameForTags_Response::~CStore_GetLocalizedNameForTags_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetLocalizedNameForTags_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetLocalizedNameForTags_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetLocalizedNameForTags_Response::ArenaDtor(void* object) {
  CStore_GetLocalizedNameForTags_Response* _this = reinterpret_cast< CStore_GetLocalizedNameForTags_Response* >(object);
  (void)_this;
}
void CStore_GetLocalizedNameForTags_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetLocalizedNameForTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetLocalizedNameForTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetLocalizedNameForTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetLocalizedNameForTags_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetLocalizedNameForTags_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetLocalizedNameForTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetLocalizedNameForTags_Response)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetLocalizedNameForTags_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetLocalizedNameForTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetLocalizedNameForTags_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetLocalizedNameForTags_Response)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Response::MergeFrom(const CStore_GetLocalizedNameForTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetLocalizedNameForTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void CStore_GetLocalizedNameForTags_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetLocalizedNameForTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Response::CopyFrom(const CStore_GetLocalizedNameForTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetLocalizedNameForTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Response::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Response::InternalSwap(CStore_GetLocalizedNameForTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetLocalizedNameForTags_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTagList_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetTagList_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_have_version_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CStore_GetTagList_Request::CStore_GetTagList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTagList_Request)
}
CStore_GetTagList_Request::CStore_GetTagList_Request(const CStore_GetTagList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  have_version_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_have_version_hash()) {
    have_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_have_version_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetTagList_Request)
}

void CStore_GetTagList_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
have_version_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStore_GetTagList_Request::~CStore_GetTagList_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetTagList_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTagList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  have_version_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetTagList_Request::ArenaDtor(void* object) {
  CStore_GetTagList_Request* _this = reinterpret_cast< CStore_GetTagList_Request* >(object);
  (void)_this;
}
void CStore_GetTagList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTagList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTagList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTagList_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      have_version_hash_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTagList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetTagList_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string have_version_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_have_version_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetTagList_Request.have_version_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTagList_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTagList_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetTagList_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // optional string have_version_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_have_version_hash().data(), static_cast<int>(this->_internal_have_version_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetTagList_Request.have_version_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_have_version_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTagList_Request)
  return target;
}

size_t CStore_GetTagList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTagList_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string have_version_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_have_version_hash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTagList_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTagList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTagList_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTagList_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTagList_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTagList_Request)
    MergeFrom(*source);
  }
}

void CStore_GetTagList_Request::MergeFrom(const CStore_GetTagList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTagList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_have_version_hash(from._internal_have_version_hash());
    }
  }
}

void CStore_GetTagList_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTagList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTagList_Request::CopyFrom(const CStore_GetTagList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTagList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTagList_Request::IsInitialized() const {
  return true;
}

void CStore_GetTagList_Request::InternalSwap(CStore_GetTagList_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  have_version_hash_.Swap(&other->have_version_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTagList_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTagList_Response_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetTagList_Response_Tag>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_GetTagList_Response_Tag::CStore_GetTagList_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTagList_Response.Tag)
}
CStore_GetTagList_Response_Tag::CStore_GetTagList_Response_Tag(const CStore_GetTagList_Response_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tagid_ = from.tagid_;
  // @@protoc_insertion_point(copy_constructor:CStore_GetTagList_Response.Tag)
}

void CStore_GetTagList_Response_Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tagid_ = 0u;
}

CStore_GetTagList_Response_Tag::~CStore_GetTagList_Response_Tag() {
  // @@protoc_insertion_point(destructor:CStore_GetTagList_Response.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTagList_Response_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetTagList_Response_Tag::ArenaDtor(void* object) {
  CStore_GetTagList_Response_Tag* _this = reinterpret_cast< CStore_GetTagList_Response_Tag* >(object);
  (void)_this;
}
void CStore_GetTagList_Response_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTagList_Response_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTagList_Response_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTagList_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  tagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTagList_Response_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetTagList_Response.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTagList_Response_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTagList_Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetTagList_Response.Tag.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTagList_Response.Tag)
  return target;
}

size_t CStore_GetTagList_Response_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTagList_Response.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTagList_Response_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTagList_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTagList_Response_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTagList_Response_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTagList_Response.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTagList_Response.Tag)
    MergeFrom(*source);
  }
}

void CStore_GetTagList_Response_Tag::MergeFrom(const CStore_GetTagList_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTagList_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      tagid_ = from.tagid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetTagList_Response_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTagList_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTagList_Response_Tag::CopyFrom(const CStore_GetTagList_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTagList_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTagList_Response_Tag::IsInitialized() const {
  return true;
}

void CStore_GetTagList_Response_Tag::InternalSwap(CStore_GetTagList_Response_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tagid_, other->tagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTagList_Response_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTagList_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetTagList_Response>()._has_bits_);
  static void set_has_version_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_GetTagList_Response::CStore_GetTagList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTagList_Response)
}
CStore_GetTagList_Response::CStore_GetTagList_Response(const CStore_GetTagList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_hash()) {
    version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetTagList_Response)
}

void CStore_GetTagList_Response::SharedCtor() {
version_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStore_GetTagList_Response::~CStore_GetTagList_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetTagList_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTagList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetTagList_Response::ArenaDtor(void* object) {
  CStore_GetTagList_Response* _this = reinterpret_cast< CStore_GetTagList_Response* >(object);
  (void)_this;
}
void CStore_GetTagList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTagList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTagList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTagList_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_hash_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTagList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string version_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetTagList_Response.version_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CStore_GetTagList_Response.Tag tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTagList_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTagList_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version_hash().data(), static_cast<int>(this->_internal_version_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetTagList_Response.version_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_hash(), target);
  }

  // repeated .CStore_GetTagList_Response.Tag tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTagList_Response)
  return target;
}

size_t CStore_GetTagList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTagList_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_GetTagList_Response.Tag tags = 2;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string version_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTagList_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTagList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTagList_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTagList_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTagList_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTagList_Response)
    MergeFrom(*source);
  }
}

void CStore_GetTagList_Response::MergeFrom(const CStore_GetTagList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTagList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_version_hash()) {
    _internal_set_version_hash(from._internal_version_hash());
  }
}

void CStore_GetTagList_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTagList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTagList_Response::CopyFrom(const CStore_GetTagList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTagList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTagList_Response::IsInitialized() const {
  return true;
}

void CStore_GetTagList_Response::InternalSwap(CStore_GetTagList_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  version_hash_.Swap(&other->version_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTagList_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStoreDiscoveryQueueSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CStoreDiscoveryQueueSettings>()._has_bits_);
  static void set_has_os_win(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_os_linux(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_controller_support(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_native_steam_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_include_coming_soon(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_exclude_early_access(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_exclude_videos(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exclude_software(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_exclude_dlc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_exclude_soundtracks(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CStoreDiscoveryQueueSettings::CStoreDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  excluded_tagids_(arena),
  featured_tagids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStoreDiscoveryQueueSettings)
}
CStoreDiscoveryQueueSettings::CStoreDiscoveryQueueSettings(const CStoreDiscoveryQueueSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      excluded_tagids_(from.excluded_tagids_),
      featured_tagids_(from.featured_tagids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&os_win_, &from.os_win_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclude_soundtracks_) -
    reinterpret_cast<char*>(&os_win_)) + sizeof(exclude_soundtracks_));
  // @@protoc_insertion_point(copy_constructor:CStoreDiscoveryQueueSettings)
}

void CStoreDiscoveryQueueSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&os_win_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exclude_soundtracks_) -
    reinterpret_cast<char*>(&os_win_)) + sizeof(exclude_soundtracks_));
}

CStoreDiscoveryQueueSettings::~CStoreDiscoveryQueueSettings() {
  // @@protoc_insertion_point(destructor:CStoreDiscoveryQueueSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStoreDiscoveryQueueSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStoreDiscoveryQueueSettings::ArenaDtor(void* object) {
  CStoreDiscoveryQueueSettings* _this = reinterpret_cast< CStoreDiscoveryQueueSettings* >(object);
  (void)_this;
}
void CStoreDiscoveryQueueSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStoreDiscoveryQueueSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStoreDiscoveryQueueSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CStoreDiscoveryQueueSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_tagids_.Clear();
  featured_tagids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&os_win_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exclude_videos_) -
        reinterpret_cast<char*>(&os_win_)) + sizeof(exclude_videos_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&exclude_software_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exclude_soundtracks_) -
        reinterpret_cast<char*>(&exclude_software_)) + sizeof(exclude_soundtracks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStoreDiscoveryQueueSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool os_win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_os_win(&has_bits);
          os_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool os_mac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_os_mac(&has_bits);
          os_mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool os_linux = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_os_linux(&has_bits);
          os_linux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool full_controller_support = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_full_controller_support(&has_bits);
          full_controller_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool native_steam_controller = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_native_steam_controller(&has_bits);
          native_steam_controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_coming_soon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_include_coming_soon(&has_bits);
          include_coming_soon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 excluded_tagids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_excluded_tagids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excluded_tagids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_early_access = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_exclude_early_access(&has_bits);
          exclude_early_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_videos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_exclude_videos(&has_bits);
          exclude_videos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_software = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_exclude_software(&has_bits);
          exclude_software_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_dlc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_exclude_dlc(&has_bits);
          exclude_dlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_soundtracks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_exclude_soundtracks(&has_bits);
          exclude_soundtracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 featured_tagids = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_featured_tagids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_featured_tagids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStoreDiscoveryQueueSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStoreDiscoveryQueueSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool os_win = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_os_win(), target);
  }

  // optional bool os_mac = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_os_mac(), target);
  }

  // optional bool os_linux = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_os_linux(), target);
  }

  // optional bool full_controller_support = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_full_controller_support(), target);
  }

  // optional bool native_steam_controller = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_native_steam_controller(), target);
  }

  // optional bool include_coming_soon = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_include_coming_soon(), target);
  }

  // repeated uint32 excluded_tagids = 10;
  for (int i = 0, n = this->_internal_excluded_tagids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_excluded_tagids(i), target);
  }

  // optional bool exclude_early_access = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_exclude_early_access(), target);
  }

  // optional bool exclude_videos = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_exclude_videos(), target);
  }

  // optional bool exclude_software = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_exclude_software(), target);
  }

  // optional bool exclude_dlc = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_exclude_dlc(), target);
  }

  // optional bool exclude_soundtracks = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_exclude_soundtracks(), target);
  }

  // repeated uint32 featured_tagids = 16;
  for (int i = 0, n = this->_internal_featured_tagids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_featured_tagids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStoreDiscoveryQueueSettings)
  return target;
}

size_t CStoreDiscoveryQueueSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStoreDiscoveryQueueSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 excluded_tagids = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excluded_tagids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_excluded_tagids_size());
    total_size += data_size;
  }

  // repeated uint32 featured_tagids = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->featured_tagids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_featured_tagids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool os_win = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool os_mac = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool os_linux = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool full_controller_support = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool native_steam_controller = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool include_coming_soon = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_early_access = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_videos = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool exclude_software = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_dlc = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_soundtracks = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStoreDiscoveryQueueSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStoreDiscoveryQueueSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CStoreDiscoveryQueueSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStoreDiscoveryQueueSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStoreDiscoveryQueueSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStoreDiscoveryQueueSettings)
    MergeFrom(*source);
  }
}

void CStoreDiscoveryQueueSettings::MergeFrom(const CStoreDiscoveryQueueSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStoreDiscoveryQueueSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_tagids_.MergeFrom(from.excluded_tagids_);
  featured_tagids_.MergeFrom(from.featured_tagids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      os_win_ = from.os_win_;
    }
    if (cached_has_bits & 0x00000002u) {
      os_mac_ = from.os_mac_;
    }
    if (cached_has_bits & 0x00000004u) {
      os_linux_ = from.os_linux_;
    }
    if (cached_has_bits & 0x00000008u) {
      full_controller_support_ = from.full_controller_support_;
    }
    if (cached_has_bits & 0x00000010u) {
      native_steam_controller_ = from.native_steam_controller_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_coming_soon_ = from.include_coming_soon_;
    }
    if (cached_has_bits & 0x00000040u) {
      exclude_early_access_ = from.exclude_early_access_;
    }
    if (cached_has_bits & 0x00000080u) {
      exclude_videos_ = from.exclude_videos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      exclude_software_ = from.exclude_software_;
    }
    if (cached_has_bits & 0x00000200u) {
      exclude_dlc_ = from.exclude_dlc_;
    }
    if (cached_has_bits & 0x00000400u) {
      exclude_soundtracks_ = from.exclude_soundtracks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStoreDiscoveryQueueSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStoreDiscoveryQueueSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStoreDiscoveryQueueSettings::CopyFrom(const CStoreDiscoveryQueueSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStoreDiscoveryQueueSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStoreDiscoveryQueueSettings::IsInitialized() const {
  return true;
}

void CStoreDiscoveryQueueSettings::InternalSwap(CStoreDiscoveryQueueSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  excluded_tagids_.InternalSwap(&other->excluded_tagids_);
  featured_tagids_.InternalSwap(&other->featured_tagids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStoreDiscoveryQueueSettings, exclude_soundtracks_)
      + sizeof(CStoreDiscoveryQueueSettings::exclude_soundtracks_)
      - PROTOBUF_FIELD_OFFSET(CStoreDiscoveryQueueSettings, os_win_)>(
          reinterpret_cast<char*>(&os_win_),
          reinterpret_cast<char*>(&other->os_win_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStoreDiscoveryQueueSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetDiscoveryQueue_Request>()._has_bits_);
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rebuild_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_settings_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CStoreDiscoveryQueueSettings& settings(const CStore_GetDiscoveryQueue_Request* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rebuild_queue_if_stale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_user_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_experimental_results(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_experimental_cohort(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_debug_get_solr_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CStorePageFilter& store_page_filter(const CStore_GetDiscoveryQueue_Request* msg);
  static void set_has_store_page_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CStoreDiscoveryQueueSettings&
CStore_GetDiscoveryQueue_Request::_Internal::settings(const CStore_GetDiscoveryQueue_Request* msg) {
  return *msg->settings_;
}
const ::CStorePageFilter&
CStore_GetDiscoveryQueue_Request::_Internal::store_page_filter(const CStore_GetDiscoveryQueue_Request* msg) {
  return *msg->store_page_filter_;
}
void CStore_GetDiscoveryQueue_Request::clear_store_page_filter() {
  if (store_page_filter_ != nullptr) store_page_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CStore_GetDiscoveryQueue_Request::CStore_GetDiscoveryQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueue_Request)
}
CStore_GetDiscoveryQueue_Request::CStore_GetDiscoveryQueue_Request(const CStore_GetDiscoveryQueue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::CStoreDiscoveryQueueSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_store_page_filter()) {
    store_page_filter_ = new ::CStorePageFilter(*from.store_page_filter_);
  } else {
    store_page_filter_ = nullptr;
  }
  ::memcpy(&queue_type_, &from.queue_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_get_solr_query_) -
    reinterpret_cast<char*>(&queue_type_)) + sizeof(debug_get_solr_query_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueue_Request)
}

void CStore_GetDiscoveryQueue_Request::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&debug_get_solr_query_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(debug_get_solr_query_));
}

CStore_GetDiscoveryQueue_Request::~CStore_GetDiscoveryQueue_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueue_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete store_page_filter_;
}

void CStore_GetDiscoveryQueue_Request::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueue_Request* _this = reinterpret_cast< CStore_GetDiscoveryQueue_Request* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(store_page_filter_ != nullptr);
      store_page_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&queue_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_user_preferences_) -
        reinterpret_cast<char*>(&queue_type_)) + sizeof(ignore_user_preferences_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&experimental_cohort_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_get_solr_query_) -
        reinterpret_cast<char*>(&experimental_cohort_)) + sizeof(debug_get_solr_query_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
            _internal_set_queue_type(static_cast<::EStoreDiscoveryQueueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetDiscoveryQueue_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rebuild_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rebuild_queue(&has_bits);
          rebuild_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool settings_changed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_settings_changed(&has_bits);
          settings_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStoreDiscoveryQueueSettings settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rebuild_queue_if_stale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rebuild_queue_if_stale(&has_bits);
          rebuild_queue_if_stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_user_preferences = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ignore_user_preferences(&has_bits);
          ignore_user_preferences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_experimental_results = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_no_experimental_results(&has_bits);
          no_experimental_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experimental_cohort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_experimental_cohort(&has_bits);
          experimental_cohort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_get_solr_query = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_debug_get_solr_query(&has_bits);
          debug_get_solr_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter store_page_filter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_page_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueue_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_queue_type(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetDiscoveryQueue_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional bool rebuild_queue = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_rebuild_queue(), target);
  }

  // optional bool settings_changed = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_settings_changed(), target);
  }

  // optional .CStoreDiscoveryQueueSettings settings = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::settings(this), target, stream);
  }

  // optional bool rebuild_queue_if_stale = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rebuild_queue_if_stale(), target);
  }

  // optional bool ignore_user_preferences = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ignore_user_preferences(), target);
  }

  // optional bool no_experimental_results = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_no_experimental_results(), target);
  }

  // optional uint32 experimental_cohort = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_experimental_cohort(), target);
  }

  // optional bool debug_get_solr_query = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_debug_get_solr_query(), target);
  }

  // optional .CStorePageFilter store_page_filter = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::store_page_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueue_Request)
  return target;
}

size_t CStore_GetDiscoveryQueue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueue_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional .CStoreDiscoveryQueueSettings settings = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .CStorePageFilter store_page_filter = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *store_page_filter_);
    }

    // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_queue_type());
    }

    // optional bool rebuild_queue = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool settings_changed = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rebuild_queue_if_stale = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_user_preferences = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 experimental_cohort = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experimental_cohort());
    }

    // optional bool no_experimental_results = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool debug_get_solr_query = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueue_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueue_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueue_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueue_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueue_Request)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueue_Request::MergeFrom(const CStore_GetDiscoveryQueue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_settings()->::CStoreDiscoveryQueueSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_store_page_filter()->::CStorePageFilter::MergeFrom(from._internal_store_page_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      queue_type_ = from.queue_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      rebuild_queue_ = from.rebuild_queue_;
    }
    if (cached_has_bits & 0x00000020u) {
      settings_changed_ = from.settings_changed_;
    }
    if (cached_has_bits & 0x00000040u) {
      rebuild_queue_if_stale_ = from.rebuild_queue_if_stale_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_user_preferences_ = from.ignore_user_preferences_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      experimental_cohort_ = from.experimental_cohort_;
    }
    if (cached_has_bits & 0x00000200u) {
      no_experimental_results_ = from.no_experimental_results_;
    }
    if (cached_has_bits & 0x00000400u) {
      debug_get_solr_query_ = from.debug_get_solr_query_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetDiscoveryQueue_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueue_Request::CopyFrom(const CStore_GetDiscoveryQueue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueue_Request::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueue_Request::InternalSwap(CStore_GetDiscoveryQueue_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueue_Request, debug_get_solr_query_)
      + sizeof(CStore_GetDiscoveryQueue_Request::debug_get_solr_query_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueue_Request, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueue_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueue_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetDiscoveryQueue_Response>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CStoreDiscoveryQueueSettings& settings(const CStore_GetDiscoveryQueue_Response* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skipped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exhausted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_experimental_cohort(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_debug_solr_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CStoreDiscoveryQueueSettings&
CStore_GetDiscoveryQueue_Response::_Internal::settings(const CStore_GetDiscoveryQueue_Response* msg) {
  return *msg->settings_;
}
CStore_GetDiscoveryQueue_Response::CStore_GetDiscoveryQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueue_Response)
}
CStore_GetDiscoveryQueue_Response::CStore_GetDiscoveryQueue_Response(const CStore_GetDiscoveryQueue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  debug_solr_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug_solr_query()) {
    debug_solr_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_debug_solr_query(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::CStoreDiscoveryQueueSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  ::memcpy(&skipped_, &from.skipped_,
    static_cast<size_t>(reinterpret_cast<char*>(&experimental_cohort_) -
    reinterpret_cast<char*>(&skipped_)) + sizeof(experimental_cohort_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueue_Response)
}

void CStore_GetDiscoveryQueue_Response::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
debug_solr_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&experimental_cohort_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(experimental_cohort_));
}

CStore_GetDiscoveryQueue_Response::~CStore_GetDiscoveryQueue_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueue_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_solr_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CStore_GetDiscoveryQueue_Response::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueue_Response* _this = reinterpret_cast< CStore_GetDiscoveryQueue_Response* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueue_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      debug_solr_query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&skipped_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&experimental_cohort_) -
        reinterpret_cast<char*>(&skipped_)) + sizeof(experimental_cohort_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueue_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 appids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetDiscoveryQueue_Response.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStoreDiscoveryQueueSettings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 skipped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skipped(&has_bits);
          skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exhausted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_exhausted(&has_bits);
          exhausted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experimental_cohort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_experimental_cohort(&has_bits);
          experimental_cohort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string debug_solr_query = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_debug_solr_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetDiscoveryQueue_Response.debug_solr_query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueue_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetDiscoveryQueue_Response.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional .CStoreDiscoveryQueueSettings settings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  // optional int32 skipped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_skipped(), target);
  }

  // optional bool exhausted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exhausted(), target);
  }

  // optional uint32 experimental_cohort = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_experimental_cohort(), target);
  }

  // optional string debug_solr_query = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_solr_query().data(), static_cast<int>(this->_internal_debug_solr_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetDiscoveryQueue_Response.debug_solr_query");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_debug_solr_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueue_Response)
  return target;
}

size_t CStore_GetDiscoveryQueue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueue_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string debug_solr_query = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_solr_query());
    }

    // optional .CStoreDiscoveryQueueSettings settings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional int32 skipped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_skipped());
    }

    // optional bool exhausted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 experimental_cohort = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experimental_cohort());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueue_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueue_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueue_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueue_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueue_Response)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueue_Response::MergeFrom(const CStore_GetDiscoveryQueue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_debug_solr_query(from._internal_debug_solr_query());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_settings()->::CStoreDiscoveryQueueSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      skipped_ = from.skipped_;
    }
    if (cached_has_bits & 0x00000010u) {
      exhausted_ = from.exhausted_;
    }
    if (cached_has_bits & 0x00000020u) {
      experimental_cohort_ = from.experimental_cohort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetDiscoveryQueue_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueue_Response::CopyFrom(const CStore_GetDiscoveryQueue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueue_Response::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueue_Response::InternalSwap(CStore_GetDiscoveryQueue_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  debug_solr_query_.Swap(&other->debug_solr_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueue_Response, experimental_cohort_)
      + sizeof(CStore_GetDiscoveryQueue_Response::experimental_cohort_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueue_Response, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueue_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueueSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetDiscoveryQueueSettings_Request>()._has_bits_);
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CStorePageFilter& store_page_filter(const CStore_GetDiscoveryQueueSettings_Request* msg);
  static void set_has_store_page_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CStorePageFilter&
CStore_GetDiscoveryQueueSettings_Request::_Internal::store_page_filter(const CStore_GetDiscoveryQueueSettings_Request* msg) {
  return *msg->store_page_filter_;
}
void CStore_GetDiscoveryQueueSettings_Request::clear_store_page_filter() {
  if (store_page_filter_ != nullptr) store_page_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CStore_GetDiscoveryQueueSettings_Request::CStore_GetDiscoveryQueueSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueueSettings_Request)
}
CStore_GetDiscoveryQueueSettings_Request::CStore_GetDiscoveryQueueSettings_Request(const CStore_GetDiscoveryQueueSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_store_page_filter()) {
    store_page_filter_ = new ::CStorePageFilter(*from.store_page_filter_);
  } else {
    store_page_filter_ = nullptr;
  }
  queue_type_ = from.queue_type_;
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueueSettings_Request)
}

void CStore_GetDiscoveryQueueSettings_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&store_page_filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&queue_type_) -
    reinterpret_cast<char*>(&store_page_filter_)) + sizeof(queue_type_));
}

CStore_GetDiscoveryQueueSettings_Request::~CStore_GetDiscoveryQueueSettings_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueueSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueueSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete store_page_filter_;
}

void CStore_GetDiscoveryQueueSettings_Request::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueueSettings_Request* _this = reinterpret_cast< CStore_GetDiscoveryQueueSettings_Request* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueueSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueueSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueueSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueueSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(store_page_filter_ != nullptr);
    store_page_filter_->Clear();
  }
  queue_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueueSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
            _internal_set_queue_type(static_cast<::EStoreDiscoveryQueueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter store_page_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_page_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueueSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueueSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_queue_type(), target);
  }

  // optional .CStorePageFilter store_page_filter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::store_page_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueueSettings_Request)
  return target;
}

size_t CStore_GetDiscoveryQueueSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueueSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CStorePageFilter store_page_filter = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *store_page_filter_);
    }

    // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_queue_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueueSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueueSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueueSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueueSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueueSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueueSettings_Request)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueueSettings_Request::MergeFrom(const CStore_GetDiscoveryQueueSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueueSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_store_page_filter()->::CStorePageFilter::MergeFrom(from._internal_store_page_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      queue_type_ = from.queue_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetDiscoveryQueueSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueueSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueueSettings_Request::CopyFrom(const CStore_GetDiscoveryQueueSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueueSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueueSettings_Request::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueueSettings_Request::InternalSwap(CStore_GetDiscoveryQueueSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueueSettings_Request, queue_type_)
      + sizeof(CStore_GetDiscoveryQueueSettings_Request::queue_type_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueueSettings_Request, store_page_filter_)>(
          reinterpret_cast<char*>(&store_page_filter_),
          reinterpret_cast<char*>(&other->store_page_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueueSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueueSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetDiscoveryQueueSettings_Response>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CStoreDiscoveryQueueSettings& settings(const CStore_GetDiscoveryQueueSettings_Response* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CStoreDiscoveryQueueSettings&
CStore_GetDiscoveryQueueSettings_Response::_Internal::settings(const CStore_GetDiscoveryQueueSettings_Response* msg) {
  return *msg->settings_;
}
CStore_GetDiscoveryQueueSettings_Response::CStore_GetDiscoveryQueueSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueueSettings_Response)
}
CStore_GetDiscoveryQueueSettings_Response::CStore_GetDiscoveryQueueSettings_Response(const CStore_GetDiscoveryQueueSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::CStoreDiscoveryQueueSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueueSettings_Response)
}

void CStore_GetDiscoveryQueueSettings_Response::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settings_ = nullptr;
}

CStore_GetDiscoveryQueueSettings_Response::~CStore_GetDiscoveryQueueSettings_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueueSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueueSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CStore_GetDiscoveryQueueSettings_Response::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueueSettings_Response* _this = reinterpret_cast< CStore_GetDiscoveryQueueSettings_Response* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueueSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueueSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueueSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueueSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueueSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_GetDiscoveryQueueSettings_Response.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStoreDiscoveryQueueSettings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueueSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueueSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_GetDiscoveryQueueSettings_Response.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional .CStoreDiscoveryQueueSettings settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueueSettings_Response)
  return target;
}

size_t CStore_GetDiscoveryQueueSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueueSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional .CStoreDiscoveryQueueSettings settings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueueSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueueSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueueSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueueSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueueSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueueSettings_Response)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueueSettings_Response::MergeFrom(const CStore_GetDiscoveryQueueSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueueSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_settings()->::CStoreDiscoveryQueueSettings::MergeFrom(from._internal_settings());
    }
  }
}

void CStore_GetDiscoveryQueueSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueueSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueueSettings_Response::CopyFrom(const CStore_GetDiscoveryQueueSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueueSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueueSettings_Response::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueueSettings_Response::InternalSwap(CStore_GetDiscoveryQueueSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueueSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_SkipDiscoveryQueueItem_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_SkipDiscoveryQueueItem_Request>()._has_bits_);
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CStorePageFilter& store_page_filter(const CStore_SkipDiscoveryQueueItem_Request* msg);
  static void set_has_store_page_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CStorePageFilter&
CStore_SkipDiscoveryQueueItem_Request::_Internal::store_page_filter(const CStore_SkipDiscoveryQueueItem_Request* msg) {
  return *msg->store_page_filter_;
}
void CStore_SkipDiscoveryQueueItem_Request::clear_store_page_filter() {
  if (store_page_filter_ != nullptr) store_page_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CStore_SkipDiscoveryQueueItem_Request::CStore_SkipDiscoveryQueueItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_SkipDiscoveryQueueItem_Request)
}
CStore_SkipDiscoveryQueueItem_Request::CStore_SkipDiscoveryQueueItem_Request(const CStore_SkipDiscoveryQueueItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_store_page_filter()) {
    store_page_filter_ = new ::CStorePageFilter(*from.store_page_filter_);
  } else {
    store_page_filter_ = nullptr;
  }
  ::memcpy(&queue_type_, &from.queue_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&queue_type_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CStore_SkipDiscoveryQueueItem_Request)
}

void CStore_SkipDiscoveryQueueItem_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&store_page_filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&store_page_filter_)) + sizeof(appid_));
}

CStore_SkipDiscoveryQueueItem_Request::~CStore_SkipDiscoveryQueueItem_Request() {
  // @@protoc_insertion_point(destructor:CStore_SkipDiscoveryQueueItem_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_SkipDiscoveryQueueItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete store_page_filter_;
}

void CStore_SkipDiscoveryQueueItem_Request::ArenaDtor(void* object) {
  CStore_SkipDiscoveryQueueItem_Request* _this = reinterpret_cast< CStore_SkipDiscoveryQueueItem_Request* >(object);
  (void)_this;
}
void CStore_SkipDiscoveryQueueItem_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_SkipDiscoveryQueueItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_SkipDiscoveryQueueItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_SkipDiscoveryQueueItem_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(store_page_filter_ != nullptr);
    store_page_filter_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&queue_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&queue_type_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_SkipDiscoveryQueueItem_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
            _internal_set_queue_type(static_cast<::EStoreDiscoveryQueueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter store_page_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_page_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_SkipDiscoveryQueueItem_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_SkipDiscoveryQueueItem_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_queue_type(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional .CStorePageFilter store_page_filter = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::store_page_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_SkipDiscoveryQueueItem_Request)
  return target;
}

size_t CStore_SkipDiscoveryQueueItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_SkipDiscoveryQueueItem_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CStorePageFilter store_page_filter = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *store_page_filter_);
    }

    // optional .EStoreDiscoveryQueueType queue_type = 1 [default = EStoreDiscoveryQueueTypeNew];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_queue_type());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_SkipDiscoveryQueueItem_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_SkipDiscoveryQueueItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_SkipDiscoveryQueueItem_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_SkipDiscoveryQueueItem_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_SkipDiscoveryQueueItem_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_SkipDiscoveryQueueItem_Request)
    MergeFrom(*source);
  }
}

void CStore_SkipDiscoveryQueueItem_Request::MergeFrom(const CStore_SkipDiscoveryQueueItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_SkipDiscoveryQueueItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_store_page_filter()->::CStorePageFilter::MergeFrom(from._internal_store_page_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      queue_type_ = from.queue_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_SkipDiscoveryQueueItem_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_SkipDiscoveryQueueItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_SkipDiscoveryQueueItem_Request::CopyFrom(const CStore_SkipDiscoveryQueueItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_SkipDiscoveryQueueItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_SkipDiscoveryQueueItem_Request::IsInitialized() const {
  return true;
}

void CStore_SkipDiscoveryQueueItem_Request::InternalSwap(CStore_SkipDiscoveryQueueItem_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_SkipDiscoveryQueueItem_Request, appid_)
      + sizeof(CStore_SkipDiscoveryQueueItem_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CStore_SkipDiscoveryQueueItem_Request, store_page_filter_)>(
          reinterpret_cast<char*>(&store_page_filter_),
          reinterpret_cast<char*>(&other->store_page_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_SkipDiscoveryQueueItem_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_SkipDiscoveryQueueItem_Response::_Internal {
 public:
};

CStore_SkipDiscoveryQueueItem_Response::CStore_SkipDiscoveryQueueItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_SkipDiscoveryQueueItem_Response)
}
CStore_SkipDiscoveryQueueItem_Response::CStore_SkipDiscoveryQueueItem_Response(const CStore_SkipDiscoveryQueueItem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_SkipDiscoveryQueueItem_Response)
}

void CStore_SkipDiscoveryQueueItem_Response::SharedCtor() {
}

CStore_SkipDiscoveryQueueItem_Response::~CStore_SkipDiscoveryQueueItem_Response() {
  // @@protoc_insertion_point(destructor:CStore_SkipDiscoveryQueueItem_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_SkipDiscoveryQueueItem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_SkipDiscoveryQueueItem_Response::ArenaDtor(void* object) {
  CStore_SkipDiscoveryQueueItem_Response* _this = reinterpret_cast< CStore_SkipDiscoveryQueueItem_Response* >(object);
  (void)_this;
}
void CStore_SkipDiscoveryQueueItem_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_SkipDiscoveryQueueItem_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_SkipDiscoveryQueueItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_SkipDiscoveryQueueItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_SkipDiscoveryQueueItem_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_SkipDiscoveryQueueItem_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_SkipDiscoveryQueueItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_SkipDiscoveryQueueItem_Response)
  return target;
}

size_t CStore_SkipDiscoveryQueueItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_SkipDiscoveryQueueItem_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_SkipDiscoveryQueueItem_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_SkipDiscoveryQueueItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_SkipDiscoveryQueueItem_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_SkipDiscoveryQueueItem_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_SkipDiscoveryQueueItem_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_SkipDiscoveryQueueItem_Response)
    MergeFrom(*source);
  }
}

void CStore_SkipDiscoveryQueueItem_Response::MergeFrom(const CStore_SkipDiscoveryQueueItem_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_SkipDiscoveryQueueItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_SkipDiscoveryQueueItem_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_SkipDiscoveryQueueItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_SkipDiscoveryQueueItem_Response::CopyFrom(const CStore_SkipDiscoveryQueueItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_SkipDiscoveryQueueItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_SkipDiscoveryQueueItem_Response::IsInitialized() const {
  return true;
}

void CStore_SkipDiscoveryQueueItem_Response::InternalSwap(CStore_SkipDiscoveryQueueItem_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_SkipDiscoveryQueueItem_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetUserGameInterestState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetUserGameInterestState_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_beta_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_GetUserGameInterestState_Request::CStore_GetUserGameInterestState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetUserGameInterestState_Request)
}
CStore_GetUserGameInterestState_Request::CStore_GetUserGameInterestState_Request(const CStore_GetUserGameInterestState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_appid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(beta_appid_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetUserGameInterestState_Request)
}

void CStore_GetUserGameInterestState_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beta_appid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(beta_appid_));
}

CStore_GetUserGameInterestState_Request::~CStore_GetUserGameInterestState_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetUserGameInterestState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetUserGameInterestState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetUserGameInterestState_Request::ArenaDtor(void* object) {
  CStore_GetUserGameInterestState_Request* _this = reinterpret_cast< CStore_GetUserGameInterestState_Request* >(object);
  (void)_this;
}
void CStore_GetUserGameInterestState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetUserGameInterestState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetUserGameInterestState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetUserGameInterestState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&beta_appid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(beta_appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetUserGameInterestState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_store_appid(&has_bits);
          store_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 beta_appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_beta_appid(&has_bits);
          beta_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetUserGameInterestState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetUserGameInterestState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 store_appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_store_appid(), target);
  }

  // optional uint32 beta_appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_beta_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetUserGameInterestState_Request)
  return target;
}

size_t CStore_GetUserGameInterestState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetUserGameInterestState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 store_appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_store_appid());
    }

    // optional uint32 beta_appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_beta_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetUserGameInterestState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetUserGameInterestState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetUserGameInterestState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetUserGameInterestState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetUserGameInterestState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetUserGameInterestState_Request)
    MergeFrom(*source);
  }
}

void CStore_GetUserGameInterestState_Request::MergeFrom(const CStore_GetUserGameInterestState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetUserGameInterestState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_appid_ = from.store_appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      beta_appid_ = from.beta_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetUserGameInterestState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetUserGameInterestState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetUserGameInterestState_Request::CopyFrom(const CStore_GetUserGameInterestState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetUserGameInterestState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetUserGameInterestState_Request::IsInitialized() const {
  return true;
}

void CStore_GetUserGameInterestState_Request::InternalSwap(CStore_GetUserGameInterestState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Request, beta_appid_)
      + sizeof(CStore_GetUserGameInterestState_Request::beta_appid_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetUserGameInterestState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetUserGameInterestState_Response_InQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetUserGameInterestState_Response_InQueue>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skipped(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_items_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_experimental_cohort(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CStore_GetUserGameInterestState_Response_InQueue::CStore_GetUserGameInterestState_Response_InQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetUserGameInterestState_Response.InQueue)
}
CStore_GetUserGameInterestState_Response_InQueue::CStore_GetUserGameInterestState_Response_InQueue(const CStore_GetUserGameInterestState_Response_InQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&experimental_cohort_) -
    reinterpret_cast<char*>(&type_)) + sizeof(experimental_cohort_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetUserGameInterestState_Response.InQueue)
}

void CStore_GetUserGameInterestState_Response_InQueue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&experimental_cohort_) -
    reinterpret_cast<char*>(&type_)) + sizeof(experimental_cohort_));
}

CStore_GetUserGameInterestState_Response_InQueue::~CStore_GetUserGameInterestState_Response_InQueue() {
  // @@protoc_insertion_point(destructor:CStore_GetUserGameInterestState_Response.InQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetUserGameInterestState_Response_InQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetUserGameInterestState_Response_InQueue::ArenaDtor(void* object) {
  CStore_GetUserGameInterestState_Response_InQueue* _this = reinterpret_cast< CStore_GetUserGameInterestState_Response_InQueue* >(object);
  (void)_this;
}
void CStore_GetUserGameInterestState_Response_InQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetUserGameInterestState_Response_InQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetUserGameInterestState_Response_InQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetUserGameInterestState_Response.InQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&experimental_cohort_) -
        reinterpret_cast<char*>(&type_)) + sizeof(experimental_cohort_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetUserGameInterestState_Response_InQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EStoreDiscoveryQueueType type = 1 [default = EStoreDiscoveryQueueTypeNew];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
            _internal_set_type(static_cast<::EStoreDiscoveryQueueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool skipped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skipped(&has_bits);
          skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 items_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_items_remaining(&has_bits);
          items_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 next_appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_next_appid(&has_bits);
          next_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experimental_cohort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_experimental_cohort(&has_bits);
          experimental_cohort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetUserGameInterestState_Response_InQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetUserGameInterestState_Response.InQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EStoreDiscoveryQueueType type = 1 [default = EStoreDiscoveryQueueTypeNew];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool skipped = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_skipped(), target);
  }

  // optional int32 items_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_items_remaining(), target);
  }

  // optional uint32 next_appid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_next_appid(), target);
  }

  // optional uint32 experimental_cohort = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_experimental_cohort(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetUserGameInterestState_Response.InQueue)
  return target;
}

size_t CStore_GetUserGameInterestState_Response_InQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetUserGameInterestState_Response.InQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .EStoreDiscoveryQueueType type = 1 [default = EStoreDiscoveryQueueTypeNew];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool skipped = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 items_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_items_remaining());
    }

    // optional uint32 next_appid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_next_appid());
    }

    // optional uint32 experimental_cohort = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experimental_cohort());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetUserGameInterestState_Response_InQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetUserGameInterestState_Response.InQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetUserGameInterestState_Response_InQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetUserGameInterestState_Response_InQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetUserGameInterestState_Response.InQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetUserGameInterestState_Response.InQueue)
    MergeFrom(*source);
  }
}

void CStore_GetUserGameInterestState_Response_InQueue::MergeFrom(const CStore_GetUserGameInterestState_Response_InQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetUserGameInterestState_Response.InQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      skipped_ = from.skipped_;
    }
    if (cached_has_bits & 0x00000004u) {
      items_remaining_ = from.items_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_appid_ = from.next_appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      experimental_cohort_ = from.experimental_cohort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetUserGameInterestState_Response_InQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetUserGameInterestState_Response.InQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetUserGameInterestState_Response_InQueue::CopyFrom(const CStore_GetUserGameInterestState_Response_InQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetUserGameInterestState_Response.InQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetUserGameInterestState_Response_InQueue::IsInitialized() const {
  return true;
}

void CStore_GetUserGameInterestState_Response_InQueue::InternalSwap(CStore_GetUserGameInterestState_Response_InQueue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Response_InQueue, experimental_cohort_)
      + sizeof(CStore_GetUserGameInterestState_Response_InQueue::experimental_cohort_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Response_InQueue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetUserGameInterestState_Response_InQueue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetUserGameInterestState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetUserGameInterestState_Response>()._has_bits_);
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wishlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ignored(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_following(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_temporarily_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ignored_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_beta_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CStore_GetUserGameInterestState_Response::CStore_GetUserGameInterestState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  in_queues_(arena),
  queues_with_skip_(arena),
  queue_items_remaining_(arena),
  queue_items_next_appid_(arena),
  queues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetUserGameInterestState_Response)
}
CStore_GetUserGameInterestState_Response::CStore_GetUserGameInterestState_Response(const CStore_GetUserGameInterestState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      in_queues_(from.in_queues_),
      queues_with_skip_(from.queues_with_skip_),
      queue_items_remaining_(from.queue_items_remaining_),
      queue_items_next_appid_(from.queue_items_next_appid_),
      queues_(from.queues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owned_, &from.owned_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_status_) -
    reinterpret_cast<char*>(&owned_)) + sizeof(beta_status_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetUserGameInterestState_Response)
}

void CStore_GetUserGameInterestState_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owned_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beta_status_) -
    reinterpret_cast<char*>(&owned_)) + sizeof(beta_status_));
}

CStore_GetUserGameInterestState_Response::~CStore_GetUserGameInterestState_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetUserGameInterestState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetUserGameInterestState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetUserGameInterestState_Response::ArenaDtor(void* object) {
  CStore_GetUserGameInterestState_Response* _this = reinterpret_cast< CStore_GetUserGameInterestState_Response* >(object);
  (void)_this;
}
void CStore_GetUserGameInterestState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetUserGameInterestState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetUserGameInterestState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetUserGameInterestState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_queues_.Clear();
  queues_with_skip_.Clear();
  queue_items_remaining_.Clear();
  queue_items_next_appid_.Clear();
  queues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&owned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&beta_status_) -
        reinterpret_cast<char*>(&owned_)) + sizeof(beta_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetUserGameInterestState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool owned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wishlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wishlist(&has_bits);
          wishlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ignored(&has_bits);
          ignored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool following = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_following(&has_bits);
          following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EStoreDiscoveryQueueType in_queues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
              _internal_add_in_queues(static_cast<::EStoreDiscoveryQueueType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_in_queues(), ptr, ctx, ::EStoreDiscoveryQueueType_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EStoreDiscoveryQueueType queues_with_skip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
              _internal_add_queues_with_skip(static_cast<::EStoreDiscoveryQueueType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_queues_with_skip(), ptr, ctx, ::EStoreDiscoveryQueueType_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 queue_items_remaining = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_queue_items_remaining(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_queue_items_remaining(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 queue_items_next_appid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_queue_items_next_appid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_queue_items_next_appid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporarily_owned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_temporarily_owned(&has_bits);
          temporarily_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CStore_GetUserGameInterestState_Response.InQueue queues = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 ignored_reason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ignored_reason(&has_bits);
          ignored_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EPlaytestStatus beta_status = 12 [default = ETesterStatusNone];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPlaytestStatus_IsValid(val))) {
            _internal_set_beta_status(static_cast<::EPlaytestStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetUserGameInterestState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetUserGameInterestState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool owned = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_owned(), target);
  }

  // optional bool wishlist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_wishlist(), target);
  }

  // optional bool ignored = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ignored(), target);
  }

  // optional bool following = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_following(), target);
  }

  // repeated .EStoreDiscoveryQueueType in_queues = 5;
  for (int i = 0, n = this->_internal_in_queues_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_in_queues(i), target);
  }

  // repeated .EStoreDiscoveryQueueType queues_with_skip = 6;
  for (int i = 0, n = this->_internal_queues_with_skip_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_queues_with_skip(i), target);
  }

  // repeated int32 queue_items_remaining = 7;
  for (int i = 0, n = this->_internal_queue_items_remaining_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_queue_items_remaining(i), target);
  }

  // repeated uint32 queue_items_next_appid = 8;
  for (int i = 0, n = this->_internal_queue_items_next_appid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_queue_items_next_appid(i), target);
  }

  // optional bool temporarily_owned = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_temporarily_owned(), target);
  }

  // repeated .CStore_GetUserGameInterestState_Response.InQueue queues = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_queues(i), target, stream);
  }

  // optional int32 ignored_reason = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_ignored_reason(), target);
  }

  // optional .EPlaytestStatus beta_status = 12 [default = ETesterStatusNone];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_beta_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetUserGameInterestState_Response)
  return target;
}

size_t CStore_GetUserGameInterestState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetUserGameInterestState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EStoreDiscoveryQueueType in_queues = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_in_queues_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_in_queues(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .EStoreDiscoveryQueueType queues_with_skip = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_queues_with_skip_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_queues_with_skip(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 queue_items_remaining = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->queue_items_remaining_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_queue_items_remaining_size());
    total_size += data_size;
  }

  // repeated uint32 queue_items_next_appid = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->queue_items_next_appid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_queue_items_next_appid_size());
    total_size += data_size;
  }

  // repeated .CStore_GetUserGameInterestState_Response.InQueue queues = 10;
  total_size += 1UL * this->_internal_queues_size();
  for (const auto& msg : this->queues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool owned = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool wishlist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ignored = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool following = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool temporarily_owned = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 ignored_reason = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ignored_reason());
    }

    // optional .EPlaytestStatus beta_status = 12 [default = ETesterStatusNone];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_beta_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetUserGameInterestState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetUserGameInterestState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetUserGameInterestState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetUserGameInterestState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetUserGameInterestState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetUserGameInterestState_Response)
    MergeFrom(*source);
  }
}

void CStore_GetUserGameInterestState_Response::MergeFrom(const CStore_GetUserGameInterestState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetUserGameInterestState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_queues_.MergeFrom(from.in_queues_);
  queues_with_skip_.MergeFrom(from.queues_with_skip_);
  queue_items_remaining_.MergeFrom(from.queue_items_remaining_);
  queue_items_next_appid_.MergeFrom(from.queue_items_next_appid_);
  queues_.MergeFrom(from.queues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      owned_ = from.owned_;
    }
    if (cached_has_bits & 0x00000002u) {
      wishlist_ = from.wishlist_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignored_ = from.ignored_;
    }
    if (cached_has_bits & 0x00000008u) {
      following_ = from.following_;
    }
    if (cached_has_bits & 0x00000010u) {
      temporarily_owned_ = from.temporarily_owned_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignored_reason_ = from.ignored_reason_;
    }
    if (cached_has_bits & 0x00000040u) {
      beta_status_ = from.beta_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetUserGameInterestState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetUserGameInterestState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetUserGameInterestState_Response::CopyFrom(const CStore_GetUserGameInterestState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetUserGameInterestState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetUserGameInterestState_Response::IsInitialized() const {
  return true;
}

void CStore_GetUserGameInterestState_Response::InternalSwap(CStore_GetUserGameInterestState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  in_queues_.InternalSwap(&other->in_queues_);
  queues_with_skip_.InternalSwap(&other->queues_with_skip_);
  queue_items_remaining_.InternalSwap(&other->queue_items_remaining_);
  queue_items_next_appid_.InternalSwap(&other->queue_items_next_appid_);
  queues_.InternalSwap(&other->queues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Response, beta_status_)
      + sizeof(CStore_GetUserGameInterestState_Response::beta_status_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetUserGameInterestState_Response, owned_)>(
          reinterpret_cast<char*>(&owned_),
          reinterpret_cast<char*>(&other->owned_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetUserGameInterestState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueueSkippedApps_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetDiscoveryQueueSkippedApps_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CStorePageFilter& store_page_filter(const CStore_GetDiscoveryQueueSkippedApps_Request* msg);
  static void set_has_store_page_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CStorePageFilter&
CStore_GetDiscoveryQueueSkippedApps_Request::_Internal::store_page_filter(const CStore_GetDiscoveryQueueSkippedApps_Request* msg) {
  return *msg->store_page_filter_;
}
void CStore_GetDiscoveryQueueSkippedApps_Request::clear_store_page_filter() {
  if (store_page_filter_ != nullptr) store_page_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CStore_GetDiscoveryQueueSkippedApps_Request::CStore_GetDiscoveryQueueSkippedApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueueSkippedApps_Request)
}
CStore_GetDiscoveryQueueSkippedApps_Request::CStore_GetDiscoveryQueueSkippedApps_Request(const CStore_GetDiscoveryQueueSkippedApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_store_page_filter()) {
    store_page_filter_ = new ::CStorePageFilter(*from.store_page_filter_);
  } else {
    store_page_filter_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_type_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(queue_type_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueueSkippedApps_Request)
}

void CStore_GetDiscoveryQueueSkippedApps_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&store_page_filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&queue_type_) -
    reinterpret_cast<char*>(&store_page_filter_)) + sizeof(queue_type_));
}

CStore_GetDiscoveryQueueSkippedApps_Request::~CStore_GetDiscoveryQueueSkippedApps_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueueSkippedApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueueSkippedApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete store_page_filter_;
}

void CStore_GetDiscoveryQueueSkippedApps_Request::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueueSkippedApps_Request* _this = reinterpret_cast< CStore_GetDiscoveryQueueSkippedApps_Request* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueueSkippedApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueueSkippedApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueueSkippedApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(store_page_filter_ != nullptr);
    store_page_filter_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_type_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(queue_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueueSkippedApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .EStoreDiscoveryQueueType queue_type = 2 [default = EStoreDiscoveryQueueTypeNew];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStoreDiscoveryQueueType_IsValid(val))) {
            _internal_set_queue_type(static_cast<::EStoreDiscoveryQueueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter store_page_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_page_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueueSkippedApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .EStoreDiscoveryQueueType queue_type = 2 [default = EStoreDiscoveryQueueTypeNew];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_queue_type(), target);
  }

  // optional .CStorePageFilter store_page_filter = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::store_page_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueueSkippedApps_Request)
  return target;
}

size_t CStore_GetDiscoveryQueueSkippedApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CStorePageFilter store_page_filter = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *store_page_filter_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .EStoreDiscoveryQueueType queue_type = 2 [default = EStoreDiscoveryQueueTypeNew];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_queue_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueueSkippedApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueueSkippedApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueueSkippedApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueueSkippedApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueueSkippedApps_Request)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueueSkippedApps_Request::MergeFrom(const CStore_GetDiscoveryQueueSkippedApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_store_page_filter()->::CStorePageFilter::MergeFrom(from._internal_store_page_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      queue_type_ = from.queue_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetDiscoveryQueueSkippedApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueueSkippedApps_Request::CopyFrom(const CStore_GetDiscoveryQueueSkippedApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueueSkippedApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueueSkippedApps_Request::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueueSkippedApps_Request::InternalSwap(CStore_GetDiscoveryQueueSkippedApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueueSkippedApps_Request, queue_type_)
      + sizeof(CStore_GetDiscoveryQueueSkippedApps_Request::queue_type_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetDiscoveryQueueSkippedApps_Request, store_page_filter_)>(
          reinterpret_cast<char*>(&store_page_filter_),
          reinterpret_cast<char*>(&other->store_page_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueueSkippedApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetDiscoveryQueueSkippedApps_Response::_Internal {
 public:
};

CStore_GetDiscoveryQueueSkippedApps_Response::CStore_GetDiscoveryQueueSkippedApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetDiscoveryQueueSkippedApps_Response)
}
CStore_GetDiscoveryQueueSkippedApps_Response::CStore_GetDiscoveryQueueSkippedApps_Response(const CStore_GetDiscoveryQueueSkippedApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetDiscoveryQueueSkippedApps_Response)
}

void CStore_GetDiscoveryQueueSkippedApps_Response::SharedCtor() {
}

CStore_GetDiscoveryQueueSkippedApps_Response::~CStore_GetDiscoveryQueueSkippedApps_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetDiscoveryQueueSkippedApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetDiscoveryQueueSkippedApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetDiscoveryQueueSkippedApps_Response::ArenaDtor(void* object) {
  CStore_GetDiscoveryQueueSkippedApps_Response* _this = reinterpret_cast< CStore_GetDiscoveryQueueSkippedApps_Response* >(object);
  (void)_this;
}
void CStore_GetDiscoveryQueueSkippedApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetDiscoveryQueueSkippedApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetDiscoveryQueueSkippedApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetDiscoveryQueueSkippedApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 appids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetDiscoveryQueueSkippedApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetDiscoveryQueueSkippedApps_Response)
  return target;
}

size_t CStore_GetDiscoveryQueueSkippedApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetDiscoveryQueueSkippedApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetDiscoveryQueueSkippedApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetDiscoveryQueueSkippedApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetDiscoveryQueueSkippedApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetDiscoveryQueueSkippedApps_Response)
    MergeFrom(*source);
  }
}

void CStore_GetDiscoveryQueueSkippedApps_Response::MergeFrom(const CStore_GetDiscoveryQueueSkippedApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
}

void CStore_GetDiscoveryQueueSkippedApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetDiscoveryQueueSkippedApps_Response::CopyFrom(const CStore_GetDiscoveryQueueSkippedApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetDiscoveryQueueSkippedApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetDiscoveryQueueSkippedApps_Response::IsInitialized() const {
  return true;
}

void CStore_GetDiscoveryQueueSkippedApps_Response::InternalSwap(CStore_GetDiscoveryQueueSkippedApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appids_.InternalSwap(&other->appids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetDiscoveryQueueSkippedApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_ReportApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_ReportApp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_report_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_ReportApp_Request::CStore_ReportApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_ReportApp_Request)
}
CStore_ReportApp_Request::CStore_ReportApp_Request(const CStore_ReportApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report()) {
    report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(report_type_));
  // @@protoc_insertion_point(copy_constructor:CStore_ReportApp_Request)
}

void CStore_ReportApp_Request::SharedCtor() {
report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(report_type_));
}

CStore_ReportApp_Request::~CStore_ReportApp_Request() {
  // @@protoc_insertion_point(destructor:CStore_ReportApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_ReportApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_ReportApp_Request::ArenaDtor(void* object) {
  CStore_ReportApp_Request* _this = reinterpret_cast< CStore_ReportApp_Request* >(object);
  (void)_this;
}
void CStore_ReportApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_ReportApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_ReportApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_ReportApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    report_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_type_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(report_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_ReportApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EAppReportType report_type = 2 [default = EAppReportType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EAppReportType_IsValid(val))) {
            _internal_set_report_type(static_cast<::EAppReportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_ReportApp_Request.report");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_ReportApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_ReportApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .EAppReportType report_type = 2 [default = EAppReportType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_report_type(), target);
  }

  // optional string report = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report().data(), static_cast<int>(this->_internal_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_ReportApp_Request.report");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_report(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_ReportApp_Request)
  return target;
}

size_t CStore_ReportApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_ReportApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string report = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_report());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional .EAppReportType report_type = 2 [default = EAppReportType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_report_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_ReportApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_ReportApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_ReportApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_ReportApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_ReportApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_ReportApp_Request)
    MergeFrom(*source);
  }
}

void CStore_ReportApp_Request::MergeFrom(const CStore_ReportApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_ReportApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_report(from._internal_report());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      report_type_ = from.report_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_ReportApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_ReportApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_ReportApp_Request::CopyFrom(const CStore_ReportApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_ReportApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_ReportApp_Request::IsInitialized() const {
  return true;
}

void CStore_ReportApp_Request::InternalSwap(CStore_ReportApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  report_.Swap(&other->report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_ReportApp_Request, report_type_)
      + sizeof(CStore_ReportApp_Request::report_type_)
      - PROTOBUF_FIELD_OFFSET(CStore_ReportApp_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_ReportApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_ReportApp_Response::_Internal {
 public:
};

CStore_ReportApp_Response::CStore_ReportApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_ReportApp_Response)
}
CStore_ReportApp_Response::CStore_ReportApp_Response(const CStore_ReportApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_ReportApp_Response)
}

void CStore_ReportApp_Response::SharedCtor() {
}

CStore_ReportApp_Response::~CStore_ReportApp_Response() {
  // @@protoc_insertion_point(destructor:CStore_ReportApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_ReportApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_ReportApp_Response::ArenaDtor(void* object) {
  CStore_ReportApp_Response* _this = reinterpret_cast< CStore_ReportApp_Response* >(object);
  (void)_this;
}
void CStore_ReportApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_ReportApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_ReportApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_ReportApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_ReportApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_ReportApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_ReportApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_ReportApp_Response)
  return target;
}

size_t CStore_ReportApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_ReportApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_ReportApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_ReportApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_ReportApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_ReportApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_ReportApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_ReportApp_Response)
    MergeFrom(*source);
  }
}

void CStore_ReportApp_Response::MergeFrom(const CStore_ReportApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_ReportApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_ReportApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_ReportApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_ReportApp_Response::CopyFrom(const CStore_ReportApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_ReportApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_ReportApp_Response::IsInitialized() const {
  return true;
}

void CStore_ReportApp_Response::InternalSwap(CStore_ReportApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_ReportApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetStorePreferences_Request::_Internal {
 public:
};

CStore_GetStorePreferences_Request::CStore_GetStorePreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetStorePreferences_Request)
}
CStore_GetStorePreferences_Request::CStore_GetStorePreferences_Request(const CStore_GetStorePreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetStorePreferences_Request)
}

void CStore_GetStorePreferences_Request::SharedCtor() {
}

CStore_GetStorePreferences_Request::~CStore_GetStorePreferences_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetStorePreferences_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetStorePreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetStorePreferences_Request::ArenaDtor(void* object) {
  CStore_GetStorePreferences_Request* _this = reinterpret_cast< CStore_GetStorePreferences_Request* >(object);
  (void)_this;
}
void CStore_GetStorePreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetStorePreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetStorePreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetStorePreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetStorePreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetStorePreferences_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetStorePreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetStorePreferences_Request)
  return target;
}

size_t CStore_GetStorePreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetStorePreferences_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetStorePreferences_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetStorePreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetStorePreferences_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetStorePreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetStorePreferences_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetStorePreferences_Request)
    MergeFrom(*source);
  }
}

void CStore_GetStorePreferences_Request::MergeFrom(const CStore_GetStorePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetStorePreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_GetStorePreferences_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetStorePreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetStorePreferences_Request::CopyFrom(const CStore_GetStorePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetStorePreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetStorePreferences_Request::IsInitialized() const {
  return true;
}

void CStore_GetStorePreferences_Request::InternalSwap(CStore_GetStorePreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetStorePreferences_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_UserPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_UserPreferences>()._has_bits_);
  static void set_has_primary_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_secondary_languages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_platform_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_platform_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_platform_linux(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hide_store_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_review_score_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp_content_descriptor_preferences_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_provide_decfeedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_additional_languages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_UserPreferences::CStore_UserPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_UserPreferences)
}
CStore_UserPreferences::CStore_UserPreferences(const CStore_UserPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  additional_languages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_additional_languages()) {
    additional_languages_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_additional_languages(), 
      GetArena());
  }
  ::memcpy(&primary_language_, &from.primary_language_,
    static_cast<size_t>(reinterpret_cast<char*>(&provide_decfeedback_) -
    reinterpret_cast<char*>(&primary_language_)) + sizeof(provide_decfeedback_));
  // @@protoc_insertion_point(copy_constructor:CStore_UserPreferences)
}

void CStore_UserPreferences::SharedCtor() {
additional_languages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primary_language_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&provide_decfeedback_) -
    reinterpret_cast<char*>(&primary_language_)) + sizeof(provide_decfeedback_));
}

CStore_UserPreferences::~CStore_UserPreferences() {
  // @@protoc_insertion_point(destructor:CStore_UserPreferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_UserPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  additional_languages_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_UserPreferences::ArenaDtor(void* object) {
  CStore_UserPreferences* _this = reinterpret_cast< CStore_UserPreferences* >(object);
  (void)_this;
}
void CStore_UserPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_UserPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_UserPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_UserPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    additional_languages_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&primary_language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_updated_) -
        reinterpret_cast<char*>(&primary_language_)) + sizeof(timestamp_updated_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&review_score_preference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&provide_decfeedback_) -
        reinterpret_cast<char*>(&review_score_preference_)) + sizeof(provide_decfeedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_UserPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 primary_language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_primary_language(&has_bits);
          primary_language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 secondary_languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_secondary_languages(&has_bits);
          secondary_languages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool platform_windows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_platform_windows(&has_bits);
          platform_windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool platform_mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_platform_mac(&has_bits);
          platform_mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool platform_linux = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_platform_linux(&has_bits);
          platform_linux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp_updated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp_updated(&has_bits);
          timestamp_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_store_broadcast = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hide_store_broadcast(&has_bits);
          hide_store_broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EUserReviewScorePreference review_score_preference = 10 [default = EUserReviewScorePreference_Unset];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EUserReviewScorePreference_IsValid(val))) {
            _internal_set_review_score_preference(static_cast<::EUserReviewScorePreference>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp_content_descriptor_preferences_updated = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_timestamp_content_descriptor_preferences_updated(&has_bits);
          timestamp_content_descriptor_preferences_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EProvideDeckFeedbackPreference provide_decfeedback = 12 [default = EProvideDeckFeedbackPreference_Unset];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProvideDeckFeedbackPreference_IsValid(val))) {
            _internal_set_provide_decfeedback(static_cast<::EProvideDeckFeedbackPreference>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string additional_languages = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_additional_languages();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_UserPreferences.additional_languages");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_UserPreferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_UserPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 primary_language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_primary_language(), target);
  }

  // optional uint32 secondary_languages = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_secondary_languages(), target);
  }

  // optional bool platform_windows = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_platform_windows(), target);
  }

  // optional bool platform_mac = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_platform_mac(), target);
  }

  // optional bool platform_linux = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_platform_linux(), target);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timestamp_updated(), target);
  }

  // optional bool hide_store_broadcast = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_hide_store_broadcast(), target);
  }

  // optional .EUserReviewScorePreference review_score_preference = 10 [default = EUserReviewScorePreference_Unset];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_review_score_preference(), target);
  }

  // optional int32 timestamp_content_descriptor_preferences_updated = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_timestamp_content_descriptor_preferences_updated(), target);
  }

  // optional .EProvideDeckFeedbackPreference provide_decfeedback = 12 [default = EProvideDeckFeedbackPreference_Unset];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_provide_decfeedback(), target);
  }

  // optional string additional_languages = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_additional_languages().data(), static_cast<int>(this->_internal_additional_languages().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_UserPreferences.additional_languages");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_additional_languages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_UserPreferences)
  return target;
}

size_t CStore_UserPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_UserPreferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string additional_languages = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_additional_languages());
    }

    // optional int32 primary_language = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primary_language());
    }

    // optional uint32 secondary_languages = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secondary_languages());
    }

    // optional bool platform_windows = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool platform_mac = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool platform_linux = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool hide_store_broadcast = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 timestamp_updated = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp_updated());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .EUserReviewScorePreference review_score_preference = 10 [default = EUserReviewScorePreference_Unset];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_review_score_preference());
    }

    // optional int32 timestamp_content_descriptor_preferences_updated = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp_content_descriptor_preferences_updated());
    }

    // optional .EProvideDeckFeedbackPreference provide_decfeedback = 12 [default = EProvideDeckFeedbackPreference_Unset];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provide_decfeedback());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserPreferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_UserPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserPreferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_UserPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_UserPreferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_UserPreferences)
    MergeFrom(*source);
  }
}

void CStore_UserPreferences::MergeFrom(const CStore_UserPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_UserPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_additional_languages(from._internal_additional_languages());
    }
    if (cached_has_bits & 0x00000002u) {
      primary_language_ = from.primary_language_;
    }
    if (cached_has_bits & 0x00000004u) {
      secondary_languages_ = from.secondary_languages_;
    }
    if (cached_has_bits & 0x00000008u) {
      platform_windows_ = from.platform_windows_;
    }
    if (cached_has_bits & 0x00000010u) {
      platform_mac_ = from.platform_mac_;
    }
    if (cached_has_bits & 0x00000020u) {
      platform_linux_ = from.platform_linux_;
    }
    if (cached_has_bits & 0x00000040u) {
      hide_store_broadcast_ = from.hide_store_broadcast_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      review_score_preference_ = from.review_score_preference_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_content_descriptor_preferences_updated_ = from.timestamp_content_descriptor_preferences_updated_;
    }
    if (cached_has_bits & 0x00000400u) {
      provide_decfeedback_ = from.provide_decfeedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_UserPreferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_UserPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserPreferences::CopyFrom(const CStore_UserPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_UserPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserPreferences::IsInitialized() const {
  return true;
}

void CStore_UserPreferences::InternalSwap(CStore_UserPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_languages_.Swap(&other->additional_languages_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_UserPreferences, provide_decfeedback_)
      + sizeof(CStore_UserPreferences::provide_decfeedback_)
      - PROTOBUF_FIELD_OFFSET(CStore_UserPreferences, primary_language_)>(
          reinterpret_cast<char*>(&primary_language_),
          reinterpret_cast<char*>(&other->primary_language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_UserPreferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_UserTagPreferences_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_UserTagPreferences_Tag>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_added(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_UserTagPreferences_Tag::CStore_UserTagPreferences_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_UserTagPreferences.Tag)
}
CStore_UserTagPreferences_Tag::CStore_UserTagPreferences_Tag(const CStore_UserTagPreferences_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&tagid_, &from.tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_added_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
  // @@protoc_insertion_point(copy_constructor:CStore_UserTagPreferences.Tag)
}

void CStore_UserTagPreferences_Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tagid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_added_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
}

CStore_UserTagPreferences_Tag::~CStore_UserTagPreferences_Tag() {
  // @@protoc_insertion_point(destructor:CStore_UserTagPreferences.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_UserTagPreferences_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_UserTagPreferences_Tag::ArenaDtor(void* object) {
  CStore_UserTagPreferences_Tag* _this = reinterpret_cast< CStore_UserTagPreferences_Tag* >(object);
  (void)_this;
}
void CStore_UserTagPreferences_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_UserTagPreferences_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_UserTagPreferences_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_UserTagPreferences.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_added_) -
        reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_UserTagPreferences_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_UserTagPreferences.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp_added = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp_added(&has_bits);
          timestamp_added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_UserTagPreferences_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_UserTagPreferences.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_UserTagPreferences.Tag.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 timestamp_added = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp_added(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_UserTagPreferences.Tag)
  return target;
}

size_t CStore_UserTagPreferences_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_UserTagPreferences.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

    // optional uint32 timestamp_added = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp_added());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserTagPreferences_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_UserTagPreferences.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserTagPreferences_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_UserTagPreferences_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_UserTagPreferences.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_UserTagPreferences.Tag)
    MergeFrom(*source);
  }
}

void CStore_UserTagPreferences_Tag::MergeFrom(const CStore_UserTagPreferences_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_UserTagPreferences.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      tagid_ = from.tagid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_added_ = from.timestamp_added_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_UserTagPreferences_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_UserTagPreferences.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserTagPreferences_Tag::CopyFrom(const CStore_UserTagPreferences_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_UserTagPreferences.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserTagPreferences_Tag::IsInitialized() const {
  return true;
}

void CStore_UserTagPreferences_Tag::InternalSwap(CStore_UserTagPreferences_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_UserTagPreferences_Tag, timestamp_added_)
      + sizeof(CStore_UserTagPreferences_Tag::timestamp_added_)
      - PROTOBUF_FIELD_OFFSET(CStore_UserTagPreferences_Tag, tagid_)>(
          reinterpret_cast<char*>(&tagid_),
          reinterpret_cast<char*>(&other->tagid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_UserTagPreferences_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_UserTagPreferences::_Internal {
 public:
};

CStore_UserTagPreferences::CStore_UserTagPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_to_exclude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_UserTagPreferences)
}
CStore_UserTagPreferences::CStore_UserTagPreferences(const CStore_UserTagPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_to_exclude_(from.tags_to_exclude_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_UserTagPreferences)
}

void CStore_UserTagPreferences::SharedCtor() {
}

CStore_UserTagPreferences::~CStore_UserTagPreferences() {
  // @@protoc_insertion_point(destructor:CStore_UserTagPreferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_UserTagPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_UserTagPreferences::ArenaDtor(void* object) {
  CStore_UserTagPreferences* _this = reinterpret_cast< CStore_UserTagPreferences* >(object);
  (void)_this;
}
void CStore_UserTagPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_UserTagPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_UserTagPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_UserTagPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_to_exclude_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_UserTagPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CStore_UserTagPreferences.Tag tags_to_exclude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_UserTagPreferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_UserTagPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_exclude_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags_to_exclude(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_UserTagPreferences)
  return target;
}

size_t CStore_UserTagPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_UserTagPreferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  total_size += 1UL * this->_internal_tags_to_exclude_size();
  for (const auto& msg : this->tags_to_exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserTagPreferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_UserTagPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserTagPreferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_UserTagPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_UserTagPreferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_UserTagPreferences)
    MergeFrom(*source);
  }
}

void CStore_UserTagPreferences::MergeFrom(const CStore_UserTagPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_UserTagPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_to_exclude_.MergeFrom(from.tags_to_exclude_);
}

void CStore_UserTagPreferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_UserTagPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserTagPreferences::CopyFrom(const CStore_UserTagPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_UserTagPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserTagPreferences::IsInitialized() const {
  return true;
}

void CStore_UserTagPreferences::InternalSwap(CStore_UserTagPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_to_exclude_.InternalSwap(&other->tags_to_exclude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_UserTagPreferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetStorePreferences_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetStorePreferences_Response>()._has_bits_);
  static const ::CStore_UserPreferences& preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CStore_UserTagPreferences& tag_preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_tag_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::UserContentDescriptorPreferences& content_descriptor_preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_content_descriptor_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CStore_UserPreferences&
CStore_GetStorePreferences_Response::_Internal::preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->preferences_;
}
const ::CStore_UserTagPreferences&
CStore_GetStorePreferences_Response::_Internal::tag_preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->tag_preferences_;
}
const ::UserContentDescriptorPreferences&
CStore_GetStorePreferences_Response::_Internal::content_descriptor_preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->content_descriptor_preferences_;
}
void CStore_GetStorePreferences_Response::clear_content_descriptor_preferences() {
  if (content_descriptor_preferences_ != nullptr) content_descriptor_preferences_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CStore_GetStorePreferences_Response::CStore_GetStorePreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetStorePreferences_Response)
}
CStore_GetStorePreferences_Response::CStore_GetStorePreferences_Response(const CStore_GetStorePreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CStore_UserPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  if (from._internal_has_tag_preferences()) {
    tag_preferences_ = new ::CStore_UserTagPreferences(*from.tag_preferences_);
  } else {
    tag_preferences_ = nullptr;
  }
  if (from._internal_has_content_descriptor_preferences()) {
    content_descriptor_preferences_ = new ::UserContentDescriptorPreferences(*from.content_descriptor_preferences_);
  } else {
    content_descriptor_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CStore_GetStorePreferences_Response)
}

void CStore_GetStorePreferences_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_descriptor_preferences_) -
    reinterpret_cast<char*>(&preferences_)) + sizeof(content_descriptor_preferences_));
}

CStore_GetStorePreferences_Response::~CStore_GetStorePreferences_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetStorePreferences_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetStorePreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
  if (this != internal_default_instance()) delete tag_preferences_;
  if (this != internal_default_instance()) delete content_descriptor_preferences_;
}

void CStore_GetStorePreferences_Response::ArenaDtor(void* object) {
  CStore_GetStorePreferences_Response* _this = reinterpret_cast< CStore_GetStorePreferences_Response* >(object);
  (void)_this;
}
void CStore_GetStorePreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetStorePreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetStorePreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetStorePreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferences_ != nullptr);
      preferences_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tag_preferences_ != nullptr);
      tag_preferences_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(content_descriptor_preferences_ != nullptr);
      content_descriptor_preferences_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetStorePreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CStore_UserPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStore_UserTagPreferences tag_preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_descriptor_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetStorePreferences_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetStorePreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CStore_UserPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  // optional .CStore_UserTagPreferences tag_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tag_preferences(this), target, stream);
  }

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content_descriptor_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetStorePreferences_Response)
  return target;
}

size_t CStore_GetStorePreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetStorePreferences_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CStore_UserPreferences preferences = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional .CStore_UserTagPreferences tag_preferences = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tag_preferences_);
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_descriptor_preferences_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetStorePreferences_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetStorePreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetStorePreferences_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetStorePreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetStorePreferences_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetStorePreferences_Response)
    MergeFrom(*source);
  }
}

void CStore_GetStorePreferences_Response::MergeFrom(const CStore_GetStorePreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetStorePreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preferences()->::CStore_UserPreferences::MergeFrom(from._internal_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tag_preferences()->::CStore_UserTagPreferences::MergeFrom(from._internal_tag_preferences());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_content_descriptor_preferences()->::UserContentDescriptorPreferences::MergeFrom(from._internal_content_descriptor_preferences());
    }
  }
}

void CStore_GetStorePreferences_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetStorePreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetStorePreferences_Response::CopyFrom(const CStore_GetStorePreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetStorePreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetStorePreferences_Response::IsInitialized() const {
  return true;
}

void CStore_GetStorePreferences_Response::InternalSwap(CStore_GetStorePreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetStorePreferences_Response, content_descriptor_preferences_)
      + sizeof(CStore_GetStorePreferences_Response::content_descriptor_preferences_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetStorePreferences_Response, preferences_)>(
          reinterpret_cast<char*>(&preferences_),
          reinterpret_cast<char*>(&other->preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetStorePreferences_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTrendingAppsAmongFriends_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetTrendingAppsAmongFriends_Request>()._has_bits_);
  static void set_has_num_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_top_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CStore_GetTrendingAppsAmongFriends_Request::CStore_GetTrendingAppsAmongFriends_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTrendingAppsAmongFriends_Request)
}
CStore_GetTrendingAppsAmongFriends_Request::CStore_GetTrendingAppsAmongFriends_Request(const CStore_GetTrendingAppsAmongFriends_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_apps_, &from.num_apps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_top_friends_) -
    reinterpret_cast<char*>(&num_apps_)) + sizeof(num_top_friends_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetTrendingAppsAmongFriends_Request)
}

void CStore_GetTrendingAppsAmongFriends_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_apps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_top_friends_) -
    reinterpret_cast<char*>(&num_apps_)) + sizeof(num_top_friends_));
}

CStore_GetTrendingAppsAmongFriends_Request::~CStore_GetTrendingAppsAmongFriends_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetTrendingAppsAmongFriends_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTrendingAppsAmongFriends_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetTrendingAppsAmongFriends_Request::ArenaDtor(void* object) {
  CStore_GetTrendingAppsAmongFriends_Request* _this = reinterpret_cast< CStore_GetTrendingAppsAmongFriends_Request* >(object);
  (void)_this;
}
void CStore_GetTrendingAppsAmongFriends_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTrendingAppsAmongFriends_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTrendingAppsAmongFriends_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTrendingAppsAmongFriends_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_apps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_top_friends_) -
        reinterpret_cast<char*>(&num_apps_)) + sizeof(num_top_friends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTrendingAppsAmongFriends_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_apps(&has_bits);
          num_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_top_friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_top_friends(&has_bits);
          num_top_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTrendingAppsAmongFriends_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTrendingAppsAmongFriends_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_apps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_apps(), target);
  }

  // optional uint32 num_top_friends = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_top_friends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTrendingAppsAmongFriends_Request)
  return target;
}

size_t CStore_GetTrendingAppsAmongFriends_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTrendingAppsAmongFriends_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 num_apps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_apps());
    }

    // optional uint32 num_top_friends = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_top_friends());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTrendingAppsAmongFriends_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTrendingAppsAmongFriends_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTrendingAppsAmongFriends_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTrendingAppsAmongFriends_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTrendingAppsAmongFriends_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTrendingAppsAmongFriends_Request)
    MergeFrom(*source);
  }
}

void CStore_GetTrendingAppsAmongFriends_Request::MergeFrom(const CStore_GetTrendingAppsAmongFriends_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTrendingAppsAmongFriends_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_apps_ = from.num_apps_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_top_friends_ = from.num_top_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetTrendingAppsAmongFriends_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTrendingAppsAmongFriends_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTrendingAppsAmongFriends_Request::CopyFrom(const CStore_GetTrendingAppsAmongFriends_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTrendingAppsAmongFriends_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTrendingAppsAmongFriends_Request::IsInitialized() const {
  return true;
}

void CStore_GetTrendingAppsAmongFriends_Request::InternalSwap(CStore_GetTrendingAppsAmongFriends_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetTrendingAppsAmongFriends_Request, num_top_friends_)
      + sizeof(CStore_GetTrendingAppsAmongFriends_Request::num_top_friends_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetTrendingAppsAmongFriends_Request, num_apps_)>(
          reinterpret_cast<char*>(&num_apps_),
          reinterpret_cast<char*>(&other->num_apps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTrendingAppsAmongFriends_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steamids_top_friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
}
CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamids_top_friends_(from.steamids_top_friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_friends_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(total_friends_));
  // @@protoc_insertion_point(copy_constructor:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_friends_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(total_friends_));
}

CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::~CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData() {
  // @@protoc_insertion_point(destructor:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::ArenaDtor(void* object) {
  CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* _this = reinterpret_cast< CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* >(object);
  (void)_this;
}
void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_top_friends_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_friends_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(total_friends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 steamids_top_friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids_top_friends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_steamids_top_friends(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_friends(&has_bits);
          total_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated uint64 steamids_top_friends = 2;
  for (int i = 0, n = this->_internal_steamids_top_friends_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamids_top_friends(i), target);
  }

  // optional uint32 total_friends = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_friends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  return target;
}

size_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 steamids_top_friends = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->steamids_top_friends_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamids_top_friends_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 total_friends = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_friends());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
    MergeFrom(*source);
  }
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::MergeFrom(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_top_friends_.MergeFrom(from.steamids_top_friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_friends_ = from.total_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::CopyFrom(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::IsInitialized() const {
  return true;
}

void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::InternalSwap(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_top_friends_.InternalSwap(&other->steamids_top_friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, total_friends_)
      + sizeof(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::total_friends_)
      - PROTOBUF_FIELD_OFFSET(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetTrendingAppsAmongFriends_Response::_Internal {
 public:
};

CStore_GetTrendingAppsAmongFriends_Response::CStore_GetTrendingAppsAmongFriends_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trending_apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetTrendingAppsAmongFriends_Response)
}
CStore_GetTrendingAppsAmongFriends_Response::CStore_GetTrendingAppsAmongFriends_Response(const CStore_GetTrendingAppsAmongFriends_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trending_apps_(from.trending_apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetTrendingAppsAmongFriends_Response)
}

void CStore_GetTrendingAppsAmongFriends_Response::SharedCtor() {
}

CStore_GetTrendingAppsAmongFriends_Response::~CStore_GetTrendingAppsAmongFriends_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetTrendingAppsAmongFriends_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetTrendingAppsAmongFriends_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetTrendingAppsAmongFriends_Response::ArenaDtor(void* object) {
  CStore_GetTrendingAppsAmongFriends_Response* _this = reinterpret_cast< CStore_GetTrendingAppsAmongFriends_Response* >(object);
  (void)_this;
}
void CStore_GetTrendingAppsAmongFriends_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetTrendingAppsAmongFriends_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetTrendingAppsAmongFriends_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetTrendingAppsAmongFriends_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trending_apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetTrendingAppsAmongFriends_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData trending_apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trending_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetTrendingAppsAmongFriends_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetTrendingAppsAmongFriends_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData trending_apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trending_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trending_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetTrendingAppsAmongFriends_Response)
  return target;
}

size_t CStore_GetTrendingAppsAmongFriends_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetTrendingAppsAmongFriends_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData trending_apps = 1;
  total_size += 1UL * this->_internal_trending_apps_size();
  for (const auto& msg : this->trending_apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetTrendingAppsAmongFriends_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetTrendingAppsAmongFriends_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetTrendingAppsAmongFriends_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetTrendingAppsAmongFriends_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetTrendingAppsAmongFriends_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetTrendingAppsAmongFriends_Response)
    MergeFrom(*source);
  }
}

void CStore_GetTrendingAppsAmongFriends_Response::MergeFrom(const CStore_GetTrendingAppsAmongFriends_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetTrendingAppsAmongFriends_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trending_apps_.MergeFrom(from.trending_apps_);
}

void CStore_GetTrendingAppsAmongFriends_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetTrendingAppsAmongFriends_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetTrendingAppsAmongFriends_Response::CopyFrom(const CStore_GetTrendingAppsAmongFriends_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetTrendingAppsAmongFriends_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetTrendingAppsAmongFriends_Response::IsInitialized() const {
  return true;
}

void CStore_GetTrendingAppsAmongFriends_Response::InternalSwap(CStore_GetTrendingAppsAmongFriends_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trending_apps_.InternalSwap(&other->trending_apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetTrendingAppsAmongFriends_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_MigratePartnerLinkTracking_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_MigratePartnerLinkTracking_Notification>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_browserid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backfill_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_MigratePartnerLinkTracking_Notification::CStore_MigratePartnerLinkTracking_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_MigratePartnerLinkTracking_Notification)
}
CStore_MigratePartnerLinkTracking_Notification::CStore_MigratePartnerLinkTracking_Notification(const CStore_MigratePartnerLinkTracking_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browserid_, &from.browserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&backfill_source_) -
    reinterpret_cast<char*>(&browserid_)) + sizeof(backfill_source_));
  // @@protoc_insertion_point(copy_constructor:CStore_MigratePartnerLinkTracking_Notification)
}

void CStore_MigratePartnerLinkTracking_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browserid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&backfill_source_) -
    reinterpret_cast<char*>(&browserid_)) + sizeof(backfill_source_));
}

CStore_MigratePartnerLinkTracking_Notification::~CStore_MigratePartnerLinkTracking_Notification() {
  // @@protoc_insertion_point(destructor:CStore_MigratePartnerLinkTracking_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_MigratePartnerLinkTracking_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_MigratePartnerLinkTracking_Notification::ArenaDtor(void* object) {
  CStore_MigratePartnerLinkTracking_Notification* _this = reinterpret_cast< CStore_MigratePartnerLinkTracking_Notification* >(object);
  (void)_this;
}
void CStore_MigratePartnerLinkTracking_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_MigratePartnerLinkTracking_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_MigratePartnerLinkTracking_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_MigratePartnerLinkTracking_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backfill_source_) -
        reinterpret_cast<char*>(&browserid_)) + sizeof(backfill_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_MigratePartnerLinkTracking_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 browserid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_browserid(&has_bits);
          browserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EPartnerLinkTrackingBackfillSource backfill_source = 3 [default = EPartnerLinkTrackingBackfillSource_None];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPartnerLinkTrackingBackfillSource_IsValid(val))) {
            _internal_set_backfill_source(static_cast<::EPartnerLinkTrackingBackfillSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_MigratePartnerLinkTracking_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_MigratePartnerLinkTracking_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 browserid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_browserid(), target);
  }

  // optional .EPartnerLinkTrackingBackfillSource backfill_source = 3 [default = EPartnerLinkTrackingBackfillSource_None];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_backfill_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_MigratePartnerLinkTracking_Notification)
  return target;
}

size_t CStore_MigratePartnerLinkTracking_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_MigratePartnerLinkTracking_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 browserid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_browserid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional .EPartnerLinkTrackingBackfillSource backfill_source = 3 [default = EPartnerLinkTrackingBackfillSource_None];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backfill_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_MigratePartnerLinkTracking_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_MigratePartnerLinkTracking_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_MigratePartnerLinkTracking_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_MigratePartnerLinkTracking_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_MigratePartnerLinkTracking_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_MigratePartnerLinkTracking_Notification)
    MergeFrom(*source);
  }
}

void CStore_MigratePartnerLinkTracking_Notification::MergeFrom(const CStore_MigratePartnerLinkTracking_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_MigratePartnerLinkTracking_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browserid_ = from.browserid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      backfill_source_ = from.backfill_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_MigratePartnerLinkTracking_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_MigratePartnerLinkTracking_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_MigratePartnerLinkTracking_Notification::CopyFrom(const CStore_MigratePartnerLinkTracking_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_MigratePartnerLinkTracking_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_MigratePartnerLinkTracking_Notification::IsInitialized() const {
  return true;
}

void CStore_MigratePartnerLinkTracking_Notification::InternalSwap(CStore_MigratePartnerLinkTracking_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_MigratePartnerLinkTracking_Notification, backfill_source_)
      + sizeof(CStore_MigratePartnerLinkTracking_Notification::backfill_source_)
      - PROTOBUF_FIELD_OFFSET(CStore_MigratePartnerLinkTracking_Notification, browserid_)>(
          reinterpret_cast<char*>(&browserid_),
          reinterpret_cast<char*>(&other->browserid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_MigratePartnerLinkTracking_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_UpdatePackageReservations_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_UpdatePackageReservations_Request>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStore_UpdatePackageReservations_Request::CStore_UpdatePackageReservations_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packages_to_reserve_(arena),
  packages_to_unreserve_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_UpdatePackageReservations_Request)
}
CStore_UpdatePackageReservations_Request::CStore_UpdatePackageReservations_Request(const CStore_UpdatePackageReservations_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packages_to_reserve_(from.packages_to_reserve_),
      packages_to_unreserve_(from.packages_to_unreserve_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStore_UpdatePackageReservations_Request)
}

void CStore_UpdatePackageReservations_Request::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStore_UpdatePackageReservations_Request::~CStore_UpdatePackageReservations_Request() {
  // @@protoc_insertion_point(destructor:CStore_UpdatePackageReservations_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_UpdatePackageReservations_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_UpdatePackageReservations_Request::ArenaDtor(void* object) {
  CStore_UpdatePackageReservations_Request* _this = reinterpret_cast< CStore_UpdatePackageReservations_Request* >(object);
  (void)_this;
}
void CStore_UpdatePackageReservations_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_UpdatePackageReservations_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_UpdatePackageReservations_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_UpdatePackageReservations_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_to_reserve_.Clear();
  packages_to_unreserve_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_UpdatePackageReservations_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 packages_to_reserve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packages_to_reserve(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packages_to_reserve(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packages_to_unreserve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packages_to_unreserve(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packages_to_unreserve(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_UpdatePackageReservations_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_UpdatePackageReservations_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_UpdatePackageReservations_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packages_to_reserve = 1;
  for (int i = 0, n = this->_internal_packages_to_reserve_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packages_to_reserve(i), target);
  }

  // repeated uint32 packages_to_unreserve = 2;
  for (int i = 0, n = this->_internal_packages_to_unreserve_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_packages_to_unreserve(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_UpdatePackageReservations_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_UpdatePackageReservations_Request)
  return target;
}

size_t CStore_UpdatePackageReservations_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_UpdatePackageReservations_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packages_to_reserve = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packages_to_reserve_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packages_to_reserve_size());
    total_size += data_size;
  }

  // repeated uint32 packages_to_unreserve = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packages_to_unreserve_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packages_to_unreserve_size());
    total_size += data_size;
  }

  // optional string country_code = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UpdatePackageReservations_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_UpdatePackageReservations_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UpdatePackageReservations_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_UpdatePackageReservations_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_UpdatePackageReservations_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_UpdatePackageReservations_Request)
    MergeFrom(*source);
  }
}

void CStore_UpdatePackageReservations_Request::MergeFrom(const CStore_UpdatePackageReservations_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_UpdatePackageReservations_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_to_reserve_.MergeFrom(from.packages_to_reserve_);
  packages_to_unreserve_.MergeFrom(from.packages_to_unreserve_);
  if (from._internal_has_country_code()) {
    _internal_set_country_code(from._internal_country_code());
  }
}

void CStore_UpdatePackageReservations_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_UpdatePackageReservations_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UpdatePackageReservations_Request::CopyFrom(const CStore_UpdatePackageReservations_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_UpdatePackageReservations_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UpdatePackageReservations_Request::IsInitialized() const {
  return true;
}

void CStore_UpdatePackageReservations_Request::InternalSwap(CStore_UpdatePackageReservations_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packages_to_reserve_.InternalSwap(&other->packages_to_reserve_);
  packages_to_unreserve_.InternalSwap(&other->packages_to_unreserve_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_UpdatePackageReservations_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_UpdatePackageReservations_Response::_Internal {
 public:
};

void CStore_UpdatePackageReservations_Response::clear_reservation_status() {
  reservation_status_.Clear();
}
CStore_UpdatePackageReservations_Response::CStore_UpdatePackageReservations_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reservation_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_UpdatePackageReservations_Response)
}
CStore_UpdatePackageReservations_Response::CStore_UpdatePackageReservations_Response(const CStore_UpdatePackageReservations_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reservation_status_(from.reservation_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_UpdatePackageReservations_Response)
}

void CStore_UpdatePackageReservations_Response::SharedCtor() {
}

CStore_UpdatePackageReservations_Response::~CStore_UpdatePackageReservations_Response() {
  // @@protoc_insertion_point(destructor:CStore_UpdatePackageReservations_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_UpdatePackageReservations_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_UpdatePackageReservations_Response::ArenaDtor(void* object) {
  CStore_UpdatePackageReservations_Response* _this = reinterpret_cast< CStore_UpdatePackageReservations_Response* >(object);
  (void)_this;
}
void CStore_UpdatePackageReservations_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_UpdatePackageReservations_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_UpdatePackageReservations_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_UpdatePackageReservations_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reservation_status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_UpdatePackageReservations_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CPackageReservationStatus reservation_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reservation_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_UpdatePackageReservations_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_UpdatePackageReservations_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPackageReservationStatus reservation_status = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reservation_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reservation_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_UpdatePackageReservations_Response)
  return target;
}

size_t CStore_UpdatePackageReservations_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_UpdatePackageReservations_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPackageReservationStatus reservation_status = 1;
  total_size += 1UL * this->_internal_reservation_status_size();
  for (const auto& msg : this->reservation_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UpdatePackageReservations_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_UpdatePackageReservations_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UpdatePackageReservations_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_UpdatePackageReservations_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_UpdatePackageReservations_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_UpdatePackageReservations_Response)
    MergeFrom(*source);
  }
}

void CStore_UpdatePackageReservations_Response::MergeFrom(const CStore_UpdatePackageReservations_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_UpdatePackageReservations_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reservation_status_.MergeFrom(from.reservation_status_);
}

void CStore_UpdatePackageReservations_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_UpdatePackageReservations_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UpdatePackageReservations_Response::CopyFrom(const CStore_UpdatePackageReservations_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_UpdatePackageReservations_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UpdatePackageReservations_Response::IsInitialized() const {
  return true;
}

void CStore_UpdatePackageReservations_Response::InternalSwap(CStore_UpdatePackageReservations_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reservation_status_.InternalSwap(&other->reservation_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_UpdatePackageReservations_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CReservationPositionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CReservationPositionMessage>()._has_bits_);
  static void set_has_edistributor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_product_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_queue_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtime_estimated_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_localization_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtime_created(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CReservationPositionMessage::CReservationPositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CReservationPositionMessage)
}
CReservationPositionMessage::CReservationPositionMessage(const CReservationPositionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_product_identifier()) {
    product_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_identifier(), 
      GetArena());
  }
  localization_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localization_token()) {
    localization_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localization_token(), 
      GetArena());
  }
  ::memcpy(&edistributor_, &from.edistributor_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_created_) -
    reinterpret_cast<char*>(&edistributor_)) + sizeof(rtime_created_));
  // @@protoc_insertion_point(copy_constructor:CReservationPositionMessage)
}

void CReservationPositionMessage::SharedCtor() {
product_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localization_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edistributor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_created_) -
    reinterpret_cast<char*>(&edistributor_)) + sizeof(rtime_created_));
}

CReservationPositionMessage::~CReservationPositionMessage() {
  // @@protoc_insertion_point(destructor:CReservationPositionMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CReservationPositionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localization_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CReservationPositionMessage::ArenaDtor(void* object) {
  CReservationPositionMessage* _this = reinterpret_cast< CReservationPositionMessage* >(object);
  (void)_this;
}
void CReservationPositionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CReservationPositionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CReservationPositionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CReservationPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      product_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      localization_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&edistributor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_created_) -
        reinterpret_cast<char*>(&edistributor_)) + sizeof(rtime_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CReservationPositionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 edistributor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_edistributor(&has_bits);
          edistributor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string product_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CReservationPositionMessage.product_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_queue_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_queue_position(&has_bits);
          start_queue_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_estimated_notification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rtime_estimated_notification(&has_bits);
          rtime_estimated_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string localization_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_localization_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CReservationPositionMessage.localization_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_created = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rtime_created(&has_bits);
          rtime_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CReservationPositionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CReservationPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 edistributor = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edistributor(), target);
  }

  // optional string product_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_identifier().data(), static_cast<int>(this->_internal_product_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CReservationPositionMessage.product_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_identifier(), target);
  }

  // optional uint32 start_queue_position = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_queue_position(), target);
  }

  // optional uint32 rtime_estimated_notification = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rtime_estimated_notification(), target);
  }

  // optional string localization_token = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_token().data(), static_cast<int>(this->_internal_localization_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CReservationPositionMessage.localization_token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_localization_token(), target);
  }

  // optional uint32 accountid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_accountid(), target);
  }

  // optional uint32 rtime_created = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rtime_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CReservationPositionMessage)
  return target;
}

size_t CReservationPositionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CReservationPositionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string product_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_identifier());
    }

    // optional string localization_token = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_token());
    }

    // optional uint32 edistributor = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_edistributor());
    }

    // optional uint32 start_queue_position = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_queue_position());
    }

    // optional uint32 rtime_estimated_notification = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_estimated_notification());
    }

    // optional uint32 accountid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 rtime_created = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_created());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CReservationPositionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CReservationPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CReservationPositionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CReservationPositionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CReservationPositionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CReservationPositionMessage)
    MergeFrom(*source);
  }
}

void CReservationPositionMessage::MergeFrom(const CReservationPositionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CReservationPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product_identifier(from._internal_product_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_localization_token(from._internal_localization_token());
    }
    if (cached_has_bits & 0x00000004u) {
      edistributor_ = from.edistributor_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_queue_position_ = from.start_queue_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime_estimated_notification_ = from.rtime_estimated_notification_;
    }
    if (cached_has_bits & 0x00000020u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtime_created_ = from.rtime_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CReservationPositionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CReservationPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReservationPositionMessage::CopyFrom(const CReservationPositionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CReservationPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReservationPositionMessage::IsInitialized() const {
  return true;
}

void CReservationPositionMessage::InternalSwap(CReservationPositionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_identifier_.Swap(&other->product_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  localization_token_.Swap(&other->localization_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CReservationPositionMessage, rtime_created_)
      + sizeof(CReservationPositionMessage::rtime_created_)
      - PROTOBUF_FIELD_OFFSET(CReservationPositionMessage, edistributor_)>(
          reinterpret_cast<char*>(&edistributor_),
          reinterpret_cast<char*>(&other->edistributor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CReservationPositionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_SetReservationPositionMessage_Request::_Internal {
 public:
};

CStore_SetReservationPositionMessage_Request::CStore_SetReservationPositionMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_SetReservationPositionMessage_Request)
}
CStore_SetReservationPositionMessage_Request::CStore_SetReservationPositionMessage_Request(const CStore_SetReservationPositionMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_SetReservationPositionMessage_Request)
}

void CStore_SetReservationPositionMessage_Request::SharedCtor() {
}

CStore_SetReservationPositionMessage_Request::~CStore_SetReservationPositionMessage_Request() {
  // @@protoc_insertion_point(destructor:CStore_SetReservationPositionMessage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_SetReservationPositionMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_SetReservationPositionMessage_Request::ArenaDtor(void* object) {
  CStore_SetReservationPositionMessage_Request* _this = reinterpret_cast< CStore_SetReservationPositionMessage_Request* >(object);
  (void)_this;
}
void CStore_SetReservationPositionMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_SetReservationPositionMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_SetReservationPositionMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_SetReservationPositionMessage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_SetReservationPositionMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CReservationPositionMessage settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_SetReservationPositionMessage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_SetReservationPositionMessage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CReservationPositionMessage settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_SetReservationPositionMessage_Request)
  return target;
}

size_t CStore_SetReservationPositionMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_SetReservationPositionMessage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CReservationPositionMessage settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_SetReservationPositionMessage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_SetReservationPositionMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_SetReservationPositionMessage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_SetReservationPositionMessage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_SetReservationPositionMessage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_SetReservationPositionMessage_Request)
    MergeFrom(*source);
  }
}

void CStore_SetReservationPositionMessage_Request::MergeFrom(const CStore_SetReservationPositionMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_SetReservationPositionMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void CStore_SetReservationPositionMessage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_SetReservationPositionMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_SetReservationPositionMessage_Request::CopyFrom(const CStore_SetReservationPositionMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_SetReservationPositionMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_SetReservationPositionMessage_Request::IsInitialized() const {
  return true;
}

void CStore_SetReservationPositionMessage_Request::InternalSwap(CStore_SetReservationPositionMessage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_SetReservationPositionMessage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_SetReservationPositionMessage_Response::_Internal {
 public:
};

CStore_SetReservationPositionMessage_Response::CStore_SetReservationPositionMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_SetReservationPositionMessage_Response)
}
CStore_SetReservationPositionMessage_Response::CStore_SetReservationPositionMessage_Response(const CStore_SetReservationPositionMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_SetReservationPositionMessage_Response)
}

void CStore_SetReservationPositionMessage_Response::SharedCtor() {
}

CStore_SetReservationPositionMessage_Response::~CStore_SetReservationPositionMessage_Response() {
  // @@protoc_insertion_point(destructor:CStore_SetReservationPositionMessage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_SetReservationPositionMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_SetReservationPositionMessage_Response::ArenaDtor(void* object) {
  CStore_SetReservationPositionMessage_Response* _this = reinterpret_cast< CStore_SetReservationPositionMessage_Response* >(object);
  (void)_this;
}
void CStore_SetReservationPositionMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_SetReservationPositionMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_SetReservationPositionMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_SetReservationPositionMessage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_SetReservationPositionMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_SetReservationPositionMessage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_SetReservationPositionMessage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_SetReservationPositionMessage_Response)
  return target;
}

size_t CStore_SetReservationPositionMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_SetReservationPositionMessage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_SetReservationPositionMessage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_SetReservationPositionMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_SetReservationPositionMessage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_SetReservationPositionMessage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_SetReservationPositionMessage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_SetReservationPositionMessage_Response)
    MergeFrom(*source);
  }
}

void CStore_SetReservationPositionMessage_Response::MergeFrom(const CStore_SetReservationPositionMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_SetReservationPositionMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_SetReservationPositionMessage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_SetReservationPositionMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_SetReservationPositionMessage_Response::CopyFrom(const CStore_SetReservationPositionMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_SetReservationPositionMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_SetReservationPositionMessage_Response::IsInitialized() const {
  return true;
}

void CStore_SetReservationPositionMessage_Response::InternalSwap(CStore_SetReservationPositionMessage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_SetReservationPositionMessage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_DeleteReservationPositionMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_DeleteReservationPositionMessage_Request>()._has_bits_);
  static void set_has_edistributor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_product_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_queue_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CStore_DeleteReservationPositionMessage_Request::CStore_DeleteReservationPositionMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_DeleteReservationPositionMessage_Request)
}
CStore_DeleteReservationPositionMessage_Request::CStore_DeleteReservationPositionMessage_Request(const CStore_DeleteReservationPositionMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_product_identifier()) {
    product_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_identifier(), 
      GetArena());
  }
  ::memcpy(&edistributor_, &from.edistributor_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_queue_position_) -
    reinterpret_cast<char*>(&edistributor_)) + sizeof(start_queue_position_));
  // @@protoc_insertion_point(copy_constructor:CStore_DeleteReservationPositionMessage_Request)
}

void CStore_DeleteReservationPositionMessage_Request::SharedCtor() {
product_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edistributor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_queue_position_) -
    reinterpret_cast<char*>(&edistributor_)) + sizeof(start_queue_position_));
}

CStore_DeleteReservationPositionMessage_Request::~CStore_DeleteReservationPositionMessage_Request() {
  // @@protoc_insertion_point(destructor:CStore_DeleteReservationPositionMessage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_DeleteReservationPositionMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStore_DeleteReservationPositionMessage_Request::ArenaDtor(void* object) {
  CStore_DeleteReservationPositionMessage_Request* _this = reinterpret_cast< CStore_DeleteReservationPositionMessage_Request* >(object);
  (void)_this;
}
void CStore_DeleteReservationPositionMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_DeleteReservationPositionMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_DeleteReservationPositionMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_DeleteReservationPositionMessage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    product_identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&edistributor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_queue_position_) -
        reinterpret_cast<char*>(&edistributor_)) + sizeof(start_queue_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_DeleteReservationPositionMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 edistributor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_edistributor(&has_bits);
          edistributor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string product_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStore_DeleteReservationPositionMessage_Request.product_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_queue_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_queue_position(&has_bits);
          start_queue_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_DeleteReservationPositionMessage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_DeleteReservationPositionMessage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 edistributor = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edistributor(), target);
  }

  // optional string product_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_identifier().data(), static_cast<int>(this->_internal_product_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStore_DeleteReservationPositionMessage_Request.product_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_identifier(), target);
  }

  // optional uint32 start_queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_queue_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_DeleteReservationPositionMessage_Request)
  return target;
}

size_t CStore_DeleteReservationPositionMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_DeleteReservationPositionMessage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string product_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_identifier());
    }

    // optional uint32 edistributor = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_edistributor());
    }

    // optional uint32 start_queue_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_queue_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_DeleteReservationPositionMessage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_DeleteReservationPositionMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_DeleteReservationPositionMessage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_DeleteReservationPositionMessage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_DeleteReservationPositionMessage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_DeleteReservationPositionMessage_Request)
    MergeFrom(*source);
  }
}

void CStore_DeleteReservationPositionMessage_Request::MergeFrom(const CStore_DeleteReservationPositionMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_DeleteReservationPositionMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product_identifier(from._internal_product_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      edistributor_ = from.edistributor_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_queue_position_ = from.start_queue_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_DeleteReservationPositionMessage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_DeleteReservationPositionMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_DeleteReservationPositionMessage_Request::CopyFrom(const CStore_DeleteReservationPositionMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_DeleteReservationPositionMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_DeleteReservationPositionMessage_Request::IsInitialized() const {
  return true;
}

void CStore_DeleteReservationPositionMessage_Request::InternalSwap(CStore_DeleteReservationPositionMessage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_identifier_.Swap(&other->product_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_DeleteReservationPositionMessage_Request, start_queue_position_)
      + sizeof(CStore_DeleteReservationPositionMessage_Request::start_queue_position_)
      - PROTOBUF_FIELD_OFFSET(CStore_DeleteReservationPositionMessage_Request, edistributor_)>(
          reinterpret_cast<char*>(&edistributor_),
          reinterpret_cast<char*>(&other->edistributor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_DeleteReservationPositionMessage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_DeleteReservationPositionMessage_Response::_Internal {
 public:
};

CStore_DeleteReservationPositionMessage_Response::CStore_DeleteReservationPositionMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_DeleteReservationPositionMessage_Response)
}
CStore_DeleteReservationPositionMessage_Response::CStore_DeleteReservationPositionMessage_Response(const CStore_DeleteReservationPositionMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_DeleteReservationPositionMessage_Response)
}

void CStore_DeleteReservationPositionMessage_Response::SharedCtor() {
}

CStore_DeleteReservationPositionMessage_Response::~CStore_DeleteReservationPositionMessage_Response() {
  // @@protoc_insertion_point(destructor:CStore_DeleteReservationPositionMessage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_DeleteReservationPositionMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_DeleteReservationPositionMessage_Response::ArenaDtor(void* object) {
  CStore_DeleteReservationPositionMessage_Response* _this = reinterpret_cast< CStore_DeleteReservationPositionMessage_Response* >(object);
  (void)_this;
}
void CStore_DeleteReservationPositionMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_DeleteReservationPositionMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_DeleteReservationPositionMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_DeleteReservationPositionMessage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_DeleteReservationPositionMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_DeleteReservationPositionMessage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_DeleteReservationPositionMessage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_DeleteReservationPositionMessage_Response)
  return target;
}

size_t CStore_DeleteReservationPositionMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_DeleteReservationPositionMessage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_DeleteReservationPositionMessage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_DeleteReservationPositionMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_DeleteReservationPositionMessage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_DeleteReservationPositionMessage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_DeleteReservationPositionMessage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_DeleteReservationPositionMessage_Response)
    MergeFrom(*source);
  }
}

void CStore_DeleteReservationPositionMessage_Response::MergeFrom(const CStore_DeleteReservationPositionMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_DeleteReservationPositionMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_DeleteReservationPositionMessage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_DeleteReservationPositionMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_DeleteReservationPositionMessage_Response::CopyFrom(const CStore_DeleteReservationPositionMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_DeleteReservationPositionMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_DeleteReservationPositionMessage_Response::IsInitialized() const {
  return true;
}

void CStore_DeleteReservationPositionMessage_Response::InternalSwap(CStore_DeleteReservationPositionMessage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_DeleteReservationPositionMessage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetAllReservationPositionMessages_Request::_Internal {
 public:
};

CStore_GetAllReservationPositionMessages_Request::CStore_GetAllReservationPositionMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetAllReservationPositionMessages_Request)
}
CStore_GetAllReservationPositionMessages_Request::CStore_GetAllReservationPositionMessages_Request(const CStore_GetAllReservationPositionMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetAllReservationPositionMessages_Request)
}

void CStore_GetAllReservationPositionMessages_Request::SharedCtor() {
}

CStore_GetAllReservationPositionMessages_Request::~CStore_GetAllReservationPositionMessages_Request() {
  // @@protoc_insertion_point(destructor:CStore_GetAllReservationPositionMessages_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetAllReservationPositionMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetAllReservationPositionMessages_Request::ArenaDtor(void* object) {
  CStore_GetAllReservationPositionMessages_Request* _this = reinterpret_cast< CStore_GetAllReservationPositionMessages_Request* >(object);
  (void)_this;
}
void CStore_GetAllReservationPositionMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetAllReservationPositionMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetAllReservationPositionMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetAllReservationPositionMessages_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetAllReservationPositionMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetAllReservationPositionMessages_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetAllReservationPositionMessages_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetAllReservationPositionMessages_Request)
  return target;
}

size_t CStore_GetAllReservationPositionMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetAllReservationPositionMessages_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetAllReservationPositionMessages_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetAllReservationPositionMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetAllReservationPositionMessages_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetAllReservationPositionMessages_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetAllReservationPositionMessages_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetAllReservationPositionMessages_Request)
    MergeFrom(*source);
  }
}

void CStore_GetAllReservationPositionMessages_Request::MergeFrom(const CStore_GetAllReservationPositionMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetAllReservationPositionMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_GetAllReservationPositionMessages_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetAllReservationPositionMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetAllReservationPositionMessages_Request::CopyFrom(const CStore_GetAllReservationPositionMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetAllReservationPositionMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetAllReservationPositionMessages_Request::IsInitialized() const {
  return true;
}

void CStore_GetAllReservationPositionMessages_Request::InternalSwap(CStore_GetAllReservationPositionMessages_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetAllReservationPositionMessages_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_GetAllReservationPositionMessages_Response::_Internal {
 public:
};

CStore_GetAllReservationPositionMessages_Response::CStore_GetAllReservationPositionMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_GetAllReservationPositionMessages_Response)
}
CStore_GetAllReservationPositionMessages_Response::CStore_GetAllReservationPositionMessages_Response(const CStore_GetAllReservationPositionMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_GetAllReservationPositionMessages_Response)
}

void CStore_GetAllReservationPositionMessages_Response::SharedCtor() {
}

CStore_GetAllReservationPositionMessages_Response::~CStore_GetAllReservationPositionMessages_Response() {
  // @@protoc_insertion_point(destructor:CStore_GetAllReservationPositionMessages_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_GetAllReservationPositionMessages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_GetAllReservationPositionMessages_Response::ArenaDtor(void* object) {
  CStore_GetAllReservationPositionMessages_Response* _this = reinterpret_cast< CStore_GetAllReservationPositionMessages_Response* >(object);
  (void)_this;
}
void CStore_GetAllReservationPositionMessages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_GetAllReservationPositionMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_GetAllReservationPositionMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_GetAllReservationPositionMessages_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_GetAllReservationPositionMessages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CReservationPositionMessage settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_GetAllReservationPositionMessages_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_GetAllReservationPositionMessages_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CReservationPositionMessage settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_GetAllReservationPositionMessages_Response)
  return target;
}

size_t CStore_GetAllReservationPositionMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_GetAllReservationPositionMessages_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CReservationPositionMessage settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetAllReservationPositionMessages_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_GetAllReservationPositionMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetAllReservationPositionMessages_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_GetAllReservationPositionMessages_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_GetAllReservationPositionMessages_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_GetAllReservationPositionMessages_Response)
    MergeFrom(*source);
  }
}

void CStore_GetAllReservationPositionMessages_Response::MergeFrom(const CStore_GetAllReservationPositionMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_GetAllReservationPositionMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void CStore_GetAllReservationPositionMessages_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_GetAllReservationPositionMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetAllReservationPositionMessages_Response::CopyFrom(const CStore_GetAllReservationPositionMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_GetAllReservationPositionMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetAllReservationPositionMessages_Response::IsInitialized() const {
  return true;
}

void CStore_GetAllReservationPositionMessages_Response::InternalSwap(CStore_GetAllReservationPositionMessages_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_GetAllReservationPositionMessages_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_ReloadAllReservationPositionMessages_Notification::_Internal {
 public:
};

CStore_ReloadAllReservationPositionMessages_Notification::CStore_ReloadAllReservationPositionMessages_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_ReloadAllReservationPositionMessages_Notification)
}
CStore_ReloadAllReservationPositionMessages_Notification::CStore_ReloadAllReservationPositionMessages_Notification(const CStore_ReloadAllReservationPositionMessages_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStore_ReloadAllReservationPositionMessages_Notification)
}

void CStore_ReloadAllReservationPositionMessages_Notification::SharedCtor() {
}

CStore_ReloadAllReservationPositionMessages_Notification::~CStore_ReloadAllReservationPositionMessages_Notification() {
  // @@protoc_insertion_point(destructor:CStore_ReloadAllReservationPositionMessages_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_ReloadAllReservationPositionMessages_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStore_ReloadAllReservationPositionMessages_Notification::ArenaDtor(void* object) {
  CStore_ReloadAllReservationPositionMessages_Notification* _this = reinterpret_cast< CStore_ReloadAllReservationPositionMessages_Notification* >(object);
  (void)_this;
}
void CStore_ReloadAllReservationPositionMessages_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_ReloadAllReservationPositionMessages_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_ReloadAllReservationPositionMessages_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_ReloadAllReservationPositionMessages_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_ReloadAllReservationPositionMessages_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_ReloadAllReservationPositionMessages_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_ReloadAllReservationPositionMessages_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_ReloadAllReservationPositionMessages_Notification)
  return target;
}

size_t CStore_ReloadAllReservationPositionMessages_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_ReloadAllReservationPositionMessages_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_ReloadAllReservationPositionMessages_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_ReloadAllReservationPositionMessages_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_ReloadAllReservationPositionMessages_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_ReloadAllReservationPositionMessages_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_ReloadAllReservationPositionMessages_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_ReloadAllReservationPositionMessages_Notification)
    MergeFrom(*source);
  }
}

void CStore_ReloadAllReservationPositionMessages_Notification::MergeFrom(const CStore_ReloadAllReservationPositionMessages_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_ReloadAllReservationPositionMessages_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_ReloadAllReservationPositionMessages_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_ReloadAllReservationPositionMessages_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_ReloadAllReservationPositionMessages_Notification::CopyFrom(const CStore_ReloadAllReservationPositionMessages_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_ReloadAllReservationPositionMessages_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_ReloadAllReservationPositionMessages_Notification::IsInitialized() const {
  return true;
}

void CStore_ReloadAllReservationPositionMessages_Notification::InternalSwap(CStore_ReloadAllReservationPositionMessages_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_ReloadAllReservationPositionMessages_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamDeckCompatibility_SetFeedbacRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamDeckCompatibility_SetFeedbacRequest>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamDeckCompatibility_SetFeedbacRequest::CSteamDeckCompatibility_SetFeedbacRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamDeckCompatibility_SetFeedbacRequest)
}
CSteamDeckCompatibility_SetFeedbacRequest::CSteamDeckCompatibility_SetFeedbacRequest(const CSteamDeckCompatibility_SetFeedbacRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&feedback_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(feedback_));
  // @@protoc_insertion_point(copy_constructor:CSteamDeckCompatibility_SetFeedbacRequest)
}

void CSteamDeckCompatibility_SetFeedbacRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feedback_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(feedback_));
}

CSteamDeckCompatibility_SetFeedbacRequest::~CSteamDeckCompatibility_SetFeedbacRequest() {
  // @@protoc_insertion_point(destructor:CSteamDeckCompatibility_SetFeedbacRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamDeckCompatibility_SetFeedbacRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamDeckCompatibility_SetFeedbacRequest::ArenaDtor(void* object) {
  CSteamDeckCompatibility_SetFeedbacRequest* _this = reinterpret_cast< CSteamDeckCompatibility_SetFeedbacRequest* >(object);
  (void)_this;
}
void CSteamDeckCompatibility_SetFeedbacRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamDeckCompatibility_SetFeedbacRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamDeckCompatibility_SetFeedbacRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamDeckCompatibility_SetFeedbacRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feedback_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(feedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamDeckCompatibility_SetFeedbacRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ESteamDeckCompatibilityFeedback feedback = 2 [default = ESteamDeckCompatibilityFeedbacUnset];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamDeckCompatibilityFeedback_IsValid(val))) {
            _internal_set_feedback(static_cast<::ESteamDeckCompatibilityFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamDeckCompatibility_SetFeedbacRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamDeckCompatibility_SetFeedbacRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .ESteamDeckCompatibilityFeedback feedback = 2 [default = ESteamDeckCompatibilityFeedbacUnset];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_feedback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamDeckCompatibility_SetFeedbacRequest)
  return target;
}

size_t CSteamDeckCompatibility_SetFeedbacRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamDeckCompatibility_SetFeedbacRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional .ESteamDeckCompatibilityFeedback feedback = 2 [default = ESteamDeckCompatibilityFeedbacUnset];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_feedback());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamDeckCompatibility_SetFeedbacRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamDeckCompatibility_SetFeedbacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamDeckCompatibility_SetFeedbacRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamDeckCompatibility_SetFeedbacRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamDeckCompatibility_SetFeedbacRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamDeckCompatibility_SetFeedbacRequest)
    MergeFrom(*source);
  }
}

void CSteamDeckCompatibility_SetFeedbacRequest::MergeFrom(const CSteamDeckCompatibility_SetFeedbacRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamDeckCompatibility_SetFeedbacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      feedback_ = from.feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamDeckCompatibility_SetFeedbacRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamDeckCompatibility_SetFeedbacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamDeckCompatibility_SetFeedbacRequest::CopyFrom(const CSteamDeckCompatibility_SetFeedbacRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamDeckCompatibility_SetFeedbacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamDeckCompatibility_SetFeedbacRequest::IsInitialized() const {
  return true;
}

void CSteamDeckCompatibility_SetFeedbacRequest::InternalSwap(CSteamDeckCompatibility_SetFeedbacRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamDeckCompatibility_SetFeedbacRequest, feedback_)
      + sizeof(CSteamDeckCompatibility_SetFeedbacRequest::feedback_)
      - PROTOBUF_FIELD_OFFSET(CSteamDeckCompatibility_SetFeedbacRequest, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamDeckCompatibility_SetFeedbacRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamDeckCompatibility_SetFeedbacResponse::_Internal {
 public:
};

CSteamDeckCompatibility_SetFeedbacResponse::CSteamDeckCompatibility_SetFeedbacResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamDeckCompatibility_SetFeedbacResponse)
}
CSteamDeckCompatibility_SetFeedbacResponse::CSteamDeckCompatibility_SetFeedbacResponse(const CSteamDeckCompatibility_SetFeedbacResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamDeckCompatibility_SetFeedbacResponse)
}

void CSteamDeckCompatibility_SetFeedbacResponse::SharedCtor() {
}

CSteamDeckCompatibility_SetFeedbacResponse::~CSteamDeckCompatibility_SetFeedbacResponse() {
  // @@protoc_insertion_point(destructor:CSteamDeckCompatibility_SetFeedbacResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamDeckCompatibility_SetFeedbacResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamDeckCompatibility_SetFeedbacResponse::ArenaDtor(void* object) {
  CSteamDeckCompatibility_SetFeedbacResponse* _this = reinterpret_cast< CSteamDeckCompatibility_SetFeedbacResponse* >(object);
  (void)_this;
}
void CSteamDeckCompatibility_SetFeedbacResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamDeckCompatibility_SetFeedbacResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamDeckCompatibility_SetFeedbacResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamDeckCompatibility_SetFeedbacResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamDeckCompatibility_SetFeedbacResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamDeckCompatibility_SetFeedbacResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamDeckCompatibility_SetFeedbacResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamDeckCompatibility_SetFeedbacResponse)
  return target;
}

size_t CSteamDeckCompatibility_SetFeedbacResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamDeckCompatibility_SetFeedbacResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamDeckCompatibility_SetFeedbacResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamDeckCompatibility_SetFeedbacResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamDeckCompatibility_SetFeedbacResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamDeckCompatibility_SetFeedbacResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamDeckCompatibility_SetFeedbacResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamDeckCompatibility_SetFeedbacResponse)
    MergeFrom(*source);
  }
}

void CSteamDeckCompatibility_SetFeedbacResponse::MergeFrom(const CSteamDeckCompatibility_SetFeedbacResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamDeckCompatibility_SetFeedbacResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamDeckCompatibility_SetFeedbacResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamDeckCompatibility_SetFeedbacResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamDeckCompatibility_SetFeedbacResponse::CopyFrom(const CSteamDeckCompatibility_SetFeedbacResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamDeckCompatibility_SetFeedbacResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamDeckCompatibility_SetFeedbacResponse::IsInitialized() const {
  return true;
}

void CSteamDeckCompatibility_SetFeedbacResponse::InternalSwap(CSteamDeckCompatibility_SetFeedbacResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamDeckCompatibility_SetFeedbacResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamDeckCompatibility_ShouldPrompt_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamDeckCompatibility_ShouldPrompt_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamDeckCompatibility_ShouldPrompt_Request::CSteamDeckCompatibility_ShouldPrompt_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamDeckCompatibility_ShouldPrompt_Request)
}
CSteamDeckCompatibility_ShouldPrompt_Request::CSteamDeckCompatibility_ShouldPrompt_Request(const CSteamDeckCompatibility_ShouldPrompt_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CSteamDeckCompatibility_ShouldPrompt_Request)
}

void CSteamDeckCompatibility_ShouldPrompt_Request::SharedCtor() {
appid_ = 0u;
}

CSteamDeckCompatibility_ShouldPrompt_Request::~CSteamDeckCompatibility_ShouldPrompt_Request() {
  // @@protoc_insertion_point(destructor:CSteamDeckCompatibility_ShouldPrompt_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamDeckCompatibility_ShouldPrompt_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamDeckCompatibility_ShouldPrompt_Request::ArenaDtor(void* object) {
  CSteamDeckCompatibility_ShouldPrompt_Request* _this = reinterpret_cast< CSteamDeckCompatibility_ShouldPrompt_Request* >(object);
  (void)_this;
}
void CSteamDeckCompatibility_ShouldPrompt_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamDeckCompatibility_ShouldPrompt_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamDeckCompatibility_ShouldPrompt_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamDeckCompatibility_ShouldPrompt_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamDeckCompatibility_ShouldPrompt_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamDeckCompatibility_ShouldPrompt_Request)
  return target;
}

size_t CSteamDeckCompatibility_ShouldPrompt_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamDeckCompatibility_ShouldPrompt_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamDeckCompatibility_ShouldPrompt_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamDeckCompatibility_ShouldPrompt_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamDeckCompatibility_ShouldPrompt_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamDeckCompatibility_ShouldPrompt_Request)
    MergeFrom(*source);
  }
}

void CSteamDeckCompatibility_ShouldPrompt_Request::MergeFrom(const CSteamDeckCompatibility_ShouldPrompt_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CSteamDeckCompatibility_ShouldPrompt_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamDeckCompatibility_ShouldPrompt_Request::CopyFrom(const CSteamDeckCompatibility_ShouldPrompt_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamDeckCompatibility_ShouldPrompt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamDeckCompatibility_ShouldPrompt_Request::IsInitialized() const {
  return true;
}

void CSteamDeckCompatibility_ShouldPrompt_Request::InternalSwap(CSteamDeckCompatibility_ShouldPrompt_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamDeckCompatibility_ShouldPrompt_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamDeckCompatibility_ShouldPrompt_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamDeckCompatibility_ShouldPrompt_Response>()._has_bits_);
  static void set_has_prompt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feedbaceligible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_existing_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamDeckCompatibility_ShouldPrompt_Response::CSteamDeckCompatibility_ShouldPrompt_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamDeckCompatibility_ShouldPrompt_Response)
}
CSteamDeckCompatibility_ShouldPrompt_Response::CSteamDeckCompatibility_ShouldPrompt_Response(const CSteamDeckCompatibility_ShouldPrompt_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prompt_, &from.prompt_,
    static_cast<size_t>(reinterpret_cast<char*>(&existing_feedback_) -
    reinterpret_cast<char*>(&prompt_)) + sizeof(existing_feedback_));
  // @@protoc_insertion_point(copy_constructor:CSteamDeckCompatibility_ShouldPrompt_Response)
}

void CSteamDeckCompatibility_ShouldPrompt_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prompt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&existing_feedback_) -
    reinterpret_cast<char*>(&prompt_)) + sizeof(existing_feedback_));
}

CSteamDeckCompatibility_ShouldPrompt_Response::~CSteamDeckCompatibility_ShouldPrompt_Response() {
  // @@protoc_insertion_point(destructor:CSteamDeckCompatibility_ShouldPrompt_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamDeckCompatibility_ShouldPrompt_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamDeckCompatibility_ShouldPrompt_Response::ArenaDtor(void* object) {
  CSteamDeckCompatibility_ShouldPrompt_Response* _this = reinterpret_cast< CSteamDeckCompatibility_ShouldPrompt_Response* >(object);
  (void)_this;
}
void CSteamDeckCompatibility_ShouldPrompt_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamDeckCompatibility_ShouldPrompt_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamDeckCompatibility_ShouldPrompt_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&prompt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&existing_feedback_) -
        reinterpret_cast<char*>(&prompt_)) + sizeof(existing_feedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamDeckCompatibility_ShouldPrompt_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool prompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prompt(&has_bits);
          prompt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool feedbaceligible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_feedbaceligible(&has_bits);
          feedbaceligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ESteamDeckCompatibilityFeedback existing_feedback = 3 [default = ESteamDeckCompatibilityFeedbacUnset];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamDeckCompatibilityFeedback_IsValid(val))) {
            _internal_set_existing_feedback(static_cast<::ESteamDeckCompatibilityFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamDeckCompatibility_ShouldPrompt_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool prompt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_prompt(), target);
  }

  // optional bool feedbaceligible = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_feedbaceligible(), target);
  }

  // optional .ESteamDeckCompatibilityFeedback existing_feedback = 3 [default = ESteamDeckCompatibilityFeedbacUnset];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_existing_feedback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamDeckCompatibility_ShouldPrompt_Response)
  return target;
}

size_t CSteamDeckCompatibility_ShouldPrompt_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool prompt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool feedbaceligible = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .ESteamDeckCompatibilityFeedback existing_feedback = 3 [default = ESteamDeckCompatibilityFeedbacUnset];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_existing_feedback());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamDeckCompatibility_ShouldPrompt_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamDeckCompatibility_ShouldPrompt_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamDeckCompatibility_ShouldPrompt_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamDeckCompatibility_ShouldPrompt_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamDeckCompatibility_ShouldPrompt_Response)
    MergeFrom(*source);
  }
}

void CSteamDeckCompatibility_ShouldPrompt_Response::MergeFrom(const CSteamDeckCompatibility_ShouldPrompt_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      prompt_ = from.prompt_;
    }
    if (cached_has_bits & 0x00000002u) {
      feedbaceligible_ = from.feedbaceligible_;
    }
    if (cached_has_bits & 0x00000004u) {
      existing_feedback_ = from.existing_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamDeckCompatibility_ShouldPrompt_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamDeckCompatibility_ShouldPrompt_Response::CopyFrom(const CSteamDeckCompatibility_ShouldPrompt_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamDeckCompatibility_ShouldPrompt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamDeckCompatibility_ShouldPrompt_Response::IsInitialized() const {
  return true;
}

void CSteamDeckCompatibility_ShouldPrompt_Response::InternalSwap(CSteamDeckCompatibility_ShouldPrompt_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamDeckCompatibility_ShouldPrompt_Response, existing_feedback_)
      + sizeof(CSteamDeckCompatibility_ShouldPrompt_Response::existing_feedback_)
      - PROTOBUF_FIELD_OFFSET(CSteamDeckCompatibility_ShouldPrompt_Response, prompt_)>(
          reinterpret_cast<char*>(&prompt_),
          reinterpret_cast<char*>(&other->prompt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamDeckCompatibility_ShouldPrompt_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStore_StorePreferencesChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CStore_StorePreferencesChanged_Notification>()._has_bits_);
  static const ::CStore_UserPreferences& preferences(const CStore_StorePreferencesChanged_Notification* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CStore_UserTagPreferences& tag_preferences(const CStore_StorePreferencesChanged_Notification* msg);
  static void set_has_tag_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::UserContentDescriptorPreferences& content_descriptor_preferences(const CStore_StorePreferencesChanged_Notification* msg);
  static void set_has_content_descriptor_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CStore_UserPreferences&
CStore_StorePreferencesChanged_Notification::_Internal::preferences(const CStore_StorePreferencesChanged_Notification* msg) {
  return *msg->preferences_;
}
const ::CStore_UserTagPreferences&
CStore_StorePreferencesChanged_Notification::_Internal::tag_preferences(const CStore_StorePreferencesChanged_Notification* msg) {
  return *msg->tag_preferences_;
}
const ::UserContentDescriptorPreferences&
CStore_StorePreferencesChanged_Notification::_Internal::content_descriptor_preferences(const CStore_StorePreferencesChanged_Notification* msg) {
  return *msg->content_descriptor_preferences_;
}
void CStore_StorePreferencesChanged_Notification::clear_content_descriptor_preferences() {
  if (content_descriptor_preferences_ != nullptr) content_descriptor_preferences_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CStore_StorePreferencesChanged_Notification::CStore_StorePreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStore_StorePreferencesChanged_Notification)
}
CStore_StorePreferencesChanged_Notification::CStore_StorePreferencesChanged_Notification(const CStore_StorePreferencesChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CStore_UserPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  if (from._internal_has_tag_preferences()) {
    tag_preferences_ = new ::CStore_UserTagPreferences(*from.tag_preferences_);
  } else {
    tag_preferences_ = nullptr;
  }
  if (from._internal_has_content_descriptor_preferences()) {
    content_descriptor_preferences_ = new ::UserContentDescriptorPreferences(*from.content_descriptor_preferences_);
  } else {
    content_descriptor_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CStore_StorePreferencesChanged_Notification)
}

void CStore_StorePreferencesChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_descriptor_preferences_) -
    reinterpret_cast<char*>(&preferences_)) + sizeof(content_descriptor_preferences_));
}

CStore_StorePreferencesChanged_Notification::~CStore_StorePreferencesChanged_Notification() {
  // @@protoc_insertion_point(destructor:CStore_StorePreferencesChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStore_StorePreferencesChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
  if (this != internal_default_instance()) delete tag_preferences_;
  if (this != internal_default_instance()) delete content_descriptor_preferences_;
}

void CStore_StorePreferencesChanged_Notification::ArenaDtor(void* object) {
  CStore_StorePreferencesChanged_Notification* _this = reinterpret_cast< CStore_StorePreferencesChanged_Notification* >(object);
  (void)_this;
}
void CStore_StorePreferencesChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStore_StorePreferencesChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStore_StorePreferencesChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CStore_StorePreferencesChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferences_ != nullptr);
      preferences_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tag_preferences_ != nullptr);
      tag_preferences_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(content_descriptor_preferences_ != nullptr);
      content_descriptor_preferences_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStore_StorePreferencesChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CStore_UserPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStore_UserTagPreferences tag_preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_descriptor_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStore_StorePreferencesChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStore_StorePreferencesChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CStore_UserPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  // optional .CStore_UserTagPreferences tag_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tag_preferences(this), target, stream);
  }

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content_descriptor_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStore_StorePreferencesChanged_Notification)
  return target;
}

size_t CStore_StorePreferencesChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStore_StorePreferencesChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CStore_UserPreferences preferences = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional .CStore_UserTagPreferences tag_preferences = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tag_preferences_);
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_descriptor_preferences_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_StorePreferencesChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStore_StorePreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_StorePreferencesChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStore_StorePreferencesChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStore_StorePreferencesChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStore_StorePreferencesChanged_Notification)
    MergeFrom(*source);
  }
}

void CStore_StorePreferencesChanged_Notification::MergeFrom(const CStore_StorePreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStore_StorePreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preferences()->::CStore_UserPreferences::MergeFrom(from._internal_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tag_preferences()->::CStore_UserTagPreferences::MergeFrom(from._internal_tag_preferences());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_content_descriptor_preferences()->::UserContentDescriptorPreferences::MergeFrom(from._internal_content_descriptor_preferences());
    }
  }
}

void CStore_StorePreferencesChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStore_StorePreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_StorePreferencesChanged_Notification::CopyFrom(const CStore_StorePreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStore_StorePreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_StorePreferencesChanged_Notification::IsInitialized() const {
  return true;
}

void CStore_StorePreferencesChanged_Notification::InternalSwap(CStore_StorePreferencesChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStore_StorePreferencesChanged_Notification, content_descriptor_preferences_)
      + sizeof(CStore_StorePreferencesChanged_Notification::content_descriptor_preferences_)
      - PROTOBUF_FIELD_OFFSET(CStore_StorePreferencesChanged_Notification, preferences_)>(
          reinterpret_cast<char*>(&preferences_),
          reinterpret_cast<char*>(&other->preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStore_StorePreferencesChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Store::~Store() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Store::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Store::GetDescriptor() {
  return descriptor();
}

void Store::RegisterCDKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_RegisterCDKey_Request*,
                         ::CStore_RegisterCDKey_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterCDKey() not implemented.");
  done->Run();
}

void Store::GetMostPopularTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetMostPopularTags_Request*,
                         ::CStore_GetMostPopularTags_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMostPopularTags() not implemented.");
  done->Run();
}

void Store::GetLocalizedNameForTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetLocalizedNameForTags_Request*,
                         ::CStore_GetLocalizedNameForTags_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLocalizedNameForTags() not implemented.");
  done->Run();
}

void Store::GetTagList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetTagList_Request*,
                         ::CStore_GetTagList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTagList() not implemented.");
  done->Run();
}

void Store::GetDiscoveryQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetDiscoveryQueue_Request*,
                         ::CStore_GetDiscoveryQueue_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDiscoveryQueue() not implemented.");
  done->Run();
}

void Store::GetDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetDiscoveryQueueSettings_Request*,
                         ::CStore_GetDiscoveryQueueSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDiscoveryQueueSettings() not implemented.");
  done->Run();
}

void Store::SkipDiscoveryQueueItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_SkipDiscoveryQueueItem_Request*,
                         ::CStore_SkipDiscoveryQueueItem_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SkipDiscoveryQueueItem() not implemented.");
  done->Run();
}

void Store::GetUserGameInterestState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetUserGameInterestState_Request*,
                         ::CStore_GetUserGameInterestState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserGameInterestState() not implemented.");
  done->Run();
}

void Store::GetDiscoveryQueueSkippedApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetDiscoveryQueueSkippedApps_Request*,
                         ::CStore_GetDiscoveryQueueSkippedApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDiscoveryQueueSkippedApps() not implemented.");
  done->Run();
}

void Store::ReportApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_ReportApp_Request*,
                         ::CStore_ReportApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportApp() not implemented.");
  done->Run();
}

void Store::GetStorePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetStorePreferences_Request*,
                         ::CStore_GetStorePreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStorePreferences() not implemented.");
  done->Run();
}

void Store::GetTrendingAppsAmongFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetTrendingAppsAmongFriends_Request*,
                         ::CStore_GetTrendingAppsAmongFriends_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTrendingAppsAmongFriends() not implemented.");
  done->Run();
}

void Store::MigratePartnerLinkTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_MigratePartnerLinkTracking_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MigratePartnerLinkTracking() not implemented.");
  done->Run();
}

void Store::UpdatePackageReservations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_UpdatePackageReservations_Request*,
                         ::CStore_UpdatePackageReservations_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdatePackageReservations() not implemented.");
  done->Run();
}

void Store::SetReservationPositionMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_SetReservationPositionMessage_Request*,
                         ::CStore_SetReservationPositionMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetReservationPositionMessage() not implemented.");
  done->Run();
}

void Store::DeleteReservationPositionMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_DeleteReservationPositionMessage_Request*,
                         ::CStore_DeleteReservationPositionMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteReservationPositionMessage() not implemented.");
  done->Run();
}

void Store::GetAllReservationPositionMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_GetAllReservationPositionMessages_Request*,
                         ::CStore_GetAllReservationPositionMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAllReservationPositionMessages() not implemented.");
  done->Run();
}

void Store::ReloadAllReservationPositionMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_ReloadAllReservationPositionMessages_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReloadAllReservationPositionMessages() not implemented.");
  done->Run();
}

void Store::SetCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamDeckCompatibility_SetFeedbacRequest*,
                         ::CSteamDeckCompatibility_SetFeedbacResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCompatibilityFeedback() not implemented.");
  done->Run();
}

void Store::ShouldPromptForCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamDeckCompatibility_ShouldPrompt_Request*,
                         ::CSteamDeckCompatibility_ShouldPrompt_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShouldPromptForCompatibilityFeedback() not implemented.");
  done->Run();
}

void Store::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      RegisterCDKey(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_RegisterCDKey_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_RegisterCDKey_Response*>(
                 response),
             done);
      break;
    case 1:
      GetMostPopularTags(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetMostPopularTags_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetMostPopularTags_Response*>(
                 response),
             done);
      break;
    case 2:
      GetLocalizedNameForTags(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetLocalizedNameForTags_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetLocalizedNameForTags_Response*>(
                 response),
             done);
      break;
    case 3:
      GetTagList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetTagList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetTagList_Response*>(
                 response),
             done);
      break;
    case 4:
      GetDiscoveryQueue(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetDiscoveryQueue_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetDiscoveryQueue_Response*>(
                 response),
             done);
      break;
    case 5:
      GetDiscoveryQueueSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetDiscoveryQueueSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetDiscoveryQueueSettings_Response*>(
                 response),
             done);
      break;
    case 6:
      SkipDiscoveryQueueItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_SkipDiscoveryQueueItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_SkipDiscoveryQueueItem_Response*>(
                 response),
             done);
      break;
    case 7:
      GetUserGameInterestState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetUserGameInterestState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetUserGameInterestState_Response*>(
                 response),
             done);
      break;
    case 8:
      GetDiscoveryQueueSkippedApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetDiscoveryQueueSkippedApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetDiscoveryQueueSkippedApps_Response*>(
                 response),
             done);
      break;
    case 9:
      ReportApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_ReportApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_ReportApp_Response*>(
                 response),
             done);
      break;
    case 10:
      GetStorePreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetStorePreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetStorePreferences_Response*>(
                 response),
             done);
      break;
    case 11:
      GetTrendingAppsAmongFriends(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetTrendingAppsAmongFriends_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetTrendingAppsAmongFriends_Response*>(
                 response),
             done);
      break;
    case 12:
      MigratePartnerLinkTracking(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_MigratePartnerLinkTracking_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 13:
      UpdatePackageReservations(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_UpdatePackageReservations_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_UpdatePackageReservations_Response*>(
                 response),
             done);
      break;
    case 14:
      SetReservationPositionMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_SetReservationPositionMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_SetReservationPositionMessage_Response*>(
                 response),
             done);
      break;
    case 15:
      DeleteReservationPositionMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_DeleteReservationPositionMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_DeleteReservationPositionMessage_Response*>(
                 response),
             done);
      break;
    case 16:
      GetAllReservationPositionMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_GetAllReservationPositionMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStore_GetAllReservationPositionMessages_Response*>(
                 response),
             done);
      break;
    case 17:
      ReloadAllReservationPositionMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_ReloadAllReservationPositionMessages_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 18:
      SetCompatibilityFeedback(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamDeckCompatibility_SetFeedbacRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamDeckCompatibility_SetFeedbacResponse*>(
                 response),
             done);
      break;
    case 19:
      ShouldPromptForCompatibilityFeedback(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamDeckCompatibility_ShouldPrompt_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamDeckCompatibility_ShouldPrompt_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Store::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CStore_RegisterCDKey_Request::default_instance();
    case 1:
      return ::CStore_GetMostPopularTags_Request::default_instance();
    case 2:
      return ::CStore_GetLocalizedNameForTags_Request::default_instance();
    case 3:
      return ::CStore_GetTagList_Request::default_instance();
    case 4:
      return ::CStore_GetDiscoveryQueue_Request::default_instance();
    case 5:
      return ::CStore_GetDiscoveryQueueSettings_Request::default_instance();
    case 6:
      return ::CStore_SkipDiscoveryQueueItem_Request::default_instance();
    case 7:
      return ::CStore_GetUserGameInterestState_Request::default_instance();
    case 8:
      return ::CStore_GetDiscoveryQueueSkippedApps_Request::default_instance();
    case 9:
      return ::CStore_ReportApp_Request::default_instance();
    case 10:
      return ::CStore_GetStorePreferences_Request::default_instance();
    case 11:
      return ::CStore_GetTrendingAppsAmongFriends_Request::default_instance();
    case 12:
      return ::CStore_MigratePartnerLinkTracking_Notification::default_instance();
    case 13:
      return ::CStore_UpdatePackageReservations_Request::default_instance();
    case 14:
      return ::CStore_SetReservationPositionMessage_Request::default_instance();
    case 15:
      return ::CStore_DeleteReservationPositionMessage_Request::default_instance();
    case 16:
      return ::CStore_GetAllReservationPositionMessages_Request::default_instance();
    case 17:
      return ::CStore_ReloadAllReservationPositionMessages_Notification::default_instance();
    case 18:
      return ::CSteamDeckCompatibility_SetFeedbacRequest::default_instance();
    case 19:
      return ::CSteamDeckCompatibility_ShouldPrompt_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Store::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CStore_RegisterCDKey_Response::default_instance();
    case 1:
      return ::CStore_GetMostPopularTags_Response::default_instance();
    case 2:
      return ::CStore_GetLocalizedNameForTags_Response::default_instance();
    case 3:
      return ::CStore_GetTagList_Response::default_instance();
    case 4:
      return ::CStore_GetDiscoveryQueue_Response::default_instance();
    case 5:
      return ::CStore_GetDiscoveryQueueSettings_Response::default_instance();
    case 6:
      return ::CStore_SkipDiscoveryQueueItem_Response::default_instance();
    case 7:
      return ::CStore_GetUserGameInterestState_Response::default_instance();
    case 8:
      return ::CStore_GetDiscoveryQueueSkippedApps_Response::default_instance();
    case 9:
      return ::CStore_ReportApp_Response::default_instance();
    case 10:
      return ::CStore_GetStorePreferences_Response::default_instance();
    case 11:
      return ::CStore_GetTrendingAppsAmongFriends_Response::default_instance();
    case 12:
      return ::NoResponse::default_instance();
    case 13:
      return ::CStore_UpdatePackageReservations_Response::default_instance();
    case 14:
      return ::CStore_SetReservationPositionMessage_Response::default_instance();
    case 15:
      return ::CStore_DeleteReservationPositionMessage_Response::default_instance();
    case 16:
      return ::CStore_GetAllReservationPositionMessages_Response::default_instance();
    case 17:
      return ::NoResponse::default_instance();
    case 18:
      return ::CSteamDeckCompatibility_SetFeedbacResponse::default_instance();
    case 19:
      return ::CSteamDeckCompatibility_ShouldPrompt_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Store_Stub::Store_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Store_Stub::Store_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Store_Stub::~Store_Stub() {
  if (owns_channel_) delete channel_;
}

void Store_Stub::RegisterCDKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_RegisterCDKey_Request* request,
                              ::CStore_RegisterCDKey_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Store_Stub::GetMostPopularTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetMostPopularTags_Request* request,
                              ::CStore_GetMostPopularTags_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Store_Stub::GetLocalizedNameForTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetLocalizedNameForTags_Request* request,
                              ::CStore_GetLocalizedNameForTags_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Store_Stub::GetTagList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetTagList_Request* request,
                              ::CStore_GetTagList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Store_Stub::GetDiscoveryQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetDiscoveryQueue_Request* request,
                              ::CStore_GetDiscoveryQueue_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Store_Stub::GetDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetDiscoveryQueueSettings_Request* request,
                              ::CStore_GetDiscoveryQueueSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Store_Stub::SkipDiscoveryQueueItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_SkipDiscoveryQueueItem_Request* request,
                              ::CStore_SkipDiscoveryQueueItem_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Store_Stub::GetUserGameInterestState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetUserGameInterestState_Request* request,
                              ::CStore_GetUserGameInterestState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Store_Stub::GetDiscoveryQueueSkippedApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetDiscoveryQueueSkippedApps_Request* request,
                              ::CStore_GetDiscoveryQueueSkippedApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Store_Stub::ReportApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_ReportApp_Request* request,
                              ::CStore_ReportApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Store_Stub::GetStorePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetStorePreferences_Request* request,
                              ::CStore_GetStorePreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Store_Stub::GetTrendingAppsAmongFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetTrendingAppsAmongFriends_Request* request,
                              ::CStore_GetTrendingAppsAmongFriends_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Store_Stub::MigratePartnerLinkTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_MigratePartnerLinkTracking_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Store_Stub::UpdatePackageReservations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_UpdatePackageReservations_Request* request,
                              ::CStore_UpdatePackageReservations_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Store_Stub::SetReservationPositionMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_SetReservationPositionMessage_Request* request,
                              ::CStore_SetReservationPositionMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Store_Stub::DeleteReservationPositionMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_DeleteReservationPositionMessage_Request* request,
                              ::CStore_DeleteReservationPositionMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Store_Stub::GetAllReservationPositionMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_GetAllReservationPositionMessages_Request* request,
                              ::CStore_GetAllReservationPositionMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Store_Stub::ReloadAllReservationPositionMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_ReloadAllReservationPositionMessages_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Store_Stub::SetCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamDeckCompatibility_SetFeedbacRequest* request,
                              ::CSteamDeckCompatibility_SetFeedbacResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Store_Stub::ShouldPromptForCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamDeckCompatibility_ShouldPrompt_Request* request,
                              ::CSteamDeckCompatibility_ShouldPrompt_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
// ===================================================================

StoreClient::~StoreClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StoreClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StoreClient::GetDescriptor() {
  return descriptor();
}

void StoreClient::NotifyStorePreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStore_StorePreferencesChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStorePreferencesChanged() not implemented.");
  done->Run();
}

void StoreClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyStorePreferencesChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStore_StorePreferencesChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StoreClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CStore_StorePreferencesChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StoreClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StoreClient_Stub::StoreClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StoreClient_Stub::StoreClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
StoreClient_Stub::~StoreClient_Stub() {
  if (owns_channel_) delete channel_;
}

void StoreClient_Stub::NotifyStorePreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStore_StorePreferencesChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CStore_RegisterCDKey_Request* Arena::CreateMaybeMessage< ::CStore_RegisterCDKey_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_RegisterCDKey_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_PurchaseReceiptInfo_LineItem* Arena::CreateMaybeMessage< ::CStore_PurchaseReceiptInfo_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_PurchaseReceiptInfo_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_PurchaseReceiptInfo* Arena::CreateMaybeMessage< ::CStore_PurchaseReceiptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_PurchaseReceiptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_RegisterCDKey_Response* Arena::CreateMaybeMessage< ::CStore_RegisterCDKey_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_RegisterCDKey_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetMostPopularTags_Request* Arena::CreateMaybeMessage< ::CStore_GetMostPopularTags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetMostPopularTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetMostPopularTags_Response_Tag* Arena::CreateMaybeMessage< ::CStore_GetMostPopularTags_Response_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetMostPopularTags_Response_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetMostPopularTags_Response* Arena::CreateMaybeMessage< ::CStore_GetMostPopularTags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetMostPopularTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetLocalizedNameForTags_Request* Arena::CreateMaybeMessage< ::CStore_GetLocalizedNameForTags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetLocalizedNameForTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetLocalizedNameForTags_Response_Tag* Arena::CreateMaybeMessage< ::CStore_GetLocalizedNameForTags_Response_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetLocalizedNameForTags_Response_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetLocalizedNameForTags_Response* Arena::CreateMaybeMessage< ::CStore_GetLocalizedNameForTags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetLocalizedNameForTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTagList_Request* Arena::CreateMaybeMessage< ::CStore_GetTagList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTagList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTagList_Response_Tag* Arena::CreateMaybeMessage< ::CStore_GetTagList_Response_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTagList_Response_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTagList_Response* Arena::CreateMaybeMessage< ::CStore_GetTagList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTagList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStoreDiscoveryQueueSettings* Arena::CreateMaybeMessage< ::CStoreDiscoveryQueueSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStoreDiscoveryQueueSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueue_Request* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueue_Response* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueueSettings_Request* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueueSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueueSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueueSettings_Response* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueueSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueueSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_SkipDiscoveryQueueItem_Request* Arena::CreateMaybeMessage< ::CStore_SkipDiscoveryQueueItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_SkipDiscoveryQueueItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_SkipDiscoveryQueueItem_Response* Arena::CreateMaybeMessage< ::CStore_SkipDiscoveryQueueItem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_SkipDiscoveryQueueItem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetUserGameInterestState_Request* Arena::CreateMaybeMessage< ::CStore_GetUserGameInterestState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetUserGameInterestState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetUserGameInterestState_Response_InQueue* Arena::CreateMaybeMessage< ::CStore_GetUserGameInterestState_Response_InQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetUserGameInterestState_Response_InQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetUserGameInterestState_Response* Arena::CreateMaybeMessage< ::CStore_GetUserGameInterestState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetUserGameInterestState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueueSkippedApps_Request* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueueSkippedApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueueSkippedApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetDiscoveryQueueSkippedApps_Response* Arena::CreateMaybeMessage< ::CStore_GetDiscoveryQueueSkippedApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetDiscoveryQueueSkippedApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_ReportApp_Request* Arena::CreateMaybeMessage< ::CStore_ReportApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_ReportApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_ReportApp_Response* Arena::CreateMaybeMessage< ::CStore_ReportApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_ReportApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetStorePreferences_Request* Arena::CreateMaybeMessage< ::CStore_GetStorePreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetStorePreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_UserPreferences* Arena::CreateMaybeMessage< ::CStore_UserPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_UserPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_UserTagPreferences_Tag* Arena::CreateMaybeMessage< ::CStore_UserTagPreferences_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_UserTagPreferences_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_UserTagPreferences* Arena::CreateMaybeMessage< ::CStore_UserTagPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_UserTagPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetStorePreferences_Response* Arena::CreateMaybeMessage< ::CStore_GetStorePreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetStorePreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTrendingAppsAmongFriends_Request* Arena::CreateMaybeMessage< ::CStore_GetTrendingAppsAmongFriends_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTrendingAppsAmongFriends_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* Arena::CreateMaybeMessage< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetTrendingAppsAmongFriends_Response* Arena::CreateMaybeMessage< ::CStore_GetTrendingAppsAmongFriends_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetTrendingAppsAmongFriends_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_MigratePartnerLinkTracking_Notification* Arena::CreateMaybeMessage< ::CStore_MigratePartnerLinkTracking_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_MigratePartnerLinkTracking_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_UpdatePackageReservations_Request* Arena::CreateMaybeMessage< ::CStore_UpdatePackageReservations_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_UpdatePackageReservations_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_UpdatePackageReservations_Response* Arena::CreateMaybeMessage< ::CStore_UpdatePackageReservations_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_UpdatePackageReservations_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CReservationPositionMessage* Arena::CreateMaybeMessage< ::CReservationPositionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CReservationPositionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_SetReservationPositionMessage_Request* Arena::CreateMaybeMessage< ::CStore_SetReservationPositionMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_SetReservationPositionMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_SetReservationPositionMessage_Response* Arena::CreateMaybeMessage< ::CStore_SetReservationPositionMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_SetReservationPositionMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_DeleteReservationPositionMessage_Request* Arena::CreateMaybeMessage< ::CStore_DeleteReservationPositionMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_DeleteReservationPositionMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_DeleteReservationPositionMessage_Response* Arena::CreateMaybeMessage< ::CStore_DeleteReservationPositionMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_DeleteReservationPositionMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetAllReservationPositionMessages_Request* Arena::CreateMaybeMessage< ::CStore_GetAllReservationPositionMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetAllReservationPositionMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_GetAllReservationPositionMessages_Response* Arena::CreateMaybeMessage< ::CStore_GetAllReservationPositionMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_GetAllReservationPositionMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_ReloadAllReservationPositionMessages_Notification* Arena::CreateMaybeMessage< ::CStore_ReloadAllReservationPositionMessages_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_ReloadAllReservationPositionMessages_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamDeckCompatibility_SetFeedbacRequest* Arena::CreateMaybeMessage< ::CSteamDeckCompatibility_SetFeedbacRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamDeckCompatibility_SetFeedbacRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamDeckCompatibility_SetFeedbacResponse* Arena::CreateMaybeMessage< ::CSteamDeckCompatibility_SetFeedbacResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamDeckCompatibility_SetFeedbacResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamDeckCompatibility_ShouldPrompt_Request* Arena::CreateMaybeMessage< ::CSteamDeckCompatibility_ShouldPrompt_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamDeckCompatibility_ShouldPrompt_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamDeckCompatibility_ShouldPrompt_Response* Arena::CreateMaybeMessage< ::CSteamDeckCompatibility_ShouldPrompt_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamDeckCompatibility_ShouldPrompt_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStore_StorePreferencesChanged_Notification* Arena::CreateMaybeMessage< ::CStore_StorePreferencesChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStore_StorePreferencesChanged_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
