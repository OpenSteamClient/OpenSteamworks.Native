// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_timedtrial.steamclient.proto

#include "steammessages_timedtrial.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CTimedTrial_GetTimeRemaining_Request::CTimedTrial_GetTimeRemaining_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal {
  constexpr CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal() {}
  union {
    CTimedTrial_GetTimeRemaining_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal _CTimedTrial_GetTimeRemaining_Request_default_instance_;
constexpr CTimedTrial_GetTimeRemaining_Response::CTimedTrial_GetTimeRemaining_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_played_(0u)
  , seconds_allowed_(0u)
  , packageid_(0u)
  , mastersub_appid_(0u){}
struct CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal {
  constexpr CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal() {}
  union {
    CTimedTrial_GetTimeRemaining_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal _CTimedTrial_GetTimeRemaining_Response_default_instance_;
constexpr CTimedTrial_RecordPlaytime_Request::CTimedTrial_RecordPlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , seconds_played_(0u){}
struct CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal {
  constexpr CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal() {}
  union {
    CTimedTrial_RecordPlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal _CTimedTrial_RecordPlaytime_Request_default_instance_;
constexpr CTimedTrial_RecordPlaytime_Response::CTimedTrial_RecordPlaytime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_played_(0u)
  , seconds_allowed_(0u){}
struct CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal {
  constexpr CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal() {}
  union {
    CTimedTrial_RecordPlaytime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal _CTimedTrial_RecordPlaytime_Response_default_instance_;
constexpr CTimedTrial_ResetPlaytime_Request::CTimedTrial_ResetPlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal {
  constexpr CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal() {}
  union {
    CTimedTrial_ResetPlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal _CTimedTrial_ResetPlaytime_Request_default_instance_;
constexpr CTimedTrial_ResetPlaytime_Response::CTimedTrial_ResetPlaytime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_played_(0u)
  , seconds_allowed_(0u){}
struct CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal {
  constexpr CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal() {}
  union {
    CTimedTrial_ResetPlaytime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal _CTimedTrial_ResetPlaytime_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5ftimedtrial_2esteamclient_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, seconds_played_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, seconds_allowed_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, packageid_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_GetTimeRemaining_Response, mastersub_appid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Request, seconds_played_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Response, seconds_played_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_RecordPlaytime_Response, seconds_allowed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Response, seconds_played_),
  PROTOBUF_FIELD_OFFSET(::CTimedTrial_ResetPlaytime_Response, seconds_allowed_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CTimedTrial_GetTimeRemaining_Request)},
  { 7, 16, sizeof(::CTimedTrial_GetTimeRemaining_Response)},
  { 20, 27, sizeof(::CTimedTrial_RecordPlaytime_Request)},
  { 29, 36, sizeof(::CTimedTrial_RecordPlaytime_Response)},
  { 38, 44, sizeof(::CTimedTrial_ResetPlaytime_Request)},
  { 45, 52, sizeof(::CTimedTrial_ResetPlaytime_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_GetTimeRemaining_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_GetTimeRemaining_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_RecordPlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_RecordPlaytime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_ResetPlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimedTrial_ResetPlaytime_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5ftimedtrial_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*steammessages_timedtrial.steamclient.p"
  "roto\032 google/protobuf/descriptor.proto\032\030"
  "steammessages_base.proto\032,steammessages_"
  "unified_base.steamclient.proto\"5\n$CTimed"
  "Trial_GetTimeRemaining_Request\022\r\n\005appid\030"
  "\001 \001(\r\"\204\001\n%CTimedTrial_GetTimeRemaining_R"
  "esponse\022\026\n\016seconds_played\030\001 \001(\r\022\027\n\017secon"
  "ds_allowed\030\002 \001(\r\022\021\n\tpackageid\030\003 \001(\r\022\027\n\017m"
  "astersub_appid\030\004 \001(\r\"K\n\"CTimedTrial_Reco"
  "rdPlaytime_Request\022\r\n\005appid\030\001 \001(\r\022\026\n\016sec"
  "onds_played\030\002 \001(\r\"V\n#CTimedTrial_RecordP"
  "laytime_Response\022\026\n\016seconds_played\030\001 \001(\r"
  "\022\027\n\017seconds_allowed\030\002 \001(\r\"2\n!CTimedTrial"
  "_ResetPlaytime_Request\022\r\n\005appid\030\001 \001(\r\"U\n"
  "\"CTimedTrial_ResetPlaytime_Response\022\026\n\016s"
  "econds_played\030\001 \001(\r\022\027\n\017seconds_allowed\030\002"
  " \001(\r2\246\002\n\nTimedTrial\022a\n\020GetTimeRemaining\022"
  "%.CTimedTrial_GetTimeRemaining_Request\032&"
  ".CTimedTrial_GetTimeRemaining_Response\022["
  "\n\016RecordPlaytime\022#.CTimedTrial_RecordPla"
  "ytime_Request\032$.CTimedTrial_RecordPlayti"
  "me_Response\022X\n\rResetPlaytime\022\".CTimedTri"
  "al_ResetPlaytime_Request\032#.CTimedTrial_R"
  "esetPlaytime_ResponseB\035\200\001\001\252\002\027OpenSteamwo"
  "rks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto = {
  false, false, 972, descriptor_table_protodef_steammessages_5ftimedtrial_2esteamclient_2eproto, "steammessages_timedtrial.steamclient.proto", 
  &descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto_once, descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5ftimedtrial_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto);
  return descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5ftimedtrial_2esteamclient_2eproto(&descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto);

// ===================================================================

class CTimedTrial_GetTimeRemaining_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_GetTimeRemaining_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTimedTrial_GetTimeRemaining_Request::CTimedTrial_GetTimeRemaining_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_GetTimeRemaining_Request)
}
CTimedTrial_GetTimeRemaining_Request::CTimedTrial_GetTimeRemaining_Request(const CTimedTrial_GetTimeRemaining_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_GetTimeRemaining_Request)
}

void CTimedTrial_GetTimeRemaining_Request::SharedCtor() {
appid_ = 0u;
}

CTimedTrial_GetTimeRemaining_Request::~CTimedTrial_GetTimeRemaining_Request() {
  // @@protoc_insertion_point(destructor:CTimedTrial_GetTimeRemaining_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_GetTimeRemaining_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_GetTimeRemaining_Request::ArenaDtor(void* object) {
  CTimedTrial_GetTimeRemaining_Request* _this = reinterpret_cast< CTimedTrial_GetTimeRemaining_Request* >(object);
  (void)_this;
}
void CTimedTrial_GetTimeRemaining_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_GetTimeRemaining_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_GetTimeRemaining_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_GetTimeRemaining_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_GetTimeRemaining_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_GetTimeRemaining_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_GetTimeRemaining_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_GetTimeRemaining_Request)
  return target;
}

size_t CTimedTrial_GetTimeRemaining_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_GetTimeRemaining_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_GetTimeRemaining_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_GetTimeRemaining_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_GetTimeRemaining_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_GetTimeRemaining_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_GetTimeRemaining_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_GetTimeRemaining_Request)
    MergeFrom(*source);
  }
}

void CTimedTrial_GetTimeRemaining_Request::MergeFrom(const CTimedTrial_GetTimeRemaining_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_GetTimeRemaining_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CTimedTrial_GetTimeRemaining_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_GetTimeRemaining_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_GetTimeRemaining_Request::CopyFrom(const CTimedTrial_GetTimeRemaining_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_GetTimeRemaining_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_GetTimeRemaining_Request::IsInitialized() const {
  return true;
}

void CTimedTrial_GetTimeRemaining_Request::InternalSwap(CTimedTrial_GetTimeRemaining_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_GetTimeRemaining_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimedTrial_GetTimeRemaining_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_GetTimeRemaining_Response>()._has_bits_);
  static void set_has_seconds_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mastersub_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CTimedTrial_GetTimeRemaining_Response::CTimedTrial_GetTimeRemaining_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_GetTimeRemaining_Response)
}
CTimedTrial_GetTimeRemaining_Response::CTimedTrial_GetTimeRemaining_Response(const CTimedTrial_GetTimeRemaining_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_played_, &from.seconds_played_,
    static_cast<size_t>(reinterpret_cast<char*>(&mastersub_appid_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(mastersub_appid_));
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_GetTimeRemaining_Response)
}

void CTimedTrial_GetTimeRemaining_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_played_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mastersub_appid_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(mastersub_appid_));
}

CTimedTrial_GetTimeRemaining_Response::~CTimedTrial_GetTimeRemaining_Response() {
  // @@protoc_insertion_point(destructor:CTimedTrial_GetTimeRemaining_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_GetTimeRemaining_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_GetTimeRemaining_Response::ArenaDtor(void* object) {
  CTimedTrial_GetTimeRemaining_Response* _this = reinterpret_cast< CTimedTrial_GetTimeRemaining_Response* >(object);
  (void)_this;
}
void CTimedTrial_GetTimeRemaining_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_GetTimeRemaining_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_GetTimeRemaining_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_GetTimeRemaining_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&seconds_played_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mastersub_appid_) -
        reinterpret_cast<char*>(&seconds_played_)) + sizeof(mastersub_appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_GetTimeRemaining_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 seconds_played = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_played(&has_bits);
          seconds_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seconds_allowed(&has_bits);
          seconds_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 packageid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mastersub_appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mastersub_appid(&has_bits);
          mastersub_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_GetTimeRemaining_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_GetTimeRemaining_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds_played = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds_played(), target);
  }

  // optional uint32 seconds_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_allowed(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packageid(), target);
  }

  // optional uint32 mastersub_appid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mastersub_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_GetTimeRemaining_Response)
  return target;
}

size_t CTimedTrial_GetTimeRemaining_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_GetTimeRemaining_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 seconds_played = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_played());
    }

    // optional uint32 seconds_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_allowed());
    }

    // optional uint32 packageid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packageid());
    }

    // optional uint32 mastersub_appid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mastersub_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_GetTimeRemaining_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_GetTimeRemaining_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_GetTimeRemaining_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_GetTimeRemaining_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_GetTimeRemaining_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_GetTimeRemaining_Response)
    MergeFrom(*source);
  }
}

void CTimedTrial_GetTimeRemaining_Response::MergeFrom(const CTimedTrial_GetTimeRemaining_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_GetTimeRemaining_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      seconds_played_ = from.seconds_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_allowed_ = from.seconds_allowed_;
    }
    if (cached_has_bits & 0x00000004u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mastersub_appid_ = from.mastersub_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimedTrial_GetTimeRemaining_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_GetTimeRemaining_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_GetTimeRemaining_Response::CopyFrom(const CTimedTrial_GetTimeRemaining_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_GetTimeRemaining_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_GetTimeRemaining_Response::IsInitialized() const {
  return true;
}

void CTimedTrial_GetTimeRemaining_Response::InternalSwap(CTimedTrial_GetTimeRemaining_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimedTrial_GetTimeRemaining_Response, mastersub_appid_)
      + sizeof(CTimedTrial_GetTimeRemaining_Response::mastersub_appid_)
      - PROTOBUF_FIELD_OFFSET(CTimedTrial_GetTimeRemaining_Response, seconds_played_)>(
          reinterpret_cast<char*>(&seconds_played_),
          reinterpret_cast<char*>(&other->seconds_played_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_GetTimeRemaining_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimedTrial_RecordPlaytime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_RecordPlaytime_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CTimedTrial_RecordPlaytime_Request::CTimedTrial_RecordPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_RecordPlaytime_Request)
}
CTimedTrial_RecordPlaytime_Request::CTimedTrial_RecordPlaytime_Request(const CTimedTrial_RecordPlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_played_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(seconds_played_));
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_RecordPlaytime_Request)
}

void CTimedTrial_RecordPlaytime_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_played_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(seconds_played_));
}

CTimedTrial_RecordPlaytime_Request::~CTimedTrial_RecordPlaytime_Request() {
  // @@protoc_insertion_point(destructor:CTimedTrial_RecordPlaytime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_RecordPlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_RecordPlaytime_Request::ArenaDtor(void* object) {
  CTimedTrial_RecordPlaytime_Request* _this = reinterpret_cast< CTimedTrial_RecordPlaytime_Request* >(object);
  (void)_this;
}
void CTimedTrial_RecordPlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_RecordPlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_RecordPlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_RecordPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_played_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(seconds_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_RecordPlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seconds_played(&has_bits);
          seconds_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_RecordPlaytime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_RecordPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 seconds_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_RecordPlaytime_Request)
  return target;
}

size_t CTimedTrial_RecordPlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_RecordPlaytime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 seconds_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_played());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_RecordPlaytime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_RecordPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_RecordPlaytime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_RecordPlaytime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_RecordPlaytime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_RecordPlaytime_Request)
    MergeFrom(*source);
  }
}

void CTimedTrial_RecordPlaytime_Request::MergeFrom(const CTimedTrial_RecordPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_RecordPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_played_ = from.seconds_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimedTrial_RecordPlaytime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_RecordPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_RecordPlaytime_Request::CopyFrom(const CTimedTrial_RecordPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_RecordPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_RecordPlaytime_Request::IsInitialized() const {
  return true;
}

void CTimedTrial_RecordPlaytime_Request::InternalSwap(CTimedTrial_RecordPlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimedTrial_RecordPlaytime_Request, seconds_played_)
      + sizeof(CTimedTrial_RecordPlaytime_Request::seconds_played_)
      - PROTOBUF_FIELD_OFFSET(CTimedTrial_RecordPlaytime_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_RecordPlaytime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimedTrial_RecordPlaytime_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_RecordPlaytime_Response>()._has_bits_);
  static void set_has_seconds_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CTimedTrial_RecordPlaytime_Response::CTimedTrial_RecordPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_RecordPlaytime_Response)
}
CTimedTrial_RecordPlaytime_Response::CTimedTrial_RecordPlaytime_Response(const CTimedTrial_RecordPlaytime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_played_, &from.seconds_played_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_allowed_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_RecordPlaytime_Response)
}

void CTimedTrial_RecordPlaytime_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_played_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_allowed_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
}

CTimedTrial_RecordPlaytime_Response::~CTimedTrial_RecordPlaytime_Response() {
  // @@protoc_insertion_point(destructor:CTimedTrial_RecordPlaytime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_RecordPlaytime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_RecordPlaytime_Response::ArenaDtor(void* object) {
  CTimedTrial_RecordPlaytime_Response* _this = reinterpret_cast< CTimedTrial_RecordPlaytime_Response* >(object);
  (void)_this;
}
void CTimedTrial_RecordPlaytime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_RecordPlaytime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_RecordPlaytime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_RecordPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seconds_played_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_allowed_) -
        reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_RecordPlaytime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 seconds_played = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_played(&has_bits);
          seconds_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seconds_allowed(&has_bits);
          seconds_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_RecordPlaytime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_RecordPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds_played = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds_played(), target);
  }

  // optional uint32 seconds_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_RecordPlaytime_Response)
  return target;
}

size_t CTimedTrial_RecordPlaytime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_RecordPlaytime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 seconds_played = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_played());
    }

    // optional uint32 seconds_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_allowed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_RecordPlaytime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_RecordPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_RecordPlaytime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_RecordPlaytime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_RecordPlaytime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_RecordPlaytime_Response)
    MergeFrom(*source);
  }
}

void CTimedTrial_RecordPlaytime_Response::MergeFrom(const CTimedTrial_RecordPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_RecordPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_played_ = from.seconds_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_allowed_ = from.seconds_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimedTrial_RecordPlaytime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_RecordPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_RecordPlaytime_Response::CopyFrom(const CTimedTrial_RecordPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_RecordPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_RecordPlaytime_Response::IsInitialized() const {
  return true;
}

void CTimedTrial_RecordPlaytime_Response::InternalSwap(CTimedTrial_RecordPlaytime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimedTrial_RecordPlaytime_Response, seconds_allowed_)
      + sizeof(CTimedTrial_RecordPlaytime_Response::seconds_allowed_)
      - PROTOBUF_FIELD_OFFSET(CTimedTrial_RecordPlaytime_Response, seconds_played_)>(
          reinterpret_cast<char*>(&seconds_played_),
          reinterpret_cast<char*>(&other->seconds_played_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_RecordPlaytime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimedTrial_ResetPlaytime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_ResetPlaytime_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTimedTrial_ResetPlaytime_Request::CTimedTrial_ResetPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_ResetPlaytime_Request)
}
CTimedTrial_ResetPlaytime_Request::CTimedTrial_ResetPlaytime_Request(const CTimedTrial_ResetPlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_ResetPlaytime_Request)
}

void CTimedTrial_ResetPlaytime_Request::SharedCtor() {
appid_ = 0u;
}

CTimedTrial_ResetPlaytime_Request::~CTimedTrial_ResetPlaytime_Request() {
  // @@protoc_insertion_point(destructor:CTimedTrial_ResetPlaytime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_ResetPlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_ResetPlaytime_Request::ArenaDtor(void* object) {
  CTimedTrial_ResetPlaytime_Request* _this = reinterpret_cast< CTimedTrial_ResetPlaytime_Request* >(object);
  (void)_this;
}
void CTimedTrial_ResetPlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_ResetPlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_ResetPlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_ResetPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_ResetPlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_ResetPlaytime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_ResetPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_ResetPlaytime_Request)
  return target;
}

size_t CTimedTrial_ResetPlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_ResetPlaytime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_ResetPlaytime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_ResetPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_ResetPlaytime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_ResetPlaytime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_ResetPlaytime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_ResetPlaytime_Request)
    MergeFrom(*source);
  }
}

void CTimedTrial_ResetPlaytime_Request::MergeFrom(const CTimedTrial_ResetPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_ResetPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CTimedTrial_ResetPlaytime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_ResetPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_ResetPlaytime_Request::CopyFrom(const CTimedTrial_ResetPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_ResetPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_ResetPlaytime_Request::IsInitialized() const {
  return true;
}

void CTimedTrial_ResetPlaytime_Request::InternalSwap(CTimedTrial_ResetPlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_ResetPlaytime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimedTrial_ResetPlaytime_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimedTrial_ResetPlaytime_Response>()._has_bits_);
  static void set_has_seconds_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CTimedTrial_ResetPlaytime_Response::CTimedTrial_ResetPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimedTrial_ResetPlaytime_Response)
}
CTimedTrial_ResetPlaytime_Response::CTimedTrial_ResetPlaytime_Response(const CTimedTrial_ResetPlaytime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_played_, &from.seconds_played_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_allowed_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
  // @@protoc_insertion_point(copy_constructor:CTimedTrial_ResetPlaytime_Response)
}

void CTimedTrial_ResetPlaytime_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_played_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_allowed_) -
    reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
}

CTimedTrial_ResetPlaytime_Response::~CTimedTrial_ResetPlaytime_Response() {
  // @@protoc_insertion_point(destructor:CTimedTrial_ResetPlaytime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimedTrial_ResetPlaytime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CTimedTrial_ResetPlaytime_Response::ArenaDtor(void* object) {
  CTimedTrial_ResetPlaytime_Response* _this = reinterpret_cast< CTimedTrial_ResetPlaytime_Response* >(object);
  (void)_this;
}
void CTimedTrial_ResetPlaytime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimedTrial_ResetPlaytime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimedTrial_ResetPlaytime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimedTrial_ResetPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seconds_played_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_allowed_) -
        reinterpret_cast<char*>(&seconds_played_)) + sizeof(seconds_allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimedTrial_ResetPlaytime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 seconds_played = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_played(&has_bits);
          seconds_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seconds_allowed(&has_bits);
          seconds_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimedTrial_ResetPlaytime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimedTrial_ResetPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds_played = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds_played(), target);
  }

  // optional uint32 seconds_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimedTrial_ResetPlaytime_Response)
  return target;
}

size_t CTimedTrial_ResetPlaytime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimedTrial_ResetPlaytime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 seconds_played = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_played());
    }

    // optional uint32 seconds_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_allowed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimedTrial_ResetPlaytime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimedTrial_ResetPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimedTrial_ResetPlaytime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimedTrial_ResetPlaytime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimedTrial_ResetPlaytime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimedTrial_ResetPlaytime_Response)
    MergeFrom(*source);
  }
}

void CTimedTrial_ResetPlaytime_Response::MergeFrom(const CTimedTrial_ResetPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimedTrial_ResetPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_played_ = from.seconds_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_allowed_ = from.seconds_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimedTrial_ResetPlaytime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimedTrial_ResetPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimedTrial_ResetPlaytime_Response::CopyFrom(const CTimedTrial_ResetPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimedTrial_ResetPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimedTrial_ResetPlaytime_Response::IsInitialized() const {
  return true;
}

void CTimedTrial_ResetPlaytime_Response::InternalSwap(CTimedTrial_ResetPlaytime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimedTrial_ResetPlaytime_Response, seconds_allowed_)
      + sizeof(CTimedTrial_ResetPlaytime_Response::seconds_allowed_)
      - PROTOBUF_FIELD_OFFSET(CTimedTrial_ResetPlaytime_Response, seconds_played_)>(
          reinterpret_cast<char*>(&seconds_played_),
          reinterpret_cast<char*>(&other->seconds_played_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimedTrial_ResetPlaytime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TimedTrial::~TimedTrial() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TimedTrial::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TimedTrial::GetDescriptor() {
  return descriptor();
}

void TimedTrial::GetTimeRemaining(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTimedTrial_GetTimeRemaining_Request*,
                         ::CTimedTrial_GetTimeRemaining_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimeRemaining() not implemented.");
  done->Run();
}

void TimedTrial::RecordPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTimedTrial_RecordPlaytime_Request*,
                         ::CTimedTrial_RecordPlaytime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RecordPlaytime() not implemented.");
  done->Run();
}

void TimedTrial::ResetPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTimedTrial_ResetPlaytime_Request*,
                         ::CTimedTrial_ResetPlaytime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResetPlaytime() not implemented.");
  done->Run();
}

void TimedTrial::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5ftimedtrial_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetTimeRemaining(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTimedTrial_GetTimeRemaining_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTimedTrial_GetTimeRemaining_Response*>(
                 response),
             done);
      break;
    case 1:
      RecordPlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTimedTrial_RecordPlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTimedTrial_RecordPlaytime_Response*>(
                 response),
             done);
      break;
    case 2:
      ResetPlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTimedTrial_ResetPlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTimedTrial_ResetPlaytime_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TimedTrial::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CTimedTrial_GetTimeRemaining_Request::default_instance();
    case 1:
      return ::CTimedTrial_RecordPlaytime_Request::default_instance();
    case 2:
      return ::CTimedTrial_ResetPlaytime_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TimedTrial::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CTimedTrial_GetTimeRemaining_Response::default_instance();
    case 1:
      return ::CTimedTrial_RecordPlaytime_Response::default_instance();
    case 2:
      return ::CTimedTrial_ResetPlaytime_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TimedTrial_Stub::TimedTrial_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TimedTrial_Stub::TimedTrial_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TimedTrial_Stub::~TimedTrial_Stub() {
  if (owns_channel_) delete channel_;
}

void TimedTrial_Stub::GetTimeRemaining(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTimedTrial_GetTimeRemaining_Request* request,
                              ::CTimedTrial_GetTimeRemaining_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TimedTrial_Stub::RecordPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTimedTrial_RecordPlaytime_Request* request,
                              ::CTimedTrial_RecordPlaytime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TimedTrial_Stub::ResetPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTimedTrial_ResetPlaytime_Request* request,
                              ::CTimedTrial_ResetPlaytime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CTimedTrial_GetTimeRemaining_Request* Arena::CreateMaybeMessage< ::CTimedTrial_GetTimeRemaining_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_GetTimeRemaining_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimedTrial_GetTimeRemaining_Response* Arena::CreateMaybeMessage< ::CTimedTrial_GetTimeRemaining_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_GetTimeRemaining_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimedTrial_RecordPlaytime_Request* Arena::CreateMaybeMessage< ::CTimedTrial_RecordPlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_RecordPlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimedTrial_RecordPlaytime_Response* Arena::CreateMaybeMessage< ::CTimedTrial_RecordPlaytime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_RecordPlaytime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimedTrial_ResetPlaytime_Request* Arena::CreateMaybeMessage< ::CTimedTrial_ResetPlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_ResetPlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimedTrial_ResetPlaytime_Response* Arena::CreateMaybeMessage< ::CTimedTrial_ResetPlaytime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimedTrial_ResetPlaytime_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
