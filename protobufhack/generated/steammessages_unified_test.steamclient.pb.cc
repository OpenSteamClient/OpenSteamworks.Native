// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_unified_test.steamclient.proto

#include "steammessages_unified_test.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgTest_MessageToClient_Request::CMsgTest_MessageToClient_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_MessageToClient_RequestDefaultTypeInternal {
  constexpr CMsgTest_MessageToClient_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_MessageToClient_RequestDefaultTypeInternal() {}
  union {
    CMsgTest_MessageToClient_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_MessageToClient_RequestDefaultTypeInternal _CMsgTest_MessageToClient_Request_default_instance_;
constexpr CMsgTest_MessageToClient_Response::CMsgTest_MessageToClient_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_MessageToClient_ResponseDefaultTypeInternal {
  constexpr CMsgTest_MessageToClient_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_MessageToClient_ResponseDefaultTypeInternal() {}
  union {
    CMsgTest_MessageToClient_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_MessageToClient_ResponseDefaultTypeInternal _CMsgTest_MessageToClient_Response_default_instance_;
constexpr CMsgTest_NotifyClient_Notification::CMsgTest_NotifyClient_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_NotifyClient_NotificationDefaultTypeInternal {
  constexpr CMsgTest_NotifyClient_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_NotifyClient_NotificationDefaultTypeInternal() {}
  union {
    CMsgTest_NotifyClient_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_NotifyClient_NotificationDefaultTypeInternal _CMsgTest_NotifyClient_Notification_default_instance_;
constexpr CMsgTest_MessageToServer_Request::CMsgTest_MessageToServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_MessageToServer_RequestDefaultTypeInternal {
  constexpr CMsgTest_MessageToServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_MessageToServer_RequestDefaultTypeInternal() {}
  union {
    CMsgTest_MessageToServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_MessageToServer_RequestDefaultTypeInternal _CMsgTest_MessageToServer_Request_default_instance_;
constexpr CMsgTest_MessageToServer_Response::CMsgTest_MessageToServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_MessageToServer_ResponseDefaultTypeInternal {
  constexpr CMsgTest_MessageToServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_MessageToServer_ResponseDefaultTypeInternal() {}
  union {
    CMsgTest_MessageToServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_MessageToServer_ResponseDefaultTypeInternal _CMsgTest_MessageToServer_Response_default_instance_;
constexpr CMsgTest_NotifyServer_Notification::CMsgTest_NotifyServer_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : some_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgTest_NotifyServer_NotificationDefaultTypeInternal {
  constexpr CMsgTest_NotifyServer_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_NotifyServer_NotificationDefaultTypeInternal() {}
  union {
    CMsgTest_NotifyServer_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_NotifyServer_NotificationDefaultTypeInternal _CMsgTest_NotifyServer_Notification_default_instance_;
constexpr CMsgTest_NoBody_Request::CMsgTest_NoBody_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgTest_NoBody_RequestDefaultTypeInternal {
  constexpr CMsgTest_NoBody_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_NoBody_RequestDefaultTypeInternal() {}
  union {
    CMsgTest_NoBody_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_NoBody_RequestDefaultTypeInternal _CMsgTest_NoBody_Request_default_instance_;
constexpr CMsgTest_CallClient_Response::CMsgTest_CallClient_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testvalue_(0){}
struct CMsgTest_CallClient_ResponseDefaultTypeInternal {
  constexpr CMsgTest_CallClient_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTest_CallClient_ResponseDefaultTypeInternal() {}
  union {
    CMsgTest_CallClient_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTest_CallClient_ResponseDefaultTypeInternal _CMsgTest_CallClient_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5funified_5ftest_2esteamclient_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[3];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Request, some_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToClient_Response, some_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyClient_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyClient_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyClient_Notification, some_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Request, some_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_MessageToServer_Response, some_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyServer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NotifyServer_Notification, some_text_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_NoBody_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_CallClient_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTest_CallClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTest_CallClient_Response, testvalue_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CMsgTest_MessageToClient_Request)},
  { 7, 13, sizeof(::CMsgTest_MessageToClient_Response)},
  { 14, 20, sizeof(::CMsgTest_NotifyClient_Notification)},
  { 21, 27, sizeof(::CMsgTest_MessageToServer_Request)},
  { 28, 34, sizeof(::CMsgTest_MessageToServer_Response)},
  { 35, 41, sizeof(::CMsgTest_NotifyServer_Notification)},
  { 42, -1, sizeof(::CMsgTest_NoBody_Request)},
  { 47, 53, sizeof(::CMsgTest_CallClient_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_MessageToClient_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_MessageToClient_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_NotifyClient_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_MessageToServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_MessageToServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_NotifyServer_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_NoBody_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTest_CallClient_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5funified_5ftest_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,steammessages_unified_test.steamclient"
  ".proto\032 google/protobuf/descriptor.proto"
  "\032\030steammessages_base.proto\032,steammessage"
  "s_unified_base.steamclient.proto\"5\n CMsg"
  "Test_MessageToClient_Request\022\021\n\tsome_tex"
  "t\030\001 \001(\t\"6\n!CMsgTest_MessageToClient_Resp"
  "onse\022\021\n\tsome_text\030\001 \001(\t\"7\n\"CMsgTest_Noti"
  "fyClient_Notification\022\021\n\tsome_text\030\001 \001(\t"
  "\"5\n CMsgTest_MessageToServer_Request\022\021\n\t"
  "some_text\030\001 \001(\t\"6\n!CMsgTest_MessageToSer"
  "ver_Response\022\021\n\tsome_text\030\001 \001(\t\"7\n\"CMsgT"
  "est_NotifyServer_Notification\022\021\n\tsome_te"
  "xt\030\001 \001(\t\"\031\n\027CMsgTest_NoBody_Request\"1\n\034C"
  "MsgTest_CallClient_Response\022\021\n\ttestvalue"
  "\030\001 \001(\0052\263\001\n\017TestSteamClient\022X\n\017MessageToC"
  "lient\022!.CMsgTest_MessageToClient_Request"
  "\032\".CMsgTest_MessageToClient_Response\022@\n\014"
  "NotifyClient\022#.CMsgTest_NotifyClient_Not"
  "ification\032\013.NoResponse\032\004\300\265\030\0022\262\001\n\024TestSer"
  "verFromClient\022X\n\017MessageToServer\022!.CMsgT"
  "est_MessageToServer_Request\032\".CMsgTest_M"
  "essageToServer_Response\022@\n\014NotifyServer\022"
  "#.CMsgTest_NotifyServer_Notification\032\013.N"
  "oResponse2^\n\025TestExternalPrivilege\022E\n\nCa"
  "llClient\022\030.CMsgTest_NoBody_Request\032\035.CMs"
  "gTest_CallClient_ResponseB\035\200\001\001\252\002\027OpenSte"
  "amworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto = {
  false, false, 1056, descriptor_table_protodef_steammessages_5funified_5ftest_2esteamclient_2eproto, "steammessages_unified_test.steamclient.proto", 
  &descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto_once, descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto_deps, 3, 8,
  schemas, file_default_instances, TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5funified_5ftest_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto);
  return descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5funified_5ftest_2esteamclient_2eproto(&descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto);

// ===================================================================

class CMsgTest_MessageToClient_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_MessageToClient_Request>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_MessageToClient_Request::CMsgTest_MessageToClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_MessageToClient_Request)
}
CMsgTest_MessageToClient_Request::CMsgTest_MessageToClient_Request(const CMsgTest_MessageToClient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_MessageToClient_Request)
}

void CMsgTest_MessageToClient_Request::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToClient_Request::~CMsgTest_MessageToClient_Request() {
  // @@protoc_insertion_point(destructor:CMsgTest_MessageToClient_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_MessageToClient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToClient_Request::ArenaDtor(void* object) {
  CMsgTest_MessageToClient_Request* _this = reinterpret_cast< CMsgTest_MessageToClient_Request* >(object);
  (void)_this;
}
void CMsgTest_MessageToClient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_MessageToClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_MessageToClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_MessageToClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_MessageToClient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_MessageToClient_Request.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_MessageToClient_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_MessageToClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_MessageToClient_Request.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_MessageToClient_Request)
  return target;
}

size_t CMsgTest_MessageToClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_MessageToClient_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_MessageToClient_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_MessageToClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToClient_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_MessageToClient_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_MessageToClient_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_MessageToClient_Request)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToClient_Request::MergeFrom(const CMsgTest_MessageToClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_MessageToClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_MessageToClient_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_MessageToClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToClient_Request::CopyFrom(const CMsgTest_MessageToClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_MessageToClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToClient_Request::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToClient_Request::InternalSwap(CMsgTest_MessageToClient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_MessageToClient_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_MessageToClient_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_MessageToClient_Response>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_MessageToClient_Response::CMsgTest_MessageToClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_MessageToClient_Response)
}
CMsgTest_MessageToClient_Response::CMsgTest_MessageToClient_Response(const CMsgTest_MessageToClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_MessageToClient_Response)
}

void CMsgTest_MessageToClient_Response::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToClient_Response::~CMsgTest_MessageToClient_Response() {
  // @@protoc_insertion_point(destructor:CMsgTest_MessageToClient_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_MessageToClient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToClient_Response::ArenaDtor(void* object) {
  CMsgTest_MessageToClient_Response* _this = reinterpret_cast< CMsgTest_MessageToClient_Response* >(object);
  (void)_this;
}
void CMsgTest_MessageToClient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_MessageToClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_MessageToClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_MessageToClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_MessageToClient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_MessageToClient_Response.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_MessageToClient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_MessageToClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_MessageToClient_Response.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_MessageToClient_Response)
  return target;
}

size_t CMsgTest_MessageToClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_MessageToClient_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_MessageToClient_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_MessageToClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToClient_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_MessageToClient_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_MessageToClient_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_MessageToClient_Response)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToClient_Response::MergeFrom(const CMsgTest_MessageToClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_MessageToClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_MessageToClient_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_MessageToClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToClient_Response::CopyFrom(const CMsgTest_MessageToClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_MessageToClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToClient_Response::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToClient_Response::InternalSwap(CMsgTest_MessageToClient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_MessageToClient_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_NotifyClient_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_NotifyClient_Notification>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_NotifyClient_Notification::CMsgTest_NotifyClient_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_NotifyClient_Notification)
}
CMsgTest_NotifyClient_Notification::CMsgTest_NotifyClient_Notification(const CMsgTest_NotifyClient_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_NotifyClient_Notification)
}

void CMsgTest_NotifyClient_Notification::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_NotifyClient_Notification::~CMsgTest_NotifyClient_Notification() {
  // @@protoc_insertion_point(destructor:CMsgTest_NotifyClient_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_NotifyClient_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_NotifyClient_Notification::ArenaDtor(void* object) {
  CMsgTest_NotifyClient_Notification* _this = reinterpret_cast< CMsgTest_NotifyClient_Notification* >(object);
  (void)_this;
}
void CMsgTest_NotifyClient_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_NotifyClient_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_NotifyClient_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_NotifyClient_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_NotifyClient_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_NotifyClient_Notification.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_NotifyClient_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_NotifyClient_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_NotifyClient_Notification.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_NotifyClient_Notification)
  return target;
}

size_t CMsgTest_NotifyClient_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_NotifyClient_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_NotifyClient_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_NotifyClient_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_NotifyClient_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_NotifyClient_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_NotifyClient_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_NotifyClient_Notification)
    MergeFrom(*source);
  }
}

void CMsgTest_NotifyClient_Notification::MergeFrom(const CMsgTest_NotifyClient_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_NotifyClient_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_NotifyClient_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_NotifyClient_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_NotifyClient_Notification::CopyFrom(const CMsgTest_NotifyClient_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_NotifyClient_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_NotifyClient_Notification::IsInitialized() const {
  return true;
}

void CMsgTest_NotifyClient_Notification::InternalSwap(CMsgTest_NotifyClient_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_NotifyClient_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_MessageToServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_MessageToServer_Request>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_MessageToServer_Request::CMsgTest_MessageToServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_MessageToServer_Request)
}
CMsgTest_MessageToServer_Request::CMsgTest_MessageToServer_Request(const CMsgTest_MessageToServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_MessageToServer_Request)
}

void CMsgTest_MessageToServer_Request::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToServer_Request::~CMsgTest_MessageToServer_Request() {
  // @@protoc_insertion_point(destructor:CMsgTest_MessageToServer_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_MessageToServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToServer_Request::ArenaDtor(void* object) {
  CMsgTest_MessageToServer_Request* _this = reinterpret_cast< CMsgTest_MessageToServer_Request* >(object);
  (void)_this;
}
void CMsgTest_MessageToServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_MessageToServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_MessageToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_MessageToServer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_MessageToServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_MessageToServer_Request.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_MessageToServer_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_MessageToServer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_MessageToServer_Request.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_MessageToServer_Request)
  return target;
}

size_t CMsgTest_MessageToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_MessageToServer_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_MessageToServer_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_MessageToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToServer_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_MessageToServer_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_MessageToServer_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_MessageToServer_Request)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToServer_Request::MergeFrom(const CMsgTest_MessageToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_MessageToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_MessageToServer_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_MessageToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToServer_Request::CopyFrom(const CMsgTest_MessageToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_MessageToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToServer_Request::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToServer_Request::InternalSwap(CMsgTest_MessageToServer_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_MessageToServer_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_MessageToServer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_MessageToServer_Response>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_MessageToServer_Response::CMsgTest_MessageToServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_MessageToServer_Response)
}
CMsgTest_MessageToServer_Response::CMsgTest_MessageToServer_Response(const CMsgTest_MessageToServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_MessageToServer_Response)
}

void CMsgTest_MessageToServer_Response::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToServer_Response::~CMsgTest_MessageToServer_Response() {
  // @@protoc_insertion_point(destructor:CMsgTest_MessageToServer_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_MessageToServer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToServer_Response::ArenaDtor(void* object) {
  CMsgTest_MessageToServer_Response* _this = reinterpret_cast< CMsgTest_MessageToServer_Response* >(object);
  (void)_this;
}
void CMsgTest_MessageToServer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_MessageToServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_MessageToServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_MessageToServer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_MessageToServer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_MessageToServer_Response.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_MessageToServer_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_MessageToServer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_MessageToServer_Response.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_MessageToServer_Response)
  return target;
}

size_t CMsgTest_MessageToServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_MessageToServer_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_MessageToServer_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_MessageToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToServer_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_MessageToServer_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_MessageToServer_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_MessageToServer_Response)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToServer_Response::MergeFrom(const CMsgTest_MessageToServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_MessageToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_MessageToServer_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_MessageToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToServer_Response::CopyFrom(const CMsgTest_MessageToServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_MessageToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToServer_Response::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToServer_Response::InternalSwap(CMsgTest_MessageToServer_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_MessageToServer_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_NotifyServer_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_NotifyServer_Notification>()._has_bits_);
  static void set_has_some_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_NotifyServer_Notification::CMsgTest_NotifyServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_NotifyServer_Notification)
}
CMsgTest_NotifyServer_Notification::CMsgTest_NotifyServer_Notification(const CMsgTest_NotifyServer_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_some_text()) {
    some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_some_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgTest_NotifyServer_Notification)
}

void CMsgTest_NotifyServer_Notification::SharedCtor() {
some_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_NotifyServer_Notification::~CMsgTest_NotifyServer_Notification() {
  // @@protoc_insertion_point(destructor:CMsgTest_NotifyServer_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_NotifyServer_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  some_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_NotifyServer_Notification::ArenaDtor(void* object) {
  CMsgTest_NotifyServer_Notification* _this = reinterpret_cast< CMsgTest_NotifyServer_Notification* >(object);
  (void)_this;
}
void CMsgTest_NotifyServer_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_NotifyServer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_NotifyServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_NotifyServer_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    some_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_NotifyServer_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string some_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_some_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTest_NotifyServer_Notification.some_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_NotifyServer_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_NotifyServer_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_text().data(), static_cast<int>(this->_internal_some_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTest_NotifyServer_Notification.some_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_NotifyServer_Notification)
  return target;
}

size_t CMsgTest_NotifyServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_NotifyServer_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string some_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_some_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_NotifyServer_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_NotifyServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_NotifyServer_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_NotifyServer_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_NotifyServer_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_NotifyServer_Notification)
    MergeFrom(*source);
  }
}

void CMsgTest_NotifyServer_Notification::MergeFrom(const CMsgTest_NotifyServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_NotifyServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_some_text()) {
    _internal_set_some_text(from._internal_some_text());
  }
}

void CMsgTest_NotifyServer_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_NotifyServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_NotifyServer_Notification::CopyFrom(const CMsgTest_NotifyServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_NotifyServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_NotifyServer_Notification::IsInitialized() const {
  return true;
}

void CMsgTest_NotifyServer_Notification::InternalSwap(CMsgTest_NotifyServer_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  some_text_.Swap(&other->some_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_NotifyServer_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_NoBody_Request::_Internal {
 public:
};

CMsgTest_NoBody_Request::CMsgTest_NoBody_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_NoBody_Request)
}
CMsgTest_NoBody_Request::CMsgTest_NoBody_Request(const CMsgTest_NoBody_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTest_NoBody_Request)
}

void CMsgTest_NoBody_Request::SharedCtor() {
}

CMsgTest_NoBody_Request::~CMsgTest_NoBody_Request() {
  // @@protoc_insertion_point(destructor:CMsgTest_NoBody_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_NoBody_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTest_NoBody_Request::ArenaDtor(void* object) {
  CMsgTest_NoBody_Request* _this = reinterpret_cast< CMsgTest_NoBody_Request* >(object);
  (void)_this;
}
void CMsgTest_NoBody_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_NoBody_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_NoBody_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_NoBody_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_NoBody_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_NoBody_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_NoBody_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_NoBody_Request)
  return target;
}

size_t CMsgTest_NoBody_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_NoBody_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_NoBody_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_NoBody_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_NoBody_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_NoBody_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_NoBody_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_NoBody_Request)
    MergeFrom(*source);
  }
}

void CMsgTest_NoBody_Request::MergeFrom(const CMsgTest_NoBody_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_NoBody_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTest_NoBody_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_NoBody_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_NoBody_Request::CopyFrom(const CMsgTest_NoBody_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_NoBody_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_NoBody_Request::IsInitialized() const {
  return true;
}

void CMsgTest_NoBody_Request::InternalSwap(CMsgTest_NoBody_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_NoBody_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTest_CallClient_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTest_CallClient_Response>()._has_bits_);
  static void set_has_testvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTest_CallClient_Response::CMsgTest_CallClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTest_CallClient_Response)
}
CMsgTest_CallClient_Response::CMsgTest_CallClient_Response(const CMsgTest_CallClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testvalue_ = from.testvalue_;
  // @@protoc_insertion_point(copy_constructor:CMsgTest_CallClient_Response)
}

void CMsgTest_CallClient_Response::SharedCtor() {
testvalue_ = 0;
}

CMsgTest_CallClient_Response::~CMsgTest_CallClient_Response() {
  // @@protoc_insertion_point(destructor:CMsgTest_CallClient_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTest_CallClient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTest_CallClient_Response::ArenaDtor(void* object) {
  CMsgTest_CallClient_Response* _this = reinterpret_cast< CMsgTest_CallClient_Response* >(object);
  (void)_this;
}
void CMsgTest_CallClient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTest_CallClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTest_CallClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTest_CallClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testvalue_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTest_CallClient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 testvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_testvalue(&has_bits);
          testvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTest_CallClient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTest_CallClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 testvalue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTest_CallClient_Response)
  return target;
}

size_t CMsgTest_CallClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTest_CallClient_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 testvalue = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_testvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTest_CallClient_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTest_CallClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_CallClient_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTest_CallClient_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTest_CallClient_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTest_CallClient_Response)
    MergeFrom(*source);
  }
}

void CMsgTest_CallClient_Response::MergeFrom(const CMsgTest_CallClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTest_CallClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_testvalue()) {
    _internal_set_testvalue(from._internal_testvalue());
  }
}

void CMsgTest_CallClient_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTest_CallClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_CallClient_Response::CopyFrom(const CMsgTest_CallClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTest_CallClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_CallClient_Response::IsInitialized() const {
  return true;
}

void CMsgTest_CallClient_Response::InternalSwap(CMsgTest_CallClient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(testvalue_, other->testvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTest_CallClient_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestSteamClient::~TestSteamClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestSteamClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestSteamClient::GetDescriptor() {
  return descriptor();
}

void TestSteamClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMsgTest_MessageToClient_Request*,
                         ::CMsgTest_MessageToClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MessageToClient() not implemented.");
  done->Run();
}

void TestSteamClient::NotifyClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMsgTest_NotifyClient_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClient() not implemented.");
  done->Run();
}

void TestSteamClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      MessageToClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMsgTest_MessageToClient_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMsgTest_MessageToClient_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMsgTest_NotifyClient_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestSteamClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_MessageToClient_Request::default_instance();
    case 1:
      return ::CMsgTest_NotifyClient_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestSteamClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_MessageToClient_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestSteamClient_Stub::TestSteamClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestSteamClient_Stub::TestSteamClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestSteamClient_Stub::~TestSteamClient_Stub() {
  if (owns_channel_) delete channel_;
}

void TestSteamClient_Stub::MessageToClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMsgTest_MessageToClient_Request* request,
                              ::CMsgTest_MessageToClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestSteamClient_Stub::NotifyClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMsgTest_NotifyClient_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

TestServerFromClient::~TestServerFromClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestServerFromClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestServerFromClient::GetDescriptor() {
  return descriptor();
}

void TestServerFromClient::MessageToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMsgTest_MessageToServer_Request*,
                         ::CMsgTest_MessageToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MessageToServer() not implemented.");
  done->Run();
}

void TestServerFromClient::NotifyServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMsgTest_NotifyServer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyServer() not implemented.");
  done->Run();
}

void TestServerFromClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      MessageToServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMsgTest_MessageToServer_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMsgTest_MessageToServer_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMsgTest_NotifyServer_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestServerFromClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_MessageToServer_Request::default_instance();
    case 1:
      return ::CMsgTest_NotifyServer_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestServerFromClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_MessageToServer_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestServerFromClient_Stub::TestServerFromClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestServerFromClient_Stub::TestServerFromClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestServerFromClient_Stub::~TestServerFromClient_Stub() {
  if (owns_channel_) delete channel_;
}

void TestServerFromClient_Stub::MessageToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMsgTest_MessageToServer_Request* request,
                              ::CMsgTest_MessageToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestServerFromClient_Stub::NotifyServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMsgTest_NotifyServer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

TestExternalPrivilege::~TestExternalPrivilege() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestExternalPrivilege::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestExternalPrivilege::GetDescriptor() {
  return descriptor();
}

void TestExternalPrivilege::CallClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMsgTest_NoBody_Request*,
                         ::CMsgTest_CallClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CallClient() not implemented.");
  done->Run();
}

void TestExternalPrivilege::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5funified_5ftest_2esteamclient_2eproto[2]);
  switch(method->index()) {
    case 0:
      CallClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMsgTest_NoBody_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMsgTest_CallClient_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestExternalPrivilege::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_NoBody_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestExternalPrivilege::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMsgTest_CallClient_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestExternalPrivilege_Stub::TestExternalPrivilege_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestExternalPrivilege_Stub::TestExternalPrivilege_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestExternalPrivilege_Stub::~TestExternalPrivilege_Stub() {
  if (owns_channel_) delete channel_;
}

void TestExternalPrivilege_Stub::CallClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMsgTest_NoBody_Request* request,
                              ::CMsgTest_CallClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgTest_MessageToClient_Request* Arena::CreateMaybeMessage< ::CMsgTest_MessageToClient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_MessageToClient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_MessageToClient_Response* Arena::CreateMaybeMessage< ::CMsgTest_MessageToClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_MessageToClient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_NotifyClient_Notification* Arena::CreateMaybeMessage< ::CMsgTest_NotifyClient_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_NotifyClient_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_MessageToServer_Request* Arena::CreateMaybeMessage< ::CMsgTest_MessageToServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_MessageToServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_MessageToServer_Response* Arena::CreateMaybeMessage< ::CMsgTest_MessageToServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_MessageToServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_NotifyServer_Notification* Arena::CreateMaybeMessage< ::CMsgTest_NotifyServer_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_NotifyServer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_NoBody_Request* Arena::CreateMaybeMessage< ::CMsgTest_NoBody_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_NoBody_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTest_CallClient_Response* Arena::CreateMaybeMessage< ::CMsgTest_CallClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTest_CallClient_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
