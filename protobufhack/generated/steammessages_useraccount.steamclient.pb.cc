// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_useraccount.steamclient.proto

#include "steammessages_useraccount.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CUserAccount_GetAvailableValveDiscountPromotions_Request::CUserAccount_GetAvailableValveDiscountPromotions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal {
  constexpr CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_GetAvailableValveDiscountPromotions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Request_default_instance_;
constexpr CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : promotion_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localized_name_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_cart_amount_(PROTOBUF_LONGLONG(0))
  , promotionid_(0u)
  , currency_code_(0)
  , minimum_cart_amount_for_display_(PROTOBUF_LONGLONG(0))
  , discount_amount_(PROTOBUF_LONGLONG(0))
  , available_use_count_(0)
  , promotional_discount_type_(0)
  , loyalty_reward_id_(0)
  , max_use_count_(0){}
struct CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal {
  constexpr CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal() {}
  union {
    CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails_default_instance_;
constexpr CUserAccount_GetAvailableValveDiscountPromotions_Response::CUserAccount_GetAvailableValveDiscountPromotions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : promotions_(){}
struct CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal {
  constexpr CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_GetAvailableValveDiscountPromotions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Response_default_instance_;
constexpr CUserAccount_GetClientWalletDetails_Request::CUserAccount_GetClientWalletDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : include_balance_in_usd_(false)
  , include_formatted_balance_(false)
  , wallet_region_(1){}
struct CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal {
  constexpr CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_GetClientWalletDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal _CUserAccount_GetClientWalletDetails_Request_default_instance_;
constexpr CUserAccount_GetWalletDetails_Response::CUserAccount_GetWalletDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_regions_()
  , user_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wallet_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wallet_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , formatted_balance_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(PROTOBUF_LONGLONG(0))
  , delayed_balance_(PROTOBUF_LONGLONG(0))
  , has_wallet_(false)
  , has_wallet_in_other_regions_(false)
  , currency_code_(0)
  , most_recent_txnid_(PROTOBUF_ULONGLONG(0))
  , balance_in_usd_(PROTOBUF_LONGLONG(0))
  , delayed_balance_in_usd_(PROTOBUF_LONGLONG(0))
  , time_most_recent_txn_(0u){}
struct CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal {
  constexpr CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_GetWalletDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal _CUserAccount_GetWalletDetails_Response_default_instance_;
constexpr CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal {
  constexpr CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_GetAccountLinkStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Request_default_instance_;
constexpr CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pwid_(0u)
  , identity_verification_(0u)
  , performed_age_verification_(false){}
struct CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal {
  constexpr CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_GetAccountLinkStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Response_default_instance_;
constexpr CUserAccount_CancelLicenseForApp_Request::CUserAccount_CancelLicenseForApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal {
  constexpr CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_CancelLicenseForApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal _CUserAccount_CancelLicenseForApp_Request_default_instance_;
constexpr CUserAccount_CancelLicenseForApp_Response::CUserAccount_CancelLicenseForApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal {
  constexpr CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_CancelLicenseForApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal _CUserAccount_CancelLicenseForApp_Response_default_instance_;
constexpr CUserAccount_GetUserCountry_Request::CUserAccount_GetUserCountry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CUserAccount_GetUserCountry_RequestDefaultTypeInternal {
  constexpr CUserAccount_GetUserCountry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetUserCountry_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_GetUserCountry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetUserCountry_RequestDefaultTypeInternal _CUserAccount_GetUserCountry_Request_default_instance_;
constexpr CUserAccount_GetUserCountry_Response::CUserAccount_GetUserCountry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserAccount_GetUserCountry_ResponseDefaultTypeInternal {
  constexpr CUserAccount_GetUserCountry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetUserCountry_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_GetUserCountry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetUserCountry_ResponseDefaultTypeInternal _CUserAccount_GetUserCountry_Response_default_instance_;
constexpr CUserAccount_CreateFriendInviteToken_Request::CUserAccount_CreateFriendInviteToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invite_limit_(0u)
  , invite_duration_(0u){}
struct CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal {
  constexpr CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_CreateFriendInviteToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Request_default_instance_;
constexpr CUserAccount_CreateFriendInviteToken_Response::CUserAccount_CreateFriendInviteToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invite_limit_(PROTOBUF_ULONGLONG(0))
  , invite_duration_(PROTOBUF_ULONGLONG(0))
  , time_created_(0u)
  , valid_(false){}
struct CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal {
  constexpr CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_CreateFriendInviteToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Response_default_instance_;
constexpr CUserAccount_GetFriendInviteTokens_Request::CUserAccount_GetFriendInviteTokens_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal {
  constexpr CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_GetFriendInviteTokens_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Request_default_instance_;
constexpr CUserAccount_GetFriendInviteTokens_Response::CUserAccount_GetFriendInviteTokens_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_(){}
struct CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal {
  constexpr CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_GetFriendInviteTokens_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Response_default_instance_;
constexpr CUserAccount_ViewFriendInviteToken_Request::CUserAccount_ViewFriendInviteToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal {
  constexpr CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_ViewFriendInviteToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_ViewFriendInviteToken_Request_default_instance_;
constexpr CUserAccount_ViewFriendInviteToken_Response::CUserAccount_ViewFriendInviteToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , invite_duration_(PROTOBUF_ULONGLONG(0))
  , valid_(false){}
struct CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal {
  constexpr CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_ViewFriendInviteToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_ViewFriendInviteToken_Response_default_instance_;
constexpr CUserAccount_RedeemFriendInviteToken_Request::CUserAccount_RedeemFriendInviteToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal {
  constexpr CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_RedeemFriendInviteToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_RedeemFriendInviteToken_Request_default_instance_;
constexpr CUserAccount_RedeemFriendInviteToken_Response::CUserAccount_RedeemFriendInviteToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal {
  constexpr CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_RedeemFriendInviteToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_RedeemFriendInviteToken_Response_default_instance_;
constexpr CUserAccount_RevokeFriendInviteToken_Request::CUserAccount_RevokeFriendInviteToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal {
  constexpr CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_RevokeFriendInviteToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Request_default_instance_;
constexpr CUserAccount_RevokeFriendInviteToken_Response::CUserAccount_RevokeFriendInviteToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal {
  constexpr CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_RevokeFriendInviteToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Response_default_instance_;
constexpr CUserAccount_RegisterCompatTool_Request::CUserAccount_RegisterCompatTool_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compat_tool_(0u){}
struct CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal {
  constexpr CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal() {}
  union {
    CUserAccount_RegisterCompatTool_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal _CUserAccount_RegisterCompatTool_Request_default_instance_;
constexpr CUserAccount_RegisterCompatTool_Response::CUserAccount_RegisterCompatTool_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal {
  constexpr CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal() {}
  union {
    CUserAccount_RegisterCompatTool_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal _CUserAccount_RegisterCompatTool_Response_default_instance_;
constexpr CAccountLinking_GetLinkedAccountInfo_Request::CAccountLinking_GetLinkedAccountInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(PROTOBUF_ULONGLONG(0))
  , filter_(0)

  , return_access_token_(false)
  , account_type_(1)
{}
struct CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal {
  constexpr CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal() {}
  union {
    CAccountLinking_GetLinkedAccountInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Request_default_instance_;
constexpr CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : external_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_token_secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_type_(0)

  , is_valid_(false){}
struct CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal {
  constexpr CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal() {}
  union {
    CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_;
constexpr CAccountLinking_GetLinkedAccountInfo_Response::CAccountLinking_GetLinkedAccountInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : external_accounts_(){}
struct CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal {
  constexpr CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal() {}
  union {
    CAccountLinking_GetLinkedAccountInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_default_instance_;
constexpr CEmbeddedClient_AuthorizeCurrentDevice_Request::CEmbeddedClient_AuthorizeCurrentDevice_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , appid_(0u)
  , deviceid_(0u){}
struct CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal {
  constexpr CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal() {}
  union {
    CEmbeddedClient_AuthorizeCurrentDevice_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal _CEmbeddedClient_AuthorizeCurrentDevice_Request_default_instance_;
constexpr CEmbeddedClient_Token::CEmbeddedClient_Token(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , expiry_(0u)
  , deviceid_(0u){}
struct CEmbeddedClient_TokenDefaultTypeInternal {
  constexpr CEmbeddedClient_TokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEmbeddedClient_TokenDefaultTypeInternal() {}
  union {
    CEmbeddedClient_Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEmbeddedClient_TokenDefaultTypeInternal _CEmbeddedClient_Token_default_instance_;
constexpr CEmbeddedClient_AuthorizeDevice_Response::CEmbeddedClient_AuthorizeDevice_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(nullptr)
  , result_(0u){}
struct CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal {
  constexpr CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal() {}
  union {
    CEmbeddedClient_AuthorizeDevice_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal _CEmbeddedClient_AuthorizeDevice_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[3];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Request, country_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, promotionid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, promotion_description_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, minimum_cart_amount_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, minimum_cart_amount_for_display_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, discount_amount_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, currency_code_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, available_use_count_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, promotional_discount_type_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, loyalty_reward_id_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, localized_name_token_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, max_use_count_),
  3,
  0,
  2,
  5,
  6,
  4,
  7,
  8,
  9,
  1,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAvailableValveDiscountPromotions_Response, promotions_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetClientWalletDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetClientWalletDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetClientWalletDetails_Request, include_balance_in_usd_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetClientWalletDetails_Request, wallet_region_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetClientWalletDetails_Request, include_formatted_balance_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, has_wallet_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, user_country_code_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, wallet_country_code_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, wallet_state_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, balance_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, delayed_balance_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, currency_code_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, time_most_recent_txn_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, most_recent_txnid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, balance_in_usd_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, delayed_balance_in_usd_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, has_wallet_in_other_regions_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, other_regions_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetWalletDetails_Response, formatted_balance_),
  6,
  0,
  1,
  2,
  4,
  5,
  8,
  12,
  9,
  10,
  11,
  7,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Response, pwid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Response, identity_verification_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetAccountLinkStatus_Response, performed_age_verification_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CancelLicenseForApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CancelLicenseForApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CancelLicenseForApp_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CancelLicenseForApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetUserCountry_Response, country_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Request, invite_limit_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Request, invite_duration_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Request, invite_note_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, invite_token_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, invite_limit_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, invite_duration_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, time_created_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_CreateFriendInviteToken_Response, valid_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetFriendInviteTokens_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetFriendInviteTokens_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_GetFriendInviteTokens_Response, tokens_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Request, invite_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Response, valid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Response, steamid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_ViewFriendInviteToken_Response, invite_duration_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RedeemFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RedeemFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RedeemFriendInviteToken_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RedeemFriendInviteToken_Request, invite_token_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RedeemFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RevokeFriendInviteToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RevokeFriendInviteToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RevokeFriendInviteToken_Request, invite_token_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RevokeFriendInviteToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RegisterCompatTool_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RegisterCompatTool_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RegisterCompatTool_Request, compat_tool_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUserAccount_RegisterCompatTool_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, account_type_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, account_id_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, filter_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Request, return_access_token_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_type_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_id_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_user_name_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_url_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, access_token_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, access_token_secret_),
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, is_valid_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountLinking_GetLinkedAccountInfo_Response, external_accounts_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, device_info_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeCurrentDevice_Request, deviceid_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, steamid_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, client_token_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, expiry_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_Token, deviceid_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeDevice_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeDevice_Response, result_),
  PROTOBUF_FIELD_OFFSET(::CEmbeddedClient_AuthorizeDevice_Response, token_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CUserAccount_GetAvailableValveDiscountPromotions_Request)},
  { 7, 23, sizeof(::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails)},
  { 34, -1, sizeof(::CUserAccount_GetAvailableValveDiscountPromotions_Response)},
  { 40, 48, sizeof(::CUserAccount_GetClientWalletDetails_Request)},
  { 51, 70, sizeof(::CUserAccount_GetWalletDetails_Response)},
  { 84, -1, sizeof(::CUserAccount_GetAccountLinkStatus_Request)},
  { 89, 97, sizeof(::CUserAccount_GetAccountLinkStatus_Response)},
  { 100, 106, sizeof(::CUserAccount_CancelLicenseForApp_Request)},
  { 107, -1, sizeof(::CUserAccount_CancelLicenseForApp_Response)},
  { 112, 118, sizeof(::CUserAccount_GetUserCountry_Request)},
  { 119, 125, sizeof(::CUserAccount_GetUserCountry_Response)},
  { 126, 134, sizeof(::CUserAccount_CreateFriendInviteToken_Request)},
  { 137, 147, sizeof(::CUserAccount_CreateFriendInviteToken_Response)},
  { 152, -1, sizeof(::CUserAccount_GetFriendInviteTokens_Request)},
  { 157, -1, sizeof(::CUserAccount_GetFriendInviteTokens_Response)},
  { 163, 170, sizeof(::CUserAccount_ViewFriendInviteToken_Request)},
  { 172, 180, sizeof(::CUserAccount_ViewFriendInviteToken_Response)},
  { 183, 190, sizeof(::CUserAccount_RedeemFriendInviteToken_Request)},
  { 192, -1, sizeof(::CUserAccount_RedeemFriendInviteToken_Response)},
  { 197, 203, sizeof(::CUserAccount_RevokeFriendInviteToken_Request)},
  { 204, -1, sizeof(::CUserAccount_RevokeFriendInviteToken_Response)},
  { 209, 215, sizeof(::CUserAccount_RegisterCompatTool_Request)},
  { 216, -1, sizeof(::CUserAccount_RegisterCompatTool_Response)},
  { 221, 230, sizeof(::CAccountLinking_GetLinkedAccountInfo_Request)},
  { 234, 246, sizeof(::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response)},
  { 253, -1, sizeof(::CAccountLinking_GetLinkedAccountInfo_Response)},
  { 259, 268, sizeof(::CEmbeddedClient_AuthorizeCurrentDevice_Request)},
  { 272, 281, sizeof(::CEmbeddedClient_Token)},
  { 285, 292, sizeof(::CEmbeddedClient_AuthorizeDevice_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetAvailableValveDiscountPromotions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetAvailableValveDiscountPromotions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetClientWalletDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetWalletDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetAccountLinkStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetAccountLinkStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_CancelLicenseForApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_CancelLicenseForApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetUserCountry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetUserCountry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_CreateFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_CreateFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetFriendInviteTokens_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_GetFriendInviteTokens_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_ViewFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_ViewFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RedeemFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RedeemFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RevokeFriendInviteToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RevokeFriendInviteToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RegisterCompatTool_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserAccount_RegisterCompatTool_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountLinking_GetLinkedAccountInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountLinking_GetLinkedAccountInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEmbeddedClient_AuthorizeCurrentDevice_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEmbeddedClient_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEmbeddedClient_AuthorizeDevice_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fuseraccount_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steammessages_useraccount.steamclient."
  "proto\032 google/protobuf/descriptor.proto\032"
  "\030steammessages_base.proto\032,steammessages"
  "_unified_base.steamclient.proto\"P\n8CUser"
  "Account_GetAvailableValveDiscountPromoti"
  "ons_Request\022\024\n\014country_code\030\001 \001(\t\"\205\004\n9CU"
  "serAccount_GetAvailableValveDiscountProm"
  "otions_Response\022l\n\npromotions\030\001 \003(\0132X.CU"
  "serAccount_GetAvailableValveDiscountProm"
  "otions_Response.ValveDiscountPromotionDe"
  "tails\032\331\002\n\035ValveDiscountPromotionDetails\022"
  "\023\n\013promotionid\030\001 \001(\r\022\035\n\025promotion_descri"
  "ption\030\002 \001(\t\022\033\n\023minimum_cart_amount\030\003 \001(\003"
  "\022\'\n\037minimum_cart_amount_for_display\030\004 \001("
  "\003\022\027\n\017discount_amount\030\005 \001(\003\022\025\n\rcurrency_c"
  "ode\030\006 \001(\005\022\033\n\023available_use_count\030\007 \001(\005\022!"
  "\n\031promotional_discount_type\030\010 \001(\005\022\031\n\021loy"
  "alty_reward_id\030\t \001(\005\022\034\n\024localized_name_t"
  "oken\030\n \001(\t\022\025\n\rmax_use_count\030\013 \001(\005\"\212\001\n+CU"
  "serAccount_GetClientWalletDetails_Reques"
  "t\022\036\n\026include_balance_in_usd\030\001 \001(\010\022\030\n\rwal"
  "let_region\030\002 \001(\005:\0011\022!\n\031include_formatted"
  "_balance\030\003 \001(\010\"\223\003\n&CUserAccount_GetWalle"
  "tDetails_Response\022\022\n\nhas_wallet\030\001 \001(\010\022\031\n"
  "\021user_country_code\030\002 \001(\t\022\033\n\023wallet_count"
  "ry_code\030\003 \001(\t\022\024\n\014wallet_state\030\004 \001(\t\022\017\n\007b"
  "alance\030\005 \001(\003\022\027\n\017delayed_balance\030\006 \001(\003\022\025\n"
  "\rcurrency_code\030\007 \001(\005\022\034\n\024time_most_recent"
  "_txn\030\010 \001(\r\022\031\n\021most_recent_txnid\030\t \001(\004\022\026\n"
  "\016balance_in_usd\030\n \001(\003\022\036\n\026delayed_balance"
  "_in_usd\030\013 \001(\003\022#\n\033has_wallet_in_other_reg"
  "ions\030\014 \001(\010\022\025\n\rother_regions\030\r \003(\005\022\031\n\021for"
  "matted_balance\030\016 \001(\t\"+\n)CUserAccount_Get"
  "AccountLinkStatus_Request\"}\n*CUserAccoun"
  "t_GetAccountLinkStatus_Response\022\014\n\004pwid\030"
  "\001 \001(\r\022\035\n\025identity_verification\030\002 \001(\r\022\"\n\032"
  "performed_age_verification\030\003 \001(\010\"9\n(CUse"
  "rAccount_CancelLicenseForApp_Request\022\r\n\005"
  "appid\030\001 \001(\r\"+\n)CUserAccount_CancelLicens"
  "eForApp_Response\"6\n#CUserAccount_GetUser"
  "Country_Request\022\017\n\007steamid\030\001 \001(\006\"7\n$CUse"
  "rAccount_GetUserCountry_Response\022\017\n\007coun"
  "try\030\001 \001(\t\"r\n,CUserAccount_CreateFriendIn"
  "viteToken_Request\022\024\n\014invite_limit\030\001 \001(\r\022"
  "\027\n\017invite_duration\030\002 \001(\r\022\023\n\013invite_note\030"
  "\003 \001(\t\"\231\001\n-CUserAccount_CreateFriendInvit"
  "eToken_Response\022\024\n\014invite_token\030\001 \001(\t\022\024\n"
  "\014invite_limit\030\002 \001(\004\022\027\n\017invite_duration\030\003"
  " \001(\004\022\024\n\014time_created\030\004 \001(\007\022\r\n\005valid\030\005 \001("
  "\010\",\n*CUserAccount_GetFriendInviteTokens_"
  "Request\"m\n+CUserAccount_GetFriendInviteT"
  "okens_Response\022>\n\006tokens\030\001 \003(\0132..CUserAc"
  "count_CreateFriendInviteToken_Response\"S"
  "\n*CUserAccount_ViewFriendInviteToken_Req"
  "uest\022\017\n\007steamid\030\001 \001(\006\022\024\n\014invite_token\030\002 "
  "\001(\t\"f\n+CUserAccount_ViewFriendInviteToke"
  "n_Response\022\r\n\005valid\030\001 \001(\010\022\017\n\007steamid\030\002 \001"
  "(\004\022\027\n\017invite_duration\030\003 \001(\004\"U\n,CUserAcco"
  "unt_RedeemFriendInviteToken_Request\022\017\n\007s"
  "teamid\030\001 \001(\006\022\024\n\014invite_token\030\002 \001(\t\"/\n-CU"
  "serAccount_RedeemFriendInviteToken_Respo"
  "nse\"D\n,CUserAccount_RevokeFriendInviteTo"
  "ken_Request\022\024\n\014invite_token\030\001 \001(\t\"/\n-CUs"
  "erAccount_RevokeFriendInviteToken_Respon"
  "se\">\n\'CUserAccount_RegisterCompatTool_Re"
  "quest\022\023\n\013compat_tool\030\001 \001(\r\"*\n(CUserAccou"
  "nt_RegisterCompatTool_Response\"\335\001\n,CAcco"
  "untLinking_GetLinkedAccountInfo_Request\022"
  "F\n\014account_type\030\001 \001(\0162\025.EInternalAccount"
  "Type:\031EInternalSteamAccountType\022\022\n\naccou"
  "nt_id\030\002 \001(\004\0224\n\006filter\030\003 \001(\0162\025.EExternalA"
  "ccountType:\rEExternalNone\022\033\n\023return_acce"
  "ss_token\030\004 \001(\010\"\205\003\n-CAccountLinking_GetLi"
  "nkedAccountInfo_Response\022h\n\021external_acc"
  "ounts\030\001 \003(\0132M.CAccountLinking_GetLinkedA"
  "ccountInfo_Response.CExternalAccountTupl"
  "e_Response\032\351\001\n\036CExternalAccountTuple_Res"
  "ponse\022;\n\rexternal_type\030\001 \001(\0162\025.EExternal"
  "AccountType:\rEExternalNone\022\023\n\013external_i"
  "d\030\002 \001(\t\022\032\n\022external_user_name\030\003 \001(\t\022\024\n\014e"
  "xternal_url\030\004 \001(\t\022\024\n\014access_token\030\005 \001(\t\022"
  "\033\n\023access_token_secret\030\006 \001(\t\022\020\n\010is_valid"
  "\030\007 \001(\010\"w\n.CEmbeddedClient_AuthorizeCurre"
  "ntDevice_Request\022\017\n\007steamid\030\001 \001(\006\022\r\n\005app"
  "id\030\002 \001(\r\022\023\n\013device_info\030\003 \001(\t\022\020\n\010devicei"
  "d\030\004 \001(\r\"`\n\025CEmbeddedClient_Token\022\017\n\007stea"
  "mid\030\001 \001(\006\022\024\n\014client_token\030\002 \001(\014\022\016\n\006expir"
  "y\030\003 \001(\r\022\020\n\010deviceid\030\004 \001(\r\"a\n(CEmbeddedCl"
  "ient_AuthorizeDevice_Response\022\016\n\006result\030"
  "\001 \001(\r\022%\n\005token\030\002 \001(\0132\026.CEmbeddedClient_T"
  "oken*\205\001\n\024EInternalAccountType\022\035\n\031EIntern"
  "alSteamAccountType\020\001\022\025\n\021EInternalClanTyp"
  "e\020\002\022\024\n\020EInternalAppType\020\003\022!\n\035EInternalBr"
  "oadcastChannelType\020\004*\366\001\n\024EExternalAccoun"
  "tType\022\021\n\rEExternalNone\020\000\022\031\n\025EExternalSte"
  "amAccount\020\001\022\032\n\026EExternalGoogleAccount\020\002\022"
  "\034\n\030EExternalFacebookAccount\020\003\022\033\n\027EExtern"
  "alTwitterAccount\020\004\022\032\n\026EExternalTwitchAcc"
  "ount\020\005\022\"\n\036EExternalYouTubeChannelAccount"
  "\020\006\022\031\n\025EExternalFacebookPage\020\0072\234\n\n\013UserAc"
  "count\022\234\001\n#GetAvailableValveDiscountPromo"
  "tions\0229.CUserAccount_GetAvailableValveDi"
  "scountPromotions_Request\032:.CUserAccount_"
  "GetAvailableValveDiscountPromotions_Resp"
  "onse\022o\n\026GetClientWalletDetails\022,.CUserAc"
  "count_GetClientWalletDetails_Request\032\'.C"
  "UserAccount_GetWalletDetails_Response\022o\n"
  "\024GetAccountLinkStatus\022*.CUserAccount_Get"
  "AccountLinkStatus_Request\032+.CUserAccount"
  "_GetAccountLinkStatus_Response\022l\n\023Cancel"
  "LicenseForApp\022).CUserAccount_CancelLicen"
  "seForApp_Request\032*.CUserAccount_CancelLi"
  "censeForApp_Response\022]\n\016GetUserCountry\022$"
  ".CUserAccount_GetUserCountry_Request\032%.C"
  "UserAccount_GetUserCountry_Response\022x\n\027C"
  "reateFriendInviteToken\022-.CUserAccount_Cr"
  "eateFriendInviteToken_Request\032..CUserAcc"
  "ount_CreateFriendInviteToken_Response\022r\n"
  "\025GetFriendInviteTokens\022+.CUserAccount_Ge"
  "tFriendInviteTokens_Request\032,.CUserAccou"
  "nt_GetFriendInviteTokens_Response\022r\n\025Vie"
  "wFriendInviteToken\022+.CUserAccount_ViewFr"
  "iendInviteToken_Request\032,.CUserAccount_V"
  "iewFriendInviteToken_Response\022x\n\027RedeemF"
  "riendInviteToken\022-.CUserAccount_RedeemFr"
  "iendInviteToken_Request\032..CUserAccount_R"
  "edeemFriendInviteToken_Response\022x\n\027Revok"
  "eFriendInviteToken\022-.CUserAccount_Revoke"
  "FriendInviteToken_Request\032..CUserAccount"
  "_RevokeFriendInviteToken_Response\022i\n\022Reg"
  "isterCompatTool\022(.CUserAccount_RegisterC"
  "ompatTool_Request\032).CUserAccount_Registe"
  "rCompatTool_Response2\207\001\n\016AccountLinking\022"
  "u\n\024GetLinkedAccountInfo\022-.CAccountLinkin"
  "g_GetLinkedAccountInfo_Request\032..CAccoun"
  "tLinking_GetLinkedAccountInfo_Response2\206"
  "\001\n\016EmbeddedClient\022t\n\026AuthorizeCurrentDev"
  "ice\022/.CEmbeddedClient_AuthorizeCurrentDe"
  "vice_Request\032).CEmbeddedClient_Authorize"
  "Device_ResponseB\035\200\001\001\252\002\027OpenSteamworks.Pr"
  "otobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto = {
  false, false, 5606, descriptor_table_protodef_steammessages_5fuseraccount_2esteamclient_2eproto, "steammessages_useraccount.steamclient.proto", 
  &descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto_once, descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto_deps, 3, 29,
  schemas, file_default_instances, TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fuseraccount_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fuseraccount_2esteamclient_2eproto(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInternalAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0];
}
bool EInternalAccountType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1];
}
bool EExternalAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CUserAccount_GetAvailableValveDiscountPromotions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetAvailableValveDiscountPromotions_Request>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_GetAvailableValveDiscountPromotions_Request::CUserAccount_GetAvailableValveDiscountPromotions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Request)
}
CUserAccount_GetAvailableValveDiscountPromotions_Request::CUserAccount_GetAvailableValveDiscountPromotions_Request(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Request)
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserAccount_GetAvailableValveDiscountPromotions_Request::~CUserAccount_GetAvailableValveDiscountPromotions_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::ArenaDtor(void* object) {
  CUserAccount_GetAvailableValveDiscountPromotions_Request* _this = reinterpret_cast< CUserAccount_GetAvailableValveDiscountPromotions_Request* >(object);
  (void)_this;
}
void CUserAccount_GetAvailableValveDiscountPromotions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetAvailableValveDiscountPromotions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetAvailableValveDiscountPromotions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetAvailableValveDiscountPromotions_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  return target;
}

size_t CUserAccount_GetAvailableValveDiscountPromotions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string country_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAvailableValveDiscountPromotions_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetAvailableValveDiscountPromotions_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetAvailableValveDiscountPromotions_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetAvailableValveDiscountPromotions_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_country_code()) {
    _internal_set_country_code(from._internal_country_code());
  }
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAvailableValveDiscountPromotions_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Request::InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetAvailableValveDiscountPromotions_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails>()._has_bits_);
  static void set_has_promotionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_promotion_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minimum_cart_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_minimum_cart_amount_for_display(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_discount_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_available_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_promotional_discount_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_loyalty_reward_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_localized_name_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
}
CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  promotion_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_promotion_description()) {
    promotion_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_promotion_description(), 
      GetArena());
  }
  localized_name_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localized_name_token()) {
    localized_name_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localized_name_token(), 
      GetArena());
  }
  ::memcpy(&minimum_cart_amount_, &from.minimum_cart_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_use_count_) -
    reinterpret_cast<char*>(&minimum_cart_amount_)) + sizeof(max_use_count_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::SharedCtor() {
promotion_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localized_name_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_cart_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_use_count_) -
    reinterpret_cast<char*>(&minimum_cart_amount_)) + sizeof(max_use_count_));
}

CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::~CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  promotion_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localized_name_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::ArenaDtor(void* object) {
  CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* _this = reinterpret_cast< CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* >(object);
  (void)_this;
}
void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      promotion_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      localized_name_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&minimum_cart_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_use_count_) -
        reinterpret_cast<char*>(&minimum_cart_amount_)) + sizeof(available_use_count_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&promotional_discount_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_use_count_) -
        reinterpret_cast<char*>(&promotional_discount_type_)) + sizeof(max_use_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 promotionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_promotionid(&has_bits);
          promotionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string promotion_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_promotion_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 minimum_cart_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_minimum_cart_amount(&has_bits);
          minimum_cart_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 minimum_cart_amount_for_display = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_minimum_cart_amount_for_display(&has_bits);
          minimum_cart_amount_for_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 discount_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_discount_amount(&has_bits);
          discount_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currency_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_currency_code(&has_bits);
          currency_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 available_use_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_available_use_count(&has_bits);
          available_use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 promotional_discount_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_promotional_discount_type(&has_bits);
          promotional_discount_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 loyalty_reward_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_loyalty_reward_id(&has_bits);
          loyalty_reward_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string localized_name_token = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_localized_name_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_use_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_use_count(&has_bits);
          max_use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 promotionid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_promotionid(), target);
  }

  // optional string promotion_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_promotion_description().data(), static_cast<int>(this->_internal_promotion_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_promotion_description(), target);
  }

  // optional int64 minimum_cart_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_minimum_cart_amount(), target);
  }

  // optional int64 minimum_cart_amount_for_display = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_minimum_cart_amount_for_display(), target);
  }

  // optional int64 discount_amount = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_discount_amount(), target);
  }

  // optional int32 currency_code = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_currency_code(), target);
  }

  // optional int32 available_use_count = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_available_use_count(), target);
  }

  // optional int32 promotional_discount_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_promotional_discount_type(), target);
  }

  // optional int32 loyalty_reward_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_loyalty_reward_id(), target);
  }

  // optional string localized_name_token = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_name_token().data(), static_cast<int>(this->_internal_localized_name_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_localized_name_token(), target);
  }

  // optional int32 max_use_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_use_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  return target;
}

size_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string promotion_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_promotion_description());
    }

    // optional string localized_name_token = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_name_token());
    }

    // optional int64 minimum_cart_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_minimum_cart_amount());
    }

    // optional uint32 promotionid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_promotionid());
    }

    // optional int32 currency_code = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currency_code());
    }

    // optional int64 minimum_cart_amount_for_display = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_minimum_cart_amount_for_display());
    }

    // optional int64 discount_amount = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_discount_amount());
    }

    // optional int32 available_use_count = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_available_use_count());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 promotional_discount_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_promotional_discount_type());
    }

    // optional int32 loyalty_reward_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_loyalty_reward_id());
    }

    // optional int32 max_use_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_use_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_promotion_description(from._internal_promotion_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_localized_name_token(from._internal_localized_name_token());
    }
    if (cached_has_bits & 0x00000004u) {
      minimum_cart_amount_ = from.minimum_cart_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      promotionid_ = from.promotionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      currency_code_ = from.currency_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      minimum_cart_amount_for_display_ = from.minimum_cart_amount_for_display_;
    }
    if (cached_has_bits & 0x00000040u) {
      discount_amount_ = from.discount_amount_;
    }
    if (cached_has_bits & 0x00000080u) {
      available_use_count_ = from.available_use_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      promotional_discount_type_ = from.promotional_discount_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      loyalty_reward_id_ = from.loyalty_reward_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_use_count_ = from.max_use_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::IsInitialized() const {
  return true;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  promotion_description_.Swap(&other->promotion_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  localized_name_token_.Swap(&other->localized_name_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, max_use_count_)
      + sizeof(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::max_use_count_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails, minimum_cart_amount_)>(
          reinterpret_cast<char*>(&minimum_cart_amount_),
          reinterpret_cast<char*>(&other->minimum_cart_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetAvailableValveDiscountPromotions_Response::_Internal {
 public:
};

CUserAccount_GetAvailableValveDiscountPromotions_Response::CUserAccount_GetAvailableValveDiscountPromotions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  promotions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Response)
}
CUserAccount_GetAvailableValveDiscountPromotions_Response::CUserAccount_GetAvailableValveDiscountPromotions_Response(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      promotions_(from.promotions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetAvailableValveDiscountPromotions_Response)
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::SharedCtor() {
}

CUserAccount_GetAvailableValveDiscountPromotions_Response::~CUserAccount_GetAvailableValveDiscountPromotions_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::ArenaDtor(void* object) {
  CUserAccount_GetAvailableValveDiscountPromotions_Response* _this = reinterpret_cast< CUserAccount_GetAvailableValveDiscountPromotions_Response* >(object);
  (void)_this;
}
void CUserAccount_GetAvailableValveDiscountPromotions_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetAvailableValveDiscountPromotions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  promotions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetAvailableValveDiscountPromotions_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_promotions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetAvailableValveDiscountPromotions_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_promotions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_promotions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  return target;
}

size_t CUserAccount_GetAvailableValveDiscountPromotions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;
  total_size += 1UL * this->_internal_promotions_size();
  for (const auto& msg : this->promotions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAvailableValveDiscountPromotions_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetAvailableValveDiscountPromotions_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetAvailableValveDiscountPromotions_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetAvailableValveDiscountPromotions_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  promotions_.MergeFrom(from.promotions_);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetAvailableValveDiscountPromotions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAvailableValveDiscountPromotions_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetAvailableValveDiscountPromotions_Response::InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  promotions_.InternalSwap(&other->promotions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetAvailableValveDiscountPromotions_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetClientWalletDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetClientWalletDetails_Request>()._has_bits_);
  static void set_has_include_balance_in_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wallet_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_include_formatted_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserAccount_GetClientWalletDetails_Request::CUserAccount_GetClientWalletDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetClientWalletDetails_Request)
}
CUserAccount_GetClientWalletDetails_Request::CUserAccount_GetClientWalletDetails_Request(const CUserAccount_GetClientWalletDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&include_balance_in_usd_, &from.include_balance_in_usd_,
    static_cast<size_t>(reinterpret_cast<char*>(&wallet_region_) -
    reinterpret_cast<char*>(&include_balance_in_usd_)) + sizeof(wallet_region_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetClientWalletDetails_Request)
}

void CUserAccount_GetClientWalletDetails_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&include_balance_in_usd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_formatted_balance_) -
    reinterpret_cast<char*>(&include_balance_in_usd_)) + sizeof(include_formatted_balance_));
wallet_region_ = 1;
}

CUserAccount_GetClientWalletDetails_Request::~CUserAccount_GetClientWalletDetails_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetClientWalletDetails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetClientWalletDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetClientWalletDetails_Request::ArenaDtor(void* object) {
  CUserAccount_GetClientWalletDetails_Request* _this = reinterpret_cast< CUserAccount_GetClientWalletDetails_Request* >(object);
  (void)_this;
}
void CUserAccount_GetClientWalletDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetClientWalletDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetClientWalletDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetClientWalletDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&include_balance_in_usd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_formatted_balance_) -
      reinterpret_cast<char*>(&include_balance_in_usd_)) + sizeof(include_formatted_balance_));
  wallet_region_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetClientWalletDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool include_balance_in_usd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_include_balance_in_usd(&has_bits);
          include_balance_in_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wallet_region = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wallet_region(&has_bits);
          wallet_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_formatted_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_formatted_balance(&has_bits);
          include_formatted_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetClientWalletDetails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetClientWalletDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_balance_in_usd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_balance_in_usd(), target);
  }

  // optional int32 wallet_region = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wallet_region(), target);
  }

  // optional bool include_formatted_balance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_formatted_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetClientWalletDetails_Request)
  return target;
}

size_t CUserAccount_GetClientWalletDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetClientWalletDetails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool include_balance_in_usd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool include_formatted_balance = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 wallet_region = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wallet_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetClientWalletDetails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetClientWalletDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetClientWalletDetails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetClientWalletDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetClientWalletDetails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetClientWalletDetails_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetClientWalletDetails_Request::MergeFrom(const CUserAccount_GetClientWalletDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetClientWalletDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      include_balance_in_usd_ = from.include_balance_in_usd_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_formatted_balance_ = from.include_formatted_balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      wallet_region_ = from.wallet_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetClientWalletDetails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetClientWalletDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetClientWalletDetails_Request::CopyFrom(const CUserAccount_GetClientWalletDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetClientWalletDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetClientWalletDetails_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetClientWalletDetails_Request::InternalSwap(CUserAccount_GetClientWalletDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_GetClientWalletDetails_Request, include_formatted_balance_)
      + sizeof(CUserAccount_GetClientWalletDetails_Request::include_formatted_balance_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_GetClientWalletDetails_Request, include_balance_in_usd_)>(
          reinterpret_cast<char*>(&include_balance_in_usd_),
          reinterpret_cast<char*>(&other->include_balance_in_usd_));
  swap(wallet_region_, other->wallet_region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetClientWalletDetails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetWalletDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetWalletDetails_Response>()._has_bits_);
  static void set_has_has_wallet(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wallet_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wallet_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delayed_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_most_recent_txn(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_most_recent_txnid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_balance_in_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_delayed_balance_in_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_has_wallet_in_other_regions(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_formatted_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUserAccount_GetWalletDetails_Response::CUserAccount_GetWalletDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  other_regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetWalletDetails_Response)
}
CUserAccount_GetWalletDetails_Response::CUserAccount_GetWalletDetails_Response(const CUserAccount_GetWalletDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      other_regions_(from.other_regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_country_code()) {
    user_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_country_code(), 
      GetArena());
  }
  wallet_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wallet_country_code()) {
    wallet_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wallet_country_code(), 
      GetArena());
  }
  wallet_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wallet_state()) {
    wallet_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wallet_state(), 
      GetArena());
  }
  formatted_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_formatted_balance()) {
    formatted_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_formatted_balance(), 
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_most_recent_txn_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(time_most_recent_txn_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetWalletDetails_Response)
}

void CUserAccount_GetWalletDetails_Response::SharedCtor() {
user_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wallet_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wallet_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
formatted_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_most_recent_txn_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(time_most_recent_txn_));
}

CUserAccount_GetWalletDetails_Response::~CUserAccount_GetWalletDetails_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetWalletDetails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetWalletDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wallet_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wallet_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formatted_balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_GetWalletDetails_Response::ArenaDtor(void* object) {
  CUserAccount_GetWalletDetails_Response* _this = reinterpret_cast< CUserAccount_GetWalletDetails_Response* >(object);
  (void)_this;
}
void CUserAccount_GetWalletDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetWalletDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetWalletDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetWalletDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      user_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      wallet_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      wallet_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      formatted_balance_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_wallet_in_other_regions_) -
        reinterpret_cast<char*>(&balance_)) + sizeof(has_wallet_in_other_regions_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&currency_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_most_recent_txn_) -
        reinterpret_cast<char*>(&currency_code_)) + sizeof(time_most_recent_txn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetWalletDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_wallet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_wallet(&has_bits);
          has_wallet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetWalletDetails_Response.user_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wallet_country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wallet_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetWalletDetails_Response.wallet_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wallet_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_wallet_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetWalletDetails_Response.wallet_state");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 delayed_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_delayed_balance(&has_bits);
          delayed_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currency_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_currency_code(&has_bits);
          currency_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_most_recent_txn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_most_recent_txn(&has_bits);
          time_most_recent_txn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 most_recent_txnid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_most_recent_txnid(&has_bits);
          most_recent_txnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balance_in_usd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_balance_in_usd(&has_bits);
          balance_in_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 delayed_balance_in_usd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_delayed_balance_in_usd(&has_bits);
          delayed_balance_in_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_wallet_in_other_regions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_has_wallet_in_other_regions(&has_bits);
          has_wallet_in_other_regions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 other_regions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_other_regions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_other_regions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string formatted_balance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_formatted_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetWalletDetails_Response.formatted_balance");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetWalletDetails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetWalletDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_wallet(), target);
  }

  // optional string user_country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_country_code().data(), static_cast<int>(this->_internal_user_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetWalletDetails_Response.user_country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_country_code(), target);
  }

  // optional string wallet_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wallet_country_code().data(), static_cast<int>(this->_internal_wallet_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetWalletDetails_Response.wallet_country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_wallet_country_code(), target);
  }

  // optional string wallet_state = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wallet_state().data(), static_cast<int>(this->_internal_wallet_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetWalletDetails_Response.wallet_state");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_wallet_state(), target);
  }

  // optional int64 balance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_balance(), target);
  }

  // optional int64 delayed_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_delayed_balance(), target);
  }

  // optional int32 currency_code = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_currency_code(), target);
  }

  // optional uint32 time_most_recent_txn = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_time_most_recent_txn(), target);
  }

  // optional uint64 most_recent_txnid = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_most_recent_txnid(), target);
  }

  // optional int64 balance_in_usd = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_balance_in_usd(), target);
  }

  // optional int64 delayed_balance_in_usd = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_delayed_balance_in_usd(), target);
  }

  // optional bool has_wallet_in_other_regions = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_has_wallet_in_other_regions(), target);
  }

  // repeated int32 other_regions = 13;
  for (int i = 0, n = this->_internal_other_regions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_other_regions(i), target);
  }

  // optional string formatted_balance = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_formatted_balance().data(), static_cast<int>(this->_internal_formatted_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetWalletDetails_Response.formatted_balance");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_formatted_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetWalletDetails_Response)
  return target;
}

size_t CUserAccount_GetWalletDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetWalletDetails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 other_regions = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->other_regions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_regions_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_country_code());
    }

    // optional string wallet_country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wallet_country_code());
    }

    // optional string wallet_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wallet_state());
    }

    // optional string formatted_balance = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_formatted_balance());
    }

    // optional int64 balance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balance());
    }

    // optional int64 delayed_balance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_delayed_balance());
    }

    // optional bool has_wallet = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_wallet_in_other_regions = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 currency_code = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currency_code());
    }

    // optional uint64 most_recent_txnid = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_most_recent_txnid());
    }

    // optional int64 balance_in_usd = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balance_in_usd());
    }

    // optional int64 delayed_balance_in_usd = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_delayed_balance_in_usd());
    }

    // optional uint32 time_most_recent_txn = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_most_recent_txn());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetWalletDetails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetWalletDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetWalletDetails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetWalletDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetWalletDetails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetWalletDetails_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetWalletDetails_Response::MergeFrom(const CUserAccount_GetWalletDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetWalletDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_regions_.MergeFrom(from.other_regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_country_code(from._internal_user_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_wallet_country_code(from._internal_wallet_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_wallet_state(from._internal_wallet_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_formatted_balance(from._internal_formatted_balance());
    }
    if (cached_has_bits & 0x00000010u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000020u) {
      delayed_balance_ = from.delayed_balance_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_wallet_ = from.has_wallet_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_wallet_in_other_regions_ = from.has_wallet_in_other_regions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      currency_code_ = from.currency_code_;
    }
    if (cached_has_bits & 0x00000200u) {
      most_recent_txnid_ = from.most_recent_txnid_;
    }
    if (cached_has_bits & 0x00000400u) {
      balance_in_usd_ = from.balance_in_usd_;
    }
    if (cached_has_bits & 0x00000800u) {
      delayed_balance_in_usd_ = from.delayed_balance_in_usd_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_most_recent_txn_ = from.time_most_recent_txn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetWalletDetails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetWalletDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetWalletDetails_Response::CopyFrom(const CUserAccount_GetWalletDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetWalletDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetWalletDetails_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetWalletDetails_Response::InternalSwap(CUserAccount_GetWalletDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  other_regions_.InternalSwap(&other->other_regions_);
  user_country_code_.Swap(&other->user_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wallet_country_code_.Swap(&other->wallet_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wallet_state_.Swap(&other->wallet_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  formatted_balance_.Swap(&other->formatted_balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_GetWalletDetails_Response, time_most_recent_txn_)
      + sizeof(CUserAccount_GetWalletDetails_Response::time_most_recent_txn_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_GetWalletDetails_Response, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetWalletDetails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetAccountLinkStatus_Request::_Internal {
 public:
};

CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetAccountLinkStatus_Request)
}
CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request(const CUserAccount_GetAccountLinkStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetAccountLinkStatus_Request)
}

void CUserAccount_GetAccountLinkStatus_Request::SharedCtor() {
}

CUserAccount_GetAccountLinkStatus_Request::~CUserAccount_GetAccountLinkStatus_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetAccountLinkStatus_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetAccountLinkStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetAccountLinkStatus_Request::ArenaDtor(void* object) {
  CUserAccount_GetAccountLinkStatus_Request* _this = reinterpret_cast< CUserAccount_GetAccountLinkStatus_Request* >(object);
  (void)_this;
}
void CUserAccount_GetAccountLinkStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetAccountLinkStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetAccountLinkStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetAccountLinkStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetAccountLinkStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetAccountLinkStatus_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetAccountLinkStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetAccountLinkStatus_Request)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetAccountLinkStatus_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetAccountLinkStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetAccountLinkStatus_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetAccountLinkStatus_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Request::InternalSwap(CUserAccount_GetAccountLinkStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetAccountLinkStatus_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetAccountLinkStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetAccountLinkStatus_Response>()._has_bits_);
  static void set_has_pwid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_identity_verification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_performed_age_verification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetAccountLinkStatus_Response)
}
CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response(const CUserAccount_GetAccountLinkStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    static_cast<size_t>(reinterpret_cast<char*>(&performed_age_verification_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(performed_age_verification_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetAccountLinkStatus_Response)
}

void CUserAccount_GetAccountLinkStatus_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pwid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&performed_age_verification_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(performed_age_verification_));
}

CUserAccount_GetAccountLinkStatus_Response::~CUserAccount_GetAccountLinkStatus_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetAccountLinkStatus_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetAccountLinkStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetAccountLinkStatus_Response::ArenaDtor(void* object) {
  CUserAccount_GetAccountLinkStatus_Response* _this = reinterpret_cast< CUserAccount_GetAccountLinkStatus_Response* >(object);
  (void)_this;
}
void CUserAccount_GetAccountLinkStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetAccountLinkStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetAccountLinkStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetAccountLinkStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pwid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&performed_age_verification_) -
        reinterpret_cast<char*>(&pwid_)) + sizeof(performed_age_verification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetAccountLinkStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pwid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pwid(&has_bits);
          pwid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 identity_verification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_identity_verification(&has_bits);
          identity_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool performed_age_verification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_performed_age_verification(&has_bits);
          performed_age_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetAccountLinkStatus_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetAccountLinkStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pwid(), target);
  }

  // optional uint32 identity_verification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_identity_verification(), target);
  }

  // optional bool performed_age_verification = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_performed_age_verification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetAccountLinkStatus_Response)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetAccountLinkStatus_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pwid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pwid());
    }

    // optional uint32 identity_verification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_identity_verification());
    }

    // optional bool performed_age_verification = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetAccountLinkStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetAccountLinkStatus_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetAccountLinkStatus_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      identity_verification_ = from.identity_verification_;
    }
    if (cached_has_bits & 0x00000004u) {
      performed_age_verification_ = from.performed_age_verification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Response::InternalSwap(CUserAccount_GetAccountLinkStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, performed_age_verification_)
      + sizeof(CUserAccount_GetAccountLinkStatus_Response::performed_age_verification_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, pwid_)>(
          reinterpret_cast<char*>(&pwid_),
          reinterpret_cast<char*>(&other->pwid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetAccountLinkStatus_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_CancelLicenseForApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_CancelLicenseForApp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_CancelLicenseForApp_Request::CUserAccount_CancelLicenseForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_CancelLicenseForApp_Request)
}
CUserAccount_CancelLicenseForApp_Request::CUserAccount_CancelLicenseForApp_Request(const CUserAccount_CancelLicenseForApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CUserAccount_CancelLicenseForApp_Request)
}

void CUserAccount_CancelLicenseForApp_Request::SharedCtor() {
appid_ = 0u;
}

CUserAccount_CancelLicenseForApp_Request::~CUserAccount_CancelLicenseForApp_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_CancelLicenseForApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_CancelLicenseForApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_CancelLicenseForApp_Request::ArenaDtor(void* object) {
  CUserAccount_CancelLicenseForApp_Request* _this = reinterpret_cast< CUserAccount_CancelLicenseForApp_Request* >(object);
  (void)_this;
}
void CUserAccount_CancelLicenseForApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_CancelLicenseForApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_CancelLicenseForApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_CancelLicenseForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_CancelLicenseForApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_CancelLicenseForApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_CancelLicenseForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_CancelLicenseForApp_Request)
  return target;
}

size_t CUserAccount_CancelLicenseForApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_CancelLicenseForApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CancelLicenseForApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_CancelLicenseForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CancelLicenseForApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_CancelLicenseForApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_CancelLicenseForApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_CancelLicenseForApp_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_CancelLicenseForApp_Request::MergeFrom(const CUserAccount_CancelLicenseForApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_CancelLicenseForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CUserAccount_CancelLicenseForApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_CancelLicenseForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CancelLicenseForApp_Request::CopyFrom(const CUserAccount_CancelLicenseForApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_CancelLicenseForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CancelLicenseForApp_Request::IsInitialized() const {
  return true;
}

void CUserAccount_CancelLicenseForApp_Request::InternalSwap(CUserAccount_CancelLicenseForApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_CancelLicenseForApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_CancelLicenseForApp_Response::_Internal {
 public:
};

CUserAccount_CancelLicenseForApp_Response::CUserAccount_CancelLicenseForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_CancelLicenseForApp_Response)
}
CUserAccount_CancelLicenseForApp_Response::CUserAccount_CancelLicenseForApp_Response(const CUserAccount_CancelLicenseForApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_CancelLicenseForApp_Response)
}

void CUserAccount_CancelLicenseForApp_Response::SharedCtor() {
}

CUserAccount_CancelLicenseForApp_Response::~CUserAccount_CancelLicenseForApp_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_CancelLicenseForApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_CancelLicenseForApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_CancelLicenseForApp_Response::ArenaDtor(void* object) {
  CUserAccount_CancelLicenseForApp_Response* _this = reinterpret_cast< CUserAccount_CancelLicenseForApp_Response* >(object);
  (void)_this;
}
void CUserAccount_CancelLicenseForApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_CancelLicenseForApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_CancelLicenseForApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_CancelLicenseForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_CancelLicenseForApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_CancelLicenseForApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_CancelLicenseForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_CancelLicenseForApp_Response)
  return target;
}

size_t CUserAccount_CancelLicenseForApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_CancelLicenseForApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CancelLicenseForApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_CancelLicenseForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CancelLicenseForApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_CancelLicenseForApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_CancelLicenseForApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_CancelLicenseForApp_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_CancelLicenseForApp_Response::MergeFrom(const CUserAccount_CancelLicenseForApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_CancelLicenseForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_CancelLicenseForApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_CancelLicenseForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CancelLicenseForApp_Response::CopyFrom(const CUserAccount_CancelLicenseForApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_CancelLicenseForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CancelLicenseForApp_Response::IsInitialized() const {
  return true;
}

void CUserAccount_CancelLicenseForApp_Response::InternalSwap(CUserAccount_CancelLicenseForApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_CancelLicenseForApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetUserCountry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetUserCountry_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_GetUserCountry_Request::CUserAccount_GetUserCountry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetUserCountry_Request)
}
CUserAccount_GetUserCountry_Request::CUserAccount_GetUserCountry_Request(const CUserAccount_GetUserCountry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetUserCountry_Request)
}

void CUserAccount_GetUserCountry_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CUserAccount_GetUserCountry_Request::~CUserAccount_GetUserCountry_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetUserCountry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetUserCountry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetUserCountry_Request::ArenaDtor(void* object) {
  CUserAccount_GetUserCountry_Request* _this = reinterpret_cast< CUserAccount_GetUserCountry_Request* >(object);
  (void)_this;
}
void CUserAccount_GetUserCountry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetUserCountry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetUserCountry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetUserCountry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetUserCountry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetUserCountry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetUserCountry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetUserCountry_Request)
  return target;
}

size_t CUserAccount_GetUserCountry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetUserCountry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetUserCountry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetUserCountry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetUserCountry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetUserCountry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetUserCountry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetUserCountry_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetUserCountry_Request::MergeFrom(const CUserAccount_GetUserCountry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetUserCountry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CUserAccount_GetUserCountry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetUserCountry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetUserCountry_Request::CopyFrom(const CUserAccount_GetUserCountry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetUserCountry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetUserCountry_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetUserCountry_Request::InternalSwap(CUserAccount_GetUserCountry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetUserCountry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetUserCountry_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_GetUserCountry_Response>()._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_GetUserCountry_Response::CUserAccount_GetUserCountry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetUserCountry_Response)
}
CUserAccount_GetUserCountry_Response::CUserAccount_GetUserCountry_Response(const CUserAccount_GetUserCountry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetUserCountry_Response)
}

void CUserAccount_GetUserCountry_Response::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserAccount_GetUserCountry_Response::~CUserAccount_GetUserCountry_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetUserCountry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetUserCountry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_GetUserCountry_Response::ArenaDtor(void* object) {
  CUserAccount_GetUserCountry_Response* _this = reinterpret_cast< CUserAccount_GetUserCountry_Response* >(object);
  (void)_this;
}
void CUserAccount_GetUserCountry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetUserCountry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetUserCountry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetUserCountry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetUserCountry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_GetUserCountry_Response.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetUserCountry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetUserCountry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_GetUserCountry_Response.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetUserCountry_Response)
  return target;
}

size_t CUserAccount_GetUserCountry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetUserCountry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string country = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetUserCountry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetUserCountry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetUserCountry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetUserCountry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetUserCountry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetUserCountry_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetUserCountry_Response::MergeFrom(const CUserAccount_GetUserCountry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetUserCountry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_country()) {
    _internal_set_country(from._internal_country());
  }
}

void CUserAccount_GetUserCountry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetUserCountry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetUserCountry_Response::CopyFrom(const CUserAccount_GetUserCountry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetUserCountry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetUserCountry_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetUserCountry_Response::InternalSwap(CUserAccount_GetUserCountry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetUserCountry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_CreateFriendInviteToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_CreateFriendInviteToken_Request>()._has_bits_);
  static void set_has_invite_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invite_note(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_CreateFriendInviteToken_Request::CUserAccount_CreateFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_CreateFriendInviteToken_Request)
}
CUserAccount_CreateFriendInviteToken_Request::CUserAccount_CreateFriendInviteToken_Request(const CUserAccount_CreateFriendInviteToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invite_note()) {
    invite_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_note(), 
      GetArena());
  }
  ::memcpy(&invite_limit_, &from.invite_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_duration_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_CreateFriendInviteToken_Request)
}

void CUserAccount_CreateFriendInviteToken_Request::SharedCtor() {
invite_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invite_limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invite_duration_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
}

CUserAccount_CreateFriendInviteToken_Request::~CUserAccount_CreateFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_CreateFriendInviteToken_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_CreateFriendInviteToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_CreateFriendInviteToken_Request::ArenaDtor(void* object) {
  CUserAccount_CreateFriendInviteToken_Request* _this = reinterpret_cast< CUserAccount_CreateFriendInviteToken_Request* >(object);
  (void)_this;
}
void CUserAccount_CreateFriendInviteToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_CreateFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_CreateFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_CreateFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_note_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&invite_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invite_duration_) -
        reinterpret_cast<char*>(&invite_limit_)) + sizeof(invite_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_CreateFriendInviteToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 invite_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_invite_limit(&has_bits);
          invite_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 invite_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_invite_duration(&has_bits);
          invite_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invite_note = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_invite_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_CreateFriendInviteToken_Request.invite_note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_CreateFriendInviteToken_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_CreateFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 invite_limit = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_invite_limit(), target);
  }

  // optional uint32 invite_duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invite_duration(), target);
  }

  // optional string invite_note = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_note().data(), static_cast<int>(this->_internal_invite_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_CreateFriendInviteToken_Request.invite_note");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invite_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_CreateFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_CreateFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_CreateFriendInviteToken_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invite_note = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_note());
    }

    // optional uint32 invite_limit = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_invite_limit());
    }

    // optional uint32 invite_duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_invite_duration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CreateFriendInviteToken_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_CreateFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CreateFriendInviteToken_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_CreateFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_CreateFriendInviteToken_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_CreateFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_CreateFriendInviteToken_Request::MergeFrom(const CUserAccount_CreateFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_CreateFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_note(from._internal_invite_note());
    }
    if (cached_has_bits & 0x00000002u) {
      invite_limit_ = from.invite_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      invite_duration_ = from.invite_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_CreateFriendInviteToken_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_CreateFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CreateFriendInviteToken_Request::CopyFrom(const CUserAccount_CreateFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_CreateFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CreateFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_CreateFriendInviteToken_Request::InternalSwap(CUserAccount_CreateFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_note_.Swap(&other->invite_note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_CreateFriendInviteToken_Request, invite_duration_)
      + sizeof(CUserAccount_CreateFriendInviteToken_Request::invite_duration_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_CreateFriendInviteToken_Request, invite_limit_)>(
          reinterpret_cast<char*>(&invite_limit_),
          reinterpret_cast<char*>(&other->invite_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_CreateFriendInviteToken_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_CreateFriendInviteToken_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_CreateFriendInviteToken_Response>()._has_bits_);
  static void set_has_invite_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invite_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CUserAccount_CreateFriendInviteToken_Response::CUserAccount_CreateFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_CreateFriendInviteToken_Response)
}
CUserAccount_CreateFriendInviteToken_Response::CUserAccount_CreateFriendInviteToken_Response(const CUserAccount_CreateFriendInviteToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invite_token()) {
    invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_token(), 
      GetArena());
  }
  ::memcpy(&invite_limit_, &from.invite_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_CreateFriendInviteToken_Response)
}

void CUserAccount_CreateFriendInviteToken_Response::SharedCtor() {
invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invite_limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
}

CUserAccount_CreateFriendInviteToken_Response::~CUserAccount_CreateFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_CreateFriendInviteToken_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_CreateFriendInviteToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_CreateFriendInviteToken_Response::ArenaDtor(void* object) {
  CUserAccount_CreateFriendInviteToken_Response* _this = reinterpret_cast< CUserAccount_CreateFriendInviteToken_Response* >(object);
  (void)_this;
}
void CUserAccount_CreateFriendInviteToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_CreateFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_CreateFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_CreateFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&invite_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&invite_limit_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_CreateFriendInviteToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invite_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invite_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_CreateFriendInviteToken_Response.invite_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 invite_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_invite_limit(&has_bits);
          invite_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 invite_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_invite_duration(&has_bits);
          invite_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_created = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_CreateFriendInviteToken_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_CreateFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_token().data(), static_cast<int>(this->_internal_invite_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_CreateFriendInviteToken_Response.invite_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_token(), target);
  }

  // optional uint64 invite_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_invite_limit(), target);
  }

  // optional uint64 invite_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invite_duration(), target);
  }

  // optional fixed32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_time_created(), target);
  }

  // optional bool valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_CreateFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_CreateFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_CreateFriendInviteToken_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string invite_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_token());
    }

    // optional uint64 invite_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_invite_limit());
    }

    // optional uint64 invite_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_invite_duration());
    }

    // optional fixed32 time_created = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_CreateFriendInviteToken_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_CreateFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_CreateFriendInviteToken_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_CreateFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_CreateFriendInviteToken_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_CreateFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_CreateFriendInviteToken_Response::MergeFrom(const CUserAccount_CreateFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_CreateFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_token(from._internal_invite_token());
    }
    if (cached_has_bits & 0x00000002u) {
      invite_limit_ = from.invite_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      invite_duration_ = from.invite_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_CreateFriendInviteToken_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_CreateFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_CreateFriendInviteToken_Response::CopyFrom(const CUserAccount_CreateFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_CreateFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_CreateFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_CreateFriendInviteToken_Response::InternalSwap(CUserAccount_CreateFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_CreateFriendInviteToken_Response, valid_)
      + sizeof(CUserAccount_CreateFriendInviteToken_Response::valid_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_CreateFriendInviteToken_Response, invite_limit_)>(
          reinterpret_cast<char*>(&invite_limit_),
          reinterpret_cast<char*>(&other->invite_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_CreateFriendInviteToken_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetFriendInviteTokens_Request::_Internal {
 public:
};

CUserAccount_GetFriendInviteTokens_Request::CUserAccount_GetFriendInviteTokens_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetFriendInviteTokens_Request)
}
CUserAccount_GetFriendInviteTokens_Request::CUserAccount_GetFriendInviteTokens_Request(const CUserAccount_GetFriendInviteTokens_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetFriendInviteTokens_Request)
}

void CUserAccount_GetFriendInviteTokens_Request::SharedCtor() {
}

CUserAccount_GetFriendInviteTokens_Request::~CUserAccount_GetFriendInviteTokens_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetFriendInviteTokens_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetFriendInviteTokens_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetFriendInviteTokens_Request::ArenaDtor(void* object) {
  CUserAccount_GetFriendInviteTokens_Request* _this = reinterpret_cast< CUserAccount_GetFriendInviteTokens_Request* >(object);
  (void)_this;
}
void CUserAccount_GetFriendInviteTokens_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetFriendInviteTokens_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetFriendInviteTokens_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetFriendInviteTokens_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetFriendInviteTokens_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetFriendInviteTokens_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetFriendInviteTokens_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetFriendInviteTokens_Request)
  return target;
}

size_t CUserAccount_GetFriendInviteTokens_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetFriendInviteTokens_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetFriendInviteTokens_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetFriendInviteTokens_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetFriendInviteTokens_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetFriendInviteTokens_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetFriendInviteTokens_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetFriendInviteTokens_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetFriendInviteTokens_Request::MergeFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetFriendInviteTokens_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_GetFriendInviteTokens_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetFriendInviteTokens_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetFriendInviteTokens_Request::CopyFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetFriendInviteTokens_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetFriendInviteTokens_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetFriendInviteTokens_Request::InternalSwap(CUserAccount_GetFriendInviteTokens_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetFriendInviteTokens_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_GetFriendInviteTokens_Response::_Internal {
 public:
};

CUserAccount_GetFriendInviteTokens_Response::CUserAccount_GetFriendInviteTokens_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_GetFriendInviteTokens_Response)
}
CUserAccount_GetFriendInviteTokens_Response::CUserAccount_GetFriendInviteTokens_Response(const CUserAccount_GetFriendInviteTokens_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_GetFriendInviteTokens_Response)
}

void CUserAccount_GetFriendInviteTokens_Response::SharedCtor() {
}

CUserAccount_GetFriendInviteTokens_Response::~CUserAccount_GetFriendInviteTokens_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_GetFriendInviteTokens_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_GetFriendInviteTokens_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_GetFriendInviteTokens_Response::ArenaDtor(void* object) {
  CUserAccount_GetFriendInviteTokens_Response* _this = reinterpret_cast< CUserAccount_GetFriendInviteTokens_Response* >(object);
  (void)_this;
}
void CUserAccount_GetFriendInviteTokens_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_GetFriendInviteTokens_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_GetFriendInviteTokens_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_GetFriendInviteTokens_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_GetFriendInviteTokens_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_GetFriendInviteTokens_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_GetFriendInviteTokens_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_GetFriendInviteTokens_Response)
  return target;
}

size_t CUserAccount_GetFriendInviteTokens_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_GetFriendInviteTokens_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_GetFriendInviteTokens_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_GetFriendInviteTokens_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetFriendInviteTokens_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_GetFriendInviteTokens_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_GetFriendInviteTokens_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_GetFriendInviteTokens_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetFriendInviteTokens_Response::MergeFrom(const CUserAccount_GetFriendInviteTokens_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_GetFriendInviteTokens_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
}

void CUserAccount_GetFriendInviteTokens_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_GetFriendInviteTokens_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetFriendInviteTokens_Response::CopyFrom(const CUserAccount_GetFriendInviteTokens_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_GetFriendInviteTokens_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetFriendInviteTokens_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetFriendInviteTokens_Response::InternalSwap(CUserAccount_GetFriendInviteTokens_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_GetFriendInviteTokens_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_ViewFriendInviteToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_ViewFriendInviteToken_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_ViewFriendInviteToken_Request::CUserAccount_ViewFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_ViewFriendInviteToken_Request)
}
CUserAccount_ViewFriendInviteToken_Request::CUserAccount_ViewFriendInviteToken_Request(const CUserAccount_ViewFriendInviteToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invite_token()) {
    invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_token(), 
      GetArena());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CUserAccount_ViewFriendInviteToken_Request)
}

void CUserAccount_ViewFriendInviteToken_Request::SharedCtor() {
invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamid_ = PROTOBUF_ULONGLONG(0);
}

CUserAccount_ViewFriendInviteToken_Request::~CUserAccount_ViewFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_ViewFriendInviteToken_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_ViewFriendInviteToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_ViewFriendInviteToken_Request::ArenaDtor(void* object) {
  CUserAccount_ViewFriendInviteToken_Request* _this = reinterpret_cast< CUserAccount_ViewFriendInviteToken_Request* >(object);
  (void)_this;
}
void CUserAccount_ViewFriendInviteToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_ViewFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_ViewFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_ViewFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmpty();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_ViewFriendInviteToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string invite_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invite_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_ViewFriendInviteToken_Request.invite_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_ViewFriendInviteToken_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_ViewFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string invite_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_token().data(), static_cast<int>(this->_internal_invite_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_ViewFriendInviteToken_Request.invite_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_ViewFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_ViewFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_ViewFriendInviteToken_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invite_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_token());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_ViewFriendInviteToken_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_ViewFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_ViewFriendInviteToken_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_ViewFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_ViewFriendInviteToken_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_ViewFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_ViewFriendInviteToken_Request::MergeFrom(const CUserAccount_ViewFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_ViewFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_token(from._internal_invite_token());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_ViewFriendInviteToken_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_ViewFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_ViewFriendInviteToken_Request::CopyFrom(const CUserAccount_ViewFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_ViewFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_ViewFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_ViewFriendInviteToken_Request::InternalSwap(CUserAccount_ViewFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_ViewFriendInviteToken_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_ViewFriendInviteToken_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_ViewFriendInviteToken_Response>()._has_bits_);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invite_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUserAccount_ViewFriendInviteToken_Response::CUserAccount_ViewFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_ViewFriendInviteToken_Response)
}
CUserAccount_ViewFriendInviteToken_Response::CUserAccount_ViewFriendInviteToken_Response(const CUserAccount_ViewFriendInviteToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:CUserAccount_ViewFriendInviteToken_Response)
}

void CUserAccount_ViewFriendInviteToken_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(valid_));
}

CUserAccount_ViewFriendInviteToken_Response::~CUserAccount_ViewFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_ViewFriendInviteToken_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_ViewFriendInviteToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_ViewFriendInviteToken_Response::ArenaDtor(void* object) {
  CUserAccount_ViewFriendInviteToken_Response* _this = reinterpret_cast< CUserAccount_ViewFriendInviteToken_Response* >(object);
  (void)_this;
}
void CUserAccount_ViewFriendInviteToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_ViewFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_ViewFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_ViewFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_ViewFriendInviteToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 invite_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_invite_duration(&has_bits);
          invite_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_ViewFriendInviteToken_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_ViewFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional uint64 invite_duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invite_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_ViewFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_ViewFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_ViewFriendInviteToken_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint64 invite_duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_invite_duration());
    }

    // optional bool valid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_ViewFriendInviteToken_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_ViewFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_ViewFriendInviteToken_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_ViewFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_ViewFriendInviteToken_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_ViewFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_ViewFriendInviteToken_Response::MergeFrom(const CUserAccount_ViewFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_ViewFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      invite_duration_ = from.invite_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_ViewFriendInviteToken_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_ViewFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_ViewFriendInviteToken_Response::CopyFrom(const CUserAccount_ViewFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_ViewFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_ViewFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_ViewFriendInviteToken_Response::InternalSwap(CUserAccount_ViewFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserAccount_ViewFriendInviteToken_Response, valid_)
      + sizeof(CUserAccount_ViewFriendInviteToken_Response::valid_)
      - PROTOBUF_FIELD_OFFSET(CUserAccount_ViewFriendInviteToken_Response, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_ViewFriendInviteToken_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RedeemFriendInviteToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_RedeemFriendInviteToken_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_RedeemFriendInviteToken_Request::CUserAccount_RedeemFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RedeemFriendInviteToken_Request)
}
CUserAccount_RedeemFriendInviteToken_Request::CUserAccount_RedeemFriendInviteToken_Request(const CUserAccount_RedeemFriendInviteToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invite_token()) {
    invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_token(), 
      GetArena());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RedeemFriendInviteToken_Request)
}

void CUserAccount_RedeemFriendInviteToken_Request::SharedCtor() {
invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamid_ = PROTOBUF_ULONGLONG(0);
}

CUserAccount_RedeemFriendInviteToken_Request::~CUserAccount_RedeemFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_RedeemFriendInviteToken_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RedeemFriendInviteToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_RedeemFriendInviteToken_Request::ArenaDtor(void* object) {
  CUserAccount_RedeemFriendInviteToken_Request* _this = reinterpret_cast< CUserAccount_RedeemFriendInviteToken_Request* >(object);
  (void)_this;
}
void CUserAccount_RedeemFriendInviteToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RedeemFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RedeemFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RedeemFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmpty();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RedeemFriendInviteToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string invite_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invite_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_RedeemFriendInviteToken_Request.invite_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RedeemFriendInviteToken_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RedeemFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string invite_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_token().data(), static_cast<int>(this->_internal_invite_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_RedeemFriendInviteToken_Request.invite_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RedeemFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_RedeemFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RedeemFriendInviteToken_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invite_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_token());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RedeemFriendInviteToken_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RedeemFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RedeemFriendInviteToken_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RedeemFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RedeemFriendInviteToken_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RedeemFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_RedeemFriendInviteToken_Request::MergeFrom(const CUserAccount_RedeemFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RedeemFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_token(from._internal_invite_token());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_RedeemFriendInviteToken_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RedeemFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RedeemFriendInviteToken_Request::CopyFrom(const CUserAccount_RedeemFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RedeemFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RedeemFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_RedeemFriendInviteToken_Request::InternalSwap(CUserAccount_RedeemFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RedeemFriendInviteToken_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RedeemFriendInviteToken_Response::_Internal {
 public:
};

CUserAccount_RedeemFriendInviteToken_Response::CUserAccount_RedeemFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RedeemFriendInviteToken_Response)
}
CUserAccount_RedeemFriendInviteToken_Response::CUserAccount_RedeemFriendInviteToken_Response(const CUserAccount_RedeemFriendInviteToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RedeemFriendInviteToken_Response)
}

void CUserAccount_RedeemFriendInviteToken_Response::SharedCtor() {
}

CUserAccount_RedeemFriendInviteToken_Response::~CUserAccount_RedeemFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_RedeemFriendInviteToken_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RedeemFriendInviteToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_RedeemFriendInviteToken_Response::ArenaDtor(void* object) {
  CUserAccount_RedeemFriendInviteToken_Response* _this = reinterpret_cast< CUserAccount_RedeemFriendInviteToken_Response* >(object);
  (void)_this;
}
void CUserAccount_RedeemFriendInviteToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RedeemFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RedeemFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RedeemFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RedeemFriendInviteToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RedeemFriendInviteToken_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RedeemFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RedeemFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_RedeemFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RedeemFriendInviteToken_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RedeemFriendInviteToken_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RedeemFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RedeemFriendInviteToken_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RedeemFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RedeemFriendInviteToken_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RedeemFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_RedeemFriendInviteToken_Response::MergeFrom(const CUserAccount_RedeemFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RedeemFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_RedeemFriendInviteToken_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RedeemFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RedeemFriendInviteToken_Response::CopyFrom(const CUserAccount_RedeemFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RedeemFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RedeemFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_RedeemFriendInviteToken_Response::InternalSwap(CUserAccount_RedeemFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RedeemFriendInviteToken_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RevokeFriendInviteToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_RevokeFriendInviteToken_Request>()._has_bits_);
  static void set_has_invite_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_RevokeFriendInviteToken_Request::CUserAccount_RevokeFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RevokeFriendInviteToken_Request)
}
CUserAccount_RevokeFriendInviteToken_Request::CUserAccount_RevokeFriendInviteToken_Request(const CUserAccount_RevokeFriendInviteToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invite_token()) {
    invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RevokeFriendInviteToken_Request)
}

void CUserAccount_RevokeFriendInviteToken_Request::SharedCtor() {
invite_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUserAccount_RevokeFriendInviteToken_Request::~CUserAccount_RevokeFriendInviteToken_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_RevokeFriendInviteToken_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RevokeFriendInviteToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUserAccount_RevokeFriendInviteToken_Request::ArenaDtor(void* object) {
  CUserAccount_RevokeFriendInviteToken_Request* _this = reinterpret_cast< CUserAccount_RevokeFriendInviteToken_Request* >(object);
  (void)_this;
}
void CUserAccount_RevokeFriendInviteToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RevokeFriendInviteToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RevokeFriendInviteToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RevokeFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_token_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RevokeFriendInviteToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invite_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invite_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUserAccount_RevokeFriendInviteToken_Request.invite_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RevokeFriendInviteToken_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RevokeFriendInviteToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_token().data(), static_cast<int>(this->_internal_invite_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUserAccount_RevokeFriendInviteToken_Request.invite_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RevokeFriendInviteToken_Request)
  return target;
}

size_t CUserAccount_RevokeFriendInviteToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RevokeFriendInviteToken_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invite_token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RevokeFriendInviteToken_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RevokeFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RevokeFriendInviteToken_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RevokeFriendInviteToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RevokeFriendInviteToken_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RevokeFriendInviteToken_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_RevokeFriendInviteToken_Request::MergeFrom(const CUserAccount_RevokeFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RevokeFriendInviteToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invite_token()) {
    _internal_set_invite_token(from._internal_invite_token());
  }
}

void CUserAccount_RevokeFriendInviteToken_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RevokeFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RevokeFriendInviteToken_Request::CopyFrom(const CUserAccount_RevokeFriendInviteToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RevokeFriendInviteToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RevokeFriendInviteToken_Request::IsInitialized() const {
  return true;
}

void CUserAccount_RevokeFriendInviteToken_Request::InternalSwap(CUserAccount_RevokeFriendInviteToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invite_token_.Swap(&other->invite_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RevokeFriendInviteToken_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RevokeFriendInviteToken_Response::_Internal {
 public:
};

CUserAccount_RevokeFriendInviteToken_Response::CUserAccount_RevokeFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RevokeFriendInviteToken_Response)
}
CUserAccount_RevokeFriendInviteToken_Response::CUserAccount_RevokeFriendInviteToken_Response(const CUserAccount_RevokeFriendInviteToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RevokeFriendInviteToken_Response)
}

void CUserAccount_RevokeFriendInviteToken_Response::SharedCtor() {
}

CUserAccount_RevokeFriendInviteToken_Response::~CUserAccount_RevokeFriendInviteToken_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_RevokeFriendInviteToken_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RevokeFriendInviteToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_RevokeFriendInviteToken_Response::ArenaDtor(void* object) {
  CUserAccount_RevokeFriendInviteToken_Response* _this = reinterpret_cast< CUserAccount_RevokeFriendInviteToken_Response* >(object);
  (void)_this;
}
void CUserAccount_RevokeFriendInviteToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RevokeFriendInviteToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RevokeFriendInviteToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RevokeFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RevokeFriendInviteToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RevokeFriendInviteToken_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RevokeFriendInviteToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RevokeFriendInviteToken_Response)
  return target;
}

size_t CUserAccount_RevokeFriendInviteToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RevokeFriendInviteToken_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RevokeFriendInviteToken_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RevokeFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RevokeFriendInviteToken_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RevokeFriendInviteToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RevokeFriendInviteToken_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RevokeFriendInviteToken_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_RevokeFriendInviteToken_Response::MergeFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RevokeFriendInviteToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_RevokeFriendInviteToken_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RevokeFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RevokeFriendInviteToken_Response::CopyFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RevokeFriendInviteToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RevokeFriendInviteToken_Response::IsInitialized() const {
  return true;
}

void CUserAccount_RevokeFriendInviteToken_Response::InternalSwap(CUserAccount_RevokeFriendInviteToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RevokeFriendInviteToken_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RegisterCompatTool_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserAccount_RegisterCompatTool_Request>()._has_bits_);
  static void set_has_compat_tool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUserAccount_RegisterCompatTool_Request::CUserAccount_RegisterCompatTool_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RegisterCompatTool_Request)
}
CUserAccount_RegisterCompatTool_Request::CUserAccount_RegisterCompatTool_Request(const CUserAccount_RegisterCompatTool_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compat_tool_ = from.compat_tool_;
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RegisterCompatTool_Request)
}

void CUserAccount_RegisterCompatTool_Request::SharedCtor() {
compat_tool_ = 0u;
}

CUserAccount_RegisterCompatTool_Request::~CUserAccount_RegisterCompatTool_Request() {
  // @@protoc_insertion_point(destructor:CUserAccount_RegisterCompatTool_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RegisterCompatTool_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_RegisterCompatTool_Request::ArenaDtor(void* object) {
  CUserAccount_RegisterCompatTool_Request* _this = reinterpret_cast< CUserAccount_RegisterCompatTool_Request* >(object);
  (void)_this;
}
void CUserAccount_RegisterCompatTool_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RegisterCompatTool_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RegisterCompatTool_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RegisterCompatTool_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compat_tool_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RegisterCompatTool_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 compat_tool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_compat_tool(&has_bits);
          compat_tool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RegisterCompatTool_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RegisterCompatTool_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 compat_tool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_compat_tool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RegisterCompatTool_Request)
  return target;
}

size_t CUserAccount_RegisterCompatTool_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RegisterCompatTool_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 compat_tool = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compat_tool());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RegisterCompatTool_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RegisterCompatTool_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RegisterCompatTool_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RegisterCompatTool_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RegisterCompatTool_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RegisterCompatTool_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_RegisterCompatTool_Request::MergeFrom(const CUserAccount_RegisterCompatTool_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RegisterCompatTool_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_compat_tool()) {
    _internal_set_compat_tool(from._internal_compat_tool());
  }
}

void CUserAccount_RegisterCompatTool_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RegisterCompatTool_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RegisterCompatTool_Request::CopyFrom(const CUserAccount_RegisterCompatTool_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RegisterCompatTool_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RegisterCompatTool_Request::IsInitialized() const {
  return true;
}

void CUserAccount_RegisterCompatTool_Request::InternalSwap(CUserAccount_RegisterCompatTool_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compat_tool_, other->compat_tool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RegisterCompatTool_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUserAccount_RegisterCompatTool_Response::_Internal {
 public:
};

CUserAccount_RegisterCompatTool_Response::CUserAccount_RegisterCompatTool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserAccount_RegisterCompatTool_Response)
}
CUserAccount_RegisterCompatTool_Response::CUserAccount_RegisterCompatTool_Response(const CUserAccount_RegisterCompatTool_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUserAccount_RegisterCompatTool_Response)
}

void CUserAccount_RegisterCompatTool_Response::SharedCtor() {
}

CUserAccount_RegisterCompatTool_Response::~CUserAccount_RegisterCompatTool_Response() {
  // @@protoc_insertion_point(destructor:CUserAccount_RegisterCompatTool_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUserAccount_RegisterCompatTool_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUserAccount_RegisterCompatTool_Response::ArenaDtor(void* object) {
  CUserAccount_RegisterCompatTool_Response* _this = reinterpret_cast< CUserAccount_RegisterCompatTool_Response* >(object);
  (void)_this;
}
void CUserAccount_RegisterCompatTool_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserAccount_RegisterCompatTool_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserAccount_RegisterCompatTool_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserAccount_RegisterCompatTool_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserAccount_RegisterCompatTool_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUserAccount_RegisterCompatTool_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserAccount_RegisterCompatTool_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserAccount_RegisterCompatTool_Response)
  return target;
}

size_t CUserAccount_RegisterCompatTool_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserAccount_RegisterCompatTool_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserAccount_RegisterCompatTool_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUserAccount_RegisterCompatTool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_RegisterCompatTool_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUserAccount_RegisterCompatTool_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUserAccount_RegisterCompatTool_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUserAccount_RegisterCompatTool_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_RegisterCompatTool_Response::MergeFrom(const CUserAccount_RegisterCompatTool_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserAccount_RegisterCompatTool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_RegisterCompatTool_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUserAccount_RegisterCompatTool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_RegisterCompatTool_Response::CopyFrom(const CUserAccount_RegisterCompatTool_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserAccount_RegisterCompatTool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_RegisterCompatTool_Response::IsInitialized() const {
  return true;
}

void CUserAccount_RegisterCompatTool_Response::InternalSwap(CUserAccount_RegisterCompatTool_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserAccount_RegisterCompatTool_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountLinking_GetLinkedAccountInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountLinking_GetLinkedAccountInfo_Request>()._has_bits_);
  static void set_has_account_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_return_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAccountLinking_GetLinkedAccountInfo_Request::CAccountLinking_GetLinkedAccountInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountLinking_GetLinkedAccountInfo_Request)
}
CAccountLinking_GetLinkedAccountInfo_Request::CAccountLinking_GetLinkedAccountInfo_Request(const CAccountLinking_GetLinkedAccountInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(account_type_));
  // @@protoc_insertion_point(copy_constructor:CAccountLinking_GetLinkedAccountInfo_Request)
}

void CAccountLinking_GetLinkedAccountInfo_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_access_token_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(return_access_token_));
account_type_ = 1;
}

CAccountLinking_GetLinkedAccountInfo_Request::~CAccountLinking_GetLinkedAccountInfo_Request() {
  // @@protoc_insertion_point(destructor:CAccountLinking_GetLinkedAccountInfo_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountLinking_GetLinkedAccountInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountLinking_GetLinkedAccountInfo_Request::ArenaDtor(void* object) {
  CAccountLinking_GetLinkedAccountInfo_Request* _this = reinterpret_cast< CAccountLinking_GetLinkedAccountInfo_Request* >(object);
  (void)_this;
}
void CAccountLinking_GetLinkedAccountInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountLinking_GetLinkedAccountInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountLinking_GetLinkedAccountInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountLinking_GetLinkedAccountInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_access_token_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(return_access_token_));
    account_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountLinking_GetLinkedAccountInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EInternalAccountType account_type = 1 [default = EInternalSteamAccountType];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EInternalAccountType_IsValid(val))) {
            _internal_set_account_type(static_cast<::EInternalAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EExternalAccountType filter = 3 [default = EExternalNone];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EExternalAccountType_IsValid(val))) {
            _internal_set_filter(static_cast<::EExternalAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool return_access_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_return_access_token(&has_bits);
          return_access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountLinking_GetLinkedAccountInfo_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountLinking_GetLinkedAccountInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EInternalAccountType account_type = 1 [default = EInternalSteamAccountType];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_account_type(), target);
  }

  // optional uint64 account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_account_id(), target);
  }

  // optional .EExternalAccountType filter = 3 [default = EExternalNone];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_filter(), target);
  }

  // optional bool return_access_token = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_return_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountLinking_GetLinkedAccountInfo_Request)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountLinking_GetLinkedAccountInfo_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 account_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_account_id());
    }

    // optional .EExternalAccountType filter = 3 [default = EExternalNone];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
    }

    // optional bool return_access_token = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .EInternalAccountType account_type = 1 [default = EInternalSteamAccountType];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_account_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountLinking_GetLinkedAccountInfo_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountLinking_GetLinkedAccountInfo_Request)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Request::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      filter_ = from.filter_;
    }
    if (cached_has_bits & 0x00000004u) {
      return_access_token_ = from.return_access_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_type_ = from.account_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountLinking_GetLinkedAccountInfo_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Request::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Request::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Request::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountLinking_GetLinkedAccountInfo_Request, return_access_token_)
      + sizeof(CAccountLinking_GetLinkedAccountInfo_Request::return_access_token_)
      - PROTOBUF_FIELD_OFFSET(CAccountLinking_GetLinkedAccountInfo_Request, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
  swap(account_type_, other->account_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountLinking_GetLinkedAccountInfo_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>()._has_bits_);
  static void set_has_external_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_external_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_access_token_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
}
CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_id()) {
    external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_id(), 
      GetArena());
  }
  external_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_user_name()) {
    external_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_user_name(), 
      GetArena());
  }
  external_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_url()) {
    external_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_url(), 
      GetArena());
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_access_token()) {
    access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_access_token(), 
      GetArena());
  }
  access_token_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_access_token_secret()) {
    access_token_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_access_token_secret(), 
      GetArena());
  }
  ::memcpy(&external_type_, &from.external_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SharedCtor() {
external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
access_token_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&external_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
}

CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::~CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() {
  // @@protoc_insertion_point(destructor:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  external_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::ArenaDtor(void* object) {
  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* _this = reinterpret_cast< CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* >(object);
  (void)_this;
}
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      external_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      external_user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      external_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      access_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      access_token_secret_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&external_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_) -
        reinterpret_cast<char*>(&external_type_)) + sizeof(is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EExternalAccountType external_type = 1 [default = EExternalNone];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EExternalAccountType_IsValid(val))) {
            _internal_set_external_type(static_cast<::EExternalAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string external_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_external_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string external_user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_external_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string external_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_external_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string access_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string access_token_secret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_access_token_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_valid(&has_bits);
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EExternalAccountType external_type = 1 [default = EExternalNone];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_external_type(), target);
  }

  // optional string external_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_external_id(), target);
  }

  // optional string external_user_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_user_name().data(), static_cast<int>(this->_internal_external_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_external_user_name(), target);
  }

  // optional string external_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_url().data(), static_cast<int>(this->_internal_external_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_external_url(), target);
  }

  // optional string access_token = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_access_token(), target);
  }

  // optional string access_token_secret = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_access_token_secret().data(), static_cast<int>(this->_internal_access_token_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_access_token_secret(), target);
  }

  // optional bool is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string external_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional string external_user_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_user_name());
    }

    // optional string external_url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_url());
    }

    // optional string access_token = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_access_token());
    }

    // optional string access_token_secret = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_access_token_secret());
    }

    // optional .EExternalAccountType external_type = 1 [default = EExternalNone];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_external_type());
    }

    // optional bool is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_external_user_name(from._internal_external_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_external_url(from._internal_external_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_access_token(from._internal_access_token());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_access_token_secret(from._internal_access_token_secret());
    }
    if (cached_has_bits & 0x00000020u) {
      external_type_ = from.external_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_valid_ = from.is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  external_id_.Swap(&other->external_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_user_name_.Swap(&other->external_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_url_.Swap(&other->external_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_token_secret_.Swap(&other->access_token_secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, is_valid_)
      + sizeof(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::is_valid_)
      - PROTOBUF_FIELD_OFFSET(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response, external_type_)>(
          reinterpret_cast<char*>(&external_type_),
          reinterpret_cast<char*>(&other->external_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountLinking_GetLinkedAccountInfo_Response::_Internal {
 public:
};

CAccountLinking_GetLinkedAccountInfo_Response::CAccountLinking_GetLinkedAccountInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  external_accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountLinking_GetLinkedAccountInfo_Response)
}
CAccountLinking_GetLinkedAccountInfo_Response::CAccountLinking_GetLinkedAccountInfo_Response(const CAccountLinking_GetLinkedAccountInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      external_accounts_(from.external_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountLinking_GetLinkedAccountInfo_Response)
}

void CAccountLinking_GetLinkedAccountInfo_Response::SharedCtor() {
}

CAccountLinking_GetLinkedAccountInfo_Response::~CAccountLinking_GetLinkedAccountInfo_Response() {
  // @@protoc_insertion_point(destructor:CAccountLinking_GetLinkedAccountInfo_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountLinking_GetLinkedAccountInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountLinking_GetLinkedAccountInfo_Response::ArenaDtor(void* object) {
  CAccountLinking_GetLinkedAccountInfo_Response* _this = reinterpret_cast< CAccountLinking_GetLinkedAccountInfo_Response* >(object);
  (void)_this;
}
void CAccountLinking_GetLinkedAccountInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountLinking_GetLinkedAccountInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountLinking_GetLinkedAccountInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountLinking_GetLinkedAccountInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountLinking_GetLinkedAccountInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountLinking_GetLinkedAccountInfo_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountLinking_GetLinkedAccountInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_external_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountLinking_GetLinkedAccountInfo_Response)
  return target;
}

size_t CAccountLinking_GetLinkedAccountInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountLinking_GetLinkedAccountInfo_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  total_size += 1UL * this->_internal_external_accounts_size();
  for (const auto& msg : this->external_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountLinking_GetLinkedAccountInfo_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountLinking_GetLinkedAccountInfo_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountLinking_GetLinkedAccountInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountLinking_GetLinkedAccountInfo_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountLinking_GetLinkedAccountInfo_Response)
    MergeFrom(*source);
  }
}

void CAccountLinking_GetLinkedAccountInfo_Response::MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountLinking_GetLinkedAccountInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  external_accounts_.MergeFrom(from.external_accounts_);
}

void CAccountLinking_GetLinkedAccountInfo_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountLinking_GetLinkedAccountInfo_Response::CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountLinking_GetLinkedAccountInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountLinking_GetLinkedAccountInfo_Response::IsInitialized() const {
  return true;
}

void CAccountLinking_GetLinkedAccountInfo_Response::InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  external_accounts_.InternalSwap(&other->external_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountLinking_GetLinkedAccountInfo_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEmbeddedClient_AuthorizeCurrentDevice_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CEmbeddedClient_AuthorizeCurrentDevice_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CEmbeddedClient_AuthorizeCurrentDevice_Request::CEmbeddedClient_AuthorizeCurrentDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEmbeddedClient_AuthorizeCurrentDevice_Request)
}
CEmbeddedClient_AuthorizeCurrentDevice_Request::CEmbeddedClient_AuthorizeCurrentDevice_Request(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_info()) {
    device_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_info(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:CEmbeddedClient_AuthorizeCurrentDevice_Request)
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::SharedCtor() {
device_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
}

CEmbeddedClient_AuthorizeCurrentDevice_Request::~CEmbeddedClient_AuthorizeCurrentDevice_Request() {
  // @@protoc_insertion_point(destructor:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::ArenaDtor(void* object) {
  CEmbeddedClient_AuthorizeCurrentDevice_Request* _this = reinterpret_cast< CEmbeddedClient_AuthorizeCurrentDevice_Request* >(object);
  (void)_this;
}
void CEmbeddedClient_AuthorizeCurrentDevice_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEmbeddedClient_AuthorizeCurrentDevice_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deviceid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEmbeddedClient_AuthorizeCurrentDevice_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deviceid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEmbeddedClient_AuthorizeCurrentDevice_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string device_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_info().data(), static_cast<int>(this->_internal_device_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_info(), target);
  }

  // optional uint32 deviceid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  return target;
}

size_t CEmbeddedClient_AuthorizeCurrentDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string device_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_info());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 deviceid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deviceid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CEmbeddedClient_AuthorizeCurrentDevice_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEmbeddedClient_AuthorizeCurrentDevice_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEmbeddedClient_AuthorizeCurrentDevice_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEmbeddedClient_AuthorizeCurrentDevice_Request)
    MergeFrom(*source);
  }
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::MergeFrom(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_info(from._internal_device_info());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      deviceid_ = from.deviceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::CopyFrom(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEmbeddedClient_AuthorizeCurrentDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEmbeddedClient_AuthorizeCurrentDevice_Request::IsInitialized() const {
  return true;
}

void CEmbeddedClient_AuthorizeCurrentDevice_Request::InternalSwap(CEmbeddedClient_AuthorizeCurrentDevice_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_info_.Swap(&other->device_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEmbeddedClient_AuthorizeCurrentDevice_Request, deviceid_)
      + sizeof(CEmbeddedClient_AuthorizeCurrentDevice_Request::deviceid_)
      - PROTOBUF_FIELD_OFFSET(CEmbeddedClient_AuthorizeCurrentDevice_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEmbeddedClient_AuthorizeCurrentDevice_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEmbeddedClient_Token::_Internal {
 public:
  using HasBits = decltype(std::declval<CEmbeddedClient_Token>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CEmbeddedClient_Token::CEmbeddedClient_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEmbeddedClient_Token)
}
CEmbeddedClient_Token::CEmbeddedClient_Token(const CEmbeddedClient_Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_token()) {
    client_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_token(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:CEmbeddedClient_Token)
}

void CEmbeddedClient_Token::SharedCtor() {
client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
}

CEmbeddedClient_Token::~CEmbeddedClient_Token() {
  // @@protoc_insertion_point(destructor:CEmbeddedClient_Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEmbeddedClient_Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEmbeddedClient_Token::ArenaDtor(void* object) {
  CEmbeddedClient_Token* _this = reinterpret_cast< CEmbeddedClient_Token* >(object);
  (void)_this;
}
void CEmbeddedClient_Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEmbeddedClient_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEmbeddedClient_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:CEmbeddedClient_Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deviceid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(deviceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEmbeddedClient_Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes client_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expiry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_expiry(&has_bits);
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deviceid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEmbeddedClient_Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEmbeddedClient_Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bytes client_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_client_token(), target);
  }

  // optional uint32 expiry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  // optional uint32 deviceid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEmbeddedClient_Token)
  return target;
}

size_t CEmbeddedClient_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEmbeddedClient_Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes client_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_client_token());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 expiry = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expiry());
    }

    // optional uint32 deviceid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deviceid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEmbeddedClient_Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEmbeddedClient_Token)
  GOOGLE_DCHECK_NE(&from, this);
  const CEmbeddedClient_Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEmbeddedClient_Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEmbeddedClient_Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEmbeddedClient_Token)
    MergeFrom(*source);
  }
}

void CEmbeddedClient_Token::MergeFrom(const CEmbeddedClient_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEmbeddedClient_Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_token(from._internal_client_token());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiry_ = from.expiry_;
    }
    if (cached_has_bits & 0x00000008u) {
      deviceid_ = from.deviceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEmbeddedClient_Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEmbeddedClient_Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEmbeddedClient_Token::CopyFrom(const CEmbeddedClient_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEmbeddedClient_Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEmbeddedClient_Token::IsInitialized() const {
  return true;
}

void CEmbeddedClient_Token::InternalSwap(CEmbeddedClient_Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_token_.Swap(&other->client_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEmbeddedClient_Token, deviceid_)
      + sizeof(CEmbeddedClient_Token::deviceid_)
      - PROTOBUF_FIELD_OFFSET(CEmbeddedClient_Token, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEmbeddedClient_Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CEmbeddedClient_AuthorizeDevice_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CEmbeddedClient_AuthorizeDevice_Response>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CEmbeddedClient_Token& token(const CEmbeddedClient_AuthorizeDevice_Response* msg);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEmbeddedClient_Token&
CEmbeddedClient_AuthorizeDevice_Response::_Internal::token(const CEmbeddedClient_AuthorizeDevice_Response* msg) {
  return *msg->token_;
}
CEmbeddedClient_AuthorizeDevice_Response::CEmbeddedClient_AuthorizeDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEmbeddedClient_AuthorizeDevice_Response)
}
CEmbeddedClient_AuthorizeDevice_Response::CEmbeddedClient_AuthorizeDevice_Response(const CEmbeddedClient_AuthorizeDevice_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token()) {
    token_ = new ::CEmbeddedClient_Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CEmbeddedClient_AuthorizeDevice_Response)
}

void CEmbeddedClient_AuthorizeDevice_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&token_)) + sizeof(result_));
}

CEmbeddedClient_AuthorizeDevice_Response::~CEmbeddedClient_AuthorizeDevice_Response() {
  // @@protoc_insertion_point(destructor:CEmbeddedClient_AuthorizeDevice_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEmbeddedClient_AuthorizeDevice_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete token_;
}

void CEmbeddedClient_AuthorizeDevice_Response::ArenaDtor(void* object) {
  CEmbeddedClient_AuthorizeDevice_Response* _this = reinterpret_cast< CEmbeddedClient_AuthorizeDevice_Response* >(object);
  (void)_this;
}
void CEmbeddedClient_AuthorizeDevice_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEmbeddedClient_AuthorizeDevice_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEmbeddedClient_AuthorizeDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEmbeddedClient_AuthorizeDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(token_ != nullptr);
    token_->Clear();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEmbeddedClient_AuthorizeDevice_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CEmbeddedClient_Token token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEmbeddedClient_AuthorizeDevice_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEmbeddedClient_AuthorizeDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .CEmbeddedClient_Token token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEmbeddedClient_AuthorizeDevice_Response)
  return target;
}

size_t CEmbeddedClient_AuthorizeDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEmbeddedClient_AuthorizeDevice_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEmbeddedClient_Token token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_);
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEmbeddedClient_AuthorizeDevice_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEmbeddedClient_AuthorizeDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CEmbeddedClient_AuthorizeDevice_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEmbeddedClient_AuthorizeDevice_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEmbeddedClient_AuthorizeDevice_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEmbeddedClient_AuthorizeDevice_Response)
    MergeFrom(*source);
  }
}

void CEmbeddedClient_AuthorizeDevice_Response::MergeFrom(const CEmbeddedClient_AuthorizeDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEmbeddedClient_AuthorizeDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_token()->::CEmbeddedClient_Token::MergeFrom(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEmbeddedClient_AuthorizeDevice_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEmbeddedClient_AuthorizeDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEmbeddedClient_AuthorizeDevice_Response::CopyFrom(const CEmbeddedClient_AuthorizeDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEmbeddedClient_AuthorizeDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEmbeddedClient_AuthorizeDevice_Response::IsInitialized() const {
  return true;
}

void CEmbeddedClient_AuthorizeDevice_Response::InternalSwap(CEmbeddedClient_AuthorizeDevice_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEmbeddedClient_AuthorizeDevice_Response, result_)
      + sizeof(CEmbeddedClient_AuthorizeDevice_Response::result_)
      - PROTOBUF_FIELD_OFFSET(CEmbeddedClient_AuthorizeDevice_Response, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEmbeddedClient_AuthorizeDevice_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserAccount::~UserAccount() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserAccount::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserAccount::GetDescriptor() {
  return descriptor();
}

void UserAccount::GetAvailableValveDiscountPromotions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_GetAvailableValveDiscountPromotions_Request*,
                         ::CUserAccount_GetAvailableValveDiscountPromotions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAvailableValveDiscountPromotions() not implemented.");
  done->Run();
}

void UserAccount::GetClientWalletDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_GetClientWalletDetails_Request*,
                         ::CUserAccount_GetWalletDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClientWalletDetails() not implemented.");
  done->Run();
}

void UserAccount::GetAccountLinkStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_GetAccountLinkStatus_Request*,
                         ::CUserAccount_GetAccountLinkStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountLinkStatus() not implemented.");
  done->Run();
}

void UserAccount::CancelLicenseForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_CancelLicenseForApp_Request*,
                         ::CUserAccount_CancelLicenseForApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelLicenseForApp() not implemented.");
  done->Run();
}

void UserAccount::GetUserCountry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_GetUserCountry_Request*,
                         ::CUserAccount_GetUserCountry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserCountry() not implemented.");
  done->Run();
}

void UserAccount::CreateFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_CreateFriendInviteToken_Request*,
                         ::CUserAccount_CreateFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::GetFriendInviteTokens(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_GetFriendInviteTokens_Request*,
                         ::CUserAccount_GetFriendInviteTokens_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendInviteTokens() not implemented.");
  done->Run();
}

void UserAccount::ViewFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_ViewFriendInviteToken_Request*,
                         ::CUserAccount_ViewFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ViewFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::RedeemFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_RedeemFriendInviteToken_Request*,
                         ::CUserAccount_RedeemFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RedeemFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::RevokeFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_RevokeFriendInviteToken_Request*,
                         ::CUserAccount_RevokeFriendInviteToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeFriendInviteToken() not implemented.");
  done->Run();
}

void UserAccount::RegisterCompatTool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CUserAccount_RegisterCompatTool_Request*,
                         ::CUserAccount_RegisterCompatTool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterCompatTool() not implemented.");
  done->Run();
}

void UserAccount::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetAvailableValveDiscountPromotions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_GetAvailableValveDiscountPromotions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_GetAvailableValveDiscountPromotions_Response*>(
                 response),
             done);
      break;
    case 1:
      GetClientWalletDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_GetClientWalletDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_GetWalletDetails_Response*>(
                 response),
             done);
      break;
    case 2:
      GetAccountLinkStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_GetAccountLinkStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_GetAccountLinkStatus_Response*>(
                 response),
             done);
      break;
    case 3:
      CancelLicenseForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_CancelLicenseForApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_CancelLicenseForApp_Response*>(
                 response),
             done);
      break;
    case 4:
      GetUserCountry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_GetUserCountry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_GetUserCountry_Response*>(
                 response),
             done);
      break;
    case 5:
      CreateFriendInviteToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_CreateFriendInviteToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_CreateFriendInviteToken_Response*>(
                 response),
             done);
      break;
    case 6:
      GetFriendInviteTokens(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_GetFriendInviteTokens_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_GetFriendInviteTokens_Response*>(
                 response),
             done);
      break;
    case 7:
      ViewFriendInviteToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_ViewFriendInviteToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_ViewFriendInviteToken_Response*>(
                 response),
             done);
      break;
    case 8:
      RedeemFriendInviteToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_RedeemFriendInviteToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_RedeemFriendInviteToken_Response*>(
                 response),
             done);
      break;
    case 9:
      RevokeFriendInviteToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_RevokeFriendInviteToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_RevokeFriendInviteToken_Response*>(
                 response),
             done);
      break;
    case 10:
      RegisterCompatTool(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CUserAccount_RegisterCompatTool_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CUserAccount_RegisterCompatTool_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserAccount::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CUserAccount_GetAvailableValveDiscountPromotions_Request::default_instance();
    case 1:
      return ::CUserAccount_GetClientWalletDetails_Request::default_instance();
    case 2:
      return ::CUserAccount_GetAccountLinkStatus_Request::default_instance();
    case 3:
      return ::CUserAccount_CancelLicenseForApp_Request::default_instance();
    case 4:
      return ::CUserAccount_GetUserCountry_Request::default_instance();
    case 5:
      return ::CUserAccount_CreateFriendInviteToken_Request::default_instance();
    case 6:
      return ::CUserAccount_GetFriendInviteTokens_Request::default_instance();
    case 7:
      return ::CUserAccount_ViewFriendInviteToken_Request::default_instance();
    case 8:
      return ::CUserAccount_RedeemFriendInviteToken_Request::default_instance();
    case 9:
      return ::CUserAccount_RevokeFriendInviteToken_Request::default_instance();
    case 10:
      return ::CUserAccount_RegisterCompatTool_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserAccount::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CUserAccount_GetAvailableValveDiscountPromotions_Response::default_instance();
    case 1:
      return ::CUserAccount_GetWalletDetails_Response::default_instance();
    case 2:
      return ::CUserAccount_GetAccountLinkStatus_Response::default_instance();
    case 3:
      return ::CUserAccount_CancelLicenseForApp_Response::default_instance();
    case 4:
      return ::CUserAccount_GetUserCountry_Response::default_instance();
    case 5:
      return ::CUserAccount_CreateFriendInviteToken_Response::default_instance();
    case 6:
      return ::CUserAccount_GetFriendInviteTokens_Response::default_instance();
    case 7:
      return ::CUserAccount_ViewFriendInviteToken_Response::default_instance();
    case 8:
      return ::CUserAccount_RedeemFriendInviteToken_Response::default_instance();
    case 9:
      return ::CUserAccount_RevokeFriendInviteToken_Response::default_instance();
    case 10:
      return ::CUserAccount_RegisterCompatTool_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserAccount_Stub::UserAccount_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserAccount_Stub::UserAccount_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserAccount_Stub::~UserAccount_Stub() {
  if (owns_channel_) delete channel_;
}

void UserAccount_Stub::GetAvailableValveDiscountPromotions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_GetAvailableValveDiscountPromotions_Request* request,
                              ::CUserAccount_GetAvailableValveDiscountPromotions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserAccount_Stub::GetClientWalletDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_GetClientWalletDetails_Request* request,
                              ::CUserAccount_GetWalletDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserAccount_Stub::GetAccountLinkStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_GetAccountLinkStatus_Request* request,
                              ::CUserAccount_GetAccountLinkStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserAccount_Stub::CancelLicenseForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_CancelLicenseForApp_Request* request,
                              ::CUserAccount_CancelLicenseForApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UserAccount_Stub::GetUserCountry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_GetUserCountry_Request* request,
                              ::CUserAccount_GetUserCountry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void UserAccount_Stub::CreateFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_CreateFriendInviteToken_Request* request,
                              ::CUserAccount_CreateFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void UserAccount_Stub::GetFriendInviteTokens(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_GetFriendInviteTokens_Request* request,
                              ::CUserAccount_GetFriendInviteTokens_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void UserAccount_Stub::ViewFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_ViewFriendInviteToken_Request* request,
                              ::CUserAccount_ViewFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void UserAccount_Stub::RedeemFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_RedeemFriendInviteToken_Request* request,
                              ::CUserAccount_RedeemFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void UserAccount_Stub::RevokeFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_RevokeFriendInviteToken_Request* request,
                              ::CUserAccount_RevokeFriendInviteToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void UserAccount_Stub::RegisterCompatTool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CUserAccount_RegisterCompatTool_Request* request,
                              ::CUserAccount_RegisterCompatTool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
// ===================================================================

AccountLinking::~AccountLinking() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AccountLinking::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AccountLinking::GetDescriptor() {
  return descriptor();
}

void AccountLinking::GetLinkedAccountInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountLinking_GetLinkedAccountInfo_Request*,
                         ::CAccountLinking_GetLinkedAccountInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkedAccountInfo() not implemented.");
  done->Run();
}

void AccountLinking::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      GetLinkedAccountInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountLinking_GetLinkedAccountInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountLinking_GetLinkedAccountInfo_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AccountLinking::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountLinking_GetLinkedAccountInfo_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AccountLinking::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountLinking_GetLinkedAccountInfo_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AccountLinking_Stub::AccountLinking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountLinking_Stub::AccountLinking_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
AccountLinking_Stub::~AccountLinking_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountLinking_Stub::GetLinkedAccountInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountLinking_GetLinkedAccountInfo_Request* request,
                              ::CAccountLinking_GetLinkedAccountInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

EmbeddedClient::~EmbeddedClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EmbeddedClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EmbeddedClient::GetDescriptor() {
  return descriptor();
}

void EmbeddedClient::AuthorizeCurrentDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CEmbeddedClient_AuthorizeCurrentDevice_Request*,
                         ::CEmbeddedClient_AuthorizeDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AuthorizeCurrentDevice() not implemented.");
  done->Run();
}

void EmbeddedClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fuseraccount_2esteamclient_2eproto[2]);
  switch(method->index()) {
    case 0:
      AuthorizeCurrentDevice(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CEmbeddedClient_AuthorizeCurrentDevice_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CEmbeddedClient_AuthorizeDevice_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EmbeddedClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEmbeddedClient_AuthorizeCurrentDevice_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EmbeddedClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEmbeddedClient_AuthorizeDevice_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EmbeddedClient_Stub::EmbeddedClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EmbeddedClient_Stub::EmbeddedClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EmbeddedClient_Stub::~EmbeddedClient_Stub() {
  if (owns_channel_) delete channel_;
}

void EmbeddedClient_Stub::AuthorizeCurrentDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CEmbeddedClient_AuthorizeCurrentDevice_Request* request,
                              ::CEmbeddedClient_AuthorizeDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CUserAccount_GetAvailableValveDiscountPromotions_Request* Arena::CreateMaybeMessage< ::CUserAccount_GetAvailableValveDiscountPromotions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetAvailableValveDiscountPromotions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* Arena::CreateMaybeMessage< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetAvailableValveDiscountPromotions_Response* Arena::CreateMaybeMessage< ::CUserAccount_GetAvailableValveDiscountPromotions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetAvailableValveDiscountPromotions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetClientWalletDetails_Request* Arena::CreateMaybeMessage< ::CUserAccount_GetClientWalletDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetClientWalletDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetWalletDetails_Response* Arena::CreateMaybeMessage< ::CUserAccount_GetWalletDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetWalletDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetAccountLinkStatus_Request* Arena::CreateMaybeMessage< ::CUserAccount_GetAccountLinkStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetAccountLinkStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetAccountLinkStatus_Response* Arena::CreateMaybeMessage< ::CUserAccount_GetAccountLinkStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetAccountLinkStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_CancelLicenseForApp_Request* Arena::CreateMaybeMessage< ::CUserAccount_CancelLicenseForApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_CancelLicenseForApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_CancelLicenseForApp_Response* Arena::CreateMaybeMessage< ::CUserAccount_CancelLicenseForApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_CancelLicenseForApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetUserCountry_Request* Arena::CreateMaybeMessage< ::CUserAccount_GetUserCountry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetUserCountry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetUserCountry_Response* Arena::CreateMaybeMessage< ::CUserAccount_GetUserCountry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetUserCountry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_CreateFriendInviteToken_Request* Arena::CreateMaybeMessage< ::CUserAccount_CreateFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_CreateFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_CreateFriendInviteToken_Response* Arena::CreateMaybeMessage< ::CUserAccount_CreateFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_CreateFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetFriendInviteTokens_Request* Arena::CreateMaybeMessage< ::CUserAccount_GetFriendInviteTokens_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetFriendInviteTokens_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_GetFriendInviteTokens_Response* Arena::CreateMaybeMessage< ::CUserAccount_GetFriendInviteTokens_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_GetFriendInviteTokens_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_ViewFriendInviteToken_Request* Arena::CreateMaybeMessage< ::CUserAccount_ViewFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_ViewFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_ViewFriendInviteToken_Response* Arena::CreateMaybeMessage< ::CUserAccount_ViewFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_ViewFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RedeemFriendInviteToken_Request* Arena::CreateMaybeMessage< ::CUserAccount_RedeemFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RedeemFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RedeemFriendInviteToken_Response* Arena::CreateMaybeMessage< ::CUserAccount_RedeemFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RedeemFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RevokeFriendInviteToken_Request* Arena::CreateMaybeMessage< ::CUserAccount_RevokeFriendInviteToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RevokeFriendInviteToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RevokeFriendInviteToken_Response* Arena::CreateMaybeMessage< ::CUserAccount_RevokeFriendInviteToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RevokeFriendInviteToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RegisterCompatTool_Request* Arena::CreateMaybeMessage< ::CUserAccount_RegisterCompatTool_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RegisterCompatTool_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserAccount_RegisterCompatTool_Response* Arena::CreateMaybeMessage< ::CUserAccount_RegisterCompatTool_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserAccount_RegisterCompatTool_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountLinking_GetLinkedAccountInfo_Request* Arena::CreateMaybeMessage< ::CAccountLinking_GetLinkedAccountInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountLinking_GetLinkedAccountInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* Arena::CreateMaybeMessage< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountLinking_GetLinkedAccountInfo_Response* Arena::CreateMaybeMessage< ::CAccountLinking_GetLinkedAccountInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountLinking_GetLinkedAccountInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CEmbeddedClient_AuthorizeCurrentDevice_Request* Arena::CreateMaybeMessage< ::CEmbeddedClient_AuthorizeCurrentDevice_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEmbeddedClient_AuthorizeCurrentDevice_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CEmbeddedClient_Token* Arena::CreateMaybeMessage< ::CEmbeddedClient_Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEmbeddedClient_Token >(arena);
}
template<> PROTOBUF_NOINLINE ::CEmbeddedClient_AuthorizeDevice_Response* Arena::CreateMaybeMessage< ::CEmbeddedClient_AuthorizeDevice_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEmbeddedClient_AuthorizeDevice_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
