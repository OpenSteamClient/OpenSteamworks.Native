// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_vac.steamclient.proto

#include "steammessages_vac.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CFileVerification_SignatureChecRequest::CFileVerification_SignatureChecRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha1hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , file_size_(PROTOBUF_ULONGLONG(0))
  , appid_(0u)
  , file_timestamp_(0u)
  , file_timestamp2_(0u)
  , signature_result_(0u)
  , client_package_version_(0u){}
struct CFileVerification_SignatureChecRequestDefaultTypeInternal {
  constexpr CFileVerification_SignatureChecRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFileVerification_SignatureChecRequestDefaultTypeInternal() {}
  union {
    CFileVerification_SignatureChecRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFileVerification_SignatureChecRequestDefaultTypeInternal _CFileVerification_SignatureChecRequest_default_instance_;
constexpr CFileVerification_SignatureChecResponse::CFileVerification_SignatureChecResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deny_operation_(false){}
struct CFileVerification_SignatureChecResponseDefaultTypeInternal {
  constexpr CFileVerification_SignatureChecResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFileVerification_SignatureChecResponseDefaultTypeInternal() {}
  union {
    CFileVerification_SignatureChecResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFileVerification_SignatureChecResponseDefaultTypeInternal _CFileVerification_SignatureChecResponse_default_instance_;
constexpr CFileVerification_SteamServiceChecRequest::CFileVerification_SteamServiceChecRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_status_(0u)
  , client_package_version_(0u)
  , launcher_type_(0u)
  , os_type_(0u)
  , service_repair_(0u){}
struct CFileVerification_SteamServiceChecRequestDefaultTypeInternal {
  constexpr CFileVerification_SteamServiceChecRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFileVerification_SteamServiceChecRequestDefaultTypeInternal() {}
  union {
    CFileVerification_SteamServiceChecRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFileVerification_SteamServiceChecRequestDefaultTypeInternal _CFileVerification_SteamServiceChecRequest_default_instance_;
constexpr CFileVerification_SteamServiceChecResponse::CFileVerification_SteamServiceChecResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attempt_repair_(false){}
struct CFileVerification_SteamServiceChecResponseDefaultTypeInternal {
  constexpr CFileVerification_SteamServiceChecResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFileVerification_SteamServiceChecResponseDefaultTypeInternal() {}
  union {
    CFileVerification_SteamServiceChecResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFileVerification_SteamServiceChecResponseDefaultTypeInternal _CFileVerification_SteamServiceChecResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fvac_2esteamclient_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fvac_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fvac_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fvac_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, steamid_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, appid_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, file_size_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, file_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, file_timestamp2_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, signature_result_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, client_package_version_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecRequest, sha1hash_),
  2,
  4,
  3,
  5,
  6,
  7,
  0,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SignatureChecResponse, deny_operation_),
  0,
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, service_status_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, client_package_version_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, launcher_type_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, os_type_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecRequest, service_repair_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFileVerification_SteamServiceChecResponse, attempt_repair_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::CFileVerification_SignatureChecRequest)},
  { 23, 29, sizeof(::CFileVerification_SignatureChecResponse)},
  { 30, 40, sizeof(::CFileVerification_SteamServiceChecRequest)},
  { 45, 51, sizeof(::CFileVerification_SteamServiceChecResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFileVerification_SignatureChecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFileVerification_SignatureChecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFileVerification_SteamServiceChecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFileVerification_SteamServiceChecResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fvac_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#steammessages_vac.steamclient.proto\032 g"
  "oogle/protobuf/descriptor.proto\032\030steamme"
  "ssages_base.proto\032,steammessages_unified"
  "_base.steamclient.proto\"\352\001\n&CFileVerific"
  "ation_SignatureChecRequest\022\017\n\007steamid\030\001 "
  "\001(\006\022\r\n\005appid\030\002 \001(\r\022\021\n\tfile_size\030\003 \001(\004\022\026\n"
  "\016file_timestamp\030\004 \001(\r\022\027\n\017file_timestamp2"
  "\030\005 \001(\r\022\030\n\020signature_result\030\006 \001(\r\022\020\n\010file"
  "name\030\007 \001(\t\022\036\n\026client_package_version\030\010 \001"
  "(\r\022\020\n\010sha1hash\030\t \001(\014\"A\n\'CFileVerificatio"
  "n_SignatureChecResponse\022\026\n\016deny_operatio"
  "n\030\001 \001(\010\"\243\001\n)CFileVerification_SteamServi"
  "ceChecRequest\022\026\n\016service_status\030\002 \001(\r\022\036\n"
  "\026client_package_version\030\003 \001(\r\022\025\n\rlaunche"
  "r_type\030\004 \001(\r\022\017\n\007os_type\030\005 \001(\r\022\026\n\016service"
  "_repair\030\006 \001(\r\"D\n*CFileVerification_Steam"
  "ServiceChecResponse\022\026\n\016attempt_repair\030\001 "
  "\001(\0102\345\001\n\020FileVerification\022c\n\016SignatureChe"
  "ck\022\'.CFileVerification_SignatureChecRequ"
  "est\032(.CFileVerification_SignatureChecRes"
  "ponse\022l\n\021SteamServiceCheck\022*.CFileVerifi"
  "cation_SteamServiceChecRequest\032+.CFileVe"
  "rification_SteamServiceChecResponseB\035\200\001\001"
  "\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fvac_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fvac_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvac_2esteamclient_2eproto = {
  false, false, 946, descriptor_table_protodef_steammessages_5fvac_2esteamclient_2eproto, "steammessages_vac.steamclient.proto", 
  &descriptor_table_steammessages_5fvac_2esteamclient_2eproto_once, descriptor_table_steammessages_5fvac_2esteamclient_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_steammessages_5fvac_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fvac_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fvac_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fvac_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvac_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fvac_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fvac_2esteamclient_2eproto(&descriptor_table_steammessages_5fvac_2esteamclient_2eproto);

// ===================================================================

class CFileVerification_SignatureChecRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CFileVerification_SignatureChecRequest>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_timestamp2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_signature_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sha1hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFileVerification_SignatureChecRequest::CFileVerification_SignatureChecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFileVerification_SignatureChecRequest)
}
CFileVerification_SignatureChecRequest::CFileVerification_SignatureChecRequest(const CFileVerification_SignatureChecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  sha1hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha1hash()) {
    sha1hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha1hash(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_package_version_));
  // @@protoc_insertion_point(copy_constructor:CFileVerification_SignatureChecRequest)
}

void CFileVerification_SignatureChecRequest::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha1hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_package_version_));
}

CFileVerification_SignatureChecRequest::~CFileVerification_SignatureChecRequest() {
  // @@protoc_insertion_point(destructor:CFileVerification_SignatureChecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFileVerification_SignatureChecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha1hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFileVerification_SignatureChecRequest::ArenaDtor(void* object) {
  CFileVerification_SignatureChecRequest* _this = reinterpret_cast< CFileVerification_SignatureChecRequest* >(object);
  (void)_this;
}
void CFileVerification_SignatureChecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFileVerification_SignatureChecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFileVerification_SignatureChecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CFileVerification_SignatureChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha1hash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signature_result_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(signature_result_));
  }
  client_package_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFileVerification_SignatureChecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_file_timestamp(&has_bits);
          file_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_timestamp2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_file_timestamp2(&has_bits);
          file_timestamp2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 signature_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_signature_result(&has_bits);
          signature_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFileVerification_SignatureChecRequest.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_package_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_client_package_version(&has_bits);
          client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha1hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sha1hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFileVerification_SignatureChecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFileVerification_SignatureChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 file_size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_file_size(), target);
  }

  // optional uint32 file_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_timestamp(), target);
  }

  // optional uint32 file_timestamp2 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_timestamp2(), target);
  }

  // optional uint32 signature_result = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_signature_result(), target);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFileVerification_SignatureChecRequest.filename");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filename(), target);
  }

  // optional uint32 client_package_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_client_package_version(), target);
  }

  // optional bytes sha1hash = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_sha1hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFileVerification_SignatureChecRequest)
  return target;
}

size_t CFileVerification_SignatureChecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFileVerification_SignatureChecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha1hash = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha1hash());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 file_size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 file_timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_timestamp());
    }

    // optional uint32 file_timestamp2 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_timestamp2());
    }

    // optional uint32 signature_result = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_signature_result());
    }

  }
  // optional uint32 client_package_version = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_package_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFileVerification_SignatureChecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFileVerification_SignatureChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CFileVerification_SignatureChecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFileVerification_SignatureChecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFileVerification_SignatureChecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFileVerification_SignatureChecRequest)
    MergeFrom(*source);
  }
}

void CFileVerification_SignatureChecRequest::MergeFrom(const CFileVerification_SignatureChecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFileVerification_SignatureChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha1hash(from._internal_sha1hash());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_timestamp_ = from.file_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      file_timestamp2_ = from.file_timestamp2_;
    }
    if (cached_has_bits & 0x00000080u) {
      signature_result_ = from.signature_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_client_package_version(from._internal_client_package_version());
  }
}

void CFileVerification_SignatureChecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFileVerification_SignatureChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileVerification_SignatureChecRequest::CopyFrom(const CFileVerification_SignatureChecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFileVerification_SignatureChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileVerification_SignatureChecRequest::IsInitialized() const {
  return true;
}

void CFileVerification_SignatureChecRequest::InternalSwap(CFileVerification_SignatureChecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha1hash_.Swap(&other->sha1hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFileVerification_SignatureChecRequest, client_package_version_)
      + sizeof(CFileVerification_SignatureChecRequest::client_package_version_)
      - PROTOBUF_FIELD_OFFSET(CFileVerification_SignatureChecRequest, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFileVerification_SignatureChecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CFileVerification_SignatureChecResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CFileVerification_SignatureChecResponse>()._has_bits_);
  static void set_has_deny_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFileVerification_SignatureChecResponse::CFileVerification_SignatureChecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFileVerification_SignatureChecResponse)
}
CFileVerification_SignatureChecResponse::CFileVerification_SignatureChecResponse(const CFileVerification_SignatureChecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deny_operation_ = from.deny_operation_;
  // @@protoc_insertion_point(copy_constructor:CFileVerification_SignatureChecResponse)
}

void CFileVerification_SignatureChecResponse::SharedCtor() {
deny_operation_ = false;
}

CFileVerification_SignatureChecResponse::~CFileVerification_SignatureChecResponse() {
  // @@protoc_insertion_point(destructor:CFileVerification_SignatureChecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFileVerification_SignatureChecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CFileVerification_SignatureChecResponse::ArenaDtor(void* object) {
  CFileVerification_SignatureChecResponse* _this = reinterpret_cast< CFileVerification_SignatureChecResponse* >(object);
  (void)_this;
}
void CFileVerification_SignatureChecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFileVerification_SignatureChecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFileVerification_SignatureChecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CFileVerification_SignatureChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deny_operation_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFileVerification_SignatureChecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool deny_operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_deny_operation(&has_bits);
          deny_operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFileVerification_SignatureChecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFileVerification_SignatureChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool deny_operation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_deny_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFileVerification_SignatureChecResponse)
  return target;
}

size_t CFileVerification_SignatureChecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFileVerification_SignatureChecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool deny_operation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFileVerification_SignatureChecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFileVerification_SignatureChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CFileVerification_SignatureChecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFileVerification_SignatureChecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFileVerification_SignatureChecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFileVerification_SignatureChecResponse)
    MergeFrom(*source);
  }
}

void CFileVerification_SignatureChecResponse::MergeFrom(const CFileVerification_SignatureChecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFileVerification_SignatureChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deny_operation()) {
    _internal_set_deny_operation(from._internal_deny_operation());
  }
}

void CFileVerification_SignatureChecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFileVerification_SignatureChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileVerification_SignatureChecResponse::CopyFrom(const CFileVerification_SignatureChecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFileVerification_SignatureChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileVerification_SignatureChecResponse::IsInitialized() const {
  return true;
}

void CFileVerification_SignatureChecResponse::InternalSwap(CFileVerification_SignatureChecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deny_operation_, other->deny_operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFileVerification_SignatureChecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CFileVerification_SteamServiceChecRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CFileVerification_SteamServiceChecRequest>()._has_bits_);
  static void set_has_service_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launcher_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_service_repair(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CFileVerification_SteamServiceChecRequest::CFileVerification_SteamServiceChecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFileVerification_SteamServiceChecRequest)
}
CFileVerification_SteamServiceChecRequest::CFileVerification_SteamServiceChecRequest(const CFileVerification_SteamServiceChecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&service_status_, &from.service_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_repair_) -
    reinterpret_cast<char*>(&service_status_)) + sizeof(service_repair_));
  // @@protoc_insertion_point(copy_constructor:CFileVerification_SteamServiceChecRequest)
}

void CFileVerification_SteamServiceChecRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_repair_) -
    reinterpret_cast<char*>(&service_status_)) + sizeof(service_repair_));
}

CFileVerification_SteamServiceChecRequest::~CFileVerification_SteamServiceChecRequest() {
  // @@protoc_insertion_point(destructor:CFileVerification_SteamServiceChecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFileVerification_SteamServiceChecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CFileVerification_SteamServiceChecRequest::ArenaDtor(void* object) {
  CFileVerification_SteamServiceChecRequest* _this = reinterpret_cast< CFileVerification_SteamServiceChecRequest* >(object);
  (void)_this;
}
void CFileVerification_SteamServiceChecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFileVerification_SteamServiceChecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFileVerification_SteamServiceChecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CFileVerification_SteamServiceChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&service_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_repair_) -
        reinterpret_cast<char*>(&service_status_)) + sizeof(service_repair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFileVerification_SteamServiceChecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 service_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_service_status(&has_bits);
          service_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_package_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_package_version(&has_bits);
          client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launcher_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_launcher_type(&has_bits);
          launcher_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 os_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_os_type(&has_bits);
          os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_repair = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_service_repair(&has_bits);
          service_repair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFileVerification_SteamServiceChecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFileVerification_SteamServiceChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_service_status(), target);
  }

  // optional uint32 client_package_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_package_version(), target);
  }

  // optional uint32 launcher_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_launcher_type(), target);
  }

  // optional uint32 os_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_os_type(), target);
  }

  // optional uint32 service_repair = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_service_repair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFileVerification_SteamServiceChecRequest)
  return target;
}

size_t CFileVerification_SteamServiceChecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFileVerification_SteamServiceChecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 service_status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_status());
    }

    // optional uint32 client_package_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_package_version());
    }

    // optional uint32 launcher_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launcher_type());
    }

    // optional uint32 os_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_os_type());
    }

    // optional uint32 service_repair = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_repair());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFileVerification_SteamServiceChecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFileVerification_SteamServiceChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CFileVerification_SteamServiceChecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFileVerification_SteamServiceChecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFileVerification_SteamServiceChecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFileVerification_SteamServiceChecRequest)
    MergeFrom(*source);
  }
}

void CFileVerification_SteamServiceChecRequest::MergeFrom(const CFileVerification_SteamServiceChecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFileVerification_SteamServiceChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      service_status_ = from.service_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_package_version_ = from.client_package_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      launcher_type_ = from.launcher_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_repair_ = from.service_repair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFileVerification_SteamServiceChecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFileVerification_SteamServiceChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileVerification_SteamServiceChecRequest::CopyFrom(const CFileVerification_SteamServiceChecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFileVerification_SteamServiceChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileVerification_SteamServiceChecRequest::IsInitialized() const {
  return true;
}

void CFileVerification_SteamServiceChecRequest::InternalSwap(CFileVerification_SteamServiceChecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFileVerification_SteamServiceChecRequest, service_repair_)
      + sizeof(CFileVerification_SteamServiceChecRequest::service_repair_)
      - PROTOBUF_FIELD_OFFSET(CFileVerification_SteamServiceChecRequest, service_status_)>(
          reinterpret_cast<char*>(&service_status_),
          reinterpret_cast<char*>(&other->service_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFileVerification_SteamServiceChecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CFileVerification_SteamServiceChecResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CFileVerification_SteamServiceChecResponse>()._has_bits_);
  static void set_has_attempt_repair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFileVerification_SteamServiceChecResponse::CFileVerification_SteamServiceChecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFileVerification_SteamServiceChecResponse)
}
CFileVerification_SteamServiceChecResponse::CFileVerification_SteamServiceChecResponse(const CFileVerification_SteamServiceChecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attempt_repair_ = from.attempt_repair_;
  // @@protoc_insertion_point(copy_constructor:CFileVerification_SteamServiceChecResponse)
}

void CFileVerification_SteamServiceChecResponse::SharedCtor() {
attempt_repair_ = false;
}

CFileVerification_SteamServiceChecResponse::~CFileVerification_SteamServiceChecResponse() {
  // @@protoc_insertion_point(destructor:CFileVerification_SteamServiceChecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFileVerification_SteamServiceChecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CFileVerification_SteamServiceChecResponse::ArenaDtor(void* object) {
  CFileVerification_SteamServiceChecResponse* _this = reinterpret_cast< CFileVerification_SteamServiceChecResponse* >(object);
  (void)_this;
}
void CFileVerification_SteamServiceChecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFileVerification_SteamServiceChecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFileVerification_SteamServiceChecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CFileVerification_SteamServiceChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attempt_repair_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFileVerification_SteamServiceChecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool attempt_repair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attempt_repair(&has_bits);
          attempt_repair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFileVerification_SteamServiceChecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFileVerification_SteamServiceChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool attempt_repair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_attempt_repair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFileVerification_SteamServiceChecResponse)
  return target;
}

size_t CFileVerification_SteamServiceChecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFileVerification_SteamServiceChecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool attempt_repair = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFileVerification_SteamServiceChecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFileVerification_SteamServiceChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CFileVerification_SteamServiceChecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFileVerification_SteamServiceChecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFileVerification_SteamServiceChecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFileVerification_SteamServiceChecResponse)
    MergeFrom(*source);
  }
}

void CFileVerification_SteamServiceChecResponse::MergeFrom(const CFileVerification_SteamServiceChecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFileVerification_SteamServiceChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attempt_repair()) {
    _internal_set_attempt_repair(from._internal_attempt_repair());
  }
}

void CFileVerification_SteamServiceChecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFileVerification_SteamServiceChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileVerification_SteamServiceChecResponse::CopyFrom(const CFileVerification_SteamServiceChecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFileVerification_SteamServiceChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileVerification_SteamServiceChecResponse::IsInitialized() const {
  return true;
}

void CFileVerification_SteamServiceChecResponse::InternalSwap(CFileVerification_SteamServiceChecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(attempt_repair_, other->attempt_repair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFileVerification_SteamServiceChecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FileVerification::~FileVerification() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FileVerification::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvac_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvac_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FileVerification::GetDescriptor() {
  return descriptor();
}

void FileVerification::SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFileVerification_SignatureChecRequest*,
                         ::CFileVerification_SignatureChecResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SignatureCheck() not implemented.");
  done->Run();
}

void FileVerification::SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFileVerification_SteamServiceChecRequest*,
                         ::CFileVerification_SteamServiceChecResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SteamServiceCheck() not implemented.");
  done->Run();
}

void FileVerification::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvac_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      SignatureCheck(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFileVerification_SignatureChecRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFileVerification_SignatureChecResponse*>(
                 response),
             done);
      break;
    case 1:
      SteamServiceCheck(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFileVerification_SteamServiceChecRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFileVerification_SteamServiceChecResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FileVerification::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFileVerification_SignatureChecRequest::default_instance();
    case 1:
      return ::CFileVerification_SteamServiceChecRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FileVerification::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFileVerification_SignatureChecResponse::default_instance();
    case 1:
      return ::CFileVerification_SteamServiceChecResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FileVerification_Stub::FileVerification_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileVerification_Stub::FileVerification_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FileVerification_Stub::~FileVerification_Stub() {
  if (owns_channel_) delete channel_;
}

void FileVerification_Stub::SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFileVerification_SignatureChecRequest* request,
                              ::CFileVerification_SignatureChecResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FileVerification_Stub::SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFileVerification_SteamServiceChecRequest* request,
                              ::CFileVerification_SteamServiceChecResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CFileVerification_SignatureChecRequest* Arena::CreateMaybeMessage< ::CFileVerification_SignatureChecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFileVerification_SignatureChecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CFileVerification_SignatureChecResponse* Arena::CreateMaybeMessage< ::CFileVerification_SignatureChecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFileVerification_SignatureChecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CFileVerification_SteamServiceChecRequest* Arena::CreateMaybeMessage< ::CFileVerification_SteamServiceChecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFileVerification_SteamServiceChecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CFileVerification_SteamServiceChecResponse* Arena::CreateMaybeMessage< ::CFileVerification_SteamServiceChecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFileVerification_SteamServiceChecResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
