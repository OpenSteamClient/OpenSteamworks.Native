// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_vac.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fvac_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fvac_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvac_2esteamclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(int index);
class CFileVerification_SignatureChecRequest;
struct CFileVerification_SignatureChecRequestDefaultTypeInternal;
extern CFileVerification_SignatureChecRequestDefaultTypeInternal _CFileVerification_SignatureChecRequest_default_instance_;
class CFileVerification_SignatureChecResponse;
struct CFileVerification_SignatureChecResponseDefaultTypeInternal;
extern CFileVerification_SignatureChecResponseDefaultTypeInternal _CFileVerification_SignatureChecResponse_default_instance_;
class CFileVerification_SteamServiceChecRequest;
struct CFileVerification_SteamServiceChecRequestDefaultTypeInternal;
extern CFileVerification_SteamServiceChecRequestDefaultTypeInternal _CFileVerification_SteamServiceChecRequest_default_instance_;
class CFileVerification_SteamServiceChecResponse;
struct CFileVerification_SteamServiceChecResponseDefaultTypeInternal;
extern CFileVerification_SteamServiceChecResponseDefaultTypeInternal _CFileVerification_SteamServiceChecResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CFileVerification_SignatureChecRequest* Arena::CreateMaybeMessage<::CFileVerification_SignatureChecRequest>(Arena*);
template<> ::CFileVerification_SignatureChecResponse* Arena::CreateMaybeMessage<::CFileVerification_SignatureChecResponse>(Arena*);
template<> ::CFileVerification_SteamServiceChecRequest* Arena::CreateMaybeMessage<::CFileVerification_SteamServiceChecRequest>(Arena*);
template<> ::CFileVerification_SteamServiceChecResponse* Arena::CreateMaybeMessage<::CFileVerification_SteamServiceChecResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CFileVerification_SignatureChecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SignatureChecRequest) */ {
 public:
  inline CFileVerification_SignatureChecRequest() : CFileVerification_SignatureChecRequest(nullptr) {}
  virtual ~CFileVerification_SignatureChecRequest();
  explicit constexpr CFileVerification_SignatureChecRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SignatureChecRequest(const CFileVerification_SignatureChecRequest& from);
  CFileVerification_SignatureChecRequest(CFileVerification_SignatureChecRequest&& from) noexcept
    : CFileVerification_SignatureChecRequest() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SignatureChecRequest& operator=(const CFileVerification_SignatureChecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SignatureChecRequest& operator=(CFileVerification_SignatureChecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFileVerification_SignatureChecRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SignatureChecRequest* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SignatureChecRequest*>(
               &_CFileVerification_SignatureChecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFileVerification_SignatureChecRequest& a, CFileVerification_SignatureChecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SignatureChecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SignatureChecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFileVerification_SignatureChecRequest* New() const final {
    return CreateMaybeMessage<CFileVerification_SignatureChecRequest>(nullptr);
  }

  CFileVerification_SignatureChecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFileVerification_SignatureChecRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFileVerification_SignatureChecRequest& from);
  void MergeFrom(const CFileVerification_SignatureChecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SignatureChecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SignatureChecRequest";
  }
  protected:
  explicit CFileVerification_SignatureChecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 7,
    kSha1HashFieldNumber = 9,
    kSteamidFieldNumber = 1,
    kFileSizeFieldNumber = 3,
    kAppidFieldNumber = 2,
    kFileTimestampFieldNumber = 4,
    kFileTimestamp2FieldNumber = 5,
    kSignatureResultFieldNumber = 6,
    kClientPackageVersionFieldNumber = 8,
  };
  // optional string filename = 7;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bytes sha1hash = 9;
  bool has_sha1hash() const;
  private:
  bool _internal_has_sha1hash() const;
  public:
  void clear_sha1hash();
  const std::string& sha1hash() const;
  void set_sha1hash(const std::string& value);
  void set_sha1hash(std::string&& value);
  void set_sha1hash(const char* value);
  void set_sha1hash(const void* value, size_t size);
  std::string* mutable_sha1hash();
  std::string* release_sha1hash();
  void set_allocated_sha1hash(std::string* sha1hash);
  private:
  const std::string& _internal_sha1hash() const;
  void _internal_set_sha1hash(const std::string& value);
  std::string* _internal_mutable_sha1hash();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 file_size = 3;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_timestamp = 4;
  bool has_file_timestamp() const;
  private:
  bool _internal_has_file_timestamp() const;
  public:
  void clear_file_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_timestamp() const;
  void set_file_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_timestamp() const;
  void _internal_set_file_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_timestamp2 = 5;
  bool has_file_timestamp2() const;
  private:
  bool _internal_has_file_timestamp2() const;
  public:
  void clear_file_timestamp2();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_timestamp2() const;
  void set_file_timestamp2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_timestamp2() const;
  void _internal_set_file_timestamp2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 signature_result = 6;
  bool has_signature_result() const;
  private:
  bool _internal_has_signature_result() const;
  public:
  void clear_signature_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_result() const;
  void set_signature_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signature_result() const;
  void _internal_set_signature_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_package_version = 8;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version() const;
  void set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_package_version() const;
  void _internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SignatureChecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_timestamp2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SignatureChecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SignatureChecResponse) */ {
 public:
  inline CFileVerification_SignatureChecResponse() : CFileVerification_SignatureChecResponse(nullptr) {}
  virtual ~CFileVerification_SignatureChecResponse();
  explicit constexpr CFileVerification_SignatureChecResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SignatureChecResponse(const CFileVerification_SignatureChecResponse& from);
  CFileVerification_SignatureChecResponse(CFileVerification_SignatureChecResponse&& from) noexcept
    : CFileVerification_SignatureChecResponse() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SignatureChecResponse& operator=(const CFileVerification_SignatureChecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SignatureChecResponse& operator=(CFileVerification_SignatureChecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFileVerification_SignatureChecResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SignatureChecResponse* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SignatureChecResponse*>(
               &_CFileVerification_SignatureChecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CFileVerification_SignatureChecResponse& a, CFileVerification_SignatureChecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SignatureChecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SignatureChecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFileVerification_SignatureChecResponse* New() const final {
    return CreateMaybeMessage<CFileVerification_SignatureChecResponse>(nullptr);
  }

  CFileVerification_SignatureChecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFileVerification_SignatureChecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFileVerification_SignatureChecResponse& from);
  void MergeFrom(const CFileVerification_SignatureChecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SignatureChecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SignatureChecResponse";
  }
  protected:
  explicit CFileVerification_SignatureChecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenyOperationFieldNumber = 1,
  };
  // optional bool deny_operation = 1;
  bool has_deny_operation() const;
  private:
  bool _internal_has_deny_operation() const;
  public:
  void clear_deny_operation();
  bool deny_operation() const;
  void set_deny_operation(bool value);
  private:
  bool _internal_deny_operation() const;
  void _internal_set_deny_operation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SignatureChecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool deny_operation_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SteamServiceChecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SteamServiceChecRequest) */ {
 public:
  inline CFileVerification_SteamServiceChecRequest() : CFileVerification_SteamServiceChecRequest(nullptr) {}
  virtual ~CFileVerification_SteamServiceChecRequest();
  explicit constexpr CFileVerification_SteamServiceChecRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SteamServiceChecRequest(const CFileVerification_SteamServiceChecRequest& from);
  CFileVerification_SteamServiceChecRequest(CFileVerification_SteamServiceChecRequest&& from) noexcept
    : CFileVerification_SteamServiceChecRequest() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SteamServiceChecRequest& operator=(const CFileVerification_SteamServiceChecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SteamServiceChecRequest& operator=(CFileVerification_SteamServiceChecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFileVerification_SteamServiceChecRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SteamServiceChecRequest* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SteamServiceChecRequest*>(
               &_CFileVerification_SteamServiceChecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CFileVerification_SteamServiceChecRequest& a, CFileVerification_SteamServiceChecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SteamServiceChecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SteamServiceChecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFileVerification_SteamServiceChecRequest* New() const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceChecRequest>(nullptr);
  }

  CFileVerification_SteamServiceChecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceChecRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFileVerification_SteamServiceChecRequest& from);
  void MergeFrom(const CFileVerification_SteamServiceChecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SteamServiceChecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SteamServiceChecRequest";
  }
  protected:
  explicit CFileVerification_SteamServiceChecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceStatusFieldNumber = 2,
    kClientPackageVersionFieldNumber = 3,
    kLauncherTypeFieldNumber = 4,
    kOsTypeFieldNumber = 5,
    kServiceRepairFieldNumber = 6,
  };
  // optional uint32 service_status = 2;
  bool has_service_status() const;
  private:
  bool _internal_has_service_status() const;
  public:
  void clear_service_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_status() const;
  void set_service_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_status() const;
  void _internal_set_service_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_package_version = 3;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version() const;
  void set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_package_version() const;
  void _internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 launcher_type = 4;
  bool has_launcher_type() const;
  private:
  bool _internal_has_launcher_type() const;
  public:
  void clear_launcher_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type() const;
  void set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher_type() const;
  void _internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 os_type = 5;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 os_type() const;
  void set_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_os_type() const;
  void _internal_set_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 service_repair = 6;
  bool has_service_repair() const;
  private:
  bool _internal_has_service_repair() const;
  public:
  void clear_service_repair();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_repair() const;
  void set_service_repair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_repair() const;
  void _internal_set_service_repair(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SteamServiceChecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 os_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_repair_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SteamServiceChecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SteamServiceChecResponse) */ {
 public:
  inline CFileVerification_SteamServiceChecResponse() : CFileVerification_SteamServiceChecResponse(nullptr) {}
  virtual ~CFileVerification_SteamServiceChecResponse();
  explicit constexpr CFileVerification_SteamServiceChecResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SteamServiceChecResponse(const CFileVerification_SteamServiceChecResponse& from);
  CFileVerification_SteamServiceChecResponse(CFileVerification_SteamServiceChecResponse&& from) noexcept
    : CFileVerification_SteamServiceChecResponse() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SteamServiceChecResponse& operator=(const CFileVerification_SteamServiceChecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SteamServiceChecResponse& operator=(CFileVerification_SteamServiceChecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFileVerification_SteamServiceChecResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SteamServiceChecResponse* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SteamServiceChecResponse*>(
               &_CFileVerification_SteamServiceChecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CFileVerification_SteamServiceChecResponse& a, CFileVerification_SteamServiceChecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SteamServiceChecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SteamServiceChecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFileVerification_SteamServiceChecResponse* New() const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceChecResponse>(nullptr);
  }

  CFileVerification_SteamServiceChecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceChecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFileVerification_SteamServiceChecResponse& from);
  void MergeFrom(const CFileVerification_SteamServiceChecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SteamServiceChecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SteamServiceChecResponse";
  }
  protected:
  explicit CFileVerification_SteamServiceChecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvac_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttemptRepairFieldNumber = 1,
  };
  // optional bool attempt_repair = 1;
  bool has_attempt_repair() const;
  private:
  bool _internal_has_attempt_repair() const;
  public:
  void clear_attempt_repair();
  bool attempt_repair() const;
  void set_attempt_repair(bool value);
  private:
  bool _internal_attempt_repair() const;
  void _internal_set_attempt_repair(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SteamServiceChecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool attempt_repair_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// ===================================================================

class FileVerification_Stub;

class FileVerification : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileVerification() {};
 public:
  virtual ~FileVerification();

  typedef FileVerification_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SignatureChecRequest* request,
                       ::CFileVerification_SignatureChecResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SteamServiceChecRequest* request,
                       ::CFileVerification_SteamServiceChecResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileVerification);
};

class FileVerification_Stub : public FileVerification {
 public:
  FileVerification_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FileVerification_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FileVerification_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FileVerification ------------------------------------------

  void SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SignatureChecRequest* request,
                       ::CFileVerification_SignatureChecResponse* response,
                       ::google::protobuf::Closure* done);
  void SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SteamServiceChecRequest* request,
                       ::CFileVerification_SteamServiceChecResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileVerification_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFileVerification_SignatureChecRequest

// optional fixed64 steamid = 1;
inline bool CFileVerification_SignatureChecRequest::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_steamid() const {
  return _internal_has_steamid();
}
inline void CFileVerification_SignatureChecRequest::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CFileVerification_SignatureChecRequest::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CFileVerification_SignatureChecRequest::steamid() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.steamid)
  return _internal_steamid();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.steamid)
}

// optional uint32 appid = 2;
inline bool CFileVerification_SignatureChecRequest::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_appid() const {
  return _internal_has_appid();
}
inline void CFileVerification_SignatureChecRequest::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::appid() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.appid)
  return _internal_appid();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.appid)
}

// optional uint64 file_size = 3;
inline bool CFileVerification_SignatureChecRequest::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_file_size() const {
  return _internal_has_file_size();
}
inline void CFileVerification_SignatureChecRequest::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CFileVerification_SignatureChecRequest::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CFileVerification_SignatureChecRequest::file_size() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.file_size)
  return _internal_file_size();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.file_size)
}

// optional uint32 file_timestamp = 4;
inline bool CFileVerification_SignatureChecRequest::_internal_has_file_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_file_timestamp() const {
  return _internal_has_file_timestamp();
}
inline void CFileVerification_SignatureChecRequest::clear_file_timestamp() {
  file_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::_internal_file_timestamp() const {
  return file_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::file_timestamp() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.file_timestamp)
  return _internal_file_timestamp();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_file_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  file_timestamp_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_file_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_timestamp(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.file_timestamp)
}

// optional uint32 file_timestamp2 = 5;
inline bool CFileVerification_SignatureChecRequest::_internal_has_file_timestamp2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_file_timestamp2() const {
  return _internal_has_file_timestamp2();
}
inline void CFileVerification_SignatureChecRequest::clear_file_timestamp2() {
  file_timestamp2_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::_internal_file_timestamp2() const {
  return file_timestamp2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::file_timestamp2() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.file_timestamp2)
  return _internal_file_timestamp2();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_file_timestamp2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  file_timestamp2_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_file_timestamp2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_timestamp2(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.file_timestamp2)
}

// optional uint32 signature_result = 6;
inline bool CFileVerification_SignatureChecRequest::_internal_has_signature_result() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_signature_result() const {
  return _internal_has_signature_result();
}
inline void CFileVerification_SignatureChecRequest::clear_signature_result() {
  signature_result_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::_internal_signature_result() const {
  return signature_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::signature_result() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.signature_result)
  return _internal_signature_result();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_signature_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  signature_result_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_signature_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signature_result(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.signature_result)
}

// optional string filename = 7;
inline bool CFileVerification_SignatureChecRequest::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_filename() const {
  return _internal_has_filename();
}
inline void CFileVerification_SignatureChecRequest::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFileVerification_SignatureChecRequest::filename() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.filename)
  return _internal_filename();
}
inline void CFileVerification_SignatureChecRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.filename)
}
inline std::string* CFileVerification_SignatureChecRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CFileVerification_SignatureChecRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& CFileVerification_SignatureChecRequest::_internal_filename() const {
  return filename_.Get();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CFileVerification_SignatureChecRequest::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CFileVerification_SignatureChecRequest.filename)
}
inline void CFileVerification_SignatureChecRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CFileVerification_SignatureChecRequest.filename)
}
inline void CFileVerification_SignatureChecRequest::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CFileVerification_SignatureChecRequest.filename)
}
inline std::string* CFileVerification_SignatureChecRequest::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CFileVerification_SignatureChecRequest::release_filename() {
  // @@protoc_insertion_point(field_release:CFileVerification_SignatureChecRequest.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CFileVerification_SignatureChecRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CFileVerification_SignatureChecRequest.filename)
}

// optional uint32 client_package_version = 8;
inline bool CFileVerification_SignatureChecRequest::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CFileVerification_SignatureChecRequest::clear_client_package_version() {
  client_package_version_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::_internal_client_package_version() const {
  return client_package_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SignatureChecRequest::client_package_version() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.client_package_version)
  return _internal_client_package_version();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  client_package_version_ = value;
}
inline void CFileVerification_SignatureChecRequest::set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.client_package_version)
}

// optional bytes sha1hash = 9;
inline bool CFileVerification_SignatureChecRequest::_internal_has_sha1hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecRequest::has_sha1hash() const {
  return _internal_has_sha1hash();
}
inline void CFileVerification_SignatureChecRequest::clear_sha1hash() {
  sha1hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CFileVerification_SignatureChecRequest::sha1hash() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecRequest.sha1hash)
  return _internal_sha1hash();
}
inline void CFileVerification_SignatureChecRequest::set_sha1hash(const std::string& value) {
  _internal_set_sha1hash(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecRequest.sha1hash)
}
inline std::string* CFileVerification_SignatureChecRequest::mutable_sha1hash() {
  // @@protoc_insertion_point(field_mutable:CFileVerification_SignatureChecRequest.sha1hash)
  return _internal_mutable_sha1hash();
}
inline const std::string& CFileVerification_SignatureChecRequest::_internal_sha1hash() const {
  return sha1hash_.Get();
}
inline void CFileVerification_SignatureChecRequest::_internal_set_sha1hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha1hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CFileVerification_SignatureChecRequest::set_sha1hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha1hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CFileVerification_SignatureChecRequest.sha1hash)
}
inline void CFileVerification_SignatureChecRequest::set_sha1hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha1hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CFileVerification_SignatureChecRequest.sha1hash)
}
inline void CFileVerification_SignatureChecRequest::set_sha1hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha1hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CFileVerification_SignatureChecRequest.sha1hash)
}
inline std::string* CFileVerification_SignatureChecRequest::_internal_mutable_sha1hash() {
  _has_bits_[0] |= 0x00000002u;
  return sha1hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CFileVerification_SignatureChecRequest::release_sha1hash() {
  // @@protoc_insertion_point(field_release:CFileVerification_SignatureChecRequest.sha1hash)
  if (!_internal_has_sha1hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha1hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CFileVerification_SignatureChecRequest::set_allocated_sha1hash(std::string* sha1hash) {
  if (sha1hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha1hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha1hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CFileVerification_SignatureChecRequest.sha1hash)
}

// -------------------------------------------------------------------

// CFileVerification_SignatureChecResponse

// optional bool deny_operation = 1;
inline bool CFileVerification_SignatureChecResponse::_internal_has_deny_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SignatureChecResponse::has_deny_operation() const {
  return _internal_has_deny_operation();
}
inline void CFileVerification_SignatureChecResponse::clear_deny_operation() {
  deny_operation_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFileVerification_SignatureChecResponse::_internal_deny_operation() const {
  return deny_operation_;
}
inline bool CFileVerification_SignatureChecResponse::deny_operation() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureChecResponse.deny_operation)
  return _internal_deny_operation();
}
inline void CFileVerification_SignatureChecResponse::_internal_set_deny_operation(bool value) {
  _has_bits_[0] |= 0x00000001u;
  deny_operation_ = value;
}
inline void CFileVerification_SignatureChecResponse::set_deny_operation(bool value) {
  _internal_set_deny_operation(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureChecResponse.deny_operation)
}

// -------------------------------------------------------------------

// CFileVerification_SteamServiceChecRequest

// optional uint32 service_status = 2;
inline bool CFileVerification_SteamServiceChecRequest::_internal_has_service_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecRequest::has_service_status() const {
  return _internal_has_service_status();
}
inline void CFileVerification_SteamServiceChecRequest::clear_service_status() {
  service_status_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::_internal_service_status() const {
  return service_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::service_status() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecRequest.service_status)
  return _internal_service_status();
}
inline void CFileVerification_SteamServiceChecRequest::_internal_set_service_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  service_status_ = value;
}
inline void CFileVerification_SteamServiceChecRequest::set_service_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_status(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecRequest.service_status)
}

// optional uint32 client_package_version = 3;
inline bool CFileVerification_SteamServiceChecRequest::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecRequest::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CFileVerification_SteamServiceChecRequest::clear_client_package_version() {
  client_package_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::_internal_client_package_version() const {
  return client_package_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::client_package_version() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecRequest.client_package_version)
  return _internal_client_package_version();
}
inline void CFileVerification_SteamServiceChecRequest::_internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_package_version_ = value;
}
inline void CFileVerification_SteamServiceChecRequest::set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecRequest.client_package_version)
}

// optional uint32 launcher_type = 4;
inline bool CFileVerification_SteamServiceChecRequest::_internal_has_launcher_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecRequest::has_launcher_type() const {
  return _internal_has_launcher_type();
}
inline void CFileVerification_SteamServiceChecRequest::clear_launcher_type() {
  launcher_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::_internal_launcher_type() const {
  return launcher_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::launcher_type() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecRequest.launcher_type)
  return _internal_launcher_type();
}
inline void CFileVerification_SteamServiceChecRequest::_internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  launcher_type_ = value;
}
inline void CFileVerification_SteamServiceChecRequest::set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launcher_type(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecRequest.launcher_type)
}

// optional uint32 os_type = 5;
inline bool CFileVerification_SteamServiceChecRequest::_internal_has_os_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecRequest::has_os_type() const {
  return _internal_has_os_type();
}
inline void CFileVerification_SteamServiceChecRequest::clear_os_type() {
  os_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::_internal_os_type() const {
  return os_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::os_type() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecRequest.os_type)
  return _internal_os_type();
}
inline void CFileVerification_SteamServiceChecRequest::_internal_set_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  os_type_ = value;
}
inline void CFileVerification_SteamServiceChecRequest::set_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecRequest.os_type)
}

// optional uint32 service_repair = 6;
inline bool CFileVerification_SteamServiceChecRequest::_internal_has_service_repair() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecRequest::has_service_repair() const {
  return _internal_has_service_repair();
}
inline void CFileVerification_SteamServiceChecRequest::clear_service_repair() {
  service_repair_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::_internal_service_repair() const {
  return service_repair_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFileVerification_SteamServiceChecRequest::service_repair() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecRequest.service_repair)
  return _internal_service_repair();
}
inline void CFileVerification_SteamServiceChecRequest::_internal_set_service_repair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  service_repair_ = value;
}
inline void CFileVerification_SteamServiceChecRequest::set_service_repair(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_repair(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecRequest.service_repair)
}

// -------------------------------------------------------------------

// CFileVerification_SteamServiceChecResponse

// optional bool attempt_repair = 1;
inline bool CFileVerification_SteamServiceChecResponse::_internal_has_attempt_repair() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceChecResponse::has_attempt_repair() const {
  return _internal_has_attempt_repair();
}
inline void CFileVerification_SteamServiceChecResponse::clear_attempt_repair() {
  attempt_repair_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFileVerification_SteamServiceChecResponse::_internal_attempt_repair() const {
  return attempt_repair_;
}
inline bool CFileVerification_SteamServiceChecResponse::attempt_repair() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceChecResponse.attempt_repair)
  return _internal_attempt_repair();
}
inline void CFileVerification_SteamServiceChecResponse::_internal_set_attempt_repair(bool value) {
  _has_bits_[0] |= 0x00000001u;
  attempt_repair_ = value;
}
inline void CFileVerification_SteamServiceChecResponse::set_attempt_repair(bool value) {
  _internal_set_attempt_repair(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceChecResponse.attempt_repair)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto
