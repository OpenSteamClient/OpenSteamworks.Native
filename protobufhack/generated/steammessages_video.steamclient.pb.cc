// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_video.steamclient.proto

#include "steammessages_video.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_id_(PROTOBUF_ULONGLONG(0))
  , client_cellid_(0u){}
struct CVideo_ClientGetVideoURL_RequestDefaultTypeInternal {
  constexpr CVideo_ClientGetVideoURL_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_ClientGetVideoURL_RequestDefaultTypeInternal() {}
  union {
    CVideo_ClientGetVideoURL_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_ClientGetVideoURL_RequestDefaultTypeInternal _CVideo_ClientGetVideoURL_Request_default_instance_;
constexpr CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , video_id_(PROTOBUF_ULONGLONG(0)){}
struct CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal {
  constexpr CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal() {}
  union {
    CVideo_ClientGetVideoURL_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal _CVideo_ClientGetVideoURL_Response_default_instance_;
constexpr VideoBookmark::VideoBookmark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , playbacposition_in_seconds_(0u)
  , video_tracid_(PROTOBUF_ULONGLONG(0))
  , audio_tracid_(PROTOBUF_ULONGLONG(0))
  , timedtext_tracid_(PROTOBUF_ULONGLONG(0))
  , last_modified_(0u)
  , hide_from_watch_history_(false)
  , hide_from_library_(false){}
struct VideoBookmarkDefaultTypeInternal {
  constexpr VideoBookmarkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoBookmarkDefaultTypeInternal() {}
  union {
    VideoBookmark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoBookmarkDefaultTypeInternal _VideoBookmark_default_instance_;
constexpr CVideo_SetVideoBookmarNotification::CVideo_SetVideoBookmarNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bookmarks_(){}
struct CVideo_SetVideoBookmarNotificationDefaultTypeInternal {
  constexpr CVideo_SetVideoBookmarNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_SetVideoBookmarNotificationDefaultTypeInternal() {}
  union {
    CVideo_SetVideoBookmarNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_SetVideoBookmarNotificationDefaultTypeInternal _CVideo_SetVideoBookmarNotification_default_instance_;
constexpr CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , updated_since_(0u){}
struct CVideo_GetVideoBookmarks_RequestDefaultTypeInternal {
  constexpr CVideo_GetVideoBookmarks_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GetVideoBookmarks_RequestDefaultTypeInternal() {}
  union {
    CVideo_GetVideoBookmarks_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GetVideoBookmarks_RequestDefaultTypeInternal _CVideo_GetVideoBookmarks_Request_default_instance_;
constexpr CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bookmarks_(){}
struct CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal {
  constexpr CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal() {}
  union {
    CVideo_GetVideoBookmarks_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal _CVideo_GetVideoBookmarks_Response_default_instance_;
constexpr CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encryption_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CVideo_UnlockedH264_NotificationDefaultTypeInternal {
  constexpr CVideo_UnlockedH264_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_UnlockedH264_NotificationDefaultTypeInternal() {}
  union {
    CVideo_UnlockedH264_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_UnlockedH264_NotificationDefaultTypeInternal _CVideo_UnlockedH264_Notification_default_instance_;
constexpr CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , client_cellid_(0u){}
struct CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal {
  constexpr CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal() {}
  union {
    CFovasVideo_ClientGetOPFSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
constexpr CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opf_settings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal {
  constexpr CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal() {}
  union {
    CFovasVideo_ClientGetOPFSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fvideo_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[3];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fvideo_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, video_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, client_cellid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, app_id_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, playbacposition_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, video_tracid_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, audio_tracid_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, timedtext_tracid_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, last_modified_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, hide_from_watch_history_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, hide_from_library_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_SetVideoBookmarNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_SetVideoBookmarNotification, bookmarks_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, appids_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, updated_since_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, bookmarks_),
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, encryption_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, client_cellid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, app_id_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, opf_settings_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CVideo_ClientGetVideoURL_Request)},
  { 9, 16, sizeof(::CVideo_ClientGetVideoURL_Response)},
  { 18, 31, sizeof(::VideoBookmark)},
  { 39, -1, sizeof(::CVideo_SetVideoBookmarNotification)},
  { 45, 52, sizeof(::CVideo_GetVideoBookmarks_Request)},
  { 54, -1, sizeof(::CVideo_GetVideoBookmarks_Response)},
  { 60, 66, sizeof(::CVideo_UnlockedH264_Notification)},
  { 67, 74, sizeof(::CFovasVideo_ClientGetOPFSettings_Request)},
  { 76, 83, sizeof(::CFovasVideo_ClientGetOPFSettings_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_ClientGetVideoURL_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_ClientGetVideoURL_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoBookmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_SetVideoBookmarNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GetVideoBookmarks_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GetVideoBookmarks_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_UnlockedH264_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fvideo_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_video.steamclient.proto\032"
  " google/protobuf/descriptor.proto\032\030steam"
  "messages_base.proto\032,steammessages_unifi"
  "ed_base.steamclient.proto\"K\n CVideo_Clie"
  "ntGetVideoURL_Request\022\020\n\010video_id\030\001 \001(\004\022"
  "\025\n\rclient_cellid\030\002 \001(\r\"H\n!CVideo_ClientG"
  "etVideoURL_Response\022\020\n\010video_id\030\001 \001(\004\022\021\n"
  "\tvideo_url\030\002 \001(\t\"\352\001\n\rVideoBookmark\022\016\n\006ap"
  "p_id\030\001 \001(\r\022\"\n\032playbacposition_in_seconds"
  "\030\002 \001(\r\022\024\n\014video_tracid\030\003 \001(\004\022\024\n\014audio_tr"
  "acid\030\004 \001(\004\022\030\n\020timedtext_tracid\030\005 \001(\004\022\025\n\r"
  "last_modified\030\006 \001(\r\022&\n\027hide_from_watch_h"
  "istory\030\007 \001(\010:\005false\022 \n\021hide_from_library"
  "\030\010 \001(\010:\005false\"G\n\"CVideo_SetVideoBookmarN"
  "otification\022!\n\tbookmarks\030\001 \003(\0132\016.VideoBo"
  "okmark\"I\n CVideo_GetVideoBookmarks_Reque"
  "st\022\016\n\006appids\030\001 \003(\r\022\025\n\rupdated_since\030\002 \001("
  "\r\"F\n!CVideo_GetVideoBookmarks_Response\022!"
  "\n\tbookmarks\030\001 \003(\0132\016.VideoBookmark\":\n CVi"
  "deo_UnlockedH264_Notification\022\026\n\016encrypt"
  "ion_key\030\001 \001(\014\"Q\n(CFovasVideo_ClientGetOP"
  "FSettings_Request\022\016\n\006app_id\030\001 \001(\r\022\025\n\rcli"
  "ent_cellid\030\002 \001(\r\"Q\n)CFovasVideo_ClientGe"
  "tOPFSettings_Response\022\016\n\006app_id\030\001 \001(\r\022\024\n"
  "\014opf_settings\030\002 \001(\t2\205\002\n\005Video\022Z\n\021ClientG"
  "etVideoURL\022!.CVideo_ClientGetVideoURL_Re"
  "quest\032\".CVideo_ClientGetVideoURL_Respons"
  "e\022D\n\020SetVideoBookmark\022#.CVideo_SetVideoB"
  "ookmarNotification\032\013.NoResponse\022Z\n\021GetVi"
  "deoBookmarks\022!.CVideo_GetVideoBookmarks_"
  "Request\032\".CVideo_GetVideoBookmarks_Respo"
  "nse2Y\n\013VideoClient\022D\n\022NotifyUnlockedH264"
  "\022!.CVideo_UnlockedH264_Notification\032\013.No"
  "Response\032\004\300\265\030\0022{\n\nFovasVideo\022m\n\024ClientGe"
  "tOPFSettings\022).CFovasVideo_ClientGetOPFS"
  "ettings_Request\032*.CFovasVideo_ClientGetO"
  "PFSettings_ResponseB\035\200\001\001\252\002\027OpenSteamwork"
  "s.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvideo_2esteamclient_2eproto = {
  false, false, 1490, descriptor_table_protodef_steammessages_5fvideo_2esteamclient_2eproto, "steammessages_video.steamclient.proto", 
  &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once, descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_deps, 3, 9,
  schemas, file_default_instances, TableStruct_steammessages_5fvideo_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fvideo_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fvideo_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fvideo_2esteamclient_2eproto(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);

// ===================================================================

class CVideo_ClientGetVideoURL_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_ClientGetVideoURL_Request>()._has_bits_);
  static void set_has_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_ClientGetVideoURL_Request)
}
CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(const CVideo_ClientGetVideoURL_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&video_id_, &from.video_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Request)
}

void CVideo_ClientGetVideoURL_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
}

CVideo_ClientGetVideoURL_Request::~CVideo_ClientGetVideoURL_Request() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_ClientGetVideoURL_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_ClientGetVideoURL_Request::ArenaDtor(void* object) {
  CVideo_ClientGetVideoURL_Request* _this = reinterpret_cast< CVideo_ClientGetVideoURL_Request* >(object);
  (void)_this;
}
void CVideo_ClientGetVideoURL_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_ClientGetVideoURL_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_ClientGetVideoURL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&video_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_ClientGetVideoURL_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 video_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_video_id(&has_bits);
          video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_cellid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_cellid(&has_bits);
          client_cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_ClientGetVideoURL_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_video_id(), target);
  }

  // optional uint32 client_cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_cellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Request)
  return target;
}

size_t CVideo_ClientGetVideoURL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 video_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_id());
    }

    // optional uint32 client_cellid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_cellid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_ClientGetVideoURL_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_ClientGetVideoURL_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_ClientGetVideoURL_Request)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      video_id_ = from.video_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Request::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Request::InternalSwap(CVideo_ClientGetVideoURL_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, client_cellid_)
      + sizeof(CVideo_ClientGetVideoURL_Request::client_cellid_)
      - PROTOBUF_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, video_id_)>(
          reinterpret_cast<char*>(&video_id_),
          reinterpret_cast<char*>(&other->video_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_ClientGetVideoURL_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_ClientGetVideoURL_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_ClientGetVideoURL_Response>()._has_bits_);
  static void set_has_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_ClientGetVideoURL_Response)
}
CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(const CVideo_ClientGetVideoURL_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_video_url()) {
    video_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_url(), 
      GetArena());
  }
  video_id_ = from.video_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Response)
}

void CVideo_ClientGetVideoURL_Response::SharedCtor() {
video_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
video_id_ = PROTOBUF_ULONGLONG(0);
}

CVideo_ClientGetVideoURL_Response::~CVideo_ClientGetVideoURL_Response() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_ClientGetVideoURL_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  video_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_ClientGetVideoURL_Response::ArenaDtor(void* object) {
  CVideo_ClientGetVideoURL_Response* _this = reinterpret_cast< CVideo_ClientGetVideoURL_Response* >(object);
  (void)_this;
}
void CVideo_ClientGetVideoURL_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_ClientGetVideoURL_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_ClientGetVideoURL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    video_url_.ClearNonDefaultToEmpty();
  }
  video_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_ClientGetVideoURL_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 video_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_video_id(&has_bits);
          video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string video_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_video_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_ClientGetVideoURL_Response.video_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_ClientGetVideoURL_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_video_id(), target);
  }

  // optional string video_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_url().data(), static_cast<int>(this->_internal_video_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_ClientGetVideoURL_Response.video_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_video_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Response)
  return target;
}

size_t CVideo_ClientGetVideoURL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string video_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_url());
    }

    // optional uint64 video_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_ClientGetVideoURL_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_ClientGetVideoURL_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_ClientGetVideoURL_Response)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_url(from._internal_video_url());
    }
    if (cached_has_bits & 0x00000002u) {
      video_id_ = from.video_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Response::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Response::InternalSwap(CVideo_ClientGetVideoURL_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_url_.Swap(&other->video_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(video_id_, other->video_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_ClientGetVideoURL_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VideoBookmark::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoBookmark>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playbacposition_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_tracid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audio_tracid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timedtext_tracid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hide_from_watch_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hide_from_library(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

VideoBookmark::VideoBookmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VideoBookmark)
}
VideoBookmark::VideoBookmark(const VideoBookmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_from_library_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  // @@protoc_insertion_point(copy_constructor:VideoBookmark)
}

void VideoBookmark::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_from_library_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
}

VideoBookmark::~VideoBookmark() {
  // @@protoc_insertion_point(destructor:VideoBookmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoBookmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoBookmark::ArenaDtor(void* object) {
  VideoBookmark* _this = reinterpret_cast< VideoBookmark* >(object);
  (void)_this;
}
void VideoBookmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoBookmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoBookmark::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoBookmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_from_library_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoBookmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 playbacposition_in_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playbacposition_in_seconds(&has_bits);
          playbacposition_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_tracid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_video_tracid(&has_bits);
          video_tracid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 audio_tracid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_audio_tracid(&has_bits);
          audio_tracid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timedtext_tracid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timedtext_tracid(&has_bits);
          timedtext_tracid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_modified = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_modified(&has_bits);
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_from_watch_history = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hide_from_watch_history(&has_bits);
          hide_from_watch_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_from_library = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hide_from_library(&has_bits);
          hide_from_library_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoBookmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoBookmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 playbacposition_in_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playbacposition_in_seconds(), target);
  }

  // optional uint64 video_tracid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_video_tracid(), target);
  }

  // optional uint64 audio_tracid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_audio_tracid(), target);
  }

  // optional uint64 timedtext_tracid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timedtext_tracid(), target);
  }

  // optional uint32 last_modified = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_modified(), target);
  }

  // optional bool hide_from_watch_history = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hide_from_watch_history(), target);
  }

  // optional bool hide_from_library = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_hide_from_library(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoBookmark)
  return target;
}

size_t VideoBookmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoBookmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 playbacposition_in_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playbacposition_in_seconds());
    }

    // optional uint64 video_tracid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_tracid());
    }

    // optional uint64 audio_tracid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_audio_tracid());
    }

    // optional uint64 timedtext_tracid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timedtext_tracid());
    }

    // optional uint32 last_modified = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_modified());
    }

    // optional bool hide_from_watch_history = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool hide_from_library = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoBookmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoBookmark)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoBookmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoBookmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoBookmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoBookmark)
    MergeFrom(*source);
  }
}

void VideoBookmark::MergeFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoBookmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      playbacposition_in_seconds_ = from.playbacposition_in_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      video_tracid_ = from.video_tracid_;
    }
    if (cached_has_bits & 0x00000008u) {
      audio_tracid_ = from.audio_tracid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timedtext_tracid_ = from.timedtext_tracid_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000040u) {
      hide_from_watch_history_ = from.hide_from_watch_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      hide_from_library_ = from.hide_from_library_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoBookmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoBookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoBookmark::CopyFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoBookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBookmark::IsInitialized() const {
  return true;
}

void VideoBookmark::InternalSwap(VideoBookmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoBookmark, hide_from_library_)
      + sizeof(VideoBookmark::hide_from_library_)
      - PROTOBUF_FIELD_OFFSET(VideoBookmark, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoBookmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_SetVideoBookmarNotification::_Internal {
 public:
};

CVideo_SetVideoBookmarNotification::CVideo_SetVideoBookmarNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bookmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_SetVideoBookmarNotification)
}
CVideo_SetVideoBookmarNotification::CVideo_SetVideoBookmarNotification(const CVideo_SetVideoBookmarNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_SetVideoBookmarNotification)
}

void CVideo_SetVideoBookmarNotification::SharedCtor() {
}

CVideo_SetVideoBookmarNotification::~CVideo_SetVideoBookmarNotification() {
  // @@protoc_insertion_point(destructor:CVideo_SetVideoBookmarNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_SetVideoBookmarNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_SetVideoBookmarNotification::ArenaDtor(void* object) {
  CVideo_SetVideoBookmarNotification* _this = reinterpret_cast< CVideo_SetVideoBookmarNotification* >(object);
  (void)_this;
}
void CVideo_SetVideoBookmarNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_SetVideoBookmarNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_SetVideoBookmarNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_SetVideoBookmarNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_SetVideoBookmarNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VideoBookmark bookmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bookmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_SetVideoBookmarNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_SetVideoBookmarNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bookmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bookmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_SetVideoBookmarNotification)
  return target;
}

size_t CVideo_SetVideoBookmarNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_SetVideoBookmarNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1;
  total_size += 1UL * this->_internal_bookmarks_size();
  for (const auto& msg : this->bookmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_SetVideoBookmarNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_SetVideoBookmarNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_SetVideoBookmarNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_SetVideoBookmarNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_SetVideoBookmarNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_SetVideoBookmarNotification)
    MergeFrom(*source);
  }
}

void CVideo_SetVideoBookmarNotification::MergeFrom(const CVideo_SetVideoBookmarNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_SetVideoBookmarNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
}

void CVideo_SetVideoBookmarNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_SetVideoBookmarNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_SetVideoBookmarNotification::CopyFrom(const CVideo_SetVideoBookmarNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_SetVideoBookmarNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_SetVideoBookmarNotification::IsInitialized() const {
  return true;
}

void CVideo_SetVideoBookmarNotification::InternalSwap(CVideo_SetVideoBookmarNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bookmarks_.InternalSwap(&other->bookmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_SetVideoBookmarNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GetVideoBookmarks_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GetVideoBookmarks_Request>()._has_bits_);
  static void set_has_updated_since(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GetVideoBookmarks_Request)
}
CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(const CVideo_GetVideoBookmarks_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updated_since_ = from.updated_since_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Request)
}

void CVideo_GetVideoBookmarks_Request::SharedCtor() {
updated_since_ = 0u;
}

CVideo_GetVideoBookmarks_Request::~CVideo_GetVideoBookmarks_Request() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GetVideoBookmarks_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GetVideoBookmarks_Request::ArenaDtor(void* object) {
  CVideo_GetVideoBookmarks_Request* _this = reinterpret_cast< CVideo_GetVideoBookmarks_Request* >(object);
  (void)_this;
}
void CVideo_GetVideoBookmarks_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GetVideoBookmarks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GetVideoBookmarks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  updated_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GetVideoBookmarks_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 appids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 updated_since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_updated_since(&has_bits);
          updated_since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GetVideoBookmarks_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 updated_since = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_since(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Request)
  return target;
}

size_t CVideo_GetVideoBookmarks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  // optional uint32 updated_since = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_since());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GetVideoBookmarks_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GetVideoBookmarks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GetVideoBookmarks_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GetVideoBookmarks_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GetVideoBookmarks_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GetVideoBookmarks_Request)
    MergeFrom(*source);
  }
}

void CVideo_GetVideoBookmarks_Request::MergeFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  if (from._internal_has_updated_since()) {
    _internal_set_updated_since(from._internal_updated_since());
  }
}

void CVideo_GetVideoBookmarks_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GetVideoBookmarks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GetVideoBookmarks_Request::CopyFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Request::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Request::InternalSwap(CVideo_GetVideoBookmarks_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  swap(updated_since_, other->updated_since_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GetVideoBookmarks_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GetVideoBookmarks_Response::_Internal {
 public:
};

CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bookmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GetVideoBookmarks_Response)
}
CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(const CVideo_GetVideoBookmarks_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Response)
}

void CVideo_GetVideoBookmarks_Response::SharedCtor() {
}

CVideo_GetVideoBookmarks_Response::~CVideo_GetVideoBookmarks_Response() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GetVideoBookmarks_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GetVideoBookmarks_Response::ArenaDtor(void* object) {
  CVideo_GetVideoBookmarks_Response* _this = reinterpret_cast< CVideo_GetVideoBookmarks_Response* >(object);
  (void)_this;
}
void CVideo_GetVideoBookmarks_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GetVideoBookmarks_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GetVideoBookmarks_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GetVideoBookmarks_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VideoBookmark bookmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bookmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GetVideoBookmarks_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bookmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bookmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Response)
  return target;
}

size_t CVideo_GetVideoBookmarks_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1;
  total_size += 1UL * this->_internal_bookmarks_size();
  for (const auto& msg : this->bookmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GetVideoBookmarks_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GetVideoBookmarks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GetVideoBookmarks_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GetVideoBookmarks_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GetVideoBookmarks_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GetVideoBookmarks_Response)
    MergeFrom(*source);
  }
}

void CVideo_GetVideoBookmarks_Response::MergeFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
}

void CVideo_GetVideoBookmarks_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GetVideoBookmarks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GetVideoBookmarks_Response::CopyFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Response::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Response::InternalSwap(CVideo_GetVideoBookmarks_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bookmarks_.InternalSwap(&other->bookmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GetVideoBookmarks_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_UnlockedH264_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_UnlockedH264_Notification>()._has_bits_);
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_UnlockedH264_Notification)
}
CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(const CVideo_UnlockedH264_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encryption_key()) {
    encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encryption_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CVideo_UnlockedH264_Notification)
}

void CVideo_UnlockedH264_Notification::SharedCtor() {
encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CVideo_UnlockedH264_Notification::~CVideo_UnlockedH264_Notification() {
  // @@protoc_insertion_point(destructor:CVideo_UnlockedH264_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_UnlockedH264_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_UnlockedH264_Notification::ArenaDtor(void* object) {
  CVideo_UnlockedH264_Notification* _this = reinterpret_cast< CVideo_UnlockedH264_Notification* >(object);
  (void)_this;
}
void CVideo_UnlockedH264_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_UnlockedH264_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_UnlockedH264_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_UnlockedH264_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encryption_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_UnlockedH264_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes encryption_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_UnlockedH264_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_UnlockedH264_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encryption_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_UnlockedH264_Notification)
  return target;
}

size_t CVideo_UnlockedH264_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_UnlockedH264_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes encryption_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryption_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_UnlockedH264_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_UnlockedH264_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_UnlockedH264_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_UnlockedH264_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_UnlockedH264_Notification)
    MergeFrom(*source);
  }
}

void CVideo_UnlockedH264_Notification::MergeFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encryption_key()) {
    _internal_set_encryption_key(from._internal_encryption_key());
  }
}

void CVideo_UnlockedH264_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_UnlockedH264_Notification::CopyFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_UnlockedH264_Notification::IsInitialized() const {
  return true;
}

void CVideo_UnlockedH264_Notification::InternalSwap(CVideo_UnlockedH264_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_key_.Swap(&other->encryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_UnlockedH264_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CFovasVideo_ClientGetOPFSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFovasVideo_ClientGetOPFSettings_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFovasVideo_ClientGetOPFSettings_Request)
}
CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(const CFovasVideo_ClientGetOPFSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Request)
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
}

CFovasVideo_ClientGetOPFSettings_Request::~CFovasVideo_ClientGetOPFSettings_Request() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CFovasVideo_ClientGetOPFSettings_Request::ArenaDtor(void* object) {
  CFovasVideo_ClientGetOPFSettings_Request* _this = reinterpret_cast< CFovasVideo_ClientGetOPFSettings_Request* >(object);
  (void)_this;
}
void CFovasVideo_ClientGetOPFSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFovasVideo_ClientGetOPFSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFovasVideo_ClientGetOPFSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFovasVideo_ClientGetOPFSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_cellid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_cellid(&has_bits);
          client_cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFovasVideo_ClientGetOPFSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 client_cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_cellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Request)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 client_cellid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_cellid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFovasVideo_ClientGetOPFSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFovasVideo_ClientGetOPFSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFovasVideo_ClientGetOPFSettings_Request)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Request::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Request::InternalSwap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, client_cellid_)
      + sizeof(CFovasVideo_ClientGetOPFSettings_Request::client_cellid_)
      - PROTOBUF_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFovasVideo_ClientGetOPFSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CFovasVideo_ClientGetOPFSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFovasVideo_ClientGetOPFSettings_Response>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opf_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CFovasVideo_ClientGetOPFSettings_Response)
}
CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(const CFovasVideo_ClientGetOPFSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opf_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opf_settings()) {
    opf_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opf_settings(), 
      GetArena());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Response)
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedCtor() {
opf_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
}

CFovasVideo_ClientGetOPFSettings_Response::~CFovasVideo_ClientGetOPFSettings_Response() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opf_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFovasVideo_ClientGetOPFSettings_Response::ArenaDtor(void* object) {
  CFovasVideo_ClientGetOPFSettings_Response* _this = reinterpret_cast< CFovasVideo_ClientGetOPFSettings_Response* >(object);
  (void)_this;
}
void CFovasVideo_ClientGetOPFSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFovasVideo_ClientGetOPFSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFovasVideo_ClientGetOPFSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opf_settings_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFovasVideo_ClientGetOPFSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string opf_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_opf_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFovasVideo_ClientGetOPFSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string opf_settings = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opf_settings().data(), static_cast<int>(this->_internal_opf_settings().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_opf_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Response)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string opf_settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opf_settings());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFovasVideo_ClientGetOPFSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CFovasVideo_ClientGetOPFSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CFovasVideo_ClientGetOPFSettings_Response)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opf_settings(from._internal_opf_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Response::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Response::InternalSwap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opf_settings_.Swap(&other->opf_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFovasVideo_ClientGetOPFSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Video::~Video() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Video::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Video::GetDescriptor() {
  return descriptor();
}

void Video::ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_ClientGetVideoURL_Request*,
                         ::CVideo_ClientGetVideoURL_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetVideoURL() not implemented.");
  done->Run();
}

void Video::SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_SetVideoBookmarNotification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetVideoBookmark() not implemented.");
  done->Run();
}

void Video::GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_GetVideoBookmarks_Request*,
                         ::CVideo_GetVideoBookmarks_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetVideoBookmarks() not implemented.");
  done->Run();
}

void Video::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      ClientGetVideoURL(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_ClientGetVideoURL_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_ClientGetVideoURL_Response*>(
                 response),
             done);
      break;
    case 1:
      SetVideoBookmark(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_SetVideoBookmarNotification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      GetVideoBookmarks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_GetVideoBookmarks_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_GetVideoBookmarks_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Video::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Request::default_instance();
    case 1:
      return ::CVideo_SetVideoBookmarNotification::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Video::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Video_Stub::Video_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Video_Stub::Video_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Video_Stub::~Video_Stub() {
  if (owns_channel_) delete channel_;
}

void Video_Stub::ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_ClientGetVideoURL_Request* request,
                              ::CVideo_ClientGetVideoURL_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Video_Stub::SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_SetVideoBookmarNotification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Video_Stub::GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_GetVideoBookmarks_Request* request,
                              ::CVideo_GetVideoBookmarks_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

VideoClient::~VideoClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClient::GetDescriptor() {
  return descriptor();
}

void VideoClient::NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_UnlockedH264_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUnlockedH264() not implemented.");
  done->Run();
}

void VideoClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyUnlockedH264(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_UnlockedH264_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_UnlockedH264_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VideoClient_Stub::VideoClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VideoClient_Stub::VideoClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
VideoClient_Stub::~VideoClient_Stub() {
  if (owns_channel_) delete channel_;
}

void VideoClient_Stub::NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_UnlockedH264_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

FovasVideo::~FovasVideo() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FovasVideo::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FovasVideo::GetDescriptor() {
  return descriptor();
}

void FovasVideo::ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFovasVideo_ClientGetOPFSettings_Request*,
                         ::CFovasVideo_ClientGetOPFSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetOPFSettings() not implemented.");
  done->Run();
}

void FovasVideo::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[2]);
  switch(method->index()) {
    case 0:
      ClientGetOPFSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFovasVideo_ClientGetOPFSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFovasVideo_ClientGetOPFSettings_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FovasVideo::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FovasVideo::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FovasVideo_Stub::FovasVideo_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FovasVideo_Stub::FovasVideo_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FovasVideo_Stub::~FovasVideo_Stub() {
  if (owns_channel_) delete channel_;
}

void FovasVideo_Stub::ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFovasVideo_ClientGetOPFSettings_Request* request,
                              ::CFovasVideo_ClientGetOPFSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CVideo_ClientGetVideoURL_Request* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_ClientGetVideoURL_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_ClientGetVideoURL_Response* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_ClientGetVideoURL_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::VideoBookmark* Arena::CreateMaybeMessage< ::VideoBookmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VideoBookmark >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_SetVideoBookmarNotification* Arena::CreateMaybeMessage< ::CVideo_SetVideoBookmarNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_SetVideoBookmarNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GetVideoBookmarks_Request* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GetVideoBookmarks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GetVideoBookmarks_Response* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GetVideoBookmarks_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_UnlockedH264_Notification* Arena::CreateMaybeMessage< ::CVideo_UnlockedH264_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_UnlockedH264_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Request* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFovasVideo_ClientGetOPFSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Response* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFovasVideo_ClientGetOPFSettings_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
