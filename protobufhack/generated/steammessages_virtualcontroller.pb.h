// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_virtualcontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fvirtualcontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvirtualcontroller_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(int index);
class CVirtualControllerColor;
struct CVirtualControllerColorDefaultTypeInternal;
extern CVirtualControllerColorDefaultTypeInternal _CVirtualControllerColor_default_instance_;
class CVirtualControllerConfig;
struct CVirtualControllerConfigDefaultTypeInternal;
extern CVirtualControllerConfigDefaultTypeInternal _CVirtualControllerConfig_default_instance_;
class CVirtualControllerConfig_ActionSet;
struct CVirtualControllerConfig_ActionSetDefaultTypeInternal;
extern CVirtualControllerConfig_ActionSetDefaultTypeInternal _CVirtualControllerConfig_ActionSet_default_instance_;
class CVirtualControllerConfig_Control;
struct CVirtualControllerConfig_ControlDefaultTypeInternal;
extern CVirtualControllerConfig_ControlDefaultTypeInternal _CVirtualControllerConfig_Control_default_instance_;
class CVirtualControllerElement;
struct CVirtualControllerElementDefaultTypeInternal;
extern CVirtualControllerElementDefaultTypeInternal _CVirtualControllerElement_default_instance_;
class CVirtualControllerGlobalConfig;
struct CVirtualControllerGlobalConfigDefaultTypeInternal;
extern CVirtualControllerGlobalConfigDefaultTypeInternal _CVirtualControllerGlobalConfig_default_instance_;
class CVirtualControllerLayout;
struct CVirtualControllerLayoutDefaultTypeInternal;
extern CVirtualControllerLayoutDefaultTypeInternal _CVirtualControllerLayout_default_instance_;
class CVirtualControllerLayoutPackage;
struct CVirtualControllerLayoutPackageDefaultTypeInternal;
extern CVirtualControllerLayoutPackageDefaultTypeInternal _CVirtualControllerLayoutPackage_default_instance_;
class CVirtualControllerLayouts;
struct CVirtualControllerLayoutsDefaultTypeInternal;
extern CVirtualControllerLayoutsDefaultTypeInternal _CVirtualControllerLayouts_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CVirtualControllerColor* Arena::CreateMaybeMessage<::CVirtualControllerColor>(Arena*);
template<> ::CVirtualControllerConfig* Arena::CreateMaybeMessage<::CVirtualControllerConfig>(Arena*);
template<> ::CVirtualControllerConfig_ActionSet* Arena::CreateMaybeMessage<::CVirtualControllerConfig_ActionSet>(Arena*);
template<> ::CVirtualControllerConfig_Control* Arena::CreateMaybeMessage<::CVirtualControllerConfig_Control>(Arena*);
template<> ::CVirtualControllerElement* Arena::CreateMaybeMessage<::CVirtualControllerElement>(Arena*);
template<> ::CVirtualControllerGlobalConfig* Arena::CreateMaybeMessage<::CVirtualControllerGlobalConfig>(Arena*);
template<> ::CVirtualControllerLayout* Arena::CreateMaybeMessage<::CVirtualControllerLayout>(Arena*);
template<> ::CVirtualControllerLayoutPackage* Arena::CreateMaybeMessage<::CVirtualControllerLayoutPackage>(Arena*);
template<> ::CVirtualControllerLayouts* Arena::CreateMaybeMessage<::CVirtualControllerLayouts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EInputMode : int {
  EInputModeUnknown = 0,
  EInputModeMouse = 1,
  EInputModeController = 2,
  EInputModeMouseAndController = 3
};
bool EInputMode_IsValid(int value);
constexpr EInputMode EInputMode_MIN = EInputModeUnknown;
constexpr EInputMode EInputMode_MAX = EInputModeMouseAndController;
constexpr int EInputMode_ARRAYSIZE = EInputMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInputMode_descriptor();
template<typename T>
inline const std::string& EInputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EInputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EInputMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EInputMode_descriptor(), enum_t_value);
}
inline bool EInputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EInputMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EInputMode>(
    EInputMode_descriptor(), name, value);
}
enum EMouseMode : int {
  EMouseModeUnknown = 0,
  EMouseModeRelativeCursor = 1,
  EMouseModeAbsoluteCursor = 2,
  EMouseModeTouch = 3,
  EMouseModeRelative = 4
};
bool EMouseMode_IsValid(int value);
constexpr EMouseMode EMouseMode_MIN = EMouseModeUnknown;
constexpr EMouseMode EMouseMode_MAX = EMouseModeRelative;
constexpr int EMouseMode_ARRAYSIZE = EMouseMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMouseMode_descriptor();
template<typename T>
inline const std::string& EMouseMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMouseMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMouseMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMouseMode_descriptor(), enum_t_value);
}
inline bool EMouseMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMouseMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMouseMode>(
    EMouseMode_descriptor(), name, value);
}
enum EControllerElementType : int {
  EControllerElementTypeNone = -1,
  EControllerElementTypeThumb = 0,
  EControllerElementTypeButtonSteam = 1,
  EControllerElementTypeJoystickLeft = 2,
  EControllerElementTypeButtonJoystickLeft = 3,
  EControllerElementTypeJoystickRight = 4,
  EControllerElementTypeButtonJoystickRight = 5,
  EControllerElementTypeDPad = 6,
  EControllerElementTypeButtonA = 7,
  EControllerElementTypeButtonB = 8,
  EControllerElementTypeButtonX = 9,
  EControllerElementTypeButtonY = 10,
  EControllerElementTypeButtonSelect = 11,
  EControllerElementTypeButtonStart = 12,
  EControllerElementTypeButtonTriggerLeft = 13,
  EControllerElementTypeButtonTriggerRight = 14,
  EControllerElementTypeButtonBumperLeft = 15,
  EControllerElementTypeButtonBumperRight = 16,
  EControllerElementTypeButtonMacro0 = 17,
  EControllerElementTypeButtonMacro1 = 18,
  EControllerElementTypeButtonMacro2 = 19,
  EControllerElementTypeButtonMacro3 = 20,
  EControllerElementTypeButtonMacro4 = 21,
  EControllerElementTypeButtonMacro5 = 22,
  EControllerElementTypeButtonMacro6 = 23,
  EControllerElementTypeButtonMacro7 = 24,
  EControllerElementTypeTrackpadCenter = 25,
  EControllerElementTypeTrackpadLeft = 26,
  EControllerElementTypeTrackpadRight = 27,
  EControllerElementTypeKeyboard = 28,
  EControllerElementTypeMagnifyingGlass = 29,
  EControllerElementTypeButtonMacro1Finger = 30,
  EControllerElementTypeButtonMacro2Finger = 31,
  EControllerElementTypeRecordInput = 32,
  EControllerElementTypePlaybackInput = 33,
  EControllerElementTypePaste = 34,
  EControllerElementTypeMax = 35
};
bool EControllerElementType_IsValid(int value);
constexpr EControllerElementType EControllerElementType_MIN = EControllerElementTypeNone;
constexpr EControllerElementType EControllerElementType_MAX = EControllerElementTypeMax;
constexpr int EControllerElementType_ARRAYSIZE = EControllerElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EControllerElementType_descriptor();
template<typename T>
inline const std::string& EControllerElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EControllerElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EControllerElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EControllerElementType_descriptor(), enum_t_value);
}
inline bool EControllerElementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EControllerElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EControllerElementType>(
    EControllerElementType_descriptor(), name, value);
}
// ===================================================================

class CVirtualControllerElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerElement) */ {
 public:
  inline CVirtualControllerElement() : CVirtualControllerElement(nullptr) {}
  virtual ~CVirtualControllerElement();
  explicit constexpr CVirtualControllerElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerElement(const CVirtualControllerElement& from);
  CVirtualControllerElement(CVirtualControllerElement&& from) noexcept
    : CVirtualControllerElement() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement& operator=(const CVirtualControllerElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerElement& operator=(CVirtualControllerElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerElement* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement*>(
               &_CVirtualControllerElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CVirtualControllerElement& a, CVirtualControllerElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement>(nullptr);
  }

  CVirtualControllerElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerElement& from);
  void MergeFrom(const CVirtualControllerElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerElement";
  }
  protected:
  explicit CVirtualControllerElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibleFieldNumber = 2,
    kXPositionFieldNumber = 3,
    kYPositionFieldNumber = 4,
    kYScaleFieldNumber = 6,
    kTypeFieldNumber = 1,
    kXScaleFieldNumber = 5,
  };
  // optional bool visible = 2;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional float x_position = 3;
  bool has_x_position() const;
  private:
  bool _internal_has_x_position() const;
  public:
  void clear_x_position();
  float x_position() const;
  void set_x_position(float value);
  private:
  float _internal_x_position() const;
  void _internal_set_x_position(float value);
  public:

  // optional float y_position = 4;
  bool has_y_position() const;
  private:
  bool _internal_has_y_position() const;
  public:
  void clear_y_position();
  float y_position() const;
  void set_y_position(float value);
  private:
  float _internal_y_position() const;
  void _internal_set_y_position(float value);
  public:

  // optional float y_scale = 6 [default = 1];
  bool has_y_scale() const;
  private:
  bool _internal_has_y_scale() const;
  public:
  void clear_y_scale();
  float y_scale() const;
  void set_y_scale(float value);
  private:
  float _internal_y_scale() const;
  void _internal_set_y_scale(float value);
  public:

  // optional .EControllerElementType type = 1 [default = EControllerElementTypeNone];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EControllerElementType type() const;
  void set_type(::EControllerElementType value);
  private:
  ::EControllerElementType _internal_type() const;
  void _internal_set_type(::EControllerElementType value);
  public:

  // optional float x_scale = 5 [default = 1];
  bool has_x_scale() const;
  private:
  bool _internal_has_x_scale() const;
  public:
  void clear_x_scale();
  float x_scale() const;
  void set_x_scale(float value);
  private:
  float _internal_x_scale() const;
  void _internal_set_x_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool visible_;
  float x_position_;
  float y_position_;
  float y_scale_;
  int type_;
  float x_scale_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerColor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerColor) */ {
 public:
  inline CVirtualControllerColor() : CVirtualControllerColor(nullptr) {}
  virtual ~CVirtualControllerColor();
  explicit constexpr CVirtualControllerColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerColor(const CVirtualControllerColor& from);
  CVirtualControllerColor(CVirtualControllerColor&& from) noexcept
    : CVirtualControllerColor() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerColor& operator=(const CVirtualControllerColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerColor& operator=(CVirtualControllerColor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerColor* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerColor*>(
               &_CVirtualControllerColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CVirtualControllerColor& a, CVirtualControllerColor& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerColor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerColor* New() const final {
    return CreateMaybeMessage<CVirtualControllerColor>(nullptr);
  }

  CVirtualControllerColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerColor& from);
  void MergeFrom(const CVirtualControllerColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerColor";
  }
  protected:
  explicit CVirtualControllerColor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // optional float r = 1 [default = 1];
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // optional float g = 2 [default = 1];
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // optional float b = 3 [default = 1];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // optional float a = 4 [default = 1];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float r_;
  float g_;
  float b_;
  float a_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayout) */ {
 public:
  inline CVirtualControllerLayout() : CVirtualControllerLayout(nullptr) {}
  virtual ~CVirtualControllerLayout();
  explicit constexpr CVirtualControllerLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerLayout(const CVirtualControllerLayout& from);
  CVirtualControllerLayout(CVirtualControllerLayout&& from) noexcept
    : CVirtualControllerLayout() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayout& operator=(const CVirtualControllerLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerLayout& operator=(CVirtualControllerLayout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerLayout* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayout*>(
               &_CVirtualControllerLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CVirtualControllerLayout& a, CVirtualControllerLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerLayout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayout* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(nullptr);
  }

  CVirtualControllerLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerLayout& from);
  void MergeFrom(const CVirtualControllerLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerLayout";
  }
  protected:
  explicit CVirtualControllerLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 4,
    kColorFieldNumber = 5,
    kLayoutVersionFieldNumber = 1,
    kActionsetIdFieldNumber = 2,
  };
  // repeated .CVirtualControllerElement elements = 4;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::CVirtualControllerElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerElement >*
      mutable_elements();
  private:
  const ::CVirtualControllerElement& _internal_elements(int index) const;
  ::CVirtualControllerElement* _internal_add_elements();
  public:
  const ::CVirtualControllerElement& elements(int index) const;
  ::CVirtualControllerElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerElement >&
      elements() const;

  // optional .CVirtualControllerColor color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::CVirtualControllerColor& color() const;
  ::CVirtualControllerColor* release_color();
  ::CVirtualControllerColor* mutable_color();
  void set_allocated_color(::CVirtualControllerColor* color);
  private:
  const ::CVirtualControllerColor& _internal_color() const;
  ::CVirtualControllerColor* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::CVirtualControllerColor* color);
  ::CVirtualControllerColor* unsafe_arena_release_color();

  // optional int32 layout_version = 1;
  bool has_layout_version() const;
  private:
  bool _internal_has_layout_version() const;
  public:
  void clear_layout_version();
  ::PROTOBUF_NAMESPACE_ID::int32 layout_version() const;
  void set_layout_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layout_version() const;
  void _internal_set_layout_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 actionset_id = 2;
  bool has_actionset_id() const;
  private:
  bool _internal_has_actionset_id() const;
  public:
  void clear_actionset_id();
  ::PROTOBUF_NAMESPACE_ID::int32 actionset_id() const;
  void set_actionset_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionset_id() const;
  void _internal_set_actionset_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerElement > elements_;
  ::CVirtualControllerColor* color_;
  ::PROTOBUF_NAMESPACE_ID::int32 layout_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 actionset_id_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayouts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayouts) */ {
 public:
  inline CVirtualControllerLayouts() : CVirtualControllerLayouts(nullptr) {}
  virtual ~CVirtualControllerLayouts();
  explicit constexpr CVirtualControllerLayouts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerLayouts(const CVirtualControllerLayouts& from);
  CVirtualControllerLayouts(CVirtualControllerLayouts&& from) noexcept
    : CVirtualControllerLayouts() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayouts& operator=(const CVirtualControllerLayouts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerLayouts& operator=(CVirtualControllerLayouts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerLayouts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerLayouts* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayouts*>(
               &_CVirtualControllerLayouts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CVirtualControllerLayouts& a, CVirtualControllerLayouts& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerLayouts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerLayouts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayouts* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(nullptr);
  }

  CVirtualControllerLayouts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerLayouts& from);
  void MergeFrom(const CVirtualControllerLayouts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayouts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerLayouts";
  }
  protected:
  explicit CVirtualControllerLayouts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutsFieldNumber = 1,
    kMouseModeFieldNumber = 3,
    kPinchZoomXFieldNumber = 6,
    kPinchZoomYFieldNumber = 7,
    kPinchZoomEnabledFieldNumber = 5,
    kShakenFieldNumber = 9,
    kMouseOffscreenFieldNumber = 10,
    kPinchZoomScaleFieldNumber = 8,
    kInputModeFieldNumber = 2,
    kTrackpadSensitivityFieldNumber = 4,
  };
  // repeated .CVirtualControllerLayout layouts = 1;
  int layouts_size() const;
  private:
  int _internal_layouts_size() const;
  public:
  void clear_layouts();
  ::CVirtualControllerLayout* mutable_layouts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerLayout >*
      mutable_layouts();
  private:
  const ::CVirtualControllerLayout& _internal_layouts(int index) const;
  ::CVirtualControllerLayout* _internal_add_layouts();
  public:
  const ::CVirtualControllerLayout& layouts(int index) const;
  ::CVirtualControllerLayout* add_layouts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerLayout >&
      layouts() const;

  // optional .EMouseMode mouse_mode = 3 [default = EMouseModeUnknown];
  bool has_mouse_mode() const;
  private:
  bool _internal_has_mouse_mode() const;
  public:
  void clear_mouse_mode();
  ::EMouseMode mouse_mode() const;
  void set_mouse_mode(::EMouseMode value);
  private:
  ::EMouseMode _internal_mouse_mode() const;
  void _internal_set_mouse_mode(::EMouseMode value);
  public:

  // optional float pinch_zoom_x = 6 [default = 0];
  bool has_pinch_zoom_x() const;
  private:
  bool _internal_has_pinch_zoom_x() const;
  public:
  void clear_pinch_zoom_x();
  float pinch_zoom_x() const;
  void set_pinch_zoom_x(float value);
  private:
  float _internal_pinch_zoom_x() const;
  void _internal_set_pinch_zoom_x(float value);
  public:

  // optional float pinch_zoom_y = 7 [default = 0];
  bool has_pinch_zoom_y() const;
  private:
  bool _internal_has_pinch_zoom_y() const;
  public:
  void clear_pinch_zoom_y();
  float pinch_zoom_y() const;
  void set_pinch_zoom_y(float value);
  private:
  float _internal_pinch_zoom_y() const;
  void _internal_set_pinch_zoom_y(float value);
  public:

  // optional bool pinch_zoom_enabled = 5 [default = false];
  bool has_pinch_zoom_enabled() const;
  private:
  bool _internal_has_pinch_zoom_enabled() const;
  public:
  void clear_pinch_zoom_enabled();
  bool pinch_zoom_enabled() const;
  void set_pinch_zoom_enabled(bool value);
  private:
  bool _internal_pinch_zoom_enabled() const;
  void _internal_set_pinch_zoom_enabled(bool value);
  public:

  // optional bool shaken = 9;
  bool has_shaken() const;
  private:
  bool _internal_has_shaken() const;
  public:
  void clear_shaken();
  bool shaken() const;
  void set_shaken(bool value);
  private:
  bool _internal_shaken() const;
  void _internal_set_shaken(bool value);
  public:

  // optional bool mouse_offscreen = 10;
  bool has_mouse_offscreen() const;
  private:
  bool _internal_has_mouse_offscreen() const;
  public:
  void clear_mouse_offscreen();
  bool mouse_offscreen() const;
  void set_mouse_offscreen(bool value);
  private:
  bool _internal_mouse_offscreen() const;
  void _internal_set_mouse_offscreen(bool value);
  public:

  // optional float pinch_zoom_scale = 8 [default = 1];
  bool has_pinch_zoom_scale() const;
  private:
  bool _internal_has_pinch_zoom_scale() const;
  public:
  void clear_pinch_zoom_scale();
  float pinch_zoom_scale() const;
  void set_pinch_zoom_scale(float value);
  private:
  float _internal_pinch_zoom_scale() const;
  void _internal_set_pinch_zoom_scale(float value);
  public:

  // optional .EInputMode input_mode = 2 [default = EInputModeController];
  bool has_input_mode() const;
  private:
  bool _internal_has_input_mode() const;
  public:
  void clear_input_mode();
  ::EInputMode input_mode() const;
  void set_input_mode(::EInputMode value);
  private:
  ::EInputMode _internal_input_mode() const;
  void _internal_set_input_mode(::EInputMode value);
  public:

  // optional float trackpad_sensitivity = 4 [default = 1];
  bool has_trackpad_sensitivity() const;
  private:
  bool _internal_has_trackpad_sensitivity() const;
  public:
  void clear_trackpad_sensitivity();
  float trackpad_sensitivity() const;
  void set_trackpad_sensitivity(float value);
  private:
  float _internal_trackpad_sensitivity() const;
  void _internal_set_trackpad_sensitivity(float value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayouts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerLayout > layouts_;
  int mouse_mode_;
  float pinch_zoom_x_;
  float pinch_zoom_y_;
  bool pinch_zoom_enabled_;
  bool shaken_;
  bool mouse_offscreen_;
  float pinch_zoom_scale_;
  int input_mode_;
  float trackpad_sensitivity_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_Control PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig.Control) */ {
 public:
  inline CVirtualControllerConfig_Control() : CVirtualControllerConfig_Control(nullptr) {}
  virtual ~CVirtualControllerConfig_Control();
  explicit constexpr CVirtualControllerConfig_Control(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerConfig_Control(const CVirtualControllerConfig_Control& from);
  CVirtualControllerConfig_Control(CVirtualControllerConfig_Control&& from) noexcept
    : CVirtualControllerConfig_Control() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_Control& operator=(const CVirtualControllerConfig_Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerConfig_Control& operator=(CVirtualControllerConfig_Control&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerConfig_Control& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerConfig_Control* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_Control*>(
               &_CVirtualControllerConfig_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CVirtualControllerConfig_Control& a, CVirtualControllerConfig_Control& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerConfig_Control* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerConfig_Control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_Control* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(nullptr);
  }

  CVirtualControllerConfig_Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_Control& from);
  void MergeFrom(const CVirtualControllerConfig_Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerConfig.Control";
  }
  protected:
  explicit CVirtualControllerConfig_Control(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIconFieldNumber = 2,
    kIconForegroundFieldNumber = 9,
    kIconBackgroundFieldNumber = 10,
    kInputSourceFieldNumber = 3,
    kInputModeFieldNumber = 4,
    kInputElementFieldNumber = 5,
    kOutputGamepadFieldNumber = 6,
    kOutputKeyboardFieldNumber = 7,
    kOutputMouseFieldNumber = 8,
    kInputToggleFieldNumber = 11,
    kInputActivateSticorTrackpadFieldNumber = 12,
    kActivationTypeFieldNumber = 13,
    kLongPressMsFieldNumber = 14,
    kDoublePressMsFieldNumber = 15,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 2;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string icon_foreground = 9;
  bool has_icon_foreground() const;
  private:
  bool _internal_has_icon_foreground() const;
  public:
  void clear_icon_foreground();
  const std::string& icon_foreground() const;
  void set_icon_foreground(const std::string& value);
  void set_icon_foreground(std::string&& value);
  void set_icon_foreground(const char* value);
  void set_icon_foreground(const char* value, size_t size);
  std::string* mutable_icon_foreground();
  std::string* release_icon_foreground();
  void set_allocated_icon_foreground(std::string* icon_foreground);
  private:
  const std::string& _internal_icon_foreground() const;
  void _internal_set_icon_foreground(const std::string& value);
  std::string* _internal_mutable_icon_foreground();
  public:

  // optional string icon_background = 10;
  bool has_icon_background() const;
  private:
  bool _internal_has_icon_background() const;
  public:
  void clear_icon_background();
  const std::string& icon_background() const;
  void set_icon_background(const std::string& value);
  void set_icon_background(std::string&& value);
  void set_icon_background(const char* value);
  void set_icon_background(const char* value, size_t size);
  std::string* mutable_icon_background();
  std::string* release_icon_background();
  void set_allocated_icon_background(std::string* icon_background);
  private:
  const std::string& _internal_icon_background() const;
  void _internal_set_icon_background(const std::string& value);
  std::string* _internal_mutable_icon_background();
  public:

  // optional int32 input_source = 3;
  bool has_input_source() const;
  private:
  bool _internal_has_input_source() const;
  public:
  void clear_input_source();
  ::PROTOBUF_NAMESPACE_ID::int32 input_source() const;
  void set_input_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_source() const;
  void _internal_set_input_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 input_mode = 4;
  bool has_input_mode() const;
  private:
  bool _internal_has_input_mode() const;
  public:
  void clear_input_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 input_mode() const;
  void set_input_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_mode() const;
  void _internal_set_input_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 input_element = 5;
  bool has_input_element() const;
  private:
  bool _internal_has_input_element() const;
  public:
  void clear_input_element();
  ::PROTOBUF_NAMESPACE_ID::int32 input_element() const;
  void set_input_element(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_element() const;
  void _internal_set_input_element(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 output_gamepad = 6;
  bool has_output_gamepad() const;
  private:
  bool _internal_has_output_gamepad() const;
  public:
  void clear_output_gamepad();
  ::PROTOBUF_NAMESPACE_ID::int32 output_gamepad() const;
  void set_output_gamepad(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_gamepad() const;
  void _internal_set_output_gamepad(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 output_keyboard = 7;
  bool has_output_keyboard() const;
  private:
  bool _internal_has_output_keyboard() const;
  public:
  void clear_output_keyboard();
  ::PROTOBUF_NAMESPACE_ID::int32 output_keyboard() const;
  void set_output_keyboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_keyboard() const;
  void _internal_set_output_keyboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 output_mouse = 8;
  bool has_output_mouse() const;
  private:
  bool _internal_has_output_mouse() const;
  public:
  void clear_output_mouse();
  ::PROTOBUF_NAMESPACE_ID::int32 output_mouse() const;
  void set_output_mouse(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_mouse() const;
  void _internal_set_output_mouse(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool input_toggle = 11;
  bool has_input_toggle() const;
  private:
  bool _internal_has_input_toggle() const;
  public:
  void clear_input_toggle();
  bool input_toggle() const;
  void set_input_toggle(bool value);
  private:
  bool _internal_input_toggle() const;
  void _internal_set_input_toggle(bool value);
  public:

  // optional int32 input_activate_sticor_trackpad = 12;
  bool has_input_activate_sticor_trackpad() const;
  private:
  bool _internal_has_input_activate_sticor_trackpad() const;
  public:
  void clear_input_activate_sticor_trackpad();
  ::PROTOBUF_NAMESPACE_ID::int32 input_activate_sticor_trackpad() const;
  void set_input_activate_sticor_trackpad(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_activate_sticor_trackpad() const;
  void _internal_set_input_activate_sticor_trackpad(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 activation_type = 13;
  bool has_activation_type() const;
  private:
  bool _internal_has_activation_type() const;
  public:
  void clear_activation_type();
  ::PROTOBUF_NAMESPACE_ID::int32 activation_type() const;
  void set_activation_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activation_type() const;
  void _internal_set_activation_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 long_press_ms = 14;
  bool has_long_press_ms() const;
  private:
  bool _internal_has_long_press_ms() const;
  public:
  void clear_long_press_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 long_press_ms() const;
  void set_long_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_long_press_ms() const;
  void _internal_set_long_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 double_press_ms = 15;
  bool has_double_press_ms() const;
  private:
  bool _internal_has_double_press_ms() const;
  public:
  void clear_double_press_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 double_press_ms() const;
  void set_double_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_double_press_ms() const;
  void _internal_set_double_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig.Control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_foreground_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_background_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_element_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_gamepad_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_keyboard_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_mouse_;
  bool input_toggle_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_activate_sticor_trackpad_;
  ::PROTOBUF_NAMESPACE_ID::int32 activation_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 long_press_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 double_press_ms_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_ActionSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig.ActionSet) */ {
 public:
  inline CVirtualControllerConfig_ActionSet() : CVirtualControllerConfig_ActionSet(nullptr) {}
  virtual ~CVirtualControllerConfig_ActionSet();
  explicit constexpr CVirtualControllerConfig_ActionSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerConfig_ActionSet(const CVirtualControllerConfig_ActionSet& from);
  CVirtualControllerConfig_ActionSet(CVirtualControllerConfig_ActionSet&& from) noexcept
    : CVirtualControllerConfig_ActionSet() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_ActionSet& operator=(const CVirtualControllerConfig_ActionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerConfig_ActionSet& operator=(CVirtualControllerConfig_ActionSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerConfig_ActionSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerConfig_ActionSet* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_ActionSet*>(
               &_CVirtualControllerConfig_ActionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CVirtualControllerConfig_ActionSet& a, CVirtualControllerConfig_ActionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerConfig_ActionSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerConfig_ActionSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_ActionSet* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(nullptr);
  }

  CVirtualControllerConfig_ActionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_ActionSet& from);
  void MergeFrom(const CVirtualControllerConfig_ActionSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_ActionSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerConfig.ActionSet";
  }
  protected:
  explicit CVirtualControllerConfig_ActionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 4,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
  };
  // repeated .CVirtualControllerConfig.Control controls = 4;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  ::CVirtualControllerConfig_Control* mutable_controls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_Control >*
      mutable_controls();
  private:
  const ::CVirtualControllerConfig_Control& _internal_controls(int index) const;
  ::CVirtualControllerConfig_Control* _internal_add_controls();
  public:
  const ::CVirtualControllerConfig_Control& controls(int index) const;
  ::CVirtualControllerConfig_Control* add_controls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_Control >&
      controls() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 parent_id = 2;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig.ActionSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_Control > controls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerConfig) */ {
 public:
  inline CVirtualControllerConfig() : CVirtualControllerConfig(nullptr) {}
  virtual ~CVirtualControllerConfig();
  explicit constexpr CVirtualControllerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerConfig(const CVirtualControllerConfig& from);
  CVirtualControllerConfig(CVirtualControllerConfig&& from) noexcept
    : CVirtualControllerConfig() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig& operator=(const CVirtualControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerConfig& operator=(CVirtualControllerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig*>(
               &_CVirtualControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CVirtualControllerConfig& a, CVirtualControllerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(nullptr);
  }

  CVirtualControllerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig& from);
  void MergeFrom(const CVirtualControllerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerConfig";
  }
  protected:
  explicit CVirtualControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CVirtualControllerConfig_Control Control;
  typedef CVirtualControllerConfig_ActionSet ActionSet;

  // accessors -------------------------------------------------------

  enum : int {
    kActionsetsFieldNumber = 2,
    kNameFieldNumber = 1,
    kDefaultMouseModeFieldNumber = 3,
  };
  // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
  int actionsets_size() const;
  private:
  int _internal_actionsets_size() const;
  public:
  void clear_actionsets();
  ::CVirtualControllerConfig_ActionSet* mutable_actionsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >*
      mutable_actionsets();
  private:
  const ::CVirtualControllerConfig_ActionSet& _internal_actionsets(int index) const;
  ::CVirtualControllerConfig_ActionSet* _internal_add_actionsets();
  public:
  const ::CVirtualControllerConfig_ActionSet& actionsets(int index) const;
  ::CVirtualControllerConfig_ActionSet* add_actionsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >&
      actionsets() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .EMouseMode default_mouse_mode = 3 [default = EMouseModeAbsoluteCursor];
  bool has_default_mouse_mode() const;
  private:
  bool _internal_has_default_mouse_mode() const;
  public:
  void clear_default_mouse_mode();
  ::EMouseMode default_mouse_mode() const;
  void set_default_mouse_mode(::EMouseMode value);
  private:
  ::EMouseMode _internal_default_mouse_mode() const;
  void _internal_set_default_mouse_mode(::EMouseMode value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet > actionsets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int default_mouse_mode_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayoutPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerLayoutPackage) */ {
 public:
  inline CVirtualControllerLayoutPackage() : CVirtualControllerLayoutPackage(nullptr) {}
  virtual ~CVirtualControllerLayoutPackage();
  explicit constexpr CVirtualControllerLayoutPackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerLayoutPackage(const CVirtualControllerLayoutPackage& from);
  CVirtualControllerLayoutPackage(CVirtualControllerLayoutPackage&& from) noexcept
    : CVirtualControllerLayoutPackage() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayoutPackage& operator=(const CVirtualControllerLayoutPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerLayoutPackage& operator=(CVirtualControllerLayoutPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerLayoutPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerLayoutPackage* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayoutPackage*>(
               &_CVirtualControllerLayoutPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CVirtualControllerLayoutPackage& a, CVirtualControllerLayoutPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerLayoutPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerLayoutPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayoutPackage* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(nullptr);
  }

  CVirtualControllerLayoutPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerLayoutPackage& from);
  void MergeFrom(const CVirtualControllerLayoutPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayoutPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerLayoutPackage";
  }
  protected:
  explicit CVirtualControllerLayoutPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 5,
    kLayoutsFieldNumber = 6,
    kCreatorFieldNumber = 2,
    kAppidFieldNumber = 1,
    kInitialRevisionFieldNumber = 3,
    kSavedRevisionFieldNumber = 4,
  };
  // optional .CVirtualControllerConfig config = 5;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::CVirtualControllerConfig& config() const;
  ::CVirtualControllerConfig* release_config();
  ::CVirtualControllerConfig* mutable_config();
  void set_allocated_config(::CVirtualControllerConfig* config);
  private:
  const ::CVirtualControllerConfig& _internal_config() const;
  ::CVirtualControllerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::CVirtualControllerConfig* config);
  ::CVirtualControllerConfig* unsafe_arena_release_config();

  // optional .CVirtualControllerLayouts layouts = 6;
  bool has_layouts() const;
  private:
  bool _internal_has_layouts() const;
  public:
  void clear_layouts();
  const ::CVirtualControllerLayouts& layouts() const;
  ::CVirtualControllerLayouts* release_layouts();
  ::CVirtualControllerLayouts* mutable_layouts();
  void set_allocated_layouts(::CVirtualControllerLayouts* layouts);
  private:
  const ::CVirtualControllerLayouts& _internal_layouts() const;
  ::CVirtualControllerLayouts* _internal_mutable_layouts();
  public:
  void unsafe_arena_set_allocated_layouts(
      ::CVirtualControllerLayouts* layouts);
  ::CVirtualControllerLayouts* unsafe_arena_release_layouts();

  // optional uint64 creator = 2;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  ::PROTOBUF_NAMESPACE_ID::uint64 creator() const;
  void set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creator() const;
  void _internal_set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 initial_revision = 3;
  bool has_initial_revision() const;
  private:
  bool _internal_has_initial_revision() const;
  public:
  void clear_initial_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_revision() const;
  void set_initial_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_revision() const;
  void _internal_set_initial_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 saved_revision = 4;
  bool has_saved_revision() const;
  private:
  bool _internal_has_saved_revision() const;
  public:
  void clear_saved_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_revision() const;
  void set_saved_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_saved_revision() const;
  void _internal_set_saved_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerLayoutPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CVirtualControllerConfig* config_;
  ::CVirtualControllerLayouts* layouts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_revision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_revision_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerGlobalConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVirtualControllerGlobalConfig) */ {
 public:
  inline CVirtualControllerGlobalConfig() : CVirtualControllerGlobalConfig(nullptr) {}
  virtual ~CVirtualControllerGlobalConfig();
  explicit constexpr CVirtualControllerGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVirtualControllerGlobalConfig(const CVirtualControllerGlobalConfig& from);
  CVirtualControllerGlobalConfig(CVirtualControllerGlobalConfig&& from) noexcept
    : CVirtualControllerGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerGlobalConfig& operator=(const CVirtualControllerGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVirtualControllerGlobalConfig& operator=(CVirtualControllerGlobalConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVirtualControllerGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVirtualControllerGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerGlobalConfig*>(
               &_CVirtualControllerGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CVirtualControllerGlobalConfig& a, CVirtualControllerGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CVirtualControllerGlobalConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVirtualControllerGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerGlobalConfig* New() const final {
    return CreateMaybeMessage<CVirtualControllerGlobalConfig>(nullptr);
  }

  CVirtualControllerGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerGlobalConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVirtualControllerGlobalConfig& from);
  void MergeFrom(const CVirtualControllerGlobalConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerGlobalConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVirtualControllerGlobalConfig";
  }
  protected:
  explicit CVirtualControllerGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fvirtualcontroller_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedbacenabledFieldNumber = 1,
    kShakeFadeEnabledFieldNumber = 5,
    kGyroscopeEnabledFieldNumber = 2,
    kAutoFadeEnabledFieldNumber = 3,
    kRumbleEnabledFieldNumber = 4,
  };
  // optional bool feedbacenabled = 1;
  bool has_feedbacenabled() const;
  private:
  bool _internal_has_feedbacenabled() const;
  public:
  void clear_feedbacenabled();
  bool feedbacenabled() const;
  void set_feedbacenabled(bool value);
  private:
  bool _internal_feedbacenabled() const;
  void _internal_set_feedbacenabled(bool value);
  public:

  // optional bool shake_fade_enabled = 5;
  bool has_shake_fade_enabled() const;
  private:
  bool _internal_has_shake_fade_enabled() const;
  public:
  void clear_shake_fade_enabled();
  bool shake_fade_enabled() const;
  void set_shake_fade_enabled(bool value);
  private:
  bool _internal_shake_fade_enabled() const;
  void _internal_set_shake_fade_enabled(bool value);
  public:

  // optional bool gyroscope_enabled = 2 [default = true];
  bool has_gyroscope_enabled() const;
  private:
  bool _internal_has_gyroscope_enabled() const;
  public:
  void clear_gyroscope_enabled();
  bool gyroscope_enabled() const;
  void set_gyroscope_enabled(bool value);
  private:
  bool _internal_gyroscope_enabled() const;
  void _internal_set_gyroscope_enabled(bool value);
  public:

  // optional bool auto_fade_enabled = 3 [default = true];
  bool has_auto_fade_enabled() const;
  private:
  bool _internal_has_auto_fade_enabled() const;
  public:
  void clear_auto_fade_enabled();
  bool auto_fade_enabled() const;
  void set_auto_fade_enabled(bool value);
  private:
  bool _internal_auto_fade_enabled() const;
  void _internal_set_auto_fade_enabled(bool value);
  public:

  // optional bool rumble_enabled = 4 [default = true];
  bool has_rumble_enabled() const;
  private:
  bool _internal_has_rumble_enabled() const;
  public:
  void clear_rumble_enabled();
  bool rumble_enabled() const;
  void set_rumble_enabled(bool value);
  private:
  bool _internal_rumble_enabled() const;
  void _internal_set_rumble_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CVirtualControllerGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool feedbacenabled_;
  bool shake_fade_enabled_;
  bool gyroscope_enabled_;
  bool auto_fade_enabled_;
  bool rumble_enabled_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVirtualControllerElement

// optional .EControllerElementType type = 1 [default = EControllerElementTypeNone];
inline bool CVirtualControllerElement::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_type() const {
  return _internal_has_type();
}
inline void CVirtualControllerElement::clear_type() {
  type_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EControllerElementType CVirtualControllerElement::_internal_type() const {
  return static_cast< ::EControllerElementType >(type_);
}
inline ::EControllerElementType CVirtualControllerElement::type() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.type)
  return _internal_type();
}
inline void CVirtualControllerElement::_internal_set_type(::EControllerElementType value) {
  assert(::EControllerElementType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void CVirtualControllerElement::set_type(::EControllerElementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.type)
}

// optional bool visible = 2;
inline bool CVirtualControllerElement::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_visible() const {
  return _internal_has_visible();
}
inline void CVirtualControllerElement::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVirtualControllerElement::_internal_visible() const {
  return visible_;
}
inline bool CVirtualControllerElement::visible() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.visible)
  return _internal_visible();
}
inline void CVirtualControllerElement::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000001u;
  visible_ = value;
}
inline void CVirtualControllerElement::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.visible)
}

// optional float x_position = 3;
inline bool CVirtualControllerElement::_internal_has_x_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_x_position() const {
  return _internal_has_x_position();
}
inline void CVirtualControllerElement::clear_x_position() {
  x_position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CVirtualControllerElement::_internal_x_position() const {
  return x_position_;
}
inline float CVirtualControllerElement::x_position() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.x_position)
  return _internal_x_position();
}
inline void CVirtualControllerElement::_internal_set_x_position(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_position_ = value;
}
inline void CVirtualControllerElement::set_x_position(float value) {
  _internal_set_x_position(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.x_position)
}

// optional float y_position = 4;
inline bool CVirtualControllerElement::_internal_has_y_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_y_position() const {
  return _internal_has_y_position();
}
inline void CVirtualControllerElement::clear_y_position() {
  y_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CVirtualControllerElement::_internal_y_position() const {
  return y_position_;
}
inline float CVirtualControllerElement::y_position() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.y_position)
  return _internal_y_position();
}
inline void CVirtualControllerElement::_internal_set_y_position(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_position_ = value;
}
inline void CVirtualControllerElement::set_y_position(float value) {
  _internal_set_y_position(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.y_position)
}

// optional float x_scale = 5 [default = 1];
inline bool CVirtualControllerElement::_internal_has_x_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_x_scale() const {
  return _internal_has_x_scale();
}
inline void CVirtualControllerElement::clear_x_scale() {
  x_scale_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CVirtualControllerElement::_internal_x_scale() const {
  return x_scale_;
}
inline float CVirtualControllerElement::x_scale() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.x_scale)
  return _internal_x_scale();
}
inline void CVirtualControllerElement::_internal_set_x_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_scale_ = value;
}
inline void CVirtualControllerElement::set_x_scale(float value) {
  _internal_set_x_scale(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.x_scale)
}

// optional float y_scale = 6 [default = 1];
inline bool CVirtualControllerElement::_internal_has_y_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerElement::has_y_scale() const {
  return _internal_has_y_scale();
}
inline void CVirtualControllerElement::clear_y_scale() {
  y_scale_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CVirtualControllerElement::_internal_y_scale() const {
  return y_scale_;
}
inline float CVirtualControllerElement::y_scale() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerElement.y_scale)
  return _internal_y_scale();
}
inline void CVirtualControllerElement::_internal_set_y_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_scale_ = value;
}
inline void CVirtualControllerElement::set_y_scale(float value) {
  _internal_set_y_scale(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerElement.y_scale)
}

// -------------------------------------------------------------------

// CVirtualControllerColor

// optional float r = 1 [default = 1];
inline bool CVirtualControllerColor::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerColor::has_r() const {
  return _internal_has_r();
}
inline void CVirtualControllerColor::clear_r() {
  r_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CVirtualControllerColor::_internal_r() const {
  return r_;
}
inline float CVirtualControllerColor::r() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerColor.r)
  return _internal_r();
}
inline void CVirtualControllerColor::_internal_set_r(float value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void CVirtualControllerColor::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerColor.r)
}

// optional float g = 2 [default = 1];
inline bool CVirtualControllerColor::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerColor::has_g() const {
  return _internal_has_g();
}
inline void CVirtualControllerColor::clear_g() {
  g_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CVirtualControllerColor::_internal_g() const {
  return g_;
}
inline float CVirtualControllerColor::g() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerColor.g)
  return _internal_g();
}
inline void CVirtualControllerColor::_internal_set_g(float value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void CVirtualControllerColor::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerColor.g)
}

// optional float b = 3 [default = 1];
inline bool CVirtualControllerColor::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerColor::has_b() const {
  return _internal_has_b();
}
inline void CVirtualControllerColor::clear_b() {
  b_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CVirtualControllerColor::_internal_b() const {
  return b_;
}
inline float CVirtualControllerColor::b() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerColor.b)
  return _internal_b();
}
inline void CVirtualControllerColor::_internal_set_b(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void CVirtualControllerColor::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerColor.b)
}

// optional float a = 4 [default = 1];
inline bool CVirtualControllerColor::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerColor::has_a() const {
  return _internal_has_a();
}
inline void CVirtualControllerColor::clear_a() {
  a_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CVirtualControllerColor::_internal_a() const {
  return a_;
}
inline float CVirtualControllerColor::a() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerColor.a)
  return _internal_a();
}
inline void CVirtualControllerColor::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void CVirtualControllerColor::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerColor.a)
}

// -------------------------------------------------------------------

// CVirtualControllerLayout

// optional int32 layout_version = 1;
inline bool CVirtualControllerLayout::_internal_has_layout_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerLayout::has_layout_version() const {
  return _internal_has_layout_version();
}
inline void CVirtualControllerLayout::clear_layout_version() {
  layout_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerLayout::_internal_layout_version() const {
  return layout_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerLayout::layout_version() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.layout_version)
  return _internal_layout_version();
}
inline void CVirtualControllerLayout::_internal_set_layout_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  layout_version_ = value;
}
inline void CVirtualControllerLayout::set_layout_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layout_version(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayout.layout_version)
}

// optional int32 actionset_id = 2;
inline bool CVirtualControllerLayout::_internal_has_actionset_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerLayout::has_actionset_id() const {
  return _internal_has_actionset_id();
}
inline void CVirtualControllerLayout::clear_actionset_id() {
  actionset_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerLayout::_internal_actionset_id() const {
  return actionset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerLayout::actionset_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.actionset_id)
  return _internal_actionset_id();
}
inline void CVirtualControllerLayout::_internal_set_actionset_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  actionset_id_ = value;
}
inline void CVirtualControllerLayout::set_actionset_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actionset_id(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayout.actionset_id)
}

// repeated .CVirtualControllerElement elements = 4;
inline int CVirtualControllerLayout::_internal_elements_size() const {
  return elements_.size();
}
inline int CVirtualControllerLayout::elements_size() const {
  return _internal_elements_size();
}
inline void CVirtualControllerLayout::clear_elements() {
  elements_.Clear();
}
inline ::CVirtualControllerElement* CVirtualControllerLayout::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayout.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerElement >*
CVirtualControllerLayout::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerLayout.elements)
  return &elements_;
}
inline const ::CVirtualControllerElement& CVirtualControllerLayout::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::CVirtualControllerElement& CVirtualControllerLayout::elements(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.elements)
  return _internal_elements(index);
}
inline ::CVirtualControllerElement* CVirtualControllerLayout::_internal_add_elements() {
  return elements_.Add();
}
inline ::CVirtualControllerElement* CVirtualControllerLayout::add_elements() {
  // @@protoc_insertion_point(field_add:CVirtualControllerLayout.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerElement >&
CVirtualControllerLayout::elements() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerLayout.elements)
  return elements_;
}

// optional .CVirtualControllerColor color = 5;
inline bool CVirtualControllerLayout::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool CVirtualControllerLayout::has_color() const {
  return _internal_has_color();
}
inline void CVirtualControllerLayout::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CVirtualControllerColor& CVirtualControllerLayout::_internal_color() const {
  const ::CVirtualControllerColor* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVirtualControllerColor&>(
      ::_CVirtualControllerColor_default_instance_);
}
inline const ::CVirtualControllerColor& CVirtualControllerLayout::color() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayout.color)
  return _internal_color();
}
inline void CVirtualControllerLayout::unsafe_arena_set_allocated_color(
    ::CVirtualControllerColor* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVirtualControllerLayout.color)
}
inline ::CVirtualControllerColor* CVirtualControllerLayout::release_color() {
  _has_bits_[0] &= ~0x00000001u;
  ::CVirtualControllerColor* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CVirtualControllerColor* CVirtualControllerLayout::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:CVirtualControllerLayout.color)
  _has_bits_[0] &= ~0x00000001u;
  ::CVirtualControllerColor* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::CVirtualControllerColor* CVirtualControllerLayout::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVirtualControllerColor>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::CVirtualControllerColor* CVirtualControllerLayout::mutable_color() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayout.color)
  return _internal_mutable_color();
}
inline void CVirtualControllerLayout::set_allocated_color(::CVirtualControllerColor* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerLayout.color)
}

// -------------------------------------------------------------------

// CVirtualControllerLayouts

// repeated .CVirtualControllerLayout layouts = 1;
inline int CVirtualControllerLayouts::_internal_layouts_size() const {
  return layouts_.size();
}
inline int CVirtualControllerLayouts::layouts_size() const {
  return _internal_layouts_size();
}
inline void CVirtualControllerLayouts::clear_layouts() {
  layouts_.Clear();
}
inline ::CVirtualControllerLayout* CVirtualControllerLayouts::mutable_layouts(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayouts.layouts)
  return layouts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerLayout >*
CVirtualControllerLayouts::mutable_layouts() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerLayouts.layouts)
  return &layouts_;
}
inline const ::CVirtualControllerLayout& CVirtualControllerLayouts::_internal_layouts(int index) const {
  return layouts_.Get(index);
}
inline const ::CVirtualControllerLayout& CVirtualControllerLayouts::layouts(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.layouts)
  return _internal_layouts(index);
}
inline ::CVirtualControllerLayout* CVirtualControllerLayouts::_internal_add_layouts() {
  return layouts_.Add();
}
inline ::CVirtualControllerLayout* CVirtualControllerLayouts::add_layouts() {
  // @@protoc_insertion_point(field_add:CVirtualControllerLayouts.layouts)
  return _internal_add_layouts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerLayout >&
CVirtualControllerLayouts::layouts() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerLayouts.layouts)
  return layouts_;
}

// optional .EInputMode input_mode = 2 [default = EInputModeController];
inline bool CVirtualControllerLayouts::_internal_has_input_mode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_input_mode() const {
  return _internal_has_input_mode();
}
inline void CVirtualControllerLayouts::clear_input_mode() {
  input_mode_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EInputMode CVirtualControllerLayouts::_internal_input_mode() const {
  return static_cast< ::EInputMode >(input_mode_);
}
inline ::EInputMode CVirtualControllerLayouts::input_mode() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.input_mode)
  return _internal_input_mode();
}
inline void CVirtualControllerLayouts::_internal_set_input_mode(::EInputMode value) {
  assert(::EInputMode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  input_mode_ = value;
}
inline void CVirtualControllerLayouts::set_input_mode(::EInputMode value) {
  _internal_set_input_mode(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.input_mode)
}

// optional .EMouseMode mouse_mode = 3 [default = EMouseModeUnknown];
inline bool CVirtualControllerLayouts::_internal_has_mouse_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_mouse_mode() const {
  return _internal_has_mouse_mode();
}
inline void CVirtualControllerLayouts::clear_mouse_mode() {
  mouse_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EMouseMode CVirtualControllerLayouts::_internal_mouse_mode() const {
  return static_cast< ::EMouseMode >(mouse_mode_);
}
inline ::EMouseMode CVirtualControllerLayouts::mouse_mode() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.mouse_mode)
  return _internal_mouse_mode();
}
inline void CVirtualControllerLayouts::_internal_set_mouse_mode(::EMouseMode value) {
  assert(::EMouseMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mouse_mode_ = value;
}
inline void CVirtualControllerLayouts::set_mouse_mode(::EMouseMode value) {
  _internal_set_mouse_mode(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.mouse_mode)
}

// optional float trackpad_sensitivity = 4 [default = 1];
inline bool CVirtualControllerLayouts::_internal_has_trackpad_sensitivity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_trackpad_sensitivity() const {
  return _internal_has_trackpad_sensitivity();
}
inline void CVirtualControllerLayouts::clear_trackpad_sensitivity() {
  trackpad_sensitivity_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CVirtualControllerLayouts::_internal_trackpad_sensitivity() const {
  return trackpad_sensitivity_;
}
inline float CVirtualControllerLayouts::trackpad_sensitivity() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.trackpad_sensitivity)
  return _internal_trackpad_sensitivity();
}
inline void CVirtualControllerLayouts::_internal_set_trackpad_sensitivity(float value) {
  _has_bits_[0] |= 0x00000100u;
  trackpad_sensitivity_ = value;
}
inline void CVirtualControllerLayouts::set_trackpad_sensitivity(float value) {
  _internal_set_trackpad_sensitivity(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.trackpad_sensitivity)
}

// optional bool pinch_zoom_enabled = 5 [default = false];
inline bool CVirtualControllerLayouts::_internal_has_pinch_zoom_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_pinch_zoom_enabled() const {
  return _internal_has_pinch_zoom_enabled();
}
inline void CVirtualControllerLayouts::clear_pinch_zoom_enabled() {
  pinch_zoom_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CVirtualControllerLayouts::_internal_pinch_zoom_enabled() const {
  return pinch_zoom_enabled_;
}
inline bool CVirtualControllerLayouts::pinch_zoom_enabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.pinch_zoom_enabled)
  return _internal_pinch_zoom_enabled();
}
inline void CVirtualControllerLayouts::_internal_set_pinch_zoom_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  pinch_zoom_enabled_ = value;
}
inline void CVirtualControllerLayouts::set_pinch_zoom_enabled(bool value) {
  _internal_set_pinch_zoom_enabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.pinch_zoom_enabled)
}

// optional float pinch_zoom_x = 6 [default = 0];
inline bool CVirtualControllerLayouts::_internal_has_pinch_zoom_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_pinch_zoom_x() const {
  return _internal_has_pinch_zoom_x();
}
inline void CVirtualControllerLayouts::clear_pinch_zoom_x() {
  pinch_zoom_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CVirtualControllerLayouts::_internal_pinch_zoom_x() const {
  return pinch_zoom_x_;
}
inline float CVirtualControllerLayouts::pinch_zoom_x() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.pinch_zoom_x)
  return _internal_pinch_zoom_x();
}
inline void CVirtualControllerLayouts::_internal_set_pinch_zoom_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  pinch_zoom_x_ = value;
}
inline void CVirtualControllerLayouts::set_pinch_zoom_x(float value) {
  _internal_set_pinch_zoom_x(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.pinch_zoom_x)
}

// optional float pinch_zoom_y = 7 [default = 0];
inline bool CVirtualControllerLayouts::_internal_has_pinch_zoom_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_pinch_zoom_y() const {
  return _internal_has_pinch_zoom_y();
}
inline void CVirtualControllerLayouts::clear_pinch_zoom_y() {
  pinch_zoom_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CVirtualControllerLayouts::_internal_pinch_zoom_y() const {
  return pinch_zoom_y_;
}
inline float CVirtualControllerLayouts::pinch_zoom_y() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.pinch_zoom_y)
  return _internal_pinch_zoom_y();
}
inline void CVirtualControllerLayouts::_internal_set_pinch_zoom_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  pinch_zoom_y_ = value;
}
inline void CVirtualControllerLayouts::set_pinch_zoom_y(float value) {
  _internal_set_pinch_zoom_y(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.pinch_zoom_y)
}

// optional float pinch_zoom_scale = 8 [default = 1];
inline bool CVirtualControllerLayouts::_internal_has_pinch_zoom_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_pinch_zoom_scale() const {
  return _internal_has_pinch_zoom_scale();
}
inline void CVirtualControllerLayouts::clear_pinch_zoom_scale() {
  pinch_zoom_scale_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CVirtualControllerLayouts::_internal_pinch_zoom_scale() const {
  return pinch_zoom_scale_;
}
inline float CVirtualControllerLayouts::pinch_zoom_scale() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.pinch_zoom_scale)
  return _internal_pinch_zoom_scale();
}
inline void CVirtualControllerLayouts::_internal_set_pinch_zoom_scale(float value) {
  _has_bits_[0] |= 0x00000040u;
  pinch_zoom_scale_ = value;
}
inline void CVirtualControllerLayouts::set_pinch_zoom_scale(float value) {
  _internal_set_pinch_zoom_scale(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.pinch_zoom_scale)
}

// optional bool shaken = 9;
inline bool CVirtualControllerLayouts::_internal_has_shaken() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_shaken() const {
  return _internal_has_shaken();
}
inline void CVirtualControllerLayouts::clear_shaken() {
  shaken_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CVirtualControllerLayouts::_internal_shaken() const {
  return shaken_;
}
inline bool CVirtualControllerLayouts::shaken() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.shaken)
  return _internal_shaken();
}
inline void CVirtualControllerLayouts::_internal_set_shaken(bool value) {
  _has_bits_[0] |= 0x00000010u;
  shaken_ = value;
}
inline void CVirtualControllerLayouts::set_shaken(bool value) {
  _internal_set_shaken(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.shaken)
}

// optional bool mouse_offscreen = 10;
inline bool CVirtualControllerLayouts::_internal_has_mouse_offscreen() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVirtualControllerLayouts::has_mouse_offscreen() const {
  return _internal_has_mouse_offscreen();
}
inline void CVirtualControllerLayouts::clear_mouse_offscreen() {
  mouse_offscreen_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CVirtualControllerLayouts::_internal_mouse_offscreen() const {
  return mouse_offscreen_;
}
inline bool CVirtualControllerLayouts::mouse_offscreen() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayouts.mouse_offscreen)
  return _internal_mouse_offscreen();
}
inline void CVirtualControllerLayouts::_internal_set_mouse_offscreen(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mouse_offscreen_ = value;
}
inline void CVirtualControllerLayouts::set_mouse_offscreen(bool value) {
  _internal_set_mouse_offscreen(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayouts.mouse_offscreen)
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_Control

// optional string name = 1;
inline bool CVirtualControllerConfig_Control::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_name() const {
  return _internal_has_name();
}
inline void CVirtualControllerConfig_Control::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVirtualControllerConfig_Control::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.name)
  return _internal_name();
}
inline void CVirtualControllerConfig_Control::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.name)
}
inline std::string* CVirtualControllerConfig_Control::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.name)
  return _internal_mutable_name();
}
inline const std::string& CVirtualControllerConfig_Control::_internal_name() const {
  return name_.Get();
}
inline void CVirtualControllerConfig_Control::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig_Control::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.name)
}
inline void CVirtualControllerConfig_Control::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.name)
}
inline void CVirtualControllerConfig_Control::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.name)
}
inline std::string* CVirtualControllerConfig_Control::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig_Control::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig_Control::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.name)
}

// optional string icon = 2;
inline bool CVirtualControllerConfig_Control::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_icon() const {
  return _internal_has_icon();
}
inline void CVirtualControllerConfig_Control::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVirtualControllerConfig_Control::icon() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon)
  return _internal_icon();
}
inline void CVirtualControllerConfig_Control::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon)
}
inline std::string* CVirtualControllerConfig_Control::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon)
  return _internal_mutable_icon();
}
inline const std::string& CVirtualControllerConfig_Control::_internal_icon() const {
  return icon_.Get();
}
inline void CVirtualControllerConfig_Control::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig_Control::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon)
}
inline void CVirtualControllerConfig_Control::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon)
}
inline void CVirtualControllerConfig_Control::set_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon)
}
inline std::string* CVirtualControllerConfig_Control::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig_Control::release_icon() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon)
}

// optional int32 input_source = 3;
inline bool CVirtualControllerConfig_Control::_internal_has_input_source() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_input_source() const {
  return _internal_has_input_source();
}
inline void CVirtualControllerConfig_Control::clear_input_source() {
  input_source_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_input_source() const {
  return input_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::input_source() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_source)
  return _internal_input_source();
}
inline void CVirtualControllerConfig_Control::_internal_set_input_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  input_source_ = value;
}
inline void CVirtualControllerConfig_Control::set_input_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_source(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_source)
}

// optional int32 input_mode = 4;
inline bool CVirtualControllerConfig_Control::_internal_has_input_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_input_mode() const {
  return _internal_has_input_mode();
}
inline void CVirtualControllerConfig_Control::clear_input_mode() {
  input_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_input_mode() const {
  return input_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::input_mode() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_mode)
  return _internal_input_mode();
}
inline void CVirtualControllerConfig_Control::_internal_set_input_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  input_mode_ = value;
}
inline void CVirtualControllerConfig_Control::set_input_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_mode(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_mode)
}

// optional int32 input_element = 5;
inline bool CVirtualControllerConfig_Control::_internal_has_input_element() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_input_element() const {
  return _internal_has_input_element();
}
inline void CVirtualControllerConfig_Control::clear_input_element() {
  input_element_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_input_element() const {
  return input_element_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::input_element() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_element)
  return _internal_input_element();
}
inline void CVirtualControllerConfig_Control::_internal_set_input_element(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  input_element_ = value;
}
inline void CVirtualControllerConfig_Control::set_input_element(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_element(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_element)
}

// optional int32 output_gamepad = 6;
inline bool CVirtualControllerConfig_Control::_internal_has_output_gamepad() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_output_gamepad() const {
  return _internal_has_output_gamepad();
}
inline void CVirtualControllerConfig_Control::clear_output_gamepad() {
  output_gamepad_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_output_gamepad() const {
  return output_gamepad_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::output_gamepad() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_gamepad)
  return _internal_output_gamepad();
}
inline void CVirtualControllerConfig_Control::_internal_set_output_gamepad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  output_gamepad_ = value;
}
inline void CVirtualControllerConfig_Control::set_output_gamepad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_gamepad(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_gamepad)
}

// optional int32 output_keyboard = 7;
inline bool CVirtualControllerConfig_Control::_internal_has_output_keyboard() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_output_keyboard() const {
  return _internal_has_output_keyboard();
}
inline void CVirtualControllerConfig_Control::clear_output_keyboard() {
  output_keyboard_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_output_keyboard() const {
  return output_keyboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::output_keyboard() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_keyboard)
  return _internal_output_keyboard();
}
inline void CVirtualControllerConfig_Control::_internal_set_output_keyboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  output_keyboard_ = value;
}
inline void CVirtualControllerConfig_Control::set_output_keyboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_keyboard(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_keyboard)
}

// optional int32 output_mouse = 8;
inline bool CVirtualControllerConfig_Control::_internal_has_output_mouse() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_output_mouse() const {
  return _internal_has_output_mouse();
}
inline void CVirtualControllerConfig_Control::clear_output_mouse() {
  output_mouse_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_output_mouse() const {
  return output_mouse_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::output_mouse() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.output_mouse)
  return _internal_output_mouse();
}
inline void CVirtualControllerConfig_Control::_internal_set_output_mouse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  output_mouse_ = value;
}
inline void CVirtualControllerConfig_Control::set_output_mouse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_mouse(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.output_mouse)
}

// optional string icon_foreground = 9;
inline bool CVirtualControllerConfig_Control::_internal_has_icon_foreground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_icon_foreground() const {
  return _internal_has_icon_foreground();
}
inline void CVirtualControllerConfig_Control::clear_icon_foreground() {
  icon_foreground_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CVirtualControllerConfig_Control::icon_foreground() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon_foreground)
  return _internal_icon_foreground();
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const std::string& value) {
  _internal_set_icon_foreground(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon_foreground)
}
inline std::string* CVirtualControllerConfig_Control::mutable_icon_foreground() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon_foreground)
  return _internal_mutable_icon_foreground();
}
inline const std::string& CVirtualControllerConfig_Control::_internal_icon_foreground() const {
  return icon_foreground_.Get();
}
inline void CVirtualControllerConfig_Control::_internal_set_icon_foreground(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon_foreground)
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon_foreground)
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon_foreground)
}
inline std::string* CVirtualControllerConfig_Control::_internal_mutable_icon_foreground() {
  _has_bits_[0] |= 0x00000004u;
  return icon_foreground_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig_Control::release_icon_foreground() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon_foreground)
  if (!_internal_has_icon_foreground()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_foreground_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_foreground(std::string* icon_foreground) {
  if (icon_foreground != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_foreground_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_foreground,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon_foreground)
}

// optional string icon_background = 10;
inline bool CVirtualControllerConfig_Control::_internal_has_icon_background() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_icon_background() const {
  return _internal_has_icon_background();
}
inline void CVirtualControllerConfig_Control::clear_icon_background() {
  icon_background_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CVirtualControllerConfig_Control::icon_background() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.icon_background)
  return _internal_icon_background();
}
inline void CVirtualControllerConfig_Control::set_icon_background(const std::string& value) {
  _internal_set_icon_background(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.icon_background)
}
inline std::string* CVirtualControllerConfig_Control::mutable_icon_background() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.Control.icon_background)
  return _internal_mutable_icon_background();
}
inline const std::string& CVirtualControllerConfig_Control::_internal_icon_background() const {
  return icon_background_.Get();
}
inline void CVirtualControllerConfig_Control::_internal_set_icon_background(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig_Control::set_icon_background(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.Control.icon_background)
}
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  icon_background_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.Control.icon_background)
}
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.Control.icon_background)
}
inline std::string* CVirtualControllerConfig_Control::_internal_mutable_icon_background() {
  _has_bits_[0] |= 0x00000008u;
  return icon_background_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig_Control::release_icon_background() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.Control.icon_background)
  if (!_internal_has_icon_background()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return icon_background_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_background(std::string* icon_background) {
  if (icon_background != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_background_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_background,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.Control.icon_background)
}

// optional bool input_toggle = 11;
inline bool CVirtualControllerConfig_Control::_internal_has_input_toggle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_input_toggle() const {
  return _internal_has_input_toggle();
}
inline void CVirtualControllerConfig_Control::clear_input_toggle() {
  input_toggle_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CVirtualControllerConfig_Control::_internal_input_toggle() const {
  return input_toggle_;
}
inline bool CVirtualControllerConfig_Control::input_toggle() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_toggle)
  return _internal_input_toggle();
}
inline void CVirtualControllerConfig_Control::_internal_set_input_toggle(bool value) {
  _has_bits_[0] |= 0x00000400u;
  input_toggle_ = value;
}
inline void CVirtualControllerConfig_Control::set_input_toggle(bool value) {
  _internal_set_input_toggle(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_toggle)
}

// optional int32 input_activate_sticor_trackpad = 12;
inline bool CVirtualControllerConfig_Control::_internal_has_input_activate_sticor_trackpad() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_input_activate_sticor_trackpad() const {
  return _internal_has_input_activate_sticor_trackpad();
}
inline void CVirtualControllerConfig_Control::clear_input_activate_sticor_trackpad() {
  input_activate_sticor_trackpad_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_input_activate_sticor_trackpad() const {
  return input_activate_sticor_trackpad_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::input_activate_sticor_trackpad() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.input_activate_sticor_trackpad)
  return _internal_input_activate_sticor_trackpad();
}
inline void CVirtualControllerConfig_Control::_internal_set_input_activate_sticor_trackpad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  input_activate_sticor_trackpad_ = value;
}
inline void CVirtualControllerConfig_Control::set_input_activate_sticor_trackpad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_activate_sticor_trackpad(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.input_activate_sticor_trackpad)
}

// optional int32 activation_type = 13;
inline bool CVirtualControllerConfig_Control::_internal_has_activation_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_activation_type() const {
  return _internal_has_activation_type();
}
inline void CVirtualControllerConfig_Control::clear_activation_type() {
  activation_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_activation_type() const {
  return activation_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::activation_type() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.activation_type)
  return _internal_activation_type();
}
inline void CVirtualControllerConfig_Control::_internal_set_activation_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  activation_type_ = value;
}
inline void CVirtualControllerConfig_Control::set_activation_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activation_type(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.activation_type)
}

// optional int32 long_press_ms = 14;
inline bool CVirtualControllerConfig_Control::_internal_has_long_press_ms() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_long_press_ms() const {
  return _internal_has_long_press_ms();
}
inline void CVirtualControllerConfig_Control::clear_long_press_ms() {
  long_press_ms_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_long_press_ms() const {
  return long_press_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::long_press_ms() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.long_press_ms)
  return _internal_long_press_ms();
}
inline void CVirtualControllerConfig_Control::_internal_set_long_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  long_press_ms_ = value;
}
inline void CVirtualControllerConfig_Control::set_long_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_long_press_ms(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.long_press_ms)
}

// optional int32 double_press_ms = 15;
inline bool CVirtualControllerConfig_Control::_internal_has_double_press_ms() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_Control::has_double_press_ms() const {
  return _internal_has_double_press_ms();
}
inline void CVirtualControllerConfig_Control::clear_double_press_ms() {
  double_press_ms_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::_internal_double_press_ms() const {
  return double_press_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_Control::double_press_ms() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.Control.double_press_ms)
  return _internal_double_press_ms();
}
inline void CVirtualControllerConfig_Control::_internal_set_double_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  double_press_ms_ = value;
}
inline void CVirtualControllerConfig_Control::set_double_press_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_double_press_ms(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.Control.double_press_ms)
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_ActionSet

// optional int32 id = 1;
inline bool CVirtualControllerConfig_ActionSet::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_ActionSet::has_id() const {
  return _internal_has_id();
}
inline void CVirtualControllerConfig_ActionSet::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_ActionSet::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_ActionSet::id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.id)
  return _internal_id();
}
inline void CVirtualControllerConfig_ActionSet::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CVirtualControllerConfig_ActionSet::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.id)
}

// optional int32 parent_id = 2;
inline bool CVirtualControllerConfig_ActionSet::_internal_has_parent_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_ActionSet::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void CVirtualControllerConfig_ActionSet::clear_parent_id() {
  parent_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_ActionSet::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CVirtualControllerConfig_ActionSet::parent_id() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.parent_id)
  return _internal_parent_id();
}
inline void CVirtualControllerConfig_ActionSet::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_ = value;
}
inline void CVirtualControllerConfig_ActionSet::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.parent_id)
}

// optional string name = 3;
inline bool CVirtualControllerConfig_ActionSet::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerConfig_ActionSet::has_name() const {
  return _internal_has_name();
}
inline void CVirtualControllerConfig_ActionSet::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVirtualControllerConfig_ActionSet::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.name)
  return _internal_name();
}
inline void CVirtualControllerConfig_ActionSet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.ActionSet.name)
}
inline std::string* CVirtualControllerConfig_ActionSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.ActionSet.name)
  return _internal_mutable_name();
}
inline const std::string& CVirtualControllerConfig_ActionSet::_internal_name() const {
  return name_.Get();
}
inline void CVirtualControllerConfig_ActionSet::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig_ActionSet::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.ActionSet.name)
}
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.ActionSet.name)
}
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.ActionSet.name)
}
inline std::string* CVirtualControllerConfig_ActionSet::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig_ActionSet::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.ActionSet.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig_ActionSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.ActionSet.name)
}

// repeated .CVirtualControllerConfig.Control controls = 4;
inline int CVirtualControllerConfig_ActionSet::_internal_controls_size() const {
  return controls_.size();
}
inline int CVirtualControllerConfig_ActionSet::controls_size() const {
  return _internal_controls_size();
}
inline void CVirtualControllerConfig_ActionSet::clear_controls() {
  controls_.Clear();
}
inline ::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::mutable_controls(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.ActionSet.controls)
  return controls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_Control >*
CVirtualControllerConfig_ActionSet::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerConfig.ActionSet.controls)
  return &controls_;
}
inline const ::CVirtualControllerConfig_Control& CVirtualControllerConfig_ActionSet::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline const ::CVirtualControllerConfig_Control& CVirtualControllerConfig_ActionSet::controls(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.ActionSet.controls)
  return _internal_controls(index);
}
inline ::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::_internal_add_controls() {
  return controls_.Add();
}
inline ::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::add_controls() {
  // @@protoc_insertion_point(field_add:CVirtualControllerConfig.ActionSet.controls)
  return _internal_add_controls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_Control >&
CVirtualControllerConfig_ActionSet::controls() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerConfig.ActionSet.controls)
  return controls_;
}

// -------------------------------------------------------------------

// CVirtualControllerConfig

// optional string name = 1;
inline bool CVirtualControllerConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerConfig::has_name() const {
  return _internal_has_name();
}
inline void CVirtualControllerConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVirtualControllerConfig::name() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.name)
  return _internal_name();
}
inline void CVirtualControllerConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.name)
}
inline std::string* CVirtualControllerConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.name)
  return _internal_mutable_name();
}
inline const std::string& CVirtualControllerConfig::_internal_name() const {
  return name_.Get();
}
inline void CVirtualControllerConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVirtualControllerConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVirtualControllerConfig.name)
}
inline void CVirtualControllerConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVirtualControllerConfig.name)
}
inline void CVirtualControllerConfig::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVirtualControllerConfig.name)
}
inline std::string* CVirtualControllerConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVirtualControllerConfig::release_name() {
  // @@protoc_insertion_point(field_release:CVirtualControllerConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVirtualControllerConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerConfig.name)
}

// repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
inline int CVirtualControllerConfig::_internal_actionsets_size() const {
  return actionsets_.size();
}
inline int CVirtualControllerConfig::actionsets_size() const {
  return _internal_actionsets_size();
}
inline void CVirtualControllerConfig::clear_actionsets() {
  actionsets_.Clear();
}
inline ::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::mutable_actionsets(int index) {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerConfig.actionsets)
  return actionsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >*
CVirtualControllerConfig::mutable_actionsets() {
  // @@protoc_insertion_point(field_mutable_list:CVirtualControllerConfig.actionsets)
  return &actionsets_;
}
inline const ::CVirtualControllerConfig_ActionSet& CVirtualControllerConfig::_internal_actionsets(int index) const {
  return actionsets_.Get(index);
}
inline const ::CVirtualControllerConfig_ActionSet& CVirtualControllerConfig::actionsets(int index) const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.actionsets)
  return _internal_actionsets(index);
}
inline ::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::_internal_add_actionsets() {
  return actionsets_.Add();
}
inline ::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::add_actionsets() {
  // @@protoc_insertion_point(field_add:CVirtualControllerConfig.actionsets)
  return _internal_add_actionsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVirtualControllerConfig_ActionSet >&
CVirtualControllerConfig::actionsets() const {
  // @@protoc_insertion_point(field_list:CVirtualControllerConfig.actionsets)
  return actionsets_;
}

// optional .EMouseMode default_mouse_mode = 3 [default = EMouseModeAbsoluteCursor];
inline bool CVirtualControllerConfig::_internal_has_default_mouse_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerConfig::has_default_mouse_mode() const {
  return _internal_has_default_mouse_mode();
}
inline void CVirtualControllerConfig::clear_default_mouse_mode() {
  default_mouse_mode_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EMouseMode CVirtualControllerConfig::_internal_default_mouse_mode() const {
  return static_cast< ::EMouseMode >(default_mouse_mode_);
}
inline ::EMouseMode CVirtualControllerConfig::default_mouse_mode() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerConfig.default_mouse_mode)
  return _internal_default_mouse_mode();
}
inline void CVirtualControllerConfig::_internal_set_default_mouse_mode(::EMouseMode value) {
  assert(::EMouseMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  default_mouse_mode_ = value;
}
inline void CVirtualControllerConfig::set_default_mouse_mode(::EMouseMode value) {
  _internal_set_default_mouse_mode(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerConfig.default_mouse_mode)
}

// -------------------------------------------------------------------

// CVirtualControllerLayoutPackage

// optional uint32 appid = 1;
inline bool CVirtualControllerLayoutPackage::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_appid() const {
  return _internal_has_appid();
}
inline void CVirtualControllerLayoutPackage::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::appid() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.appid)
  return _internal_appid();
}
inline void CVirtualControllerLayoutPackage::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CVirtualControllerLayoutPackage::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.appid)
}

// optional uint64 creator = 2;
inline bool CVirtualControllerLayoutPackage::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_creator() const {
  return _internal_has_creator();
}
inline void CVirtualControllerLayoutPackage::clear_creator() {
  creator_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVirtualControllerLayoutPackage::_internal_creator() const {
  return creator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVirtualControllerLayoutPackage::creator() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.creator)
  return _internal_creator();
}
inline void CVirtualControllerLayoutPackage::_internal_set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  creator_ = value;
}
inline void CVirtualControllerLayoutPackage::set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.creator)
}

// optional uint32 initial_revision = 3;
inline bool CVirtualControllerLayoutPackage::_internal_has_initial_revision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_initial_revision() const {
  return _internal_has_initial_revision();
}
inline void CVirtualControllerLayoutPackage::clear_initial_revision() {
  initial_revision_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::_internal_initial_revision() const {
  return initial_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::initial_revision() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.initial_revision)
  return _internal_initial_revision();
}
inline void CVirtualControllerLayoutPackage::_internal_set_initial_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  initial_revision_ = value;
}
inline void CVirtualControllerLayoutPackage::set_initial_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_revision(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.initial_revision)
}

// optional uint32 saved_revision = 4;
inline bool CVirtualControllerLayoutPackage::_internal_has_saved_revision() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_saved_revision() const {
  return _internal_has_saved_revision();
}
inline void CVirtualControllerLayoutPackage::clear_saved_revision() {
  saved_revision_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::_internal_saved_revision() const {
  return saved_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVirtualControllerLayoutPackage::saved_revision() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.saved_revision)
  return _internal_saved_revision();
}
inline void CVirtualControllerLayoutPackage::_internal_set_saved_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  saved_revision_ = value;
}
inline void CVirtualControllerLayoutPackage::set_saved_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_saved_revision(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerLayoutPackage.saved_revision)
}

// optional .CVirtualControllerConfig config = 5;
inline bool CVirtualControllerLayoutPackage::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_config() const {
  return _internal_has_config();
}
inline void CVirtualControllerLayoutPackage::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CVirtualControllerConfig& CVirtualControllerLayoutPackage::_internal_config() const {
  const ::CVirtualControllerConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVirtualControllerConfig&>(
      ::_CVirtualControllerConfig_default_instance_);
}
inline const ::CVirtualControllerConfig& CVirtualControllerLayoutPackage::config() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.config)
  return _internal_config();
}
inline void CVirtualControllerLayoutPackage::unsafe_arena_set_allocated_config(
    ::CVirtualControllerConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVirtualControllerLayoutPackage.config)
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::CVirtualControllerConfig* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:CVirtualControllerLayoutPackage.config)
  _has_bits_[0] &= ~0x00000001u;
  ::CVirtualControllerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVirtualControllerConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::CVirtualControllerConfig* CVirtualControllerLayoutPackage::mutable_config() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayoutPackage.config)
  return _internal_mutable_config();
}
inline void CVirtualControllerLayoutPackage::set_allocated_config(::CVirtualControllerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerLayoutPackage.config)
}

// optional .CVirtualControllerLayouts layouts = 6;
inline bool CVirtualControllerLayoutPackage::_internal_has_layouts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || layouts_ != nullptr);
  return value;
}
inline bool CVirtualControllerLayoutPackage::has_layouts() const {
  return _internal_has_layouts();
}
inline void CVirtualControllerLayoutPackage::clear_layouts() {
  if (layouts_ != nullptr) layouts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CVirtualControllerLayouts& CVirtualControllerLayoutPackage::_internal_layouts() const {
  const ::CVirtualControllerLayouts* p = layouts_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVirtualControllerLayouts&>(
      ::_CVirtualControllerLayouts_default_instance_);
}
inline const ::CVirtualControllerLayouts& CVirtualControllerLayoutPackage::layouts() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerLayoutPackage.layouts)
  return _internal_layouts();
}
inline void CVirtualControllerLayoutPackage::unsafe_arena_set_allocated_layouts(
    ::CVirtualControllerLayouts* layouts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layouts_);
  }
  layouts_ = layouts;
  if (layouts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVirtualControllerLayoutPackage.layouts)
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::release_layouts() {
  _has_bits_[0] &= ~0x00000002u;
  ::CVirtualControllerLayouts* temp = layouts_;
  layouts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::unsafe_arena_release_layouts() {
  // @@protoc_insertion_point(field_release:CVirtualControllerLayoutPackage.layouts)
  _has_bits_[0] &= ~0x00000002u;
  ::CVirtualControllerLayouts* temp = layouts_;
  layouts_ = nullptr;
  return temp;
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::_internal_mutable_layouts() {
  _has_bits_[0] |= 0x00000002u;
  if (layouts_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVirtualControllerLayouts>(GetArena());
    layouts_ = p;
  }
  return layouts_;
}
inline ::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::mutable_layouts() {
  // @@protoc_insertion_point(field_mutable:CVirtualControllerLayoutPackage.layouts)
  return _internal_mutable_layouts();
}
inline void CVirtualControllerLayoutPackage::set_allocated_layouts(::CVirtualControllerLayouts* layouts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layouts_;
  }
  if (layouts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layouts);
    if (message_arena != submessage_arena) {
      layouts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layouts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layouts_ = layouts;
  // @@protoc_insertion_point(field_set_allocated:CVirtualControllerLayoutPackage.layouts)
}

// -------------------------------------------------------------------

// CVirtualControllerGlobalConfig

// optional bool feedbacenabled = 1;
inline bool CVirtualControllerGlobalConfig::_internal_has_feedbacenabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVirtualControllerGlobalConfig::has_feedbacenabled() const {
  return _internal_has_feedbacenabled();
}
inline void CVirtualControllerGlobalConfig::clear_feedbacenabled() {
  feedbacenabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVirtualControllerGlobalConfig::_internal_feedbacenabled() const {
  return feedbacenabled_;
}
inline bool CVirtualControllerGlobalConfig::feedbacenabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerGlobalConfig.feedbacenabled)
  return _internal_feedbacenabled();
}
inline void CVirtualControllerGlobalConfig::_internal_set_feedbacenabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  feedbacenabled_ = value;
}
inline void CVirtualControllerGlobalConfig::set_feedbacenabled(bool value) {
  _internal_set_feedbacenabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerGlobalConfig.feedbacenabled)
}

// optional bool gyroscope_enabled = 2 [default = true];
inline bool CVirtualControllerGlobalConfig::_internal_has_gyroscope_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVirtualControllerGlobalConfig::has_gyroscope_enabled() const {
  return _internal_has_gyroscope_enabled();
}
inline void CVirtualControllerGlobalConfig::clear_gyroscope_enabled() {
  gyroscope_enabled_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CVirtualControllerGlobalConfig::_internal_gyroscope_enabled() const {
  return gyroscope_enabled_;
}
inline bool CVirtualControllerGlobalConfig::gyroscope_enabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerGlobalConfig.gyroscope_enabled)
  return _internal_gyroscope_enabled();
}
inline void CVirtualControllerGlobalConfig::_internal_set_gyroscope_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  gyroscope_enabled_ = value;
}
inline void CVirtualControllerGlobalConfig::set_gyroscope_enabled(bool value) {
  _internal_set_gyroscope_enabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerGlobalConfig.gyroscope_enabled)
}

// optional bool auto_fade_enabled = 3 [default = true];
inline bool CVirtualControllerGlobalConfig::_internal_has_auto_fade_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVirtualControllerGlobalConfig::has_auto_fade_enabled() const {
  return _internal_has_auto_fade_enabled();
}
inline void CVirtualControllerGlobalConfig::clear_auto_fade_enabled() {
  auto_fade_enabled_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CVirtualControllerGlobalConfig::_internal_auto_fade_enabled() const {
  return auto_fade_enabled_;
}
inline bool CVirtualControllerGlobalConfig::auto_fade_enabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerGlobalConfig.auto_fade_enabled)
  return _internal_auto_fade_enabled();
}
inline void CVirtualControllerGlobalConfig::_internal_set_auto_fade_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  auto_fade_enabled_ = value;
}
inline void CVirtualControllerGlobalConfig::set_auto_fade_enabled(bool value) {
  _internal_set_auto_fade_enabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerGlobalConfig.auto_fade_enabled)
}

// optional bool rumble_enabled = 4 [default = true];
inline bool CVirtualControllerGlobalConfig::_internal_has_rumble_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVirtualControllerGlobalConfig::has_rumble_enabled() const {
  return _internal_has_rumble_enabled();
}
inline void CVirtualControllerGlobalConfig::clear_rumble_enabled() {
  rumble_enabled_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CVirtualControllerGlobalConfig::_internal_rumble_enabled() const {
  return rumble_enabled_;
}
inline bool CVirtualControllerGlobalConfig::rumble_enabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerGlobalConfig.rumble_enabled)
  return _internal_rumble_enabled();
}
inline void CVirtualControllerGlobalConfig::_internal_set_rumble_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rumble_enabled_ = value;
}
inline void CVirtualControllerGlobalConfig::set_rumble_enabled(bool value) {
  _internal_set_rumble_enabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerGlobalConfig.rumble_enabled)
}

// optional bool shake_fade_enabled = 5;
inline bool CVirtualControllerGlobalConfig::_internal_has_shake_fade_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVirtualControllerGlobalConfig::has_shake_fade_enabled() const {
  return _internal_has_shake_fade_enabled();
}
inline void CVirtualControllerGlobalConfig::clear_shake_fade_enabled() {
  shake_fade_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CVirtualControllerGlobalConfig::_internal_shake_fade_enabled() const {
  return shake_fade_enabled_;
}
inline bool CVirtualControllerGlobalConfig::shake_fade_enabled() const {
  // @@protoc_insertion_point(field_get:CVirtualControllerGlobalConfig.shake_fade_enabled)
  return _internal_shake_fade_enabled();
}
inline void CVirtualControllerGlobalConfig::_internal_set_shake_fade_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  shake_fade_enabled_ = value;
}
inline void CVirtualControllerGlobalConfig::set_shake_fade_enabled(bool value) {
  _internal_set_shake_fade_enabled(value);
  // @@protoc_insertion_point(field_set:CVirtualControllerGlobalConfig.shake_fade_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EInputMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EInputMode>() {
  return ::EInputMode_descriptor();
}
template <> struct is_proto_enum< ::EMouseMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMouseMode>() {
  return ::EMouseMode_descriptor();
}
template <> struct is_proto_enum< ::EControllerElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EControllerElementType>() {
  return ::EControllerElementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
