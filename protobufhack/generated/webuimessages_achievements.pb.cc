// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_achievements.proto

#include "webuimessages_achievements.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CAchievements_GetInfo_Request::CAchievements_GetInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(PROTOBUF_ULONGLONG(0)){}
struct CAchievements_GetInfo_RequestDefaultTypeInternal {
  constexpr CAchievements_GetInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAchievements_GetInfo_RequestDefaultTypeInternal() {}
  union {
    CAchievements_GetInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAchievements_GetInfo_RequestDefaultTypeInternal _CAchievements_GetInfo_Request_default_instance_;
constexpr CAchievements_GetInfo_Response_Info::CAchievements_GetInfo_Response_Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_url_achieved_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_url_not_achieved_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , achieved_(false)
  , unloctime_(0u){}
struct CAchievements_GetInfo_Response_InfoDefaultTypeInternal {
  constexpr CAchievements_GetInfo_Response_InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAchievements_GetInfo_Response_InfoDefaultTypeInternal() {}
  union {
    CAchievements_GetInfo_Response_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAchievements_GetInfo_Response_InfoDefaultTypeInternal _CAchievements_GetInfo_Response_Info_default_instance_;
constexpr CAchievements_GetInfo_Response::CAchievements_GetInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievements_(){}
struct CAchievements_GetInfo_ResponseDefaultTypeInternal {
  constexpr CAchievements_GetInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAchievements_GetInfo_ResponseDefaultTypeInternal() {}
  union {
    CAchievements_GetInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAchievements_GetInfo_ResponseDefaultTypeInternal _CAchievements_GetInfo_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fachievements_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fachievements_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fachievements_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fachievements_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Request, gameid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, id_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, name_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, desc_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, image_url_achieved_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, image_url_not_achieved_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, achieved_),
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response_Info, unloctime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAchievements_GetInfo_Response, achievements_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CAchievements_GetInfo_Request)},
  { 7, 19, sizeof(::CAchievements_GetInfo_Response_Info)},
  { 26, -1, sizeof(::CAchievements_GetInfo_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAchievements_GetInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAchievements_GetInfo_Response_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAchievements_GetInfo_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fachievements_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n webuimessages_achievements.proto\032 goog"
  "le/protobuf/descriptor.proto\032\030steammessa"
  "ges_base.proto\032\030webuimessages_base.proto"
  "\"/\n\035CAchievements_GetInfo_Request\022\016\n\006gam"
  "eid\030\001 \001(\004\"\356\001\n\036CAchievements_GetInfo_Resp"
  "onse\022:\n\014achievements\030\001 \003(\0132$.CAchievemen"
  "ts_GetInfo_Response.Info\032\217\001\n\004Info\022\n\n\002id\030"
  "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\032\n\022ima"
  "ge_url_achieved\030\004 \001(\t\022\036\n\026image_url_not_a"
  "chieved\030\005 \001(\t\022\020\n\010achieved\030\006 \001(\010\022\021\n\tunloc"
  "time\030\007 \001(\r2`\n\014Achievements\022J\n\007GetInfo\022\036."
  "CAchievements_GetInfo_Request\032\037.CAchieve"
  "ments_GetInfo_Response\032\004\200\227\"\002B\037H\001\200\001\001\252\002\027Op"
  "enSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fachievements_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fachievements_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fachievements_2eproto = {
  false, false, 541, descriptor_table_protodef_webuimessages_5fachievements_2eproto, "webuimessages_achievements.proto", 
  &descriptor_table_webuimessages_5fachievements_2eproto_once, descriptor_table_webuimessages_5fachievements_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_webuimessages_5fachievements_2eproto::offsets,
  file_level_metadata_webuimessages_5fachievements_2eproto, file_level_enum_descriptors_webuimessages_5fachievements_2eproto, file_level_service_descriptors_webuimessages_5fachievements_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fachievements_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fachievements_2eproto);
  return descriptor_table_webuimessages_5fachievements_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fachievements_2eproto(&descriptor_table_webuimessages_5fachievements_2eproto);

// ===================================================================

class CAchievements_GetInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAchievements_GetInfo_Request>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAchievements_GetInfo_Request::CAchievements_GetInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAchievements_GetInfo_Request)
}
CAchievements_GetInfo_Request::CAchievements_GetInfo_Request(const CAchievements_GetInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:CAchievements_GetInfo_Request)
}

void CAchievements_GetInfo_Request::SharedCtor() {
gameid_ = PROTOBUF_ULONGLONG(0);
}

CAchievements_GetInfo_Request::~CAchievements_GetInfo_Request() {
  // @@protoc_insertion_point(destructor:CAchievements_GetInfo_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAchievements_GetInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAchievements_GetInfo_Request::ArenaDtor(void* object) {
  CAchievements_GetInfo_Request* _this = reinterpret_cast< CAchievements_GetInfo_Request* >(object);
  (void)_this;
}
void CAchievements_GetInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAchievements_GetInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAchievements_GetInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAchievements_GetInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAchievements_GetInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAchievements_GetInfo_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAchievements_GetInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAchievements_GetInfo_Request)
  return target;
}

size_t CAchievements_GetInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAchievements_GetInfo_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 gameid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAchievements_GetInfo_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAchievements_GetInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAchievements_GetInfo_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAchievements_GetInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAchievements_GetInfo_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAchievements_GetInfo_Request)
    MergeFrom(*source);
  }
}

void CAchievements_GetInfo_Request::MergeFrom(const CAchievements_GetInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAchievements_GetInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CAchievements_GetInfo_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAchievements_GetInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAchievements_GetInfo_Request::CopyFrom(const CAchievements_GetInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAchievements_GetInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAchievements_GetInfo_Request::IsInitialized() const {
  return true;
}

void CAchievements_GetInfo_Request::InternalSwap(CAchievements_GetInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAchievements_GetInfo_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAchievements_GetInfo_Response_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<CAchievements_GetInfo_Response_Info>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_url_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_url_not_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unloctime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CAchievements_GetInfo_Response_Info::CAchievements_GetInfo_Response_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAchievements_GetInfo_Response.Info)
}
CAchievements_GetInfo_Response_Info::CAchievements_GetInfo_Response_Info(const CAchievements_GetInfo_Response_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  image_url_achieved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_url_achieved()) {
    image_url_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_url_achieved(), 
      GetArena());
  }
  image_url_not_achieved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_url_not_achieved()) {
    image_url_not_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_url_not_achieved(), 
      GetArena());
  }
  ::memcpy(&achieved_, &from.achieved_,
    static_cast<size_t>(reinterpret_cast<char*>(&unloctime_) -
    reinterpret_cast<char*>(&achieved_)) + sizeof(unloctime_));
  // @@protoc_insertion_point(copy_constructor:CAchievements_GetInfo_Response.Info)
}

void CAchievements_GetInfo_Response_Info::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_url_achieved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_url_not_achieved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&achieved_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unloctime_) -
    reinterpret_cast<char*>(&achieved_)) + sizeof(unloctime_));
}

CAchievements_GetInfo_Response_Info::~CAchievements_GetInfo_Response_Info() {
  // @@protoc_insertion_point(destructor:CAchievements_GetInfo_Response.Info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAchievements_GetInfo_Response_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_url_achieved_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_url_not_achieved_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAchievements_GetInfo_Response_Info::ArenaDtor(void* object) {
  CAchievements_GetInfo_Response_Info* _this = reinterpret_cast< CAchievements_GetInfo_Response_Info* >(object);
  (void)_this;
}
void CAchievements_GetInfo_Response_Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAchievements_GetInfo_Response_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAchievements_GetInfo_Response_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:CAchievements_GetInfo_Response.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      image_url_achieved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      image_url_not_achieved_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&achieved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unloctime_) -
        reinterpret_cast<char*>(&achieved_)) + sizeof(unloctime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAchievements_GetInfo_Response_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAchievements_GetInfo_Response.Info.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAchievements_GetInfo_Response.Info.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAchievements_GetInfo_Response.Info.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_url_achieved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image_url_achieved();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAchievements_GetInfo_Response.Info.image_url_achieved");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_url_not_achieved = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_image_url_not_achieved();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAchievements_GetInfo_Response.Info.image_url_not_achieved");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool achieved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_achieved(&has_bits);
          achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unloctime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unloctime(&has_bits);
          unloctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAchievements_GetInfo_Response_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAchievements_GetInfo_Response.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAchievements_GetInfo_Response.Info.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAchievements_GetInfo_Response.Info.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAchievements_GetInfo_Response.Info.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional string image_url_achieved = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_url_achieved().data(), static_cast<int>(this->_internal_image_url_achieved().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAchievements_GetInfo_Response.Info.image_url_achieved");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image_url_achieved(), target);
  }

  // optional string image_url_not_achieved = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_url_not_achieved().data(), static_cast<int>(this->_internal_image_url_not_achieved().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAchievements_GetInfo_Response.Info.image_url_not_achieved");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_image_url_not_achieved(), target);
  }

  // optional bool achieved = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_achieved(), target);
  }

  // optional uint32 unloctime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_unloctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAchievements_GetInfo_Response.Info)
  return target;
}

size_t CAchievements_GetInfo_Response_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAchievements_GetInfo_Response.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional string image_url_achieved = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url_achieved());
    }

    // optional string image_url_not_achieved = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url_not_achieved());
    }

    // optional bool achieved = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 unloctime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unloctime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAchievements_GetInfo_Response_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAchievements_GetInfo_Response.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const CAchievements_GetInfo_Response_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAchievements_GetInfo_Response_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAchievements_GetInfo_Response.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAchievements_GetInfo_Response.Info)
    MergeFrom(*source);
  }
}

void CAchievements_GetInfo_Response_Info::MergeFrom(const CAchievements_GetInfo_Response_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAchievements_GetInfo_Response.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_image_url_achieved(from._internal_image_url_achieved());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_image_url_not_achieved(from._internal_image_url_not_achieved());
    }
    if (cached_has_bits & 0x00000020u) {
      achieved_ = from.achieved_;
    }
    if (cached_has_bits & 0x00000040u) {
      unloctime_ = from.unloctime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAchievements_GetInfo_Response_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAchievements_GetInfo_Response.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAchievements_GetInfo_Response_Info::CopyFrom(const CAchievements_GetInfo_Response_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAchievements_GetInfo_Response.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAchievements_GetInfo_Response_Info::IsInitialized() const {
  return true;
}

void CAchievements_GetInfo_Response_Info::InternalSwap(CAchievements_GetInfo_Response_Info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_url_achieved_.Swap(&other->image_url_achieved_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_url_not_achieved_.Swap(&other->image_url_not_achieved_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAchievements_GetInfo_Response_Info, unloctime_)
      + sizeof(CAchievements_GetInfo_Response_Info::unloctime_)
      - PROTOBUF_FIELD_OFFSET(CAchievements_GetInfo_Response_Info, achieved_)>(
          reinterpret_cast<char*>(&achieved_),
          reinterpret_cast<char*>(&other->achieved_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAchievements_GetInfo_Response_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAchievements_GetInfo_Response::_Internal {
 public:
};

CAchievements_GetInfo_Response::CAchievements_GetInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  achievements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAchievements_GetInfo_Response)
}
CAchievements_GetInfo_Response::CAchievements_GetInfo_Response(const CAchievements_GetInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAchievements_GetInfo_Response)
}

void CAchievements_GetInfo_Response::SharedCtor() {
}

CAchievements_GetInfo_Response::~CAchievements_GetInfo_Response() {
  // @@protoc_insertion_point(destructor:CAchievements_GetInfo_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAchievements_GetInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAchievements_GetInfo_Response::ArenaDtor(void* object) {
  CAchievements_GetInfo_Response* _this = reinterpret_cast< CAchievements_GetInfo_Response* >(object);
  (void)_this;
}
void CAchievements_GetInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAchievements_GetInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAchievements_GetInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAchievements_GetInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAchievements_GetInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAchievements_GetInfo_Response.Info achievements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAchievements_GetInfo_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAchievements_GetInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAchievements_GetInfo_Response.Info achievements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_achievements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAchievements_GetInfo_Response)
  return target;
}

size_t CAchievements_GetInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAchievements_GetInfo_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAchievements_GetInfo_Response.Info achievements = 1;
  total_size += 1UL * this->_internal_achievements_size();
  for (const auto& msg : this->achievements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAchievements_GetInfo_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAchievements_GetInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAchievements_GetInfo_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAchievements_GetInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAchievements_GetInfo_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAchievements_GetInfo_Response)
    MergeFrom(*source);
  }
}

void CAchievements_GetInfo_Response::MergeFrom(const CAchievements_GetInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAchievements_GetInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
}

void CAchievements_GetInfo_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAchievements_GetInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAchievements_GetInfo_Response::CopyFrom(const CAchievements_GetInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAchievements_GetInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAchievements_GetInfo_Response::IsInitialized() const {
  return true;
}

void CAchievements_GetInfo_Response::InternalSwap(CAchievements_GetInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  achievements_.InternalSwap(&other->achievements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAchievements_GetInfo_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Achievements::~Achievements() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Achievements::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fachievements_2eproto);
  return file_level_service_descriptors_webuimessages_5fachievements_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Achievements::GetDescriptor() {
  return descriptor();
}

void Achievements::GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAchievements_GetInfo_Request*,
                         ::CAchievements_GetInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInfo() not implemented.");
  done->Run();
}

void Achievements::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fachievements_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAchievements_GetInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAchievements_GetInfo_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Achievements::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAchievements_GetInfo_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Achievements::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAchievements_GetInfo_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Achievements_Stub::Achievements_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Achievements_Stub::Achievements_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Achievements_Stub::~Achievements_Stub() {
  if (owns_channel_) delete channel_;
}

void Achievements_Stub::GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAchievements_GetInfo_Request* request,
                              ::CAchievements_GetInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CAchievements_GetInfo_Request* Arena::CreateMaybeMessage< ::CAchievements_GetInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAchievements_GetInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAchievements_GetInfo_Response_Info* Arena::CreateMaybeMessage< ::CAchievements_GetInfo_Response_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAchievements_GetInfo_Response_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::CAchievements_GetInfo_Response* Arena::CreateMaybeMessage< ::CAchievements_GetInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAchievements_GetInfo_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
