// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_achievements.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fachievements_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fachievements_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fachievements_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fachievements_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fachievements_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fachievements_2eproto_metadata_getter(int index);
class CAchievements_GetInfo_Request;
struct CAchievements_GetInfo_RequestDefaultTypeInternal;
extern CAchievements_GetInfo_RequestDefaultTypeInternal _CAchievements_GetInfo_Request_default_instance_;
class CAchievements_GetInfo_Response;
struct CAchievements_GetInfo_ResponseDefaultTypeInternal;
extern CAchievements_GetInfo_ResponseDefaultTypeInternal _CAchievements_GetInfo_Response_default_instance_;
class CAchievements_GetInfo_Response_Info;
struct CAchievements_GetInfo_Response_InfoDefaultTypeInternal;
extern CAchievements_GetInfo_Response_InfoDefaultTypeInternal _CAchievements_GetInfo_Response_Info_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CAchievements_GetInfo_Request* Arena::CreateMaybeMessage<::CAchievements_GetInfo_Request>(Arena*);
template<> ::CAchievements_GetInfo_Response* Arena::CreateMaybeMessage<::CAchievements_GetInfo_Response>(Arena*);
template<> ::CAchievements_GetInfo_Response_Info* Arena::CreateMaybeMessage<::CAchievements_GetInfo_Response_Info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CAchievements_GetInfo_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAchievements_GetInfo_Request) */ {
 public:
  inline CAchievements_GetInfo_Request() : CAchievements_GetInfo_Request(nullptr) {}
  virtual ~CAchievements_GetInfo_Request();
  explicit constexpr CAchievements_GetInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAchievements_GetInfo_Request(const CAchievements_GetInfo_Request& from);
  CAchievements_GetInfo_Request(CAchievements_GetInfo_Request&& from) noexcept
    : CAchievements_GetInfo_Request() {
    *this = ::std::move(from);
  }

  inline CAchievements_GetInfo_Request& operator=(const CAchievements_GetInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAchievements_GetInfo_Request& operator=(CAchievements_GetInfo_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAchievements_GetInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAchievements_GetInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CAchievements_GetInfo_Request*>(
               &_CAchievements_GetInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CAchievements_GetInfo_Request& a, CAchievements_GetInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAchievements_GetInfo_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAchievements_GetInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAchievements_GetInfo_Request* New() const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Request>(nullptr);
  }

  CAchievements_GetInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAchievements_GetInfo_Request& from);
  void MergeFrom(const CAchievements_GetInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAchievements_GetInfo_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAchievements_GetInfo_Request";
  }
  protected:
  explicit CAchievements_GetInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fachievements_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 1,
  };
  // optional uint64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CAchievements_GetInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  friend struct ::TableStruct_webuimessages_5fachievements_2eproto;
};
// -------------------------------------------------------------------

class CAchievements_GetInfo_Response_Info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAchievements_GetInfo_Response.Info) */ {
 public:
  inline CAchievements_GetInfo_Response_Info() : CAchievements_GetInfo_Response_Info(nullptr) {}
  virtual ~CAchievements_GetInfo_Response_Info();
  explicit constexpr CAchievements_GetInfo_Response_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAchievements_GetInfo_Response_Info(const CAchievements_GetInfo_Response_Info& from);
  CAchievements_GetInfo_Response_Info(CAchievements_GetInfo_Response_Info&& from) noexcept
    : CAchievements_GetInfo_Response_Info() {
    *this = ::std::move(from);
  }

  inline CAchievements_GetInfo_Response_Info& operator=(const CAchievements_GetInfo_Response_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAchievements_GetInfo_Response_Info& operator=(CAchievements_GetInfo_Response_Info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAchievements_GetInfo_Response_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAchievements_GetInfo_Response_Info* internal_default_instance() {
    return reinterpret_cast<const CAchievements_GetInfo_Response_Info*>(
               &_CAchievements_GetInfo_Response_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CAchievements_GetInfo_Response_Info& a, CAchievements_GetInfo_Response_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(CAchievements_GetInfo_Response_Info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAchievements_GetInfo_Response_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAchievements_GetInfo_Response_Info* New() const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Response_Info>(nullptr);
  }

  CAchievements_GetInfo_Response_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Response_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAchievements_GetInfo_Response_Info& from);
  void MergeFrom(const CAchievements_GetInfo_Response_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAchievements_GetInfo_Response_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAchievements_GetInfo_Response.Info";
  }
  protected:
  explicit CAchievements_GetInfo_Response_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fachievements_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kImageUrlAchievedFieldNumber = 4,
    kImageUrlNotAchievedFieldNumber = 5,
    kAchievedFieldNumber = 6,
    kUnloctimeFieldNumber = 7,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional string image_url_achieved = 4;
  bool has_image_url_achieved() const;
  private:
  bool _internal_has_image_url_achieved() const;
  public:
  void clear_image_url_achieved();
  const std::string& image_url_achieved() const;
  void set_image_url_achieved(const std::string& value);
  void set_image_url_achieved(std::string&& value);
  void set_image_url_achieved(const char* value);
  void set_image_url_achieved(const char* value, size_t size);
  std::string* mutable_image_url_achieved();
  std::string* release_image_url_achieved();
  void set_allocated_image_url_achieved(std::string* image_url_achieved);
  private:
  const std::string& _internal_image_url_achieved() const;
  void _internal_set_image_url_achieved(const std::string& value);
  std::string* _internal_mutable_image_url_achieved();
  public:

  // optional string image_url_not_achieved = 5;
  bool has_image_url_not_achieved() const;
  private:
  bool _internal_has_image_url_not_achieved() const;
  public:
  void clear_image_url_not_achieved();
  const std::string& image_url_not_achieved() const;
  void set_image_url_not_achieved(const std::string& value);
  void set_image_url_not_achieved(std::string&& value);
  void set_image_url_not_achieved(const char* value);
  void set_image_url_not_achieved(const char* value, size_t size);
  std::string* mutable_image_url_not_achieved();
  std::string* release_image_url_not_achieved();
  void set_allocated_image_url_not_achieved(std::string* image_url_not_achieved);
  private:
  const std::string& _internal_image_url_not_achieved() const;
  void _internal_set_image_url_not_achieved(const std::string& value);
  std::string* _internal_mutable_image_url_not_achieved();
  public:

  // optional bool achieved = 6;
  bool has_achieved() const;
  private:
  bool _internal_has_achieved() const;
  public:
  void clear_achieved();
  bool achieved() const;
  void set_achieved(bool value);
  private:
  bool _internal_achieved() const;
  void _internal_set_achieved(bool value);
  public:

  // optional uint32 unloctime = 7;
  bool has_unloctime() const;
  private:
  bool _internal_has_unloctime() const;
  public:
  void clear_unloctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 unloctime() const;
  void set_unloctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unloctime() const;
  void _internal_set_unloctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CAchievements_GetInfo_Response.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_achieved_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_not_achieved_;
  bool achieved_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unloctime_;
  friend struct ::TableStruct_webuimessages_5fachievements_2eproto;
};
// -------------------------------------------------------------------

class CAchievements_GetInfo_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAchievements_GetInfo_Response) */ {
 public:
  inline CAchievements_GetInfo_Response() : CAchievements_GetInfo_Response(nullptr) {}
  virtual ~CAchievements_GetInfo_Response();
  explicit constexpr CAchievements_GetInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAchievements_GetInfo_Response(const CAchievements_GetInfo_Response& from);
  CAchievements_GetInfo_Response(CAchievements_GetInfo_Response&& from) noexcept
    : CAchievements_GetInfo_Response() {
    *this = ::std::move(from);
  }

  inline CAchievements_GetInfo_Response& operator=(const CAchievements_GetInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAchievements_GetInfo_Response& operator=(CAchievements_GetInfo_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAchievements_GetInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAchievements_GetInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CAchievements_GetInfo_Response*>(
               &_CAchievements_GetInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CAchievements_GetInfo_Response& a, CAchievements_GetInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAchievements_GetInfo_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAchievements_GetInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAchievements_GetInfo_Response* New() const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Response>(nullptr);
  }

  CAchievements_GetInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAchievements_GetInfo_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAchievements_GetInfo_Response& from);
  void MergeFrom(const CAchievements_GetInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAchievements_GetInfo_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAchievements_GetInfo_Response";
  }
  protected:
  explicit CAchievements_GetInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fachievements_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CAchievements_GetInfo_Response_Info Info;

  // accessors -------------------------------------------------------

  enum : int {
    kAchievementsFieldNumber = 1,
  };
  // repeated .CAchievements_GetInfo_Response.Info achievements = 1;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;
  public:
  void clear_achievements();
  ::CAchievements_GetInfo_Response_Info* mutable_achievements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAchievements_GetInfo_Response_Info >*
      mutable_achievements();
  private:
  const ::CAchievements_GetInfo_Response_Info& _internal_achievements(int index) const;
  ::CAchievements_GetInfo_Response_Info* _internal_add_achievements();
  public:
  const ::CAchievements_GetInfo_Response_Info& achievements(int index) const;
  ::CAchievements_GetInfo_Response_Info* add_achievements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAchievements_GetInfo_Response_Info >&
      achievements() const;

  // @@protoc_insertion_point(class_scope:CAchievements_GetInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAchievements_GetInfo_Response_Info > achievements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fachievements_2eproto;
};
// ===================================================================

class Achievements_Stub;

class Achievements : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Achievements() {};
 public:
  virtual ~Achievements();

  typedef Achievements_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAchievements_GetInfo_Request* request,
                       ::CAchievements_GetInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Achievements);
};

class Achievements_Stub : public Achievements {
 public:
  Achievements_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Achievements_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Achievements_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Achievements ------------------------------------------

  void GetInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAchievements_GetInfo_Request* request,
                       ::CAchievements_GetInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Achievements_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CAchievements_GetInfo_Request

// optional uint64 gameid = 1;
inline bool CAchievements_GetInfo_Request::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Request::has_gameid() const {
  return _internal_has_gameid();
}
inline void CAchievements_GetInfo_Request::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAchievements_GetInfo_Request::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAchievements_GetInfo_Request::gameid() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Request.gameid)
  return _internal_gameid();
}
inline void CAchievements_GetInfo_Request::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_ = value;
}
inline void CAchievements_GetInfo_Request::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Request.gameid)
}

// -------------------------------------------------------------------

// CAchievements_GetInfo_Response_Info

// optional string id = 1;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_id() const {
  return _internal_has_id();
}
inline void CAchievements_GetInfo_Response_Info::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAchievements_GetInfo_Response_Info::id() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.id)
  return _internal_id();
}
inline void CAchievements_GetInfo_Response_Info::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.id)
}
inline std::string* CAchievements_GetInfo_Response_Info::mutable_id() {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.Info.id)
  return _internal_mutable_id();
}
inline const std::string& CAchievements_GetInfo_Response_Info::_internal_id() const {
  return id_.Get();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CAchievements_GetInfo_Response.Info.id)
}
inline void CAchievements_GetInfo_Response_Info::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CAchievements_GetInfo_Response.Info.id)
}
inline void CAchievements_GetInfo_Response_Info::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CAchievements_GetInfo_Response.Info.id)
}
inline std::string* CAchievements_GetInfo_Response_Info::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAchievements_GetInfo_Response_Info::release_id() {
  // @@protoc_insertion_point(field_release:CAchievements_GetInfo_Response.Info.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CAchievements_GetInfo_Response.Info.id)
}

// optional string name = 2;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_name() const {
  return _internal_has_name();
}
inline void CAchievements_GetInfo_Response_Info::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAchievements_GetInfo_Response_Info::name() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.name)
  return _internal_name();
}
inline void CAchievements_GetInfo_Response_Info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.name)
}
inline std::string* CAchievements_GetInfo_Response_Info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.Info.name)
  return _internal_mutable_name();
}
inline const std::string& CAchievements_GetInfo_Response_Info::_internal_name() const {
  return name_.Get();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CAchievements_GetInfo_Response.Info.name)
}
inline void CAchievements_GetInfo_Response_Info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CAchievements_GetInfo_Response.Info.name)
}
inline void CAchievements_GetInfo_Response_Info::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CAchievements_GetInfo_Response.Info.name)
}
inline std::string* CAchievements_GetInfo_Response_Info::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAchievements_GetInfo_Response_Info::release_name() {
  // @@protoc_insertion_point(field_release:CAchievements_GetInfo_Response.Info.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CAchievements_GetInfo_Response.Info.name)
}

// optional string desc = 3;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_desc() const {
  return _internal_has_desc();
}
inline void CAchievements_GetInfo_Response_Info::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAchievements_GetInfo_Response_Info::desc() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.desc)
  return _internal_desc();
}
inline void CAchievements_GetInfo_Response_Info::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.desc)
}
inline std::string* CAchievements_GetInfo_Response_Info::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.Info.desc)
  return _internal_mutable_desc();
}
inline const std::string& CAchievements_GetInfo_Response_Info::_internal_desc() const {
  return desc_.Get();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CAchievements_GetInfo_Response.Info.desc)
}
inline void CAchievements_GetInfo_Response_Info::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CAchievements_GetInfo_Response.Info.desc)
}
inline void CAchievements_GetInfo_Response_Info::set_desc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CAchievements_GetInfo_Response.Info.desc)
}
inline std::string* CAchievements_GetInfo_Response_Info::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000004u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAchievements_GetInfo_Response_Info::release_desc() {
  // @@protoc_insertion_point(field_release:CAchievements_GetInfo_Response.Info.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CAchievements_GetInfo_Response.Info.desc)
}

// optional string image_url_achieved = 4;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_image_url_achieved() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_image_url_achieved() const {
  return _internal_has_image_url_achieved();
}
inline void CAchievements_GetInfo_Response_Info::clear_image_url_achieved() {
  image_url_achieved_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CAchievements_GetInfo_Response_Info::image_url_achieved() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.image_url_achieved)
  return _internal_image_url_achieved();
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_achieved(const std::string& value) {
  _internal_set_image_url_achieved(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.image_url_achieved)
}
inline std::string* CAchievements_GetInfo_Response_Info::mutable_image_url_achieved() {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.Info.image_url_achieved)
  return _internal_mutable_image_url_achieved();
}
inline const std::string& CAchievements_GetInfo_Response_Info::_internal_image_url_achieved() const {
  return image_url_achieved_.Get();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_image_url_achieved(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  image_url_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_achieved(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  image_url_achieved_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CAchievements_GetInfo_Response.Info.image_url_achieved)
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_achieved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  image_url_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CAchievements_GetInfo_Response.Info.image_url_achieved)
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_achieved(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  image_url_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CAchievements_GetInfo_Response.Info.image_url_achieved)
}
inline std::string* CAchievements_GetInfo_Response_Info::_internal_mutable_image_url_achieved() {
  _has_bits_[0] |= 0x00000008u;
  return image_url_achieved_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAchievements_GetInfo_Response_Info::release_image_url_achieved() {
  // @@protoc_insertion_point(field_release:CAchievements_GetInfo_Response.Info.image_url_achieved)
  if (!_internal_has_image_url_achieved()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return image_url_achieved_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_allocated_image_url_achieved(std::string* image_url_achieved) {
  if (image_url_achieved != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  image_url_achieved_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url_achieved,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CAchievements_GetInfo_Response.Info.image_url_achieved)
}

// optional string image_url_not_achieved = 5;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_image_url_not_achieved() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_image_url_not_achieved() const {
  return _internal_has_image_url_not_achieved();
}
inline void CAchievements_GetInfo_Response_Info::clear_image_url_not_achieved() {
  image_url_not_achieved_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CAchievements_GetInfo_Response_Info::image_url_not_achieved() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
  return _internal_image_url_not_achieved();
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_not_achieved(const std::string& value) {
  _internal_set_image_url_not_achieved(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
}
inline std::string* CAchievements_GetInfo_Response_Info::mutable_image_url_not_achieved() {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
  return _internal_mutable_image_url_not_achieved();
}
inline const std::string& CAchievements_GetInfo_Response_Info::_internal_image_url_not_achieved() const {
  return image_url_not_achieved_.Get();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_image_url_not_achieved(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  image_url_not_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_not_achieved(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  image_url_not_achieved_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_not_achieved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  image_url_not_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
}
inline void CAchievements_GetInfo_Response_Info::set_image_url_not_achieved(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  image_url_not_achieved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
}
inline std::string* CAchievements_GetInfo_Response_Info::_internal_mutable_image_url_not_achieved() {
  _has_bits_[0] |= 0x00000010u;
  return image_url_not_achieved_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAchievements_GetInfo_Response_Info::release_image_url_not_achieved() {
  // @@protoc_insertion_point(field_release:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
  if (!_internal_has_image_url_not_achieved()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return image_url_not_achieved_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAchievements_GetInfo_Response_Info::set_allocated_image_url_not_achieved(std::string* image_url_not_achieved) {
  if (image_url_not_achieved != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  image_url_not_achieved_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url_not_achieved,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
}

// optional bool achieved = 6;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_achieved() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_achieved() const {
  return _internal_has_achieved();
}
inline void CAchievements_GetInfo_Response_Info::clear_achieved() {
  achieved_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CAchievements_GetInfo_Response_Info::_internal_achieved() const {
  return achieved_;
}
inline bool CAchievements_GetInfo_Response_Info::achieved() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.achieved)
  return _internal_achieved();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_achieved(bool value) {
  _has_bits_[0] |= 0x00000020u;
  achieved_ = value;
}
inline void CAchievements_GetInfo_Response_Info::set_achieved(bool value) {
  _internal_set_achieved(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.achieved)
}

// optional uint32 unloctime = 7;
inline bool CAchievements_GetInfo_Response_Info::_internal_has_unloctime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAchievements_GetInfo_Response_Info::has_unloctime() const {
  return _internal_has_unloctime();
}
inline void CAchievements_GetInfo_Response_Info::clear_unloctime() {
  unloctime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAchievements_GetInfo_Response_Info::_internal_unloctime() const {
  return unloctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAchievements_GetInfo_Response_Info::unloctime() const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.Info.unloctime)
  return _internal_unloctime();
}
inline void CAchievements_GetInfo_Response_Info::_internal_set_unloctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  unloctime_ = value;
}
inline void CAchievements_GetInfo_Response_Info::set_unloctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unloctime(value);
  // @@protoc_insertion_point(field_set:CAchievements_GetInfo_Response.Info.unloctime)
}

// -------------------------------------------------------------------

// CAchievements_GetInfo_Response

// repeated .CAchievements_GetInfo_Response.Info achievements = 1;
inline int CAchievements_GetInfo_Response::_internal_achievements_size() const {
  return achievements_.size();
}
inline int CAchievements_GetInfo_Response::achievements_size() const {
  return _internal_achievements_size();
}
inline void CAchievements_GetInfo_Response::clear_achievements() {
  achievements_.Clear();
}
inline ::CAchievements_GetInfo_Response_Info* CAchievements_GetInfo_Response::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:CAchievements_GetInfo_Response.achievements)
  return achievements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAchievements_GetInfo_Response_Info >*
CAchievements_GetInfo_Response::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:CAchievements_GetInfo_Response.achievements)
  return &achievements_;
}
inline const ::CAchievements_GetInfo_Response_Info& CAchievements_GetInfo_Response::_internal_achievements(int index) const {
  return achievements_.Get(index);
}
inline const ::CAchievements_GetInfo_Response_Info& CAchievements_GetInfo_Response::achievements(int index) const {
  // @@protoc_insertion_point(field_get:CAchievements_GetInfo_Response.achievements)
  return _internal_achievements(index);
}
inline ::CAchievements_GetInfo_Response_Info* CAchievements_GetInfo_Response::_internal_add_achievements() {
  return achievements_.Add();
}
inline ::CAchievements_GetInfo_Response_Info* CAchievements_GetInfo_Response::add_achievements() {
  // @@protoc_insertion_point(field_add:CAchievements_GetInfo_Response.achievements)
  return _internal_add_achievements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAchievements_GetInfo_Response_Info >&
CAchievements_GetInfo_Response::achievements() const {
  // @@protoc_insertion_point(field_list:CAchievements_GetInfo_Response.achievements)
  return achievements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fachievements_2eproto
