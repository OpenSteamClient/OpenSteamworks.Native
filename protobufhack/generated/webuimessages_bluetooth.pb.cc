// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_bluetooth.proto

#include "webuimessages_bluetooth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CBluetoothManager_GetState_Request::CBluetoothManager_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_GetState_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetState_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetState_RequestDefaultTypeInternal _CBluetoothManager_GetState_Request_default_instance_;
constexpr CMsgBluetoothManagerAdapterInfo::CMsgBluetoothManagerAdapterInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct CMsgBluetoothManagerAdapterInfoDefaultTypeInternal {
  constexpr CMsgBluetoothManagerAdapterInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBluetoothManagerAdapterInfoDefaultTypeInternal() {}
  union {
    CMsgBluetoothManagerAdapterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBluetoothManagerAdapterInfoDefaultTypeInternal _CMsgBluetoothManagerAdapterInfo_default_instance_;
constexpr CMsgBluetoothManagerDeviceInfo::CMsgBluetoothManagerDeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , etype_(0)

  , should_hide_hint_(false)
  , is_connected_(false)
  , is_paired_(false)
  , strength_raw_(0){}
struct CMsgBluetoothManagerDeviceInfoDefaultTypeInternal {
  constexpr CMsgBluetoothManagerDeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBluetoothManagerDeviceInfoDefaultTypeInternal() {}
  union {
    CMsgBluetoothManagerDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBluetoothManagerDeviceInfoDefaultTypeInternal _CMsgBluetoothManagerDeviceInfo_default_instance_;
constexpr CBluetoothManager_GetState_Response::CBluetoothManager_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adapters_()
  , devices_()
  , is_service_available_(false)
  , is_enabled_(false)
  , is_discovering_(false){}
struct CBluetoothManager_GetState_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetState_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetState_ResponseDefaultTypeInternal _CBluetoothManager_GetState_Response_default_instance_;
constexpr CBluetoothManager_GetAdapterDetails_Request::CBluetoothManager_GetAdapterDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetAdapterDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal _CBluetoothManager_GetAdapterDetails_Request_default_instance_;
constexpr CMsgBluetoothManagerAdapterDetails::CMsgBluetoothManagerAdapterDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_enabled_(false)
  , is_discovering_(false){}
struct CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal {
  constexpr CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal() {}
  union {
    CMsgBluetoothManagerAdapterDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal _CMsgBluetoothManagerAdapterDetails_default_instance_;
constexpr CBluetoothManager_GetAdapterDetails_Response::CBluetoothManager_GetAdapterDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adapter_(nullptr){}
struct CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetAdapterDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal _CBluetoothManager_GetAdapterDetails_Response_default_instance_;
constexpr CBluetoothManager_GetDeviceDetails_Request::CBluetoothManager_GetDeviceDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetDeviceDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal _CBluetoothManager_GetDeviceDetails_Request_default_instance_;
constexpr CMsgBluetoothManagerDeviceDetails::CMsgBluetoothManagerDeviceDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , adapter_id_(0u)
  , etype_(0)

  , is_connected_(false)
  , is_paired_(false)
  , is_pairing_(false)
  , wake_allowed_(false)
  , battery_percent_(0)
  , wake_allowed_supported_(false)
  , operation_in_progress_(false){}
struct CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal {
  constexpr CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal() {}
  union {
    CMsgBluetoothManagerDeviceDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal _CMsgBluetoothManagerDeviceDetails_default_instance_;
constexpr CBluetoothManager_GetDeviceDetails_Response::CBluetoothManager_GetDeviceDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr){}
struct CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_GetDeviceDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal _CBluetoothManager_GetDeviceDetails_Response_default_instance_;
constexpr CBluetoothManager_StateChanged_Notification::CBluetoothManager_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_StateChanged_NotificationDefaultTypeInternal {
  constexpr CBluetoothManager_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CBluetoothManager_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_StateChanged_NotificationDefaultTypeInternal _CBluetoothManager_StateChanged_Notification_default_instance_;
constexpr CBluetoothManager_SetDiscovering_Request::CBluetoothManager_SetDiscovering_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_SetDiscovering_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal _CBluetoothManager_SetDiscovering_Request_default_instance_;
constexpr CBluetoothManager_SetDiscovering_Response::CBluetoothManager_SetDiscovering_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_SetDiscovering_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal _CBluetoothManager_SetDiscovering_Response_default_instance_;
constexpr CBluetoothManager_Pair_Request::CBluetoothManager_Pair_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CBluetoothManager_Pair_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_Pair_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Pair_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_Pair_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Pair_RequestDefaultTypeInternal _CBluetoothManager_Pair_Request_default_instance_;
constexpr CBluetoothManager_Pair_Response::CBluetoothManager_Pair_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_Pair_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_Pair_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Pair_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_Pair_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Pair_ResponseDefaultTypeInternal _CBluetoothManager_Pair_Response_default_instance_;
constexpr CBluetoothManager_CancelPair_Request::CBluetoothManager_CancelPair_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CBluetoothManager_CancelPair_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_CancelPair_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_CancelPair_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_CancelPair_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_CancelPair_RequestDefaultTypeInternal _CBluetoothManager_CancelPair_Request_default_instance_;
constexpr CBluetoothManager_CancelPair_Response::CBluetoothManager_CancelPair_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_CancelPair_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_CancelPair_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_CancelPair_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_CancelPair_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_CancelPair_ResponseDefaultTypeInternal _CBluetoothManager_CancelPair_Response_default_instance_;
constexpr CBluetoothManager_Forget_Request::CBluetoothManager_Forget_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CBluetoothManager_Forget_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_Forget_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Forget_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_Forget_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Forget_RequestDefaultTypeInternal _CBluetoothManager_Forget_Request_default_instance_;
constexpr CBluetoothManager_Forget_Response::CBluetoothManager_Forget_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_Forget_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_Forget_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Forget_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_Forget_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Forget_ResponseDefaultTypeInternal _CBluetoothManager_Forget_Response_default_instance_;
constexpr CBluetoothManager_Connect_Request::CBluetoothManager_Connect_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CBluetoothManager_Connect_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_Connect_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Connect_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_Connect_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Connect_RequestDefaultTypeInternal _CBluetoothManager_Connect_Request_default_instance_;
constexpr CBluetoothManager_Connect_Response::CBluetoothManager_Connect_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_Connect_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_Connect_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Connect_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_Connect_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Connect_ResponseDefaultTypeInternal _CBluetoothManager_Connect_Response_default_instance_;
constexpr CBluetoothManager_Disconnect_Request::CBluetoothManager_Disconnect_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CBluetoothManager_Disconnect_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_Disconnect_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Disconnect_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_Disconnect_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Disconnect_RequestDefaultTypeInternal _CBluetoothManager_Disconnect_Request_default_instance_;
constexpr CBluetoothManager_Disconnect_Response::CBluetoothManager_Disconnect_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_Disconnect_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_Disconnect_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_Disconnect_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_Disconnect_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_Disconnect_ResponseDefaultTypeInternal _CBluetoothManager_Disconnect_Response_default_instance_;
constexpr CBluetoothManager_SetWakeAllowed_Request::CBluetoothManager_SetWakeAllowed_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u)
  , allowed_(false){}
struct CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal {
  constexpr CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal() {}
  union {
    CBluetoothManager_SetWakeAllowed_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal _CBluetoothManager_SetWakeAllowed_Request_default_instance_;
constexpr CBluetoothManager_SetWakeAllowed_Response::CBluetoothManager_SetWakeAllowed_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal {
  constexpr CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal() {}
  union {
    CBluetoothManager_SetWakeAllowed_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal _CBluetoothManager_SetWakeAllowed_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fbluetooth_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fbluetooth_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fbluetooth_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fbluetooth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterInfo, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, should_hide_hint_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, etype_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, is_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, is_paired_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceInfo, strength_raw_),
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, is_service_available_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, is_discovering_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, adapters_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetState_Response, devices_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Request, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, mac_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerAdapterDetails, is_discovering_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetAdapterDetails_Response, adapter_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Request, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, adapter_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, etype_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, mac_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, is_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, is_paired_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, is_pairing_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, wake_allowed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, wake_allowed_supported_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, battery_percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgBluetoothManagerDeviceDetails, operation_in_progress_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_GetDeviceDetails_Response, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetDiscovering_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetDiscovering_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetDiscovering_Request, enabled_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetDiscovering_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Pair_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Pair_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Pair_Request, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Pair_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_CancelPair_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_CancelPair_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_CancelPair_Request, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_CancelPair_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Forget_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Forget_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Forget_Request, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Forget_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Connect_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Connect_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Connect_Request, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Connect_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Disconnect_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Disconnect_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Disconnect_Request, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_Disconnect_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetWakeAllowed_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetWakeAllowed_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetWakeAllowed_Request, device_),
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetWakeAllowed_Request, allowed_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBluetoothManager_SetWakeAllowed_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CBluetoothManager_GetState_Request)},
  { 5, 11, sizeof(::CMsgBluetoothManagerAdapterInfo)},
  { 12, 23, sizeof(::CMsgBluetoothManagerDeviceInfo)},
  { 29, 39, sizeof(::CBluetoothManager_GetState_Response)},
  { 44, 50, sizeof(::CBluetoothManager_GetAdapterDetails_Request)},
  { 51, 61, sizeof(::CMsgBluetoothManagerAdapterDetails)},
  { 66, 72, sizeof(::CBluetoothManager_GetAdapterDetails_Response)},
  { 73, 79, sizeof(::CBluetoothManager_GetDeviceDetails_Request)},
  { 80, 97, sizeof(::CMsgBluetoothManagerDeviceDetails)},
  { 109, 115, sizeof(::CBluetoothManager_GetDeviceDetails_Response)},
  { 116, -1, sizeof(::CBluetoothManager_StateChanged_Notification)},
  { 121, 127, sizeof(::CBluetoothManager_SetDiscovering_Request)},
  { 128, -1, sizeof(::CBluetoothManager_SetDiscovering_Response)},
  { 133, 139, sizeof(::CBluetoothManager_Pair_Request)},
  { 140, -1, sizeof(::CBluetoothManager_Pair_Response)},
  { 145, 151, sizeof(::CBluetoothManager_CancelPair_Request)},
  { 152, -1, sizeof(::CBluetoothManager_CancelPair_Response)},
  { 157, 163, sizeof(::CBluetoothManager_Forget_Request)},
  { 164, -1, sizeof(::CBluetoothManager_Forget_Response)},
  { 169, 175, sizeof(::CBluetoothManager_Connect_Request)},
  { 176, -1, sizeof(::CBluetoothManager_Connect_Response)},
  { 181, 187, sizeof(::CBluetoothManager_Disconnect_Request)},
  { 188, -1, sizeof(::CBluetoothManager_Disconnect_Response)},
  { 193, 200, sizeof(::CBluetoothManager_SetWakeAllowed_Request)},
  { 202, -1, sizeof(::CBluetoothManager_SetWakeAllowed_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBluetoothManagerAdapterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBluetoothManagerDeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetAdapterDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBluetoothManagerAdapterDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetAdapterDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetDeviceDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBluetoothManagerDeviceDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_GetDeviceDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_SetDiscovering_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_SetDiscovering_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Pair_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Pair_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_CancelPair_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_CancelPair_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Forget_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Forget_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Connect_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Connect_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Disconnect_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_Disconnect_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_SetWakeAllowed_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBluetoothManager_SetWakeAllowed_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fbluetooth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035webuimessages_bluetooth.proto\032 google/"
  "protobuf/descriptor.proto\032\013enums.proto\032\030"
  "steammessages_base.proto\032\030webuimessages_"
  "base.proto\"$\n\"CBluetoothManager_GetState"
  "_Request\"-\n\037CMsgBluetoothManagerAdapterI"
  "nfo\022\n\n\002id\030\001 \001(\r\"\310\001\n\036CMsgBluetoothManager"
  "DeviceInfo\022\n\n\002id\030\001 \001(\r\022\030\n\020should_hide_hi"
  "nt\030\002 \001(\010\022A\n\005etype\030\003 \001(\0162\025.EBluetoothDevi"
  "ceType:\033BluetoothDeviceType_Invalid\022\024\n\014i"
  "s_connected\030\004 \001(\010\022\021\n\tis_paired\030\005 \001(\010\022\024\n\014"
  "strength_raw\030\006 \001(\005\"\325\001\n#CBluetoothManager"
  "_GetState_Response\022\034\n\024is_service_availab"
  "le\030\001 \001(\010\022\022\n\nis_enabled\030\002 \001(\010\022\026\n\016is_disco"
  "vering\030\003 \001(\010\0222\n\010adapters\030\004 \003(\0132 .CMsgBlu"
  "etoothManagerAdapterInfo\0220\n\007devices\030\005 \003("
  "\0132\037.CMsgBluetoothManagerDeviceInfo\"9\n+CB"
  "luetoothManager_GetAdapterDetails_Reques"
  "t\022\n\n\002id\030\001 \001(\r\"z\n\"CMsgBluetoothManagerAda"
  "pterDetails\022\r\n\002id\030\001 \001(\r:\0010\022\013\n\003mac\030\002 \001(\t\022"
  "\014\n\004name\030\003 \001(\t\022\022\n\nis_enabled\030\004 \001(\010\022\026\n\016is_"
  "discovering\030\005 \001(\010\"d\n,CBluetoothManager_G"
  "etAdapterDetails_Response\0224\n\007adapter\030\001 \001"
  "(\0132#.CMsgBluetoothManagerAdapterDetails\""
  "8\n*CBluetoothManager_GetDeviceDetails_Re"
  "quest\022\n\n\002id\030\001 \001(\r\"\322\002\n!CMsgBluetoothManag"
  "erDeviceDetails\022\r\n\002id\030\001 \001(\r:\0010\022\025\n\nadapte"
  "r_id\030\002 \001(\r:\0010\022A\n\005etype\030\003 \001(\0162\025.EBluetoot"
  "hDeviceType:\033BluetoothDeviceType_Invalid"
  "\022\013\n\003mac\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022\024\n\014is_connec"
  "ted\030\006 \001(\010\022\021\n\tis_paired\030\007 \001(\010\022\022\n\nis_pairi"
  "ng\030\010 \001(\010\022\024\n\014wake_allowed\030\t \001(\010\022\036\n\026wake_a"
  "llowed_supported\030\n \001(\010\022\027\n\017battery_percen"
  "t\030\013 \001(\005\022\035\n\025operation_in_progress\030\014 \001(\010\"a"
  "\n+CBluetoothManager_GetDeviceDetails_Res"
  "ponse\0222\n\006device\030\001 \001(\0132\".CMsgBluetoothMan"
  "agerDeviceDetails\"-\n+CBluetoothManager_S"
  "tateChanged_Notification\";\n(CBluetoothMa"
  "nager_SetDiscovering_Request\022\017\n\007enabled\030"
  "\001 \001(\010\"+\n)CBluetoothManager_SetDiscoverin"
  "g_Response\"0\n\036CBluetoothManager_Pair_Req"
  "uest\022\016\n\006device\030\001 \001(\r\"!\n\037CBluetoothManage"
  "r_Pair_Response\"6\n$CBluetoothManager_Can"
  "celPair_Request\022\016\n\006device\030\001 \001(\r\"\'\n%CBlue"
  "toothManager_CancelPair_Response\"2\n CBlu"
  "etoothManager_Forget_Request\022\016\n\006device\030\001"
  " \001(\r\"#\n!CBluetoothManager_Forget_Respons"
  "e\"3\n!CBluetoothManager_Connect_Request\022\016"
  "\n\006device\030\001 \001(\r\"$\n\"CBluetoothManager_Conn"
  "ect_Response\"6\n$CBluetoothManager_Discon"
  "nect_Request\022\016\n\006device\030\001 \001(\r\"\'\n%CBluetoo"
  "thManager_Disconnect_Response\"K\n(CBlueto"
  "othManager_SetWakeAllowed_Request\022\016\n\006dev"
  "ice\030\001 \001(\r\022\017\n\007allowed\030\002 \001(\010\"+\n)CBluetooth"
  "Manager_SetWakeAllowed_Response2\242\010\n\020Blue"
  "toothManager\022U\n\010GetState\022#.CBluetoothMan"
  "ager_GetState_Request\032$.CBluetoothManage"
  "r_GetState_Response\022p\n\021GetAdapterDetails"
  "\022,.CBluetoothManager_GetAdapterDetails_R"
  "equest\032-.CBluetoothManager_GetAdapterDet"
  "ails_Response\022m\n\020GetDeviceDetails\022+.CBlu"
  "etoothManager_GetDeviceDetails_Request\032,"
  ".CBluetoothManager_GetDeviceDetails_Resp"
  "onse\022T\n\022NotifyStateChanged\022,.CBluetoothM"
  "anager_StateChanged_Notification\032\020.WebUI"
  "NoResponse\022g\n\016SetDiscovering\022).CBluetoot"
  "hManager_SetDiscovering_Request\032*.CBluet"
  "oothManager_SetDiscovering_Response\022I\n\004P"
  "air\022\037.CBluetoothManager_Pair_Request\032 .C"
  "BluetoothManager_Pair_Response\022[\n\nCancel"
  "Pair\022%.CBluetoothManager_CancelPair_Requ"
  "est\032&.CBluetoothManager_CancelPair_Respo"
  "nse\022O\n\006Forget\022!.CBluetoothManager_Forget"
  "_Request\032\".CBluetoothManager_Forget_Resp"
  "onse\022R\n\007Connect\022\".CBluetoothManager_Conn"
  "ect_Request\032#.CBluetoothManager_Connect_"
  "Response\022[\n\nDisconnect\022%.CBluetoothManag"
  "er_Disconnect_Request\032&.CBluetoothManage"
  "r_Disconnect_Response\022g\n\016SetWakeAllowed\022"
  ").CBluetoothManager_SetWakeAllowed_Reque"
  "st\032*.CBluetoothManager_SetWakeAllowed_Re"
  "sponse\032\004\200\227\"\001B\037H\001\200\001\001\252\002\027OpenSteamworks.Pro"
  "tobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fbluetooth_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fbluetooth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fbluetooth_2eproto = {
  false, false, 3245, descriptor_table_protodef_webuimessages_5fbluetooth_2eproto, "webuimessages_bluetooth.proto", 
  &descriptor_table_webuimessages_5fbluetooth_2eproto_once, descriptor_table_webuimessages_5fbluetooth_2eproto_deps, 4, 25,
  schemas, file_default_instances, TableStruct_webuimessages_5fbluetooth_2eproto::offsets,
  file_level_metadata_webuimessages_5fbluetooth_2eproto, file_level_enum_descriptors_webuimessages_5fbluetooth_2eproto, file_level_service_descriptors_webuimessages_5fbluetooth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fbluetooth_2eproto);
  return descriptor_table_webuimessages_5fbluetooth_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fbluetooth_2eproto(&descriptor_table_webuimessages_5fbluetooth_2eproto);

// ===================================================================

class CBluetoothManager_GetState_Request::_Internal {
 public:
};

CBluetoothManager_GetState_Request::CBluetoothManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetState_Request)
}
CBluetoothManager_GetState_Request::CBluetoothManager_GetState_Request(const CBluetoothManager_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetState_Request)
}

void CBluetoothManager_GetState_Request::SharedCtor() {
}

CBluetoothManager_GetState_Request::~CBluetoothManager_GetState_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_GetState_Request::ArenaDtor(void* object) {
  CBluetoothManager_GetState_Request* _this = reinterpret_cast< CBluetoothManager_GetState_Request* >(object);
  (void)_this;
}
void CBluetoothManager_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetState_Request)
  return target;
}

size_t CBluetoothManager_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetState_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetState_Request::MergeFrom(const CBluetoothManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetState_Request::CopyFrom(const CBluetoothManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetState_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetState_Request::InternalSwap(CBluetoothManager_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBluetoothManagerAdapterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBluetoothManagerAdapterInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBluetoothManagerAdapterInfo::CMsgBluetoothManagerAdapterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBluetoothManagerAdapterInfo)
}
CMsgBluetoothManagerAdapterInfo::CMsgBluetoothManagerAdapterInfo(const CMsgBluetoothManagerAdapterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgBluetoothManagerAdapterInfo)
}

void CMsgBluetoothManagerAdapterInfo::SharedCtor() {
id_ = 0u;
}

CMsgBluetoothManagerAdapterInfo::~CMsgBluetoothManagerAdapterInfo() {
  // @@protoc_insertion_point(destructor:CMsgBluetoothManagerAdapterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBluetoothManagerAdapterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBluetoothManagerAdapterInfo::ArenaDtor(void* object) {
  CMsgBluetoothManagerAdapterInfo* _this = reinterpret_cast< CMsgBluetoothManagerAdapterInfo* >(object);
  (void)_this;
}
void CMsgBluetoothManagerAdapterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBluetoothManagerAdapterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBluetoothManagerAdapterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBluetoothManagerAdapterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBluetoothManagerAdapterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBluetoothManagerAdapterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBluetoothManagerAdapterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBluetoothManagerAdapterInfo)
  return target;
}

size_t CMsgBluetoothManagerAdapterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBluetoothManagerAdapterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBluetoothManagerAdapterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBluetoothManagerAdapterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBluetoothManagerAdapterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBluetoothManagerAdapterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBluetoothManagerAdapterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBluetoothManagerAdapterInfo)
    MergeFrom(*source);
  }
}

void CMsgBluetoothManagerAdapterInfo::MergeFrom(const CMsgBluetoothManagerAdapterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBluetoothManagerAdapterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CMsgBluetoothManagerAdapterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBluetoothManagerAdapterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBluetoothManagerAdapterInfo::CopyFrom(const CMsgBluetoothManagerAdapterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBluetoothManagerAdapterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBluetoothManagerAdapterInfo::IsInitialized() const {
  return true;
}

void CMsgBluetoothManagerAdapterInfo::InternalSwap(CMsgBluetoothManagerAdapterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBluetoothManagerAdapterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBluetoothManagerDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBluetoothManagerDeviceInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_hide_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_paired(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_strength_raw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgBluetoothManagerDeviceInfo::CMsgBluetoothManagerDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBluetoothManagerDeviceInfo)
}
CMsgBluetoothManagerDeviceInfo::CMsgBluetoothManagerDeviceInfo(const CMsgBluetoothManagerDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_raw_) -
    reinterpret_cast<char*>(&id_)) + sizeof(strength_raw_));
  // @@protoc_insertion_point(copy_constructor:CMsgBluetoothManagerDeviceInfo)
}

void CMsgBluetoothManagerDeviceInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strength_raw_) -
    reinterpret_cast<char*>(&id_)) + sizeof(strength_raw_));
}

CMsgBluetoothManagerDeviceInfo::~CMsgBluetoothManagerDeviceInfo() {
  // @@protoc_insertion_point(destructor:CMsgBluetoothManagerDeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBluetoothManagerDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBluetoothManagerDeviceInfo::ArenaDtor(void* object) {
  CMsgBluetoothManagerDeviceInfo* _this = reinterpret_cast< CMsgBluetoothManagerDeviceInfo* >(object);
  (void)_this;
}
void CMsgBluetoothManagerDeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBluetoothManagerDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBluetoothManagerDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBluetoothManagerDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strength_raw_) -
        reinterpret_cast<char*>(&id_)) + sizeof(strength_raw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBluetoothManagerDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_hide_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_should_hide_hint(&has_bits);
          should_hide_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBluetoothDeviceType_IsValid(val))) {
            _internal_set_etype(static_cast<::EBluetoothDeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_connected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_connected(&has_bits);
          is_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_paired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_paired(&has_bits);
          is_paired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 strength_raw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_strength_raw(&has_bits);
          strength_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBluetoothManagerDeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBluetoothManagerDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bool should_hide_hint = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_should_hide_hint(), target);
  }

  // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_etype(), target);
  }

  // optional bool is_connected = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_connected(), target);
  }

  // optional bool is_paired = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_paired(), target);
  }

  // optional int32 strength_raw = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_strength_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBluetoothManagerDeviceInfo)
  return target;
}

size_t CMsgBluetoothManagerDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBluetoothManagerDeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
    }

    // optional bool should_hide_hint = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_connected = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_paired = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 strength_raw = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_strength_raw());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBluetoothManagerDeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBluetoothManagerDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBluetoothManagerDeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBluetoothManagerDeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBluetoothManagerDeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBluetoothManagerDeviceInfo)
    MergeFrom(*source);
  }
}

void CMsgBluetoothManagerDeviceInfo::MergeFrom(const CMsgBluetoothManagerDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBluetoothManagerDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      etype_ = from.etype_;
    }
    if (cached_has_bits & 0x00000004u) {
      should_hide_hint_ = from.should_hide_hint_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_connected_ = from.is_connected_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_paired_ = from.is_paired_;
    }
    if (cached_has_bits & 0x00000020u) {
      strength_raw_ = from.strength_raw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBluetoothManagerDeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBluetoothManagerDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBluetoothManagerDeviceInfo::CopyFrom(const CMsgBluetoothManagerDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBluetoothManagerDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBluetoothManagerDeviceInfo::IsInitialized() const {
  return true;
}

void CMsgBluetoothManagerDeviceInfo::InternalSwap(CMsgBluetoothManagerDeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerDeviceInfo, strength_raw_)
      + sizeof(CMsgBluetoothManagerDeviceInfo::strength_raw_)
      - PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerDeviceInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBluetoothManagerDeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_GetState_Response>()._has_bits_);
  static void set_has_is_service_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_discovering(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBluetoothManager_GetState_Response::CBluetoothManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  adapters_(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetState_Response)
}
CBluetoothManager_GetState_Response::CBluetoothManager_GetState_Response(const CBluetoothManager_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      adapters_(from.adapters_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_service_available_, &from.is_service_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_discovering_) -
    reinterpret_cast<char*>(&is_service_available_)) + sizeof(is_discovering_));
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetState_Response)
}

void CBluetoothManager_GetState_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_service_available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_discovering_) -
    reinterpret_cast<char*>(&is_service_available_)) + sizeof(is_discovering_));
}

CBluetoothManager_GetState_Response::~CBluetoothManager_GetState_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_GetState_Response::ArenaDtor(void* object) {
  CBluetoothManager_GetState_Response* _this = reinterpret_cast< CBluetoothManager_GetState_Response* >(object);
  (void)_this;
}
void CBluetoothManager_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adapters_.Clear();
  devices_.Clear();
  ::memset(&is_service_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_discovering_) -
      reinterpret_cast<char*>(&is_service_available_)) + sizeof(is_discovering_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_service_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_service_available(&has_bits);
          is_service_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_discovering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_discovering(&has_bits);
          is_discovering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBluetoothManagerAdapterInfo adapters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adapters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBluetoothManagerDeviceInfo devices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_service_available = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_service_available(), target);
  }

  // optional bool is_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // optional bool is_discovering = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_discovering(), target);
  }

  // repeated .CMsgBluetoothManagerAdapterInfo adapters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adapters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_adapters(i), target, stream);
  }

  // repeated .CMsgBluetoothManagerDeviceInfo devices = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetState_Response)
  return target;
}

size_t CBluetoothManager_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBluetoothManagerAdapterInfo adapters = 4;
  total_size += 1UL * this->_internal_adapters_size();
  for (const auto& msg : this->adapters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBluetoothManagerDeviceInfo devices = 5;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_service_available = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_discovering = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetState_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetState_Response::MergeFrom(const CBluetoothManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adapters_.MergeFrom(from.adapters_);
  devices_.MergeFrom(from.devices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_service_available_ = from.is_service_available_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_discovering_ = from.is_discovering_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBluetoothManager_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetState_Response::CopyFrom(const CBluetoothManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetState_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetState_Response::InternalSwap(CBluetoothManager_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  adapters_.InternalSwap(&other->adapters_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBluetoothManager_GetState_Response, is_discovering_)
      + sizeof(CBluetoothManager_GetState_Response::is_discovering_)
      - PROTOBUF_FIELD_OFFSET(CBluetoothManager_GetState_Response, is_service_available_)>(
          reinterpret_cast<char*>(&is_service_available_),
          reinterpret_cast<char*>(&other->is_service_available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_GetAdapterDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_GetAdapterDetails_Request>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_GetAdapterDetails_Request::CBluetoothManager_GetAdapterDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetAdapterDetails_Request)
}
CBluetoothManager_GetAdapterDetails_Request::CBluetoothManager_GetAdapterDetails_Request(const CBluetoothManager_GetAdapterDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetAdapterDetails_Request)
}

void CBluetoothManager_GetAdapterDetails_Request::SharedCtor() {
id_ = 0u;
}

CBluetoothManager_GetAdapterDetails_Request::~CBluetoothManager_GetAdapterDetails_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetAdapterDetails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetAdapterDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_GetAdapterDetails_Request::ArenaDtor(void* object) {
  CBluetoothManager_GetAdapterDetails_Request* _this = reinterpret_cast< CBluetoothManager_GetAdapterDetails_Request* >(object);
  (void)_this;
}
void CBluetoothManager_GetAdapterDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetAdapterDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetAdapterDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetAdapterDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetAdapterDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetAdapterDetails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetAdapterDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetAdapterDetails_Request)
  return target;
}

size_t CBluetoothManager_GetAdapterDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetAdapterDetails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetAdapterDetails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetAdapterDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetAdapterDetails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetAdapterDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetAdapterDetails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetAdapterDetails_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetAdapterDetails_Request::MergeFrom(const CBluetoothManager_GetAdapterDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetAdapterDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CBluetoothManager_GetAdapterDetails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetAdapterDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetAdapterDetails_Request::CopyFrom(const CBluetoothManager_GetAdapterDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetAdapterDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetAdapterDetails_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetAdapterDetails_Request::InternalSwap(CBluetoothManager_GetAdapterDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetAdapterDetails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBluetoothManagerAdapterDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBluetoothManagerAdapterDetails>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_discovering(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgBluetoothManagerAdapterDetails::CMsgBluetoothManagerAdapterDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBluetoothManagerAdapterDetails)
}
CMsgBluetoothManagerAdapterDetails::CMsgBluetoothManagerAdapterDetails(const CMsgBluetoothManagerAdapterDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mac()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_discovering_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_discovering_));
  // @@protoc_insertion_point(copy_constructor:CMsgBluetoothManagerAdapterDetails)
}

void CMsgBluetoothManagerAdapterDetails::SharedCtor() {
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_discovering_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_discovering_));
}

CMsgBluetoothManagerAdapterDetails::~CMsgBluetoothManagerAdapterDetails() {
  // @@protoc_insertion_point(destructor:CMsgBluetoothManagerAdapterDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBluetoothManagerAdapterDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBluetoothManagerAdapterDetails::ArenaDtor(void* object) {
  CMsgBluetoothManagerAdapterDetails* _this = reinterpret_cast< CMsgBluetoothManagerAdapterDetails* >(object);
  (void)_this;
}
void CMsgBluetoothManagerAdapterDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBluetoothManagerAdapterDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBluetoothManagerAdapterDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBluetoothManagerAdapterDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_discovering_) -
        reinterpret_cast<char*>(&id_)) + sizeof(is_discovering_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBluetoothManagerAdapterDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBluetoothManagerAdapterDetails.mac");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBluetoothManagerAdapterDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_discovering = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_discovering(&has_bits);
          is_discovering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBluetoothManagerAdapterDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBluetoothManagerAdapterDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string mac = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBluetoothManagerAdapterDetails.mac");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mac(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBluetoothManagerAdapterDetails.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional bool is_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_enabled(), target);
  }

  // optional bool is_discovering = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_discovering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBluetoothManagerAdapterDetails)
  return target;
}

size_t CMsgBluetoothManagerAdapterDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBluetoothManagerAdapterDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string mac = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mac());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional bool is_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_discovering = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBluetoothManagerAdapterDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBluetoothManagerAdapterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBluetoothManagerAdapterDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBluetoothManagerAdapterDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBluetoothManagerAdapterDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBluetoothManagerAdapterDetails)
    MergeFrom(*source);
  }
}

void CMsgBluetoothManagerAdapterDetails::MergeFrom(const CMsgBluetoothManagerAdapterDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBluetoothManagerAdapterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mac(from._internal_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_discovering_ = from.is_discovering_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBluetoothManagerAdapterDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBluetoothManagerAdapterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBluetoothManagerAdapterDetails::CopyFrom(const CMsgBluetoothManagerAdapterDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBluetoothManagerAdapterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBluetoothManagerAdapterDetails::IsInitialized() const {
  return true;
}

void CMsgBluetoothManagerAdapterDetails::InternalSwap(CMsgBluetoothManagerAdapterDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerAdapterDetails, is_discovering_)
      + sizeof(CMsgBluetoothManagerAdapterDetails::is_discovering_)
      - PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerAdapterDetails, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBluetoothManagerAdapterDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_GetAdapterDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_GetAdapterDetails_Response>()._has_bits_);
  static const ::CMsgBluetoothManagerAdapterDetails& adapter(const CBluetoothManager_GetAdapterDetails_Response* msg);
  static void set_has_adapter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBluetoothManagerAdapterDetails&
CBluetoothManager_GetAdapterDetails_Response::_Internal::adapter(const CBluetoothManager_GetAdapterDetails_Response* msg) {
  return *msg->adapter_;
}
CBluetoothManager_GetAdapterDetails_Response::CBluetoothManager_GetAdapterDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetAdapterDetails_Response)
}
CBluetoothManager_GetAdapterDetails_Response::CBluetoothManager_GetAdapterDetails_Response(const CBluetoothManager_GetAdapterDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adapter()) {
    adapter_ = new ::CMsgBluetoothManagerAdapterDetails(*from.adapter_);
  } else {
    adapter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetAdapterDetails_Response)
}

void CBluetoothManager_GetAdapterDetails_Response::SharedCtor() {
adapter_ = nullptr;
}

CBluetoothManager_GetAdapterDetails_Response::~CBluetoothManager_GetAdapterDetails_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetAdapterDetails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetAdapterDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete adapter_;
}

void CBluetoothManager_GetAdapterDetails_Response::ArenaDtor(void* object) {
  CBluetoothManager_GetAdapterDetails_Response* _this = reinterpret_cast< CBluetoothManager_GetAdapterDetails_Response* >(object);
  (void)_this;
}
void CBluetoothManager_GetAdapterDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetAdapterDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetAdapterDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetAdapterDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(adapter_ != nullptr);
    adapter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetAdapterDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgBluetoothManagerAdapterDetails adapter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_adapter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetAdapterDetails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetAdapterDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgBluetoothManagerAdapterDetails adapter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::adapter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetAdapterDetails_Response)
  return target;
}

size_t CBluetoothManager_GetAdapterDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetAdapterDetails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgBluetoothManagerAdapterDetails adapter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adapter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetAdapterDetails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetAdapterDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetAdapterDetails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetAdapterDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetAdapterDetails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetAdapterDetails_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetAdapterDetails_Response::MergeFrom(const CBluetoothManager_GetAdapterDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetAdapterDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_adapter()) {
    _internal_mutable_adapter()->::CMsgBluetoothManagerAdapterDetails::MergeFrom(from._internal_adapter());
  }
}

void CBluetoothManager_GetAdapterDetails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetAdapterDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetAdapterDetails_Response::CopyFrom(const CBluetoothManager_GetAdapterDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetAdapterDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetAdapterDetails_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetAdapterDetails_Response::InternalSwap(CBluetoothManager_GetAdapterDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adapter_, other->adapter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetAdapterDetails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_GetDeviceDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_GetDeviceDetails_Request>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_GetDeviceDetails_Request::CBluetoothManager_GetDeviceDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetDeviceDetails_Request)
}
CBluetoothManager_GetDeviceDetails_Request::CBluetoothManager_GetDeviceDetails_Request(const CBluetoothManager_GetDeviceDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetDeviceDetails_Request)
}

void CBluetoothManager_GetDeviceDetails_Request::SharedCtor() {
id_ = 0u;
}

CBluetoothManager_GetDeviceDetails_Request::~CBluetoothManager_GetDeviceDetails_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetDeviceDetails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetDeviceDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_GetDeviceDetails_Request::ArenaDtor(void* object) {
  CBluetoothManager_GetDeviceDetails_Request* _this = reinterpret_cast< CBluetoothManager_GetDeviceDetails_Request* >(object);
  (void)_this;
}
void CBluetoothManager_GetDeviceDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetDeviceDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetDeviceDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetDeviceDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetDeviceDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetDeviceDetails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetDeviceDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetDeviceDetails_Request)
  return target;
}

size_t CBluetoothManager_GetDeviceDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetDeviceDetails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetDeviceDetails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetDeviceDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetDeviceDetails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetDeviceDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetDeviceDetails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetDeviceDetails_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetDeviceDetails_Request::MergeFrom(const CBluetoothManager_GetDeviceDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetDeviceDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CBluetoothManager_GetDeviceDetails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetDeviceDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetDeviceDetails_Request::CopyFrom(const CBluetoothManager_GetDeviceDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetDeviceDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetDeviceDetails_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetDeviceDetails_Request::InternalSwap(CBluetoothManager_GetDeviceDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetDeviceDetails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBluetoothManagerDeviceDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBluetoothManagerDeviceDetails>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adapter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_paired(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_pairing(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wake_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wake_allowed_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_battery_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_operation_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgBluetoothManagerDeviceDetails::CMsgBluetoothManagerDeviceDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBluetoothManagerDeviceDetails)
}
CMsgBluetoothManagerDeviceDetails::CMsgBluetoothManagerDeviceDetails(const CMsgBluetoothManagerDeviceDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mac()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_in_progress_) -
    reinterpret_cast<char*>(&id_)) + sizeof(operation_in_progress_));
  // @@protoc_insertion_point(copy_constructor:CMsgBluetoothManagerDeviceDetails)
}

void CMsgBluetoothManagerDeviceDetails::SharedCtor() {
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_in_progress_) -
    reinterpret_cast<char*>(&id_)) + sizeof(operation_in_progress_));
}

CMsgBluetoothManagerDeviceDetails::~CMsgBluetoothManagerDeviceDetails() {
  // @@protoc_insertion_point(destructor:CMsgBluetoothManagerDeviceDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBluetoothManagerDeviceDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBluetoothManagerDeviceDetails::ArenaDtor(void* object) {
  CMsgBluetoothManagerDeviceDetails* _this = reinterpret_cast< CMsgBluetoothManagerDeviceDetails* >(object);
  (void)_this;
}
void CMsgBluetoothManagerDeviceDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBluetoothManagerDeviceDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBluetoothManagerDeviceDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBluetoothManagerDeviceDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_pairing_) -
        reinterpret_cast<char*>(&id_)) + sizeof(is_pairing_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&wake_allowed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_in_progress_) -
        reinterpret_cast<char*>(&wake_allowed_)) + sizeof(operation_in_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBluetoothManagerDeviceDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 adapter_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_adapter_id(&has_bits);
          adapter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBluetoothDeviceType_IsValid(val))) {
            _internal_set_etype(static_cast<::EBluetoothDeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBluetoothManagerDeviceDetails.mac");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBluetoothManagerDeviceDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_connected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_connected(&has_bits);
          is_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_paired = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_paired(&has_bits);
          is_paired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pairing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_pairing(&has_bits);
          is_pairing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wake_allowed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wake_allowed(&has_bits);
          wake_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wake_allowed_supported = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_wake_allowed_supported(&has_bits);
          wake_allowed_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_percent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_battery_percent(&has_bits);
          battery_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool operation_in_progress = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_operation_in_progress(&has_bits);
          operation_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBluetoothManagerDeviceDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBluetoothManagerDeviceDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 adapter_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_adapter_id(), target);
  }

  // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_etype(), target);
  }

  // optional string mac = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBluetoothManagerDeviceDetails.mac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBluetoothManagerDeviceDetails.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional bool is_connected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_connected(), target);
  }

  // optional bool is_paired = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_paired(), target);
  }

  // optional bool is_pairing = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_pairing(), target);
  }

  // optional bool wake_allowed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_wake_allowed(), target);
  }

  // optional bool wake_allowed_supported = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_wake_allowed_supported(), target);
  }

  // optional int32 battery_percent = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_battery_percent(), target);
  }

  // optional bool operation_in_progress = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_operation_in_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBluetoothManagerDeviceDetails)
  return target;
}

size_t CMsgBluetoothManagerDeviceDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBluetoothManagerDeviceDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mac = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mac());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 adapter_id = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_adapter_id());
    }

    // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
    }

    // optional bool is_connected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_paired = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_pairing = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool wake_allowed = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 battery_percent = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_battery_percent());
    }

    // optional bool wake_allowed_supported = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool operation_in_progress = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBluetoothManagerDeviceDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBluetoothManagerDeviceDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBluetoothManagerDeviceDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBluetoothManagerDeviceDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBluetoothManagerDeviceDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBluetoothManagerDeviceDetails)
    MergeFrom(*source);
  }
}

void CMsgBluetoothManagerDeviceDetails::MergeFrom(const CMsgBluetoothManagerDeviceDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBluetoothManagerDeviceDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mac(from._internal_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      adapter_id_ = from.adapter_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      etype_ = from.etype_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_connected_ = from.is_connected_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_paired_ = from.is_paired_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_pairing_ = from.is_pairing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      wake_allowed_ = from.wake_allowed_;
    }
    if (cached_has_bits & 0x00000200u) {
      battery_percent_ = from.battery_percent_;
    }
    if (cached_has_bits & 0x00000400u) {
      wake_allowed_supported_ = from.wake_allowed_supported_;
    }
    if (cached_has_bits & 0x00000800u) {
      operation_in_progress_ = from.operation_in_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBluetoothManagerDeviceDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBluetoothManagerDeviceDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBluetoothManagerDeviceDetails::CopyFrom(const CMsgBluetoothManagerDeviceDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBluetoothManagerDeviceDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBluetoothManagerDeviceDetails::IsInitialized() const {
  return true;
}

void CMsgBluetoothManagerDeviceDetails::InternalSwap(CMsgBluetoothManagerDeviceDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerDeviceDetails, operation_in_progress_)
      + sizeof(CMsgBluetoothManagerDeviceDetails::operation_in_progress_)
      - PROTOBUF_FIELD_OFFSET(CMsgBluetoothManagerDeviceDetails, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBluetoothManagerDeviceDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_GetDeviceDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_GetDeviceDetails_Response>()._has_bits_);
  static const ::CMsgBluetoothManagerDeviceDetails& device(const CBluetoothManager_GetDeviceDetails_Response* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBluetoothManagerDeviceDetails&
CBluetoothManager_GetDeviceDetails_Response::_Internal::device(const CBluetoothManager_GetDeviceDetails_Response* msg) {
  return *msg->device_;
}
CBluetoothManager_GetDeviceDetails_Response::CBluetoothManager_GetDeviceDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_GetDeviceDetails_Response)
}
CBluetoothManager_GetDeviceDetails_Response::CBluetoothManager_GetDeviceDetails_Response(const CBluetoothManager_GetDeviceDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::CMsgBluetoothManagerDeviceDetails(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_GetDeviceDetails_Response)
}

void CBluetoothManager_GetDeviceDetails_Response::SharedCtor() {
device_ = nullptr;
}

CBluetoothManager_GetDeviceDetails_Response::~CBluetoothManager_GetDeviceDetails_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_GetDeviceDetails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_GetDeviceDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void CBluetoothManager_GetDeviceDetails_Response::ArenaDtor(void* object) {
  CBluetoothManager_GetDeviceDetails_Response* _this = reinterpret_cast< CBluetoothManager_GetDeviceDetails_Response* >(object);
  (void)_this;
}
void CBluetoothManager_GetDeviceDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_GetDeviceDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_GetDeviceDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_GetDeviceDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(device_ != nullptr);
    device_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_GetDeviceDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgBluetoothManagerDeviceDetails device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_GetDeviceDetails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_GetDeviceDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgBluetoothManagerDeviceDetails device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_GetDeviceDetails_Response)
  return target;
}

size_t CBluetoothManager_GetDeviceDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_GetDeviceDetails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgBluetoothManagerDeviceDetails device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_GetDeviceDetails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_GetDeviceDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_GetDeviceDetails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_GetDeviceDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_GetDeviceDetails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_GetDeviceDetails_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_GetDeviceDetails_Response::MergeFrom(const CBluetoothManager_GetDeviceDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_GetDeviceDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::CMsgBluetoothManagerDeviceDetails::MergeFrom(from._internal_device());
  }
}

void CBluetoothManager_GetDeviceDetails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_GetDeviceDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_GetDeviceDetails_Response::CopyFrom(const CBluetoothManager_GetDeviceDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_GetDeviceDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_GetDeviceDetails_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_GetDeviceDetails_Response::InternalSwap(CBluetoothManager_GetDeviceDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_GetDeviceDetails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_StateChanged_Notification::_Internal {
 public:
};

CBluetoothManager_StateChanged_Notification::CBluetoothManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_StateChanged_Notification)
}
CBluetoothManager_StateChanged_Notification::CBluetoothManager_StateChanged_Notification(const CBluetoothManager_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_StateChanged_Notification)
}

void CBluetoothManager_StateChanged_Notification::SharedCtor() {
}

CBluetoothManager_StateChanged_Notification::~CBluetoothManager_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_StateChanged_Notification::ArenaDtor(void* object) {
  CBluetoothManager_StateChanged_Notification* _this = reinterpret_cast< CBluetoothManager_StateChanged_Notification* >(object);
  (void)_this;
}
void CBluetoothManager_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_StateChanged_Notification)
  return target;
}

size_t CBluetoothManager_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CBluetoothManager_StateChanged_Notification::MergeFrom(const CBluetoothManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_StateChanged_Notification::CopyFrom(const CBluetoothManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CBluetoothManager_StateChanged_Notification::InternalSwap(CBluetoothManager_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_SetDiscovering_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_SetDiscovering_Request>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_SetDiscovering_Request::CBluetoothManager_SetDiscovering_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_SetDiscovering_Request)
}
CBluetoothManager_SetDiscovering_Request::CBluetoothManager_SetDiscovering_Request(const CBluetoothManager_SetDiscovering_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_SetDiscovering_Request)
}

void CBluetoothManager_SetDiscovering_Request::SharedCtor() {
enabled_ = false;
}

CBluetoothManager_SetDiscovering_Request::~CBluetoothManager_SetDiscovering_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_SetDiscovering_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_SetDiscovering_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_SetDiscovering_Request::ArenaDtor(void* object) {
  CBluetoothManager_SetDiscovering_Request* _this = reinterpret_cast< CBluetoothManager_SetDiscovering_Request* >(object);
  (void)_this;
}
void CBluetoothManager_SetDiscovering_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_SetDiscovering_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_SetDiscovering_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_SetDiscovering_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_SetDiscovering_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_SetDiscovering_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_SetDiscovering_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_SetDiscovering_Request)
  return target;
}

size_t CBluetoothManager_SetDiscovering_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_SetDiscovering_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_SetDiscovering_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_SetDiscovering_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_SetDiscovering_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_SetDiscovering_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_SetDiscovering_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_SetDiscovering_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_SetDiscovering_Request::MergeFrom(const CBluetoothManager_SetDiscovering_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_SetDiscovering_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CBluetoothManager_SetDiscovering_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_SetDiscovering_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_SetDiscovering_Request::CopyFrom(const CBluetoothManager_SetDiscovering_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_SetDiscovering_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_SetDiscovering_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_SetDiscovering_Request::InternalSwap(CBluetoothManager_SetDiscovering_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_SetDiscovering_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_SetDiscovering_Response::_Internal {
 public:
};

CBluetoothManager_SetDiscovering_Response::CBluetoothManager_SetDiscovering_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_SetDiscovering_Response)
}
CBluetoothManager_SetDiscovering_Response::CBluetoothManager_SetDiscovering_Response(const CBluetoothManager_SetDiscovering_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_SetDiscovering_Response)
}

void CBluetoothManager_SetDiscovering_Response::SharedCtor() {
}

CBluetoothManager_SetDiscovering_Response::~CBluetoothManager_SetDiscovering_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_SetDiscovering_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_SetDiscovering_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_SetDiscovering_Response::ArenaDtor(void* object) {
  CBluetoothManager_SetDiscovering_Response* _this = reinterpret_cast< CBluetoothManager_SetDiscovering_Response* >(object);
  (void)_this;
}
void CBluetoothManager_SetDiscovering_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_SetDiscovering_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_SetDiscovering_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_SetDiscovering_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_SetDiscovering_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_SetDiscovering_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_SetDiscovering_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_SetDiscovering_Response)
  return target;
}

size_t CBluetoothManager_SetDiscovering_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_SetDiscovering_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_SetDiscovering_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_SetDiscovering_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_SetDiscovering_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_SetDiscovering_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_SetDiscovering_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_SetDiscovering_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_SetDiscovering_Response::MergeFrom(const CBluetoothManager_SetDiscovering_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_SetDiscovering_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_SetDiscovering_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_SetDiscovering_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_SetDiscovering_Response::CopyFrom(const CBluetoothManager_SetDiscovering_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_SetDiscovering_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_SetDiscovering_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_SetDiscovering_Response::InternalSwap(CBluetoothManager_SetDiscovering_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_SetDiscovering_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Pair_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_Pair_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_Pair_Request::CBluetoothManager_Pair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Pair_Request)
}
CBluetoothManager_Pair_Request::CBluetoothManager_Pair_Request(const CBluetoothManager_Pair_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Pair_Request)
}

void CBluetoothManager_Pair_Request::SharedCtor() {
device_ = 0u;
}

CBluetoothManager_Pair_Request::~CBluetoothManager_Pair_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Pair_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Pair_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Pair_Request::ArenaDtor(void* object) {
  CBluetoothManager_Pair_Request* _this = reinterpret_cast< CBluetoothManager_Pair_Request* >(object);
  (void)_this;
}
void CBluetoothManager_Pair_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Pair_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Pair_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Pair_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Pair_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Pair_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Pair_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Pair_Request)
  return target;
}

size_t CBluetoothManager_Pair_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Pair_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Pair_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Pair_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Pair_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Pair_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Pair_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Pair_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Pair_Request::MergeFrom(const CBluetoothManager_Pair_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Pair_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
}

void CBluetoothManager_Pair_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Pair_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Pair_Request::CopyFrom(const CBluetoothManager_Pair_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Pair_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Pair_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_Pair_Request::InternalSwap(CBluetoothManager_Pair_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Pair_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Pair_Response::_Internal {
 public:
};

CBluetoothManager_Pair_Response::CBluetoothManager_Pair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Pair_Response)
}
CBluetoothManager_Pair_Response::CBluetoothManager_Pair_Response(const CBluetoothManager_Pair_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Pair_Response)
}

void CBluetoothManager_Pair_Response::SharedCtor() {
}

CBluetoothManager_Pair_Response::~CBluetoothManager_Pair_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Pair_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Pair_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Pair_Response::ArenaDtor(void* object) {
  CBluetoothManager_Pair_Response* _this = reinterpret_cast< CBluetoothManager_Pair_Response* >(object);
  (void)_this;
}
void CBluetoothManager_Pair_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Pair_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Pair_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Pair_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Pair_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Pair_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Pair_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Pair_Response)
  return target;
}

size_t CBluetoothManager_Pair_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Pair_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Pair_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Pair_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Pair_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Pair_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Pair_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Pair_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Pair_Response::MergeFrom(const CBluetoothManager_Pair_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Pair_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_Pair_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Pair_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Pair_Response::CopyFrom(const CBluetoothManager_Pair_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Pair_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Pair_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_Pair_Response::InternalSwap(CBluetoothManager_Pair_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Pair_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_CancelPair_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_CancelPair_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_CancelPair_Request::CBluetoothManager_CancelPair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_CancelPair_Request)
}
CBluetoothManager_CancelPair_Request::CBluetoothManager_CancelPair_Request(const CBluetoothManager_CancelPair_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_CancelPair_Request)
}

void CBluetoothManager_CancelPair_Request::SharedCtor() {
device_ = 0u;
}

CBluetoothManager_CancelPair_Request::~CBluetoothManager_CancelPair_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_CancelPair_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_CancelPair_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_CancelPair_Request::ArenaDtor(void* object) {
  CBluetoothManager_CancelPair_Request* _this = reinterpret_cast< CBluetoothManager_CancelPair_Request* >(object);
  (void)_this;
}
void CBluetoothManager_CancelPair_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_CancelPair_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_CancelPair_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_CancelPair_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_CancelPair_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_CancelPair_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_CancelPair_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_CancelPair_Request)
  return target;
}

size_t CBluetoothManager_CancelPair_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_CancelPair_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_CancelPair_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_CancelPair_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_CancelPair_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_CancelPair_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_CancelPair_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_CancelPair_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_CancelPair_Request::MergeFrom(const CBluetoothManager_CancelPair_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_CancelPair_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
}

void CBluetoothManager_CancelPair_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_CancelPair_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_CancelPair_Request::CopyFrom(const CBluetoothManager_CancelPair_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_CancelPair_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_CancelPair_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_CancelPair_Request::InternalSwap(CBluetoothManager_CancelPair_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_CancelPair_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_CancelPair_Response::_Internal {
 public:
};

CBluetoothManager_CancelPair_Response::CBluetoothManager_CancelPair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_CancelPair_Response)
}
CBluetoothManager_CancelPair_Response::CBluetoothManager_CancelPair_Response(const CBluetoothManager_CancelPair_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_CancelPair_Response)
}

void CBluetoothManager_CancelPair_Response::SharedCtor() {
}

CBluetoothManager_CancelPair_Response::~CBluetoothManager_CancelPair_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_CancelPair_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_CancelPair_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_CancelPair_Response::ArenaDtor(void* object) {
  CBluetoothManager_CancelPair_Response* _this = reinterpret_cast< CBluetoothManager_CancelPair_Response* >(object);
  (void)_this;
}
void CBluetoothManager_CancelPair_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_CancelPair_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_CancelPair_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_CancelPair_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_CancelPair_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_CancelPair_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_CancelPair_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_CancelPair_Response)
  return target;
}

size_t CBluetoothManager_CancelPair_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_CancelPair_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_CancelPair_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_CancelPair_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_CancelPair_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_CancelPair_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_CancelPair_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_CancelPair_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_CancelPair_Response::MergeFrom(const CBluetoothManager_CancelPair_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_CancelPair_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_CancelPair_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_CancelPair_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_CancelPair_Response::CopyFrom(const CBluetoothManager_CancelPair_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_CancelPair_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_CancelPair_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_CancelPair_Response::InternalSwap(CBluetoothManager_CancelPair_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_CancelPair_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Forget_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_Forget_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_Forget_Request::CBluetoothManager_Forget_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Forget_Request)
}
CBluetoothManager_Forget_Request::CBluetoothManager_Forget_Request(const CBluetoothManager_Forget_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Forget_Request)
}

void CBluetoothManager_Forget_Request::SharedCtor() {
device_ = 0u;
}

CBluetoothManager_Forget_Request::~CBluetoothManager_Forget_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Forget_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Forget_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Forget_Request::ArenaDtor(void* object) {
  CBluetoothManager_Forget_Request* _this = reinterpret_cast< CBluetoothManager_Forget_Request* >(object);
  (void)_this;
}
void CBluetoothManager_Forget_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Forget_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Forget_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Forget_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Forget_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Forget_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Forget_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Forget_Request)
  return target;
}

size_t CBluetoothManager_Forget_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Forget_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Forget_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Forget_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Forget_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Forget_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Forget_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Forget_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Forget_Request::MergeFrom(const CBluetoothManager_Forget_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Forget_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
}

void CBluetoothManager_Forget_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Forget_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Forget_Request::CopyFrom(const CBluetoothManager_Forget_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Forget_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Forget_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_Forget_Request::InternalSwap(CBluetoothManager_Forget_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Forget_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Forget_Response::_Internal {
 public:
};

CBluetoothManager_Forget_Response::CBluetoothManager_Forget_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Forget_Response)
}
CBluetoothManager_Forget_Response::CBluetoothManager_Forget_Response(const CBluetoothManager_Forget_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Forget_Response)
}

void CBluetoothManager_Forget_Response::SharedCtor() {
}

CBluetoothManager_Forget_Response::~CBluetoothManager_Forget_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Forget_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Forget_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Forget_Response::ArenaDtor(void* object) {
  CBluetoothManager_Forget_Response* _this = reinterpret_cast< CBluetoothManager_Forget_Response* >(object);
  (void)_this;
}
void CBluetoothManager_Forget_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Forget_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Forget_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Forget_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Forget_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Forget_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Forget_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Forget_Response)
  return target;
}

size_t CBluetoothManager_Forget_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Forget_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Forget_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Forget_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Forget_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Forget_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Forget_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Forget_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Forget_Response::MergeFrom(const CBluetoothManager_Forget_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Forget_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_Forget_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Forget_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Forget_Response::CopyFrom(const CBluetoothManager_Forget_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Forget_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Forget_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_Forget_Response::InternalSwap(CBluetoothManager_Forget_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Forget_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Connect_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_Connect_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_Connect_Request::CBluetoothManager_Connect_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Connect_Request)
}
CBluetoothManager_Connect_Request::CBluetoothManager_Connect_Request(const CBluetoothManager_Connect_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Connect_Request)
}

void CBluetoothManager_Connect_Request::SharedCtor() {
device_ = 0u;
}

CBluetoothManager_Connect_Request::~CBluetoothManager_Connect_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Connect_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Connect_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Connect_Request::ArenaDtor(void* object) {
  CBluetoothManager_Connect_Request* _this = reinterpret_cast< CBluetoothManager_Connect_Request* >(object);
  (void)_this;
}
void CBluetoothManager_Connect_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Connect_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Connect_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Connect_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Connect_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Connect_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Connect_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Connect_Request)
  return target;
}

size_t CBluetoothManager_Connect_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Connect_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Connect_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Connect_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Connect_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Connect_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Connect_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Connect_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Connect_Request::MergeFrom(const CBluetoothManager_Connect_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Connect_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
}

void CBluetoothManager_Connect_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Connect_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Connect_Request::CopyFrom(const CBluetoothManager_Connect_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Connect_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Connect_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_Connect_Request::InternalSwap(CBluetoothManager_Connect_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Connect_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Connect_Response::_Internal {
 public:
};

CBluetoothManager_Connect_Response::CBluetoothManager_Connect_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Connect_Response)
}
CBluetoothManager_Connect_Response::CBluetoothManager_Connect_Response(const CBluetoothManager_Connect_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Connect_Response)
}

void CBluetoothManager_Connect_Response::SharedCtor() {
}

CBluetoothManager_Connect_Response::~CBluetoothManager_Connect_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Connect_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Connect_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Connect_Response::ArenaDtor(void* object) {
  CBluetoothManager_Connect_Response* _this = reinterpret_cast< CBluetoothManager_Connect_Response* >(object);
  (void)_this;
}
void CBluetoothManager_Connect_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Connect_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Connect_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Connect_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Connect_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Connect_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Connect_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Connect_Response)
  return target;
}

size_t CBluetoothManager_Connect_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Connect_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Connect_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Connect_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Connect_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Connect_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Connect_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Connect_Response::MergeFrom(const CBluetoothManager_Connect_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_Connect_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Connect_Response::CopyFrom(const CBluetoothManager_Connect_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Connect_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_Connect_Response::InternalSwap(CBluetoothManager_Connect_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Connect_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Disconnect_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_Disconnect_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBluetoothManager_Disconnect_Request::CBluetoothManager_Disconnect_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Disconnect_Request)
}
CBluetoothManager_Disconnect_Request::CBluetoothManager_Disconnect_Request(const CBluetoothManager_Disconnect_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Disconnect_Request)
}

void CBluetoothManager_Disconnect_Request::SharedCtor() {
device_ = 0u;
}

CBluetoothManager_Disconnect_Request::~CBluetoothManager_Disconnect_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Disconnect_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Disconnect_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Disconnect_Request::ArenaDtor(void* object) {
  CBluetoothManager_Disconnect_Request* _this = reinterpret_cast< CBluetoothManager_Disconnect_Request* >(object);
  (void)_this;
}
void CBluetoothManager_Disconnect_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Disconnect_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Disconnect_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Disconnect_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Disconnect_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Disconnect_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Disconnect_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Disconnect_Request)
  return target;
}

size_t CBluetoothManager_Disconnect_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Disconnect_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Disconnect_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Disconnect_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Disconnect_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Disconnect_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Disconnect_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Disconnect_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Disconnect_Request::MergeFrom(const CBluetoothManager_Disconnect_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Disconnect_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
}

void CBluetoothManager_Disconnect_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Disconnect_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Disconnect_Request::CopyFrom(const CBluetoothManager_Disconnect_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Disconnect_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Disconnect_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_Disconnect_Request::InternalSwap(CBluetoothManager_Disconnect_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Disconnect_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_Disconnect_Response::_Internal {
 public:
};

CBluetoothManager_Disconnect_Response::CBluetoothManager_Disconnect_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_Disconnect_Response)
}
CBluetoothManager_Disconnect_Response::CBluetoothManager_Disconnect_Response(const CBluetoothManager_Disconnect_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_Disconnect_Response)
}

void CBluetoothManager_Disconnect_Response::SharedCtor() {
}

CBluetoothManager_Disconnect_Response::~CBluetoothManager_Disconnect_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_Disconnect_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_Disconnect_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_Disconnect_Response::ArenaDtor(void* object) {
  CBluetoothManager_Disconnect_Response* _this = reinterpret_cast< CBluetoothManager_Disconnect_Response* >(object);
  (void)_this;
}
void CBluetoothManager_Disconnect_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_Disconnect_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_Disconnect_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_Disconnect_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_Disconnect_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_Disconnect_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_Disconnect_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_Disconnect_Response)
  return target;
}

size_t CBluetoothManager_Disconnect_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_Disconnect_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_Disconnect_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_Disconnect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_Disconnect_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_Disconnect_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_Disconnect_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_Disconnect_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_Disconnect_Response::MergeFrom(const CBluetoothManager_Disconnect_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_Disconnect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_Disconnect_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_Disconnect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_Disconnect_Response::CopyFrom(const CBluetoothManager_Disconnect_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_Disconnect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_Disconnect_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_Disconnect_Response::InternalSwap(CBluetoothManager_Disconnect_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_Disconnect_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_SetWakeAllowed_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBluetoothManager_SetWakeAllowed_Request>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBluetoothManager_SetWakeAllowed_Request::CBluetoothManager_SetWakeAllowed_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_SetWakeAllowed_Request)
}
CBluetoothManager_SetWakeAllowed_Request::CBluetoothManager_SetWakeAllowed_Request(const CBluetoothManager_SetWakeAllowed_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowed_) -
    reinterpret_cast<char*>(&device_)) + sizeof(allowed_));
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_SetWakeAllowed_Request)
}

void CBluetoothManager_SetWakeAllowed_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allowed_) -
    reinterpret_cast<char*>(&device_)) + sizeof(allowed_));
}

CBluetoothManager_SetWakeAllowed_Request::~CBluetoothManager_SetWakeAllowed_Request() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_SetWakeAllowed_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_SetWakeAllowed_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_SetWakeAllowed_Request::ArenaDtor(void* object) {
  CBluetoothManager_SetWakeAllowed_Request* _this = reinterpret_cast< CBluetoothManager_SetWakeAllowed_Request* >(object);
  (void)_this;
}
void CBluetoothManager_SetWakeAllowed_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_SetWakeAllowed_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_SetWakeAllowed_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_SetWakeAllowed_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowed_) -
        reinterpret_cast<char*>(&device_)) + sizeof(allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_SetWakeAllowed_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allowed(&has_bits);
          allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_SetWakeAllowed_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_SetWakeAllowed_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional bool allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_SetWakeAllowed_Request)
  return target;
}

size_t CBluetoothManager_SetWakeAllowed_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_SetWakeAllowed_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_device());
    }

    // optional bool allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_SetWakeAllowed_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_SetWakeAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_SetWakeAllowed_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_SetWakeAllowed_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_SetWakeAllowed_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_SetWakeAllowed_Request)
    MergeFrom(*source);
  }
}

void CBluetoothManager_SetWakeAllowed_Request::MergeFrom(const CBluetoothManager_SetWakeAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_SetWakeAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_ = from.allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBluetoothManager_SetWakeAllowed_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_SetWakeAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_SetWakeAllowed_Request::CopyFrom(const CBluetoothManager_SetWakeAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_SetWakeAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_SetWakeAllowed_Request::IsInitialized() const {
  return true;
}

void CBluetoothManager_SetWakeAllowed_Request::InternalSwap(CBluetoothManager_SetWakeAllowed_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBluetoothManager_SetWakeAllowed_Request, allowed_)
      + sizeof(CBluetoothManager_SetWakeAllowed_Request::allowed_)
      - PROTOBUF_FIELD_OFFSET(CBluetoothManager_SetWakeAllowed_Request, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_SetWakeAllowed_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBluetoothManager_SetWakeAllowed_Response::_Internal {
 public:
};

CBluetoothManager_SetWakeAllowed_Response::CBluetoothManager_SetWakeAllowed_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBluetoothManager_SetWakeAllowed_Response)
}
CBluetoothManager_SetWakeAllowed_Response::CBluetoothManager_SetWakeAllowed_Response(const CBluetoothManager_SetWakeAllowed_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBluetoothManager_SetWakeAllowed_Response)
}

void CBluetoothManager_SetWakeAllowed_Response::SharedCtor() {
}

CBluetoothManager_SetWakeAllowed_Response::~CBluetoothManager_SetWakeAllowed_Response() {
  // @@protoc_insertion_point(destructor:CBluetoothManager_SetWakeAllowed_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBluetoothManager_SetWakeAllowed_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CBluetoothManager_SetWakeAllowed_Response::ArenaDtor(void* object) {
  CBluetoothManager_SetWakeAllowed_Response* _this = reinterpret_cast< CBluetoothManager_SetWakeAllowed_Response* >(object);
  (void)_this;
}
void CBluetoothManager_SetWakeAllowed_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBluetoothManager_SetWakeAllowed_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBluetoothManager_SetWakeAllowed_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBluetoothManager_SetWakeAllowed_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBluetoothManager_SetWakeAllowed_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBluetoothManager_SetWakeAllowed_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBluetoothManager_SetWakeAllowed_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBluetoothManager_SetWakeAllowed_Response)
  return target;
}

size_t CBluetoothManager_SetWakeAllowed_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBluetoothManager_SetWakeAllowed_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBluetoothManager_SetWakeAllowed_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBluetoothManager_SetWakeAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBluetoothManager_SetWakeAllowed_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBluetoothManager_SetWakeAllowed_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBluetoothManager_SetWakeAllowed_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBluetoothManager_SetWakeAllowed_Response)
    MergeFrom(*source);
  }
}

void CBluetoothManager_SetWakeAllowed_Response::MergeFrom(const CBluetoothManager_SetWakeAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBluetoothManager_SetWakeAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBluetoothManager_SetWakeAllowed_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBluetoothManager_SetWakeAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBluetoothManager_SetWakeAllowed_Response::CopyFrom(const CBluetoothManager_SetWakeAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBluetoothManager_SetWakeAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBluetoothManager_SetWakeAllowed_Response::IsInitialized() const {
  return true;
}

void CBluetoothManager_SetWakeAllowed_Response::InternalSwap(CBluetoothManager_SetWakeAllowed_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBluetoothManager_SetWakeAllowed_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BluetoothManager::~BluetoothManager() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* BluetoothManager::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fbluetooth_2eproto);
  return file_level_service_descriptors_webuimessages_5fbluetooth_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* BluetoothManager::GetDescriptor() {
  return descriptor();
}

void BluetoothManager::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_GetState_Request*,
                         ::CBluetoothManager_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void BluetoothManager::GetAdapterDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_GetAdapterDetails_Request*,
                         ::CBluetoothManager_GetAdapterDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAdapterDetails() not implemented.");
  done->Run();
}

void BluetoothManager::GetDeviceDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_GetDeviceDetails_Request*,
                         ::CBluetoothManager_GetDeviceDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDeviceDetails() not implemented.");
  done->Run();
}

void BluetoothManager::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void BluetoothManager::SetDiscovering(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_SetDiscovering_Request*,
                         ::CBluetoothManager_SetDiscovering_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetDiscovering() not implemented.");
  done->Run();
}

void BluetoothManager::Pair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_Pair_Request*,
                         ::CBluetoothManager_Pair_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Pair() not implemented.");
  done->Run();
}

void BluetoothManager::CancelPair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_CancelPair_Request*,
                         ::CBluetoothManager_CancelPair_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelPair() not implemented.");
  done->Run();
}

void BluetoothManager::Forget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_Forget_Request*,
                         ::CBluetoothManager_Forget_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Forget() not implemented.");
  done->Run();
}

void BluetoothManager::Connect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_Connect_Request*,
                         ::CBluetoothManager_Connect_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Connect() not implemented.");
  done->Run();
}

void BluetoothManager::Disconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_Disconnect_Request*,
                         ::CBluetoothManager_Disconnect_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Disconnect() not implemented.");
  done->Run();
}

void BluetoothManager::SetWakeAllowed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBluetoothManager_SetWakeAllowed_Request*,
                         ::CBluetoothManager_SetWakeAllowed_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetWakeAllowed() not implemented.");
  done->Run();
}

void BluetoothManager::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fbluetooth_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_GetState_Response*>(
                 response),
             done);
      break;
    case 1:
      GetAdapterDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_GetAdapterDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_GetAdapterDetails_Response*>(
                 response),
             done);
      break;
    case 2:
      GetDeviceDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_GetDeviceDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_GetDeviceDetails_Response*>(
                 response),
             done);
      break;
    case 3:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 4:
      SetDiscovering(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_SetDiscovering_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_SetDiscovering_Response*>(
                 response),
             done);
      break;
    case 5:
      Pair(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_Pair_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_Pair_Response*>(
                 response),
             done);
      break;
    case 6:
      CancelPair(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_CancelPair_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_CancelPair_Response*>(
                 response),
             done);
      break;
    case 7:
      Forget(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_Forget_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_Forget_Response*>(
                 response),
             done);
      break;
    case 8:
      Connect(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_Connect_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_Connect_Response*>(
                 response),
             done);
      break;
    case 9:
      Disconnect(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_Disconnect_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_Disconnect_Response*>(
                 response),
             done);
      break;
    case 10:
      SetWakeAllowed(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBluetoothManager_SetWakeAllowed_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBluetoothManager_SetWakeAllowed_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& BluetoothManager::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBluetoothManager_GetState_Request::default_instance();
    case 1:
      return ::CBluetoothManager_GetAdapterDetails_Request::default_instance();
    case 2:
      return ::CBluetoothManager_GetDeviceDetails_Request::default_instance();
    case 3:
      return ::CBluetoothManager_StateChanged_Notification::default_instance();
    case 4:
      return ::CBluetoothManager_SetDiscovering_Request::default_instance();
    case 5:
      return ::CBluetoothManager_Pair_Request::default_instance();
    case 6:
      return ::CBluetoothManager_CancelPair_Request::default_instance();
    case 7:
      return ::CBluetoothManager_Forget_Request::default_instance();
    case 8:
      return ::CBluetoothManager_Connect_Request::default_instance();
    case 9:
      return ::CBluetoothManager_Disconnect_Request::default_instance();
    case 10:
      return ::CBluetoothManager_SetWakeAllowed_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& BluetoothManager::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBluetoothManager_GetState_Response::default_instance();
    case 1:
      return ::CBluetoothManager_GetAdapterDetails_Response::default_instance();
    case 2:
      return ::CBluetoothManager_GetDeviceDetails_Response::default_instance();
    case 3:
      return ::WebUINoResponse::default_instance();
    case 4:
      return ::CBluetoothManager_SetDiscovering_Response::default_instance();
    case 5:
      return ::CBluetoothManager_Pair_Response::default_instance();
    case 6:
      return ::CBluetoothManager_CancelPair_Response::default_instance();
    case 7:
      return ::CBluetoothManager_Forget_Response::default_instance();
    case 8:
      return ::CBluetoothManager_Connect_Response::default_instance();
    case 9:
      return ::CBluetoothManager_Disconnect_Response::default_instance();
    case 10:
      return ::CBluetoothManager_SetWakeAllowed_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BluetoothManager_Stub::BluetoothManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BluetoothManager_Stub::BluetoothManager_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
BluetoothManager_Stub::~BluetoothManager_Stub() {
  if (owns_channel_) delete channel_;
}

void BluetoothManager_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_GetState_Request* request,
                              ::CBluetoothManager_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BluetoothManager_Stub::GetAdapterDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_GetAdapterDetails_Request* request,
                              ::CBluetoothManager_GetAdapterDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BluetoothManager_Stub::GetDeviceDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_GetDeviceDetails_Request* request,
                              ::CBluetoothManager_GetDeviceDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BluetoothManager_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BluetoothManager_Stub::SetDiscovering(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_SetDiscovering_Request* request,
                              ::CBluetoothManager_SetDiscovering_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BluetoothManager_Stub::Pair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_Pair_Request* request,
                              ::CBluetoothManager_Pair_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void BluetoothManager_Stub::CancelPair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_CancelPair_Request* request,
                              ::CBluetoothManager_CancelPair_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void BluetoothManager_Stub::Forget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_Forget_Request* request,
                              ::CBluetoothManager_Forget_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void BluetoothManager_Stub::Connect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_Connect_Request* request,
                              ::CBluetoothManager_Connect_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void BluetoothManager_Stub::Disconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_Disconnect_Request* request,
                              ::CBluetoothManager_Disconnect_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void BluetoothManager_Stub::SetWakeAllowed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBluetoothManager_SetWakeAllowed_Request* request,
                              ::CBluetoothManager_SetWakeAllowed_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetState_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBluetoothManagerAdapterInfo* Arena::CreateMaybeMessage< ::CMsgBluetoothManagerAdapterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBluetoothManagerAdapterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBluetoothManagerDeviceInfo* Arena::CreateMaybeMessage< ::CMsgBluetoothManagerDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBluetoothManagerDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetState_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetAdapterDetails_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_GetAdapterDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetAdapterDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBluetoothManagerAdapterDetails* Arena::CreateMaybeMessage< ::CMsgBluetoothManagerAdapterDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBluetoothManagerAdapterDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetAdapterDetails_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_GetAdapterDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetAdapterDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetDeviceDetails_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_GetDeviceDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetDeviceDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBluetoothManagerDeviceDetails* Arena::CreateMaybeMessage< ::CMsgBluetoothManagerDeviceDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBluetoothManagerDeviceDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_GetDeviceDetails_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_GetDeviceDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_GetDeviceDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_StateChanged_Notification* Arena::CreateMaybeMessage< ::CBluetoothManager_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_SetDiscovering_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_SetDiscovering_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_SetDiscovering_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_SetDiscovering_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_SetDiscovering_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_SetDiscovering_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Pair_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_Pair_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Pair_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Pair_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_Pair_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Pair_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_CancelPair_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_CancelPair_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_CancelPair_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_CancelPair_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_CancelPair_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_CancelPair_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Forget_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_Forget_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Forget_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Forget_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_Forget_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Forget_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Connect_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_Connect_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Connect_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Connect_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_Connect_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Connect_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Disconnect_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_Disconnect_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Disconnect_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_Disconnect_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_Disconnect_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_Disconnect_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_SetWakeAllowed_Request* Arena::CreateMaybeMessage< ::CBluetoothManager_SetWakeAllowed_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_SetWakeAllowed_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBluetoothManager_SetWakeAllowed_Response* Arena::CreateMaybeMessage< ::CBluetoothManager_SetWakeAllowed_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBluetoothManager_SetWakeAllowed_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
