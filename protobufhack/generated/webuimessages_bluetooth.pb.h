// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_bluetooth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fbluetooth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fbluetooth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fbluetooth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fbluetooth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fbluetooth_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(int index);
class CBluetoothManager_CancelPair_Request;
struct CBluetoothManager_CancelPair_RequestDefaultTypeInternal;
extern CBluetoothManager_CancelPair_RequestDefaultTypeInternal _CBluetoothManager_CancelPair_Request_default_instance_;
class CBluetoothManager_CancelPair_Response;
struct CBluetoothManager_CancelPair_ResponseDefaultTypeInternal;
extern CBluetoothManager_CancelPair_ResponseDefaultTypeInternal _CBluetoothManager_CancelPair_Response_default_instance_;
class CBluetoothManager_Connect_Request;
struct CBluetoothManager_Connect_RequestDefaultTypeInternal;
extern CBluetoothManager_Connect_RequestDefaultTypeInternal _CBluetoothManager_Connect_Request_default_instance_;
class CBluetoothManager_Connect_Response;
struct CBluetoothManager_Connect_ResponseDefaultTypeInternal;
extern CBluetoothManager_Connect_ResponseDefaultTypeInternal _CBluetoothManager_Connect_Response_default_instance_;
class CBluetoothManager_Disconnect_Request;
struct CBluetoothManager_Disconnect_RequestDefaultTypeInternal;
extern CBluetoothManager_Disconnect_RequestDefaultTypeInternal _CBluetoothManager_Disconnect_Request_default_instance_;
class CBluetoothManager_Disconnect_Response;
struct CBluetoothManager_Disconnect_ResponseDefaultTypeInternal;
extern CBluetoothManager_Disconnect_ResponseDefaultTypeInternal _CBluetoothManager_Disconnect_Response_default_instance_;
class CBluetoothManager_Forget_Request;
struct CBluetoothManager_Forget_RequestDefaultTypeInternal;
extern CBluetoothManager_Forget_RequestDefaultTypeInternal _CBluetoothManager_Forget_Request_default_instance_;
class CBluetoothManager_Forget_Response;
struct CBluetoothManager_Forget_ResponseDefaultTypeInternal;
extern CBluetoothManager_Forget_ResponseDefaultTypeInternal _CBluetoothManager_Forget_Response_default_instance_;
class CBluetoothManager_GetAdapterDetails_Request;
struct CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal;
extern CBluetoothManager_GetAdapterDetails_RequestDefaultTypeInternal _CBluetoothManager_GetAdapterDetails_Request_default_instance_;
class CBluetoothManager_GetAdapterDetails_Response;
struct CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal;
extern CBluetoothManager_GetAdapterDetails_ResponseDefaultTypeInternal _CBluetoothManager_GetAdapterDetails_Response_default_instance_;
class CBluetoothManager_GetDeviceDetails_Request;
struct CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal;
extern CBluetoothManager_GetDeviceDetails_RequestDefaultTypeInternal _CBluetoothManager_GetDeviceDetails_Request_default_instance_;
class CBluetoothManager_GetDeviceDetails_Response;
struct CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal;
extern CBluetoothManager_GetDeviceDetails_ResponseDefaultTypeInternal _CBluetoothManager_GetDeviceDetails_Response_default_instance_;
class CBluetoothManager_GetState_Request;
struct CBluetoothManager_GetState_RequestDefaultTypeInternal;
extern CBluetoothManager_GetState_RequestDefaultTypeInternal _CBluetoothManager_GetState_Request_default_instance_;
class CBluetoothManager_GetState_Response;
struct CBluetoothManager_GetState_ResponseDefaultTypeInternal;
extern CBluetoothManager_GetState_ResponseDefaultTypeInternal _CBluetoothManager_GetState_Response_default_instance_;
class CBluetoothManager_Pair_Request;
struct CBluetoothManager_Pair_RequestDefaultTypeInternal;
extern CBluetoothManager_Pair_RequestDefaultTypeInternal _CBluetoothManager_Pair_Request_default_instance_;
class CBluetoothManager_Pair_Response;
struct CBluetoothManager_Pair_ResponseDefaultTypeInternal;
extern CBluetoothManager_Pair_ResponseDefaultTypeInternal _CBluetoothManager_Pair_Response_default_instance_;
class CBluetoothManager_SetDiscovering_Request;
struct CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal;
extern CBluetoothManager_SetDiscovering_RequestDefaultTypeInternal _CBluetoothManager_SetDiscovering_Request_default_instance_;
class CBluetoothManager_SetDiscovering_Response;
struct CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal;
extern CBluetoothManager_SetDiscovering_ResponseDefaultTypeInternal _CBluetoothManager_SetDiscovering_Response_default_instance_;
class CBluetoothManager_SetWakeAllowed_Request;
struct CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal;
extern CBluetoothManager_SetWakeAllowed_RequestDefaultTypeInternal _CBluetoothManager_SetWakeAllowed_Request_default_instance_;
class CBluetoothManager_SetWakeAllowed_Response;
struct CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal;
extern CBluetoothManager_SetWakeAllowed_ResponseDefaultTypeInternal _CBluetoothManager_SetWakeAllowed_Response_default_instance_;
class CBluetoothManager_StateChanged_Notification;
struct CBluetoothManager_StateChanged_NotificationDefaultTypeInternal;
extern CBluetoothManager_StateChanged_NotificationDefaultTypeInternal _CBluetoothManager_StateChanged_Notification_default_instance_;
class CMsgBluetoothManagerAdapterDetails;
struct CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal;
extern CMsgBluetoothManagerAdapterDetailsDefaultTypeInternal _CMsgBluetoothManagerAdapterDetails_default_instance_;
class CMsgBluetoothManagerAdapterInfo;
struct CMsgBluetoothManagerAdapterInfoDefaultTypeInternal;
extern CMsgBluetoothManagerAdapterInfoDefaultTypeInternal _CMsgBluetoothManagerAdapterInfo_default_instance_;
class CMsgBluetoothManagerDeviceDetails;
struct CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal;
extern CMsgBluetoothManagerDeviceDetailsDefaultTypeInternal _CMsgBluetoothManagerDeviceDetails_default_instance_;
class CMsgBluetoothManagerDeviceInfo;
struct CMsgBluetoothManagerDeviceInfoDefaultTypeInternal;
extern CMsgBluetoothManagerDeviceInfoDefaultTypeInternal _CMsgBluetoothManagerDeviceInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBluetoothManager_CancelPair_Request* Arena::CreateMaybeMessage<::CBluetoothManager_CancelPair_Request>(Arena*);
template<> ::CBluetoothManager_CancelPair_Response* Arena::CreateMaybeMessage<::CBluetoothManager_CancelPair_Response>(Arena*);
template<> ::CBluetoothManager_Connect_Request* Arena::CreateMaybeMessage<::CBluetoothManager_Connect_Request>(Arena*);
template<> ::CBluetoothManager_Connect_Response* Arena::CreateMaybeMessage<::CBluetoothManager_Connect_Response>(Arena*);
template<> ::CBluetoothManager_Disconnect_Request* Arena::CreateMaybeMessage<::CBluetoothManager_Disconnect_Request>(Arena*);
template<> ::CBluetoothManager_Disconnect_Response* Arena::CreateMaybeMessage<::CBluetoothManager_Disconnect_Response>(Arena*);
template<> ::CBluetoothManager_Forget_Request* Arena::CreateMaybeMessage<::CBluetoothManager_Forget_Request>(Arena*);
template<> ::CBluetoothManager_Forget_Response* Arena::CreateMaybeMessage<::CBluetoothManager_Forget_Response>(Arena*);
template<> ::CBluetoothManager_GetAdapterDetails_Request* Arena::CreateMaybeMessage<::CBluetoothManager_GetAdapterDetails_Request>(Arena*);
template<> ::CBluetoothManager_GetAdapterDetails_Response* Arena::CreateMaybeMessage<::CBluetoothManager_GetAdapterDetails_Response>(Arena*);
template<> ::CBluetoothManager_GetDeviceDetails_Request* Arena::CreateMaybeMessage<::CBluetoothManager_GetDeviceDetails_Request>(Arena*);
template<> ::CBluetoothManager_GetDeviceDetails_Response* Arena::CreateMaybeMessage<::CBluetoothManager_GetDeviceDetails_Response>(Arena*);
template<> ::CBluetoothManager_GetState_Request* Arena::CreateMaybeMessage<::CBluetoothManager_GetState_Request>(Arena*);
template<> ::CBluetoothManager_GetState_Response* Arena::CreateMaybeMessage<::CBluetoothManager_GetState_Response>(Arena*);
template<> ::CBluetoothManager_Pair_Request* Arena::CreateMaybeMessage<::CBluetoothManager_Pair_Request>(Arena*);
template<> ::CBluetoothManager_Pair_Response* Arena::CreateMaybeMessage<::CBluetoothManager_Pair_Response>(Arena*);
template<> ::CBluetoothManager_SetDiscovering_Request* Arena::CreateMaybeMessage<::CBluetoothManager_SetDiscovering_Request>(Arena*);
template<> ::CBluetoothManager_SetDiscovering_Response* Arena::CreateMaybeMessage<::CBluetoothManager_SetDiscovering_Response>(Arena*);
template<> ::CBluetoothManager_SetWakeAllowed_Request* Arena::CreateMaybeMessage<::CBluetoothManager_SetWakeAllowed_Request>(Arena*);
template<> ::CBluetoothManager_SetWakeAllowed_Response* Arena::CreateMaybeMessage<::CBluetoothManager_SetWakeAllowed_Response>(Arena*);
template<> ::CBluetoothManager_StateChanged_Notification* Arena::CreateMaybeMessage<::CBluetoothManager_StateChanged_Notification>(Arena*);
template<> ::CMsgBluetoothManagerAdapterDetails* Arena::CreateMaybeMessage<::CMsgBluetoothManagerAdapterDetails>(Arena*);
template<> ::CMsgBluetoothManagerAdapterInfo* Arena::CreateMaybeMessage<::CMsgBluetoothManagerAdapterInfo>(Arena*);
template<> ::CMsgBluetoothManagerDeviceDetails* Arena::CreateMaybeMessage<::CMsgBluetoothManagerDeviceDetails>(Arena*);
template<> ::CMsgBluetoothManagerDeviceInfo* Arena::CreateMaybeMessage<::CMsgBluetoothManagerDeviceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CBluetoothManager_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetState_Request) */ {
 public:
  inline CBluetoothManager_GetState_Request() : CBluetoothManager_GetState_Request(nullptr) {}
  virtual ~CBluetoothManager_GetState_Request();
  explicit constexpr CBluetoothManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetState_Request(const CBluetoothManager_GetState_Request& from);
  CBluetoothManager_GetState_Request(CBluetoothManager_GetState_Request&& from) noexcept
    : CBluetoothManager_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetState_Request& operator=(const CBluetoothManager_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetState_Request& operator=(CBluetoothManager_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetState_Request*>(
               &_CBluetoothManager_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBluetoothManager_GetState_Request& a, CBluetoothManager_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetState_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetState_Request>(nullptr);
  }

  CBluetoothManager_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetState_Request& from);
  void MergeFrom(const CBluetoothManager_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetState_Request";
  }
  protected:
  explicit CBluetoothManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothManagerAdapterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothManagerAdapterInfo) */ {
 public:
  inline CMsgBluetoothManagerAdapterInfo() : CMsgBluetoothManagerAdapterInfo(nullptr) {}
  virtual ~CMsgBluetoothManagerAdapterInfo();
  explicit constexpr CMsgBluetoothManagerAdapterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothManagerAdapterInfo(const CMsgBluetoothManagerAdapterInfo& from);
  CMsgBluetoothManagerAdapterInfo(CMsgBluetoothManagerAdapterInfo&& from) noexcept
    : CMsgBluetoothManagerAdapterInfo() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothManagerAdapterInfo& operator=(const CMsgBluetoothManagerAdapterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothManagerAdapterInfo& operator=(CMsgBluetoothManagerAdapterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgBluetoothManagerAdapterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothManagerAdapterInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothManagerAdapterInfo*>(
               &_CMsgBluetoothManagerAdapterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgBluetoothManagerAdapterInfo& a, CMsgBluetoothManagerAdapterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothManagerAdapterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothManagerAdapterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgBluetoothManagerAdapterInfo* New() const final {
    return CreateMaybeMessage<CMsgBluetoothManagerAdapterInfo>(nullptr);
  }

  CMsgBluetoothManagerAdapterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBluetoothManagerAdapterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgBluetoothManagerAdapterInfo& from);
  void MergeFrom(const CMsgBluetoothManagerAdapterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothManagerAdapterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothManagerAdapterInfo";
  }
  protected:
  explicit CMsgBluetoothManagerAdapterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothManagerAdapterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothManagerDeviceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothManagerDeviceInfo) */ {
 public:
  inline CMsgBluetoothManagerDeviceInfo() : CMsgBluetoothManagerDeviceInfo(nullptr) {}
  virtual ~CMsgBluetoothManagerDeviceInfo();
  explicit constexpr CMsgBluetoothManagerDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothManagerDeviceInfo(const CMsgBluetoothManagerDeviceInfo& from);
  CMsgBluetoothManagerDeviceInfo(CMsgBluetoothManagerDeviceInfo&& from) noexcept
    : CMsgBluetoothManagerDeviceInfo() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothManagerDeviceInfo& operator=(const CMsgBluetoothManagerDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothManagerDeviceInfo& operator=(CMsgBluetoothManagerDeviceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgBluetoothManagerDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothManagerDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothManagerDeviceInfo*>(
               &_CMsgBluetoothManagerDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgBluetoothManagerDeviceInfo& a, CMsgBluetoothManagerDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothManagerDeviceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothManagerDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgBluetoothManagerDeviceInfo* New() const final {
    return CreateMaybeMessage<CMsgBluetoothManagerDeviceInfo>(nullptr);
  }

  CMsgBluetoothManagerDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBluetoothManagerDeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgBluetoothManagerDeviceInfo& from);
  void MergeFrom(const CMsgBluetoothManagerDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothManagerDeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothManagerDeviceInfo";
  }
  protected:
  explicit CMsgBluetoothManagerDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEtypeFieldNumber = 3,
    kShouldHideHintFieldNumber = 2,
    kIsConnectedFieldNumber = 4,
    kIsPairedFieldNumber = 5,
    kStrengthRawFieldNumber = 6,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::EBluetoothDeviceType etype() const;
  void set_etype(::EBluetoothDeviceType value);
  private:
  ::EBluetoothDeviceType _internal_etype() const;
  void _internal_set_etype(::EBluetoothDeviceType value);
  public:

  // optional bool should_hide_hint = 2;
  bool has_should_hide_hint() const;
  private:
  bool _internal_has_should_hide_hint() const;
  public:
  void clear_should_hide_hint();
  bool should_hide_hint() const;
  void set_should_hide_hint(bool value);
  private:
  bool _internal_should_hide_hint() const;
  void _internal_set_should_hide_hint(bool value);
  public:

  // optional bool is_connected = 4;
  bool has_is_connected() const;
  private:
  bool _internal_has_is_connected() const;
  public:
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:

  // optional bool is_paired = 5;
  bool has_is_paired() const;
  private:
  bool _internal_has_is_paired() const;
  public:
  void clear_is_paired();
  bool is_paired() const;
  void set_is_paired(bool value);
  private:
  bool _internal_is_paired() const;
  void _internal_set_is_paired(bool value);
  public:

  // optional int32 strength_raw = 6;
  bool has_strength_raw() const;
  private:
  bool _internal_has_strength_raw() const;
  public:
  void clear_strength_raw();
  ::PROTOBUF_NAMESPACE_ID::int32 strength_raw() const;
  void set_strength_raw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strength_raw() const;
  void _internal_set_strength_raw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothManagerDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int etype_;
  bool should_hide_hint_;
  bool is_connected_;
  bool is_paired_;
  ::PROTOBUF_NAMESPACE_ID::int32 strength_raw_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetState_Response) */ {
 public:
  inline CBluetoothManager_GetState_Response() : CBluetoothManager_GetState_Response(nullptr) {}
  virtual ~CBluetoothManager_GetState_Response();
  explicit constexpr CBluetoothManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetState_Response(const CBluetoothManager_GetState_Response& from);
  CBluetoothManager_GetState_Response(CBluetoothManager_GetState_Response&& from) noexcept
    : CBluetoothManager_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetState_Response& operator=(const CBluetoothManager_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetState_Response& operator=(CBluetoothManager_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetState_Response*>(
               &_CBluetoothManager_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CBluetoothManager_GetState_Response& a, CBluetoothManager_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetState_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetState_Response>(nullptr);
  }

  CBluetoothManager_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetState_Response& from);
  void MergeFrom(const CBluetoothManager_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetState_Response";
  }
  protected:
  explicit CBluetoothManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdaptersFieldNumber = 4,
    kDevicesFieldNumber = 5,
    kIsServiceAvailableFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
    kIsDiscoveringFieldNumber = 3,
  };
  // repeated .CMsgBluetoothManagerAdapterInfo adapters = 4;
  int adapters_size() const;
  private:
  int _internal_adapters_size() const;
  public:
  void clear_adapters();
  ::CMsgBluetoothManagerAdapterInfo* mutable_adapters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerAdapterInfo >*
      mutable_adapters();
  private:
  const ::CMsgBluetoothManagerAdapterInfo& _internal_adapters(int index) const;
  ::CMsgBluetoothManagerAdapterInfo* _internal_add_adapters();
  public:
  const ::CMsgBluetoothManagerAdapterInfo& adapters(int index) const;
  ::CMsgBluetoothManagerAdapterInfo* add_adapters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerAdapterInfo >&
      adapters() const;

  // repeated .CMsgBluetoothManagerDeviceInfo devices = 5;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CMsgBluetoothManagerDeviceInfo* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerDeviceInfo >*
      mutable_devices();
  private:
  const ::CMsgBluetoothManagerDeviceInfo& _internal_devices(int index) const;
  ::CMsgBluetoothManagerDeviceInfo* _internal_add_devices();
  public:
  const ::CMsgBluetoothManagerDeviceInfo& devices(int index) const;
  ::CMsgBluetoothManagerDeviceInfo* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerDeviceInfo >&
      devices() const;

  // optional bool is_service_available = 1;
  bool has_is_service_available() const;
  private:
  bool _internal_has_is_service_available() const;
  public:
  void clear_is_service_available();
  bool is_service_available() const;
  void set_is_service_available(bool value);
  private:
  bool _internal_is_service_available() const;
  void _internal_set_is_service_available(bool value);
  public:

  // optional bool is_enabled = 2;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_discovering = 3;
  bool has_is_discovering() const;
  private:
  bool _internal_has_is_discovering() const;
  public:
  void clear_is_discovering();
  bool is_discovering() const;
  void set_is_discovering(bool value);
  private:
  bool _internal_is_discovering() const;
  void _internal_set_is_discovering(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerAdapterInfo > adapters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerDeviceInfo > devices_;
  bool is_service_available_;
  bool is_enabled_;
  bool is_discovering_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_GetAdapterDetails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetAdapterDetails_Request) */ {
 public:
  inline CBluetoothManager_GetAdapterDetails_Request() : CBluetoothManager_GetAdapterDetails_Request(nullptr) {}
  virtual ~CBluetoothManager_GetAdapterDetails_Request();
  explicit constexpr CBluetoothManager_GetAdapterDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetAdapterDetails_Request(const CBluetoothManager_GetAdapterDetails_Request& from);
  CBluetoothManager_GetAdapterDetails_Request(CBluetoothManager_GetAdapterDetails_Request&& from) noexcept
    : CBluetoothManager_GetAdapterDetails_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetAdapterDetails_Request& operator=(const CBluetoothManager_GetAdapterDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetAdapterDetails_Request& operator=(CBluetoothManager_GetAdapterDetails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetAdapterDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetAdapterDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetAdapterDetails_Request*>(
               &_CBluetoothManager_GetAdapterDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CBluetoothManager_GetAdapterDetails_Request& a, CBluetoothManager_GetAdapterDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetAdapterDetails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetAdapterDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetAdapterDetails_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetAdapterDetails_Request>(nullptr);
  }

  CBluetoothManager_GetAdapterDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetAdapterDetails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetAdapterDetails_Request& from);
  void MergeFrom(const CBluetoothManager_GetAdapterDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetAdapterDetails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetAdapterDetails_Request";
  }
  protected:
  explicit CBluetoothManager_GetAdapterDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetAdapterDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothManagerAdapterDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothManagerAdapterDetails) */ {
 public:
  inline CMsgBluetoothManagerAdapterDetails() : CMsgBluetoothManagerAdapterDetails(nullptr) {}
  virtual ~CMsgBluetoothManagerAdapterDetails();
  explicit constexpr CMsgBluetoothManagerAdapterDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothManagerAdapterDetails(const CMsgBluetoothManagerAdapterDetails& from);
  CMsgBluetoothManagerAdapterDetails(CMsgBluetoothManagerAdapterDetails&& from) noexcept
    : CMsgBluetoothManagerAdapterDetails() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothManagerAdapterDetails& operator=(const CMsgBluetoothManagerAdapterDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothManagerAdapterDetails& operator=(CMsgBluetoothManagerAdapterDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgBluetoothManagerAdapterDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothManagerAdapterDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothManagerAdapterDetails*>(
               &_CMsgBluetoothManagerAdapterDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgBluetoothManagerAdapterDetails& a, CMsgBluetoothManagerAdapterDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothManagerAdapterDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothManagerAdapterDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgBluetoothManagerAdapterDetails* New() const final {
    return CreateMaybeMessage<CMsgBluetoothManagerAdapterDetails>(nullptr);
  }

  CMsgBluetoothManagerAdapterDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBluetoothManagerAdapterDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgBluetoothManagerAdapterDetails& from);
  void MergeFrom(const CMsgBluetoothManagerAdapterDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothManagerAdapterDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothManagerAdapterDetails";
  }
  protected:
  explicit CMsgBluetoothManagerAdapterDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kIsEnabledFieldNumber = 4,
    kIsDiscoveringFieldNumber = 5,
  };
  // optional string mac = 2;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_enabled = 4;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_discovering = 5;
  bool has_is_discovering() const;
  private:
  bool _internal_has_is_discovering() const;
  public:
  void clear_is_discovering();
  bool is_discovering() const;
  void set_is_discovering(bool value);
  private:
  bool _internal_is_discovering() const;
  void _internal_set_is_discovering(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothManagerAdapterDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_enabled_;
  bool is_discovering_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_GetAdapterDetails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetAdapterDetails_Response) */ {
 public:
  inline CBluetoothManager_GetAdapterDetails_Response() : CBluetoothManager_GetAdapterDetails_Response(nullptr) {}
  virtual ~CBluetoothManager_GetAdapterDetails_Response();
  explicit constexpr CBluetoothManager_GetAdapterDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetAdapterDetails_Response(const CBluetoothManager_GetAdapterDetails_Response& from);
  CBluetoothManager_GetAdapterDetails_Response(CBluetoothManager_GetAdapterDetails_Response&& from) noexcept
    : CBluetoothManager_GetAdapterDetails_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetAdapterDetails_Response& operator=(const CBluetoothManager_GetAdapterDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetAdapterDetails_Response& operator=(CBluetoothManager_GetAdapterDetails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetAdapterDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetAdapterDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetAdapterDetails_Response*>(
               &_CBluetoothManager_GetAdapterDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CBluetoothManager_GetAdapterDetails_Response& a, CBluetoothManager_GetAdapterDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetAdapterDetails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetAdapterDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetAdapterDetails_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetAdapterDetails_Response>(nullptr);
  }

  CBluetoothManager_GetAdapterDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetAdapterDetails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetAdapterDetails_Response& from);
  void MergeFrom(const CBluetoothManager_GetAdapterDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetAdapterDetails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetAdapterDetails_Response";
  }
  protected:
  explicit CBluetoothManager_GetAdapterDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterFieldNumber = 1,
  };
  // optional .CMsgBluetoothManagerAdapterDetails adapter = 1;
  bool has_adapter() const;
  private:
  bool _internal_has_adapter() const;
  public:
  void clear_adapter();
  const ::CMsgBluetoothManagerAdapterDetails& adapter() const;
  ::CMsgBluetoothManagerAdapterDetails* release_adapter();
  ::CMsgBluetoothManagerAdapterDetails* mutable_adapter();
  void set_allocated_adapter(::CMsgBluetoothManagerAdapterDetails* adapter);
  private:
  const ::CMsgBluetoothManagerAdapterDetails& _internal_adapter() const;
  ::CMsgBluetoothManagerAdapterDetails* _internal_mutable_adapter();
  public:
  void unsafe_arena_set_allocated_adapter(
      ::CMsgBluetoothManagerAdapterDetails* adapter);
  ::CMsgBluetoothManagerAdapterDetails* unsafe_arena_release_adapter();

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetAdapterDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgBluetoothManagerAdapterDetails* adapter_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_GetDeviceDetails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetDeviceDetails_Request) */ {
 public:
  inline CBluetoothManager_GetDeviceDetails_Request() : CBluetoothManager_GetDeviceDetails_Request(nullptr) {}
  virtual ~CBluetoothManager_GetDeviceDetails_Request();
  explicit constexpr CBluetoothManager_GetDeviceDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetDeviceDetails_Request(const CBluetoothManager_GetDeviceDetails_Request& from);
  CBluetoothManager_GetDeviceDetails_Request(CBluetoothManager_GetDeviceDetails_Request&& from) noexcept
    : CBluetoothManager_GetDeviceDetails_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetDeviceDetails_Request& operator=(const CBluetoothManager_GetDeviceDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetDeviceDetails_Request& operator=(CBluetoothManager_GetDeviceDetails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetDeviceDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetDeviceDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetDeviceDetails_Request*>(
               &_CBluetoothManager_GetDeviceDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CBluetoothManager_GetDeviceDetails_Request& a, CBluetoothManager_GetDeviceDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetDeviceDetails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetDeviceDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetDeviceDetails_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetDeviceDetails_Request>(nullptr);
  }

  CBluetoothManager_GetDeviceDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetDeviceDetails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetDeviceDetails_Request& from);
  void MergeFrom(const CBluetoothManager_GetDeviceDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetDeviceDetails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetDeviceDetails_Request";
  }
  protected:
  explicit CBluetoothManager_GetDeviceDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetDeviceDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothManagerDeviceDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothManagerDeviceDetails) */ {
 public:
  inline CMsgBluetoothManagerDeviceDetails() : CMsgBluetoothManagerDeviceDetails(nullptr) {}
  virtual ~CMsgBluetoothManagerDeviceDetails();
  explicit constexpr CMsgBluetoothManagerDeviceDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothManagerDeviceDetails(const CMsgBluetoothManagerDeviceDetails& from);
  CMsgBluetoothManagerDeviceDetails(CMsgBluetoothManagerDeviceDetails&& from) noexcept
    : CMsgBluetoothManagerDeviceDetails() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothManagerDeviceDetails& operator=(const CMsgBluetoothManagerDeviceDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothManagerDeviceDetails& operator=(CMsgBluetoothManagerDeviceDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgBluetoothManagerDeviceDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothManagerDeviceDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothManagerDeviceDetails*>(
               &_CMsgBluetoothManagerDeviceDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgBluetoothManagerDeviceDetails& a, CMsgBluetoothManagerDeviceDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothManagerDeviceDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothManagerDeviceDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgBluetoothManagerDeviceDetails* New() const final {
    return CreateMaybeMessage<CMsgBluetoothManagerDeviceDetails>(nullptr);
  }

  CMsgBluetoothManagerDeviceDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBluetoothManagerDeviceDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgBluetoothManagerDeviceDetails& from);
  void MergeFrom(const CMsgBluetoothManagerDeviceDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothManagerDeviceDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothManagerDeviceDetails";
  }
  protected:
  explicit CMsgBluetoothManagerDeviceDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 4,
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kAdapterIdFieldNumber = 2,
    kEtypeFieldNumber = 3,
    kIsConnectedFieldNumber = 6,
    kIsPairedFieldNumber = 7,
    kIsPairingFieldNumber = 8,
    kWakeAllowedFieldNumber = 9,
    kBatteryPercentFieldNumber = 11,
    kWakeAllowedSupportedFieldNumber = 10,
    kOperationInProgressFieldNumber = 12,
  };
  // optional string mac = 4;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 adapter_id = 2 [default = 0];
  bool has_adapter_id() const;
  private:
  bool _internal_has_adapter_id() const;
  public:
  void clear_adapter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 adapter_id() const;
  void set_adapter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adapter_id() const;
  void _internal_set_adapter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::EBluetoothDeviceType etype() const;
  void set_etype(::EBluetoothDeviceType value);
  private:
  ::EBluetoothDeviceType _internal_etype() const;
  void _internal_set_etype(::EBluetoothDeviceType value);
  public:

  // optional bool is_connected = 6;
  bool has_is_connected() const;
  private:
  bool _internal_has_is_connected() const;
  public:
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:

  // optional bool is_paired = 7;
  bool has_is_paired() const;
  private:
  bool _internal_has_is_paired() const;
  public:
  void clear_is_paired();
  bool is_paired() const;
  void set_is_paired(bool value);
  private:
  bool _internal_is_paired() const;
  void _internal_set_is_paired(bool value);
  public:

  // optional bool is_pairing = 8;
  bool has_is_pairing() const;
  private:
  bool _internal_has_is_pairing() const;
  public:
  void clear_is_pairing();
  bool is_pairing() const;
  void set_is_pairing(bool value);
  private:
  bool _internal_is_pairing() const;
  void _internal_set_is_pairing(bool value);
  public:

  // optional bool wake_allowed = 9;
  bool has_wake_allowed() const;
  private:
  bool _internal_has_wake_allowed() const;
  public:
  void clear_wake_allowed();
  bool wake_allowed() const;
  void set_wake_allowed(bool value);
  private:
  bool _internal_wake_allowed() const;
  void _internal_set_wake_allowed(bool value);
  public:

  // optional int32 battery_percent = 11;
  bool has_battery_percent() const;
  private:
  bool _internal_has_battery_percent() const;
  public:
  void clear_battery_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 battery_percent() const;
  void set_battery_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battery_percent() const;
  void _internal_set_battery_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool wake_allowed_supported = 10;
  bool has_wake_allowed_supported() const;
  private:
  bool _internal_has_wake_allowed_supported() const;
  public:
  void clear_wake_allowed_supported();
  bool wake_allowed_supported() const;
  void set_wake_allowed_supported(bool value);
  private:
  bool _internal_wake_allowed_supported() const;
  void _internal_set_wake_allowed_supported(bool value);
  public:

  // optional bool operation_in_progress = 12;
  bool has_operation_in_progress() const;
  private:
  bool _internal_has_operation_in_progress() const;
  public:
  void clear_operation_in_progress();
  bool operation_in_progress() const;
  void set_operation_in_progress(bool value);
  private:
  bool _internal_operation_in_progress() const;
  void _internal_set_operation_in_progress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothManagerDeviceDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adapter_id_;
  int etype_;
  bool is_connected_;
  bool is_paired_;
  bool is_pairing_;
  bool wake_allowed_;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_percent_;
  bool wake_allowed_supported_;
  bool operation_in_progress_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_GetDeviceDetails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_GetDeviceDetails_Response) */ {
 public:
  inline CBluetoothManager_GetDeviceDetails_Response() : CBluetoothManager_GetDeviceDetails_Response(nullptr) {}
  virtual ~CBluetoothManager_GetDeviceDetails_Response();
  explicit constexpr CBluetoothManager_GetDeviceDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_GetDeviceDetails_Response(const CBluetoothManager_GetDeviceDetails_Response& from);
  CBluetoothManager_GetDeviceDetails_Response(CBluetoothManager_GetDeviceDetails_Response&& from) noexcept
    : CBluetoothManager_GetDeviceDetails_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_GetDeviceDetails_Response& operator=(const CBluetoothManager_GetDeviceDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_GetDeviceDetails_Response& operator=(CBluetoothManager_GetDeviceDetails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_GetDeviceDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_GetDeviceDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_GetDeviceDetails_Response*>(
               &_CBluetoothManager_GetDeviceDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CBluetoothManager_GetDeviceDetails_Response& a, CBluetoothManager_GetDeviceDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_GetDeviceDetails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_GetDeviceDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_GetDeviceDetails_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_GetDeviceDetails_Response>(nullptr);
  }

  CBluetoothManager_GetDeviceDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_GetDeviceDetails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_GetDeviceDetails_Response& from);
  void MergeFrom(const CBluetoothManager_GetDeviceDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_GetDeviceDetails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_GetDeviceDetails_Response";
  }
  protected:
  explicit CBluetoothManager_GetDeviceDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional .CMsgBluetoothManagerDeviceDetails device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::CMsgBluetoothManagerDeviceDetails& device() const;
  ::CMsgBluetoothManagerDeviceDetails* release_device();
  ::CMsgBluetoothManagerDeviceDetails* mutable_device();
  void set_allocated_device(::CMsgBluetoothManagerDeviceDetails* device);
  private:
  const ::CMsgBluetoothManagerDeviceDetails& _internal_device() const;
  ::CMsgBluetoothManagerDeviceDetails* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::CMsgBluetoothManagerDeviceDetails* device);
  ::CMsgBluetoothManagerDeviceDetails* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:CBluetoothManager_GetDeviceDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgBluetoothManagerDeviceDetails* device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_StateChanged_Notification) */ {
 public:
  inline CBluetoothManager_StateChanged_Notification() : CBluetoothManager_StateChanged_Notification(nullptr) {}
  virtual ~CBluetoothManager_StateChanged_Notification();
  explicit constexpr CBluetoothManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_StateChanged_Notification(const CBluetoothManager_StateChanged_Notification& from);
  CBluetoothManager_StateChanged_Notification(CBluetoothManager_StateChanged_Notification&& from) noexcept
    : CBluetoothManager_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_StateChanged_Notification& operator=(const CBluetoothManager_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_StateChanged_Notification& operator=(CBluetoothManager_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_StateChanged_Notification*>(
               &_CBluetoothManager_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CBluetoothManager_StateChanged_Notification& a, CBluetoothManager_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CBluetoothManager_StateChanged_Notification>(nullptr);
  }

  CBluetoothManager_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_StateChanged_Notification& from);
  void MergeFrom(const CBluetoothManager_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_StateChanged_Notification";
  }
  protected:
  explicit CBluetoothManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_SetDiscovering_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_SetDiscovering_Request) */ {
 public:
  inline CBluetoothManager_SetDiscovering_Request() : CBluetoothManager_SetDiscovering_Request(nullptr) {}
  virtual ~CBluetoothManager_SetDiscovering_Request();
  explicit constexpr CBluetoothManager_SetDiscovering_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_SetDiscovering_Request(const CBluetoothManager_SetDiscovering_Request& from);
  CBluetoothManager_SetDiscovering_Request(CBluetoothManager_SetDiscovering_Request&& from) noexcept
    : CBluetoothManager_SetDiscovering_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_SetDiscovering_Request& operator=(const CBluetoothManager_SetDiscovering_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_SetDiscovering_Request& operator=(CBluetoothManager_SetDiscovering_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_SetDiscovering_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_SetDiscovering_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_SetDiscovering_Request*>(
               &_CBluetoothManager_SetDiscovering_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CBluetoothManager_SetDiscovering_Request& a, CBluetoothManager_SetDiscovering_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_SetDiscovering_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_SetDiscovering_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_SetDiscovering_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_SetDiscovering_Request>(nullptr);
  }

  CBluetoothManager_SetDiscovering_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_SetDiscovering_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_SetDiscovering_Request& from);
  void MergeFrom(const CBluetoothManager_SetDiscovering_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_SetDiscovering_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_SetDiscovering_Request";
  }
  protected:
  explicit CBluetoothManager_SetDiscovering_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_SetDiscovering_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_SetDiscovering_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_SetDiscovering_Response) */ {
 public:
  inline CBluetoothManager_SetDiscovering_Response() : CBluetoothManager_SetDiscovering_Response(nullptr) {}
  virtual ~CBluetoothManager_SetDiscovering_Response();
  explicit constexpr CBluetoothManager_SetDiscovering_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_SetDiscovering_Response(const CBluetoothManager_SetDiscovering_Response& from);
  CBluetoothManager_SetDiscovering_Response(CBluetoothManager_SetDiscovering_Response&& from) noexcept
    : CBluetoothManager_SetDiscovering_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_SetDiscovering_Response& operator=(const CBluetoothManager_SetDiscovering_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_SetDiscovering_Response& operator=(CBluetoothManager_SetDiscovering_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_SetDiscovering_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_SetDiscovering_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_SetDiscovering_Response*>(
               &_CBluetoothManager_SetDiscovering_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CBluetoothManager_SetDiscovering_Response& a, CBluetoothManager_SetDiscovering_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_SetDiscovering_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_SetDiscovering_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_SetDiscovering_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_SetDiscovering_Response>(nullptr);
  }

  CBluetoothManager_SetDiscovering_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_SetDiscovering_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_SetDiscovering_Response& from);
  void MergeFrom(const CBluetoothManager_SetDiscovering_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_SetDiscovering_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_SetDiscovering_Response";
  }
  protected:
  explicit CBluetoothManager_SetDiscovering_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_SetDiscovering_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Pair_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Pair_Request) */ {
 public:
  inline CBluetoothManager_Pair_Request() : CBluetoothManager_Pair_Request(nullptr) {}
  virtual ~CBluetoothManager_Pair_Request();
  explicit constexpr CBluetoothManager_Pair_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Pair_Request(const CBluetoothManager_Pair_Request& from);
  CBluetoothManager_Pair_Request(CBluetoothManager_Pair_Request&& from) noexcept
    : CBluetoothManager_Pair_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Pair_Request& operator=(const CBluetoothManager_Pair_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Pair_Request& operator=(CBluetoothManager_Pair_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Pair_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Pair_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Pair_Request*>(
               &_CBluetoothManager_Pair_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CBluetoothManager_Pair_Request& a, CBluetoothManager_Pair_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Pair_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Pair_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Pair_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Pair_Request>(nullptr);
  }

  CBluetoothManager_Pair_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Pair_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Pair_Request& from);
  void MergeFrom(const CBluetoothManager_Pair_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Pair_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Pair_Request";
  }
  protected:
  explicit CBluetoothManager_Pair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Pair_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Pair_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Pair_Response) */ {
 public:
  inline CBluetoothManager_Pair_Response() : CBluetoothManager_Pair_Response(nullptr) {}
  virtual ~CBluetoothManager_Pair_Response();
  explicit constexpr CBluetoothManager_Pair_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Pair_Response(const CBluetoothManager_Pair_Response& from);
  CBluetoothManager_Pair_Response(CBluetoothManager_Pair_Response&& from) noexcept
    : CBluetoothManager_Pair_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Pair_Response& operator=(const CBluetoothManager_Pair_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Pair_Response& operator=(CBluetoothManager_Pair_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Pair_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Pair_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Pair_Response*>(
               &_CBluetoothManager_Pair_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CBluetoothManager_Pair_Response& a, CBluetoothManager_Pair_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Pair_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Pair_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Pair_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Pair_Response>(nullptr);
  }

  CBluetoothManager_Pair_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Pair_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Pair_Response& from);
  void MergeFrom(const CBluetoothManager_Pair_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Pair_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Pair_Response";
  }
  protected:
  explicit CBluetoothManager_Pair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Pair_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_CancelPair_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_CancelPair_Request) */ {
 public:
  inline CBluetoothManager_CancelPair_Request() : CBluetoothManager_CancelPair_Request(nullptr) {}
  virtual ~CBluetoothManager_CancelPair_Request();
  explicit constexpr CBluetoothManager_CancelPair_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_CancelPair_Request(const CBluetoothManager_CancelPair_Request& from);
  CBluetoothManager_CancelPair_Request(CBluetoothManager_CancelPair_Request&& from) noexcept
    : CBluetoothManager_CancelPair_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_CancelPair_Request& operator=(const CBluetoothManager_CancelPair_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_CancelPair_Request& operator=(CBluetoothManager_CancelPair_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_CancelPair_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_CancelPair_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_CancelPair_Request*>(
               &_CBluetoothManager_CancelPair_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CBluetoothManager_CancelPair_Request& a, CBluetoothManager_CancelPair_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_CancelPair_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_CancelPair_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_CancelPair_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_CancelPair_Request>(nullptr);
  }

  CBluetoothManager_CancelPair_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_CancelPair_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_CancelPair_Request& from);
  void MergeFrom(const CBluetoothManager_CancelPair_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_CancelPair_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_CancelPair_Request";
  }
  protected:
  explicit CBluetoothManager_CancelPair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_CancelPair_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_CancelPair_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_CancelPair_Response) */ {
 public:
  inline CBluetoothManager_CancelPair_Response() : CBluetoothManager_CancelPair_Response(nullptr) {}
  virtual ~CBluetoothManager_CancelPair_Response();
  explicit constexpr CBluetoothManager_CancelPair_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_CancelPair_Response(const CBluetoothManager_CancelPair_Response& from);
  CBluetoothManager_CancelPair_Response(CBluetoothManager_CancelPair_Response&& from) noexcept
    : CBluetoothManager_CancelPair_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_CancelPair_Response& operator=(const CBluetoothManager_CancelPair_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_CancelPair_Response& operator=(CBluetoothManager_CancelPair_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_CancelPair_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_CancelPair_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_CancelPair_Response*>(
               &_CBluetoothManager_CancelPair_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CBluetoothManager_CancelPair_Response& a, CBluetoothManager_CancelPair_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_CancelPair_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_CancelPair_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_CancelPair_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_CancelPair_Response>(nullptr);
  }

  CBluetoothManager_CancelPair_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_CancelPair_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_CancelPair_Response& from);
  void MergeFrom(const CBluetoothManager_CancelPair_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_CancelPair_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_CancelPair_Response";
  }
  protected:
  explicit CBluetoothManager_CancelPair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_CancelPair_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Forget_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Forget_Request) */ {
 public:
  inline CBluetoothManager_Forget_Request() : CBluetoothManager_Forget_Request(nullptr) {}
  virtual ~CBluetoothManager_Forget_Request();
  explicit constexpr CBluetoothManager_Forget_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Forget_Request(const CBluetoothManager_Forget_Request& from);
  CBluetoothManager_Forget_Request(CBluetoothManager_Forget_Request&& from) noexcept
    : CBluetoothManager_Forget_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Forget_Request& operator=(const CBluetoothManager_Forget_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Forget_Request& operator=(CBluetoothManager_Forget_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Forget_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Forget_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Forget_Request*>(
               &_CBluetoothManager_Forget_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CBluetoothManager_Forget_Request& a, CBluetoothManager_Forget_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Forget_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Forget_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Forget_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Forget_Request>(nullptr);
  }

  CBluetoothManager_Forget_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Forget_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Forget_Request& from);
  void MergeFrom(const CBluetoothManager_Forget_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Forget_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Forget_Request";
  }
  protected:
  explicit CBluetoothManager_Forget_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Forget_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Forget_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Forget_Response) */ {
 public:
  inline CBluetoothManager_Forget_Response() : CBluetoothManager_Forget_Response(nullptr) {}
  virtual ~CBluetoothManager_Forget_Response();
  explicit constexpr CBluetoothManager_Forget_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Forget_Response(const CBluetoothManager_Forget_Response& from);
  CBluetoothManager_Forget_Response(CBluetoothManager_Forget_Response&& from) noexcept
    : CBluetoothManager_Forget_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Forget_Response& operator=(const CBluetoothManager_Forget_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Forget_Response& operator=(CBluetoothManager_Forget_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Forget_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Forget_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Forget_Response*>(
               &_CBluetoothManager_Forget_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CBluetoothManager_Forget_Response& a, CBluetoothManager_Forget_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Forget_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Forget_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Forget_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Forget_Response>(nullptr);
  }

  CBluetoothManager_Forget_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Forget_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Forget_Response& from);
  void MergeFrom(const CBluetoothManager_Forget_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Forget_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Forget_Response";
  }
  protected:
  explicit CBluetoothManager_Forget_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Forget_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Connect_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Connect_Request) */ {
 public:
  inline CBluetoothManager_Connect_Request() : CBluetoothManager_Connect_Request(nullptr) {}
  virtual ~CBluetoothManager_Connect_Request();
  explicit constexpr CBluetoothManager_Connect_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Connect_Request(const CBluetoothManager_Connect_Request& from);
  CBluetoothManager_Connect_Request(CBluetoothManager_Connect_Request&& from) noexcept
    : CBluetoothManager_Connect_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Connect_Request& operator=(const CBluetoothManager_Connect_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Connect_Request& operator=(CBluetoothManager_Connect_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Connect_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Connect_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Connect_Request*>(
               &_CBluetoothManager_Connect_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CBluetoothManager_Connect_Request& a, CBluetoothManager_Connect_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Connect_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Connect_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Connect_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Connect_Request>(nullptr);
  }

  CBluetoothManager_Connect_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Connect_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Connect_Request& from);
  void MergeFrom(const CBluetoothManager_Connect_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Connect_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Connect_Request";
  }
  protected:
  explicit CBluetoothManager_Connect_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Connect_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Connect_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Connect_Response) */ {
 public:
  inline CBluetoothManager_Connect_Response() : CBluetoothManager_Connect_Response(nullptr) {}
  virtual ~CBluetoothManager_Connect_Response();
  explicit constexpr CBluetoothManager_Connect_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Connect_Response(const CBluetoothManager_Connect_Response& from);
  CBluetoothManager_Connect_Response(CBluetoothManager_Connect_Response&& from) noexcept
    : CBluetoothManager_Connect_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Connect_Response& operator=(const CBluetoothManager_Connect_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Connect_Response& operator=(CBluetoothManager_Connect_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Connect_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Connect_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Connect_Response*>(
               &_CBluetoothManager_Connect_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CBluetoothManager_Connect_Response& a, CBluetoothManager_Connect_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Connect_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Connect_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Connect_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Connect_Response>(nullptr);
  }

  CBluetoothManager_Connect_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Connect_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Connect_Response& from);
  void MergeFrom(const CBluetoothManager_Connect_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Connect_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Connect_Response";
  }
  protected:
  explicit CBluetoothManager_Connect_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Connect_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Disconnect_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Disconnect_Request) */ {
 public:
  inline CBluetoothManager_Disconnect_Request() : CBluetoothManager_Disconnect_Request(nullptr) {}
  virtual ~CBluetoothManager_Disconnect_Request();
  explicit constexpr CBluetoothManager_Disconnect_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Disconnect_Request(const CBluetoothManager_Disconnect_Request& from);
  CBluetoothManager_Disconnect_Request(CBluetoothManager_Disconnect_Request&& from) noexcept
    : CBluetoothManager_Disconnect_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Disconnect_Request& operator=(const CBluetoothManager_Disconnect_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Disconnect_Request& operator=(CBluetoothManager_Disconnect_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Disconnect_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Disconnect_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Disconnect_Request*>(
               &_CBluetoothManager_Disconnect_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CBluetoothManager_Disconnect_Request& a, CBluetoothManager_Disconnect_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Disconnect_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Disconnect_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Disconnect_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Disconnect_Request>(nullptr);
  }

  CBluetoothManager_Disconnect_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Disconnect_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Disconnect_Request& from);
  void MergeFrom(const CBluetoothManager_Disconnect_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Disconnect_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Disconnect_Request";
  }
  protected:
  explicit CBluetoothManager_Disconnect_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Disconnect_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_Disconnect_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_Disconnect_Response) */ {
 public:
  inline CBluetoothManager_Disconnect_Response() : CBluetoothManager_Disconnect_Response(nullptr) {}
  virtual ~CBluetoothManager_Disconnect_Response();
  explicit constexpr CBluetoothManager_Disconnect_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_Disconnect_Response(const CBluetoothManager_Disconnect_Response& from);
  CBluetoothManager_Disconnect_Response(CBluetoothManager_Disconnect_Response&& from) noexcept
    : CBluetoothManager_Disconnect_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_Disconnect_Response& operator=(const CBluetoothManager_Disconnect_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_Disconnect_Response& operator=(CBluetoothManager_Disconnect_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_Disconnect_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_Disconnect_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_Disconnect_Response*>(
               &_CBluetoothManager_Disconnect_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CBluetoothManager_Disconnect_Response& a, CBluetoothManager_Disconnect_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_Disconnect_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_Disconnect_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_Disconnect_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_Disconnect_Response>(nullptr);
  }

  CBluetoothManager_Disconnect_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_Disconnect_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_Disconnect_Response& from);
  void MergeFrom(const CBluetoothManager_Disconnect_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_Disconnect_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_Disconnect_Response";
  }
  protected:
  explicit CBluetoothManager_Disconnect_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_Disconnect_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_SetWakeAllowed_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_SetWakeAllowed_Request) */ {
 public:
  inline CBluetoothManager_SetWakeAllowed_Request() : CBluetoothManager_SetWakeAllowed_Request(nullptr) {}
  virtual ~CBluetoothManager_SetWakeAllowed_Request();
  explicit constexpr CBluetoothManager_SetWakeAllowed_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_SetWakeAllowed_Request(const CBluetoothManager_SetWakeAllowed_Request& from);
  CBluetoothManager_SetWakeAllowed_Request(CBluetoothManager_SetWakeAllowed_Request&& from) noexcept
    : CBluetoothManager_SetWakeAllowed_Request() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_SetWakeAllowed_Request& operator=(const CBluetoothManager_SetWakeAllowed_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_SetWakeAllowed_Request& operator=(CBluetoothManager_SetWakeAllowed_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_SetWakeAllowed_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_SetWakeAllowed_Request* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_SetWakeAllowed_Request*>(
               &_CBluetoothManager_SetWakeAllowed_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CBluetoothManager_SetWakeAllowed_Request& a, CBluetoothManager_SetWakeAllowed_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_SetWakeAllowed_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_SetWakeAllowed_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_SetWakeAllowed_Request* New() const final {
    return CreateMaybeMessage<CBluetoothManager_SetWakeAllowed_Request>(nullptr);
  }

  CBluetoothManager_SetWakeAllowed_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_SetWakeAllowed_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_SetWakeAllowed_Request& from);
  void MergeFrom(const CBluetoothManager_SetWakeAllowed_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_SetWakeAllowed_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_SetWakeAllowed_Request";
  }
  protected:
  explicit CBluetoothManager_SetWakeAllowed_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAllowedFieldNumber = 2,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool allowed = 2;
  bool has_allowed() const;
  private:
  bool _internal_has_allowed() const;
  public:
  void clear_allowed();
  bool allowed() const;
  void set_allowed(bool value);
  private:
  bool _internal_allowed() const;
  void _internal_set_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBluetoothManager_SetWakeAllowed_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_;
  bool allowed_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// -------------------------------------------------------------------

class CBluetoothManager_SetWakeAllowed_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBluetoothManager_SetWakeAllowed_Response) */ {
 public:
  inline CBluetoothManager_SetWakeAllowed_Response() : CBluetoothManager_SetWakeAllowed_Response(nullptr) {}
  virtual ~CBluetoothManager_SetWakeAllowed_Response();
  explicit constexpr CBluetoothManager_SetWakeAllowed_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBluetoothManager_SetWakeAllowed_Response(const CBluetoothManager_SetWakeAllowed_Response& from);
  CBluetoothManager_SetWakeAllowed_Response(CBluetoothManager_SetWakeAllowed_Response&& from) noexcept
    : CBluetoothManager_SetWakeAllowed_Response() {
    *this = ::std::move(from);
  }

  inline CBluetoothManager_SetWakeAllowed_Response& operator=(const CBluetoothManager_SetWakeAllowed_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBluetoothManager_SetWakeAllowed_Response& operator=(CBluetoothManager_SetWakeAllowed_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBluetoothManager_SetWakeAllowed_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBluetoothManager_SetWakeAllowed_Response* internal_default_instance() {
    return reinterpret_cast<const CBluetoothManager_SetWakeAllowed_Response*>(
               &_CBluetoothManager_SetWakeAllowed_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CBluetoothManager_SetWakeAllowed_Response& a, CBluetoothManager_SetWakeAllowed_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBluetoothManager_SetWakeAllowed_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBluetoothManager_SetWakeAllowed_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBluetoothManager_SetWakeAllowed_Response* New() const final {
    return CreateMaybeMessage<CBluetoothManager_SetWakeAllowed_Response>(nullptr);
  }

  CBluetoothManager_SetWakeAllowed_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBluetoothManager_SetWakeAllowed_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBluetoothManager_SetWakeAllowed_Response& from);
  void MergeFrom(const CBluetoothManager_SetWakeAllowed_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBluetoothManager_SetWakeAllowed_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBluetoothManager_SetWakeAllowed_Response";
  }
  protected:
  explicit CBluetoothManager_SetWakeAllowed_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fbluetooth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBluetoothManager_SetWakeAllowed_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fbluetooth_2eproto;
};
// ===================================================================

class BluetoothManager_Stub;

class BluetoothManager : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BluetoothManager() {};
 public:
  virtual ~BluetoothManager();

  typedef BluetoothManager_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetState_Request* request,
                       ::CBluetoothManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAdapterDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetAdapterDetails_Request* request,
                       ::CBluetoothManager_GetAdapterDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDeviceDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetDeviceDetails_Request* request,
                       ::CBluetoothManager_GetDeviceDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetDiscovering(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_SetDiscovering_Request* request,
                       ::CBluetoothManager_SetDiscovering_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Pair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Pair_Request* request,
                       ::CBluetoothManager_Pair_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelPair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_CancelPair_Request* request,
                       ::CBluetoothManager_CancelPair_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Forget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Forget_Request* request,
                       ::CBluetoothManager_Forget_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Connect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Connect_Request* request,
                       ::CBluetoothManager_Connect_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Disconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Disconnect_Request* request,
                       ::CBluetoothManager_Disconnect_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetWakeAllowed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_SetWakeAllowed_Request* request,
                       ::CBluetoothManager_SetWakeAllowed_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BluetoothManager);
};

class BluetoothManager_Stub : public BluetoothManager {
 public:
  BluetoothManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  BluetoothManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~BluetoothManager_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements BluetoothManager ------------------------------------------

  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetState_Request* request,
                       ::CBluetoothManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAdapterDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetAdapterDetails_Request* request,
                       ::CBluetoothManager_GetAdapterDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDeviceDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_GetDeviceDetails_Request* request,
                       ::CBluetoothManager_GetDeviceDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void SetDiscovering(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_SetDiscovering_Request* request,
                       ::CBluetoothManager_SetDiscovering_Response* response,
                       ::google::protobuf::Closure* done);
  void Pair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Pair_Request* request,
                       ::CBluetoothManager_Pair_Response* response,
                       ::google::protobuf::Closure* done);
  void CancelPair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_CancelPair_Request* request,
                       ::CBluetoothManager_CancelPair_Response* response,
                       ::google::protobuf::Closure* done);
  void Forget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Forget_Request* request,
                       ::CBluetoothManager_Forget_Response* response,
                       ::google::protobuf::Closure* done);
  void Connect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Connect_Request* request,
                       ::CBluetoothManager_Connect_Response* response,
                       ::google::protobuf::Closure* done);
  void Disconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_Disconnect_Request* request,
                       ::CBluetoothManager_Disconnect_Response* response,
                       ::google::protobuf::Closure* done);
  void SetWakeAllowed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBluetoothManager_SetWakeAllowed_Request* request,
                       ::CBluetoothManager_SetWakeAllowed_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BluetoothManager_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBluetoothManager_GetState_Request

// -------------------------------------------------------------------

// CMsgBluetoothManagerAdapterInfo

// optional uint32 id = 1;
inline bool CMsgBluetoothManagerAdapterInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterInfo::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothManagerAdapterInfo::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerAdapterInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerAdapterInfo::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterInfo.id)
  return _internal_id();
}
inline void CMsgBluetoothManagerAdapterInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgBluetoothManagerAdapterInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterInfo.id)
}

// -------------------------------------------------------------------

// CMsgBluetoothManagerDeviceInfo

// optional uint32 id = 1;
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.id)
  return _internal_id();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.id)
}

// optional bool should_hide_hint = 2;
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_should_hide_hint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_should_hide_hint() const {
  return _internal_has_should_hide_hint();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_should_hide_hint() {
  should_hide_hint_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgBluetoothManagerDeviceInfo::_internal_should_hide_hint() const {
  return should_hide_hint_;
}
inline bool CMsgBluetoothManagerDeviceInfo::should_hide_hint() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.should_hide_hint)
  return _internal_should_hide_hint();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_should_hide_hint(bool value) {
  _has_bits_[0] |= 0x00000004u;
  should_hide_hint_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_should_hide_hint(bool value) {
  _internal_set_should_hide_hint(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.should_hide_hint)
}

// optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EBluetoothDeviceType CMsgBluetoothManagerDeviceInfo::_internal_etype() const {
  return static_cast< ::EBluetoothDeviceType >(etype_);
}
inline ::EBluetoothDeviceType CMsgBluetoothManagerDeviceInfo::etype() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.etype)
  return _internal_etype();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_etype(::EBluetoothDeviceType value) {
  assert(::EBluetoothDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  etype_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_etype(::EBluetoothDeviceType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.etype)
}

// optional bool is_connected = 4;
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_is_connected() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_is_connected() const {
  return _internal_has_is_connected();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_is_connected() {
  is_connected_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBluetoothManagerDeviceInfo::_internal_is_connected() const {
  return is_connected_;
}
inline bool CMsgBluetoothManagerDeviceInfo::is_connected() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.is_connected)
  return _internal_is_connected();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_is_connected(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_connected_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.is_connected)
}

// optional bool is_paired = 5;
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_is_paired() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_is_paired() const {
  return _internal_has_is_paired();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_is_paired() {
  is_paired_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgBluetoothManagerDeviceInfo::_internal_is_paired() const {
  return is_paired_;
}
inline bool CMsgBluetoothManagerDeviceInfo::is_paired() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.is_paired)
  return _internal_is_paired();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_is_paired(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_paired_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_is_paired(bool value) {
  _internal_set_is_paired(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.is_paired)
}

// optional int32 strength_raw = 6;
inline bool CMsgBluetoothManagerDeviceInfo::_internal_has_strength_raw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceInfo::has_strength_raw() const {
  return _internal_has_strength_raw();
}
inline void CMsgBluetoothManagerDeviceInfo::clear_strength_raw() {
  strength_raw_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgBluetoothManagerDeviceInfo::_internal_strength_raw() const {
  return strength_raw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgBluetoothManagerDeviceInfo::strength_raw() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceInfo.strength_raw)
  return _internal_strength_raw();
}
inline void CMsgBluetoothManagerDeviceInfo::_internal_set_strength_raw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  strength_raw_ = value;
}
inline void CMsgBluetoothManagerDeviceInfo::set_strength_raw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strength_raw(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceInfo.strength_raw)
}

// -------------------------------------------------------------------

// CBluetoothManager_GetState_Response

// optional bool is_service_available = 1;
inline bool CBluetoothManager_GetState_Response::_internal_has_is_service_available() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_GetState_Response::has_is_service_available() const {
  return _internal_has_is_service_available();
}
inline void CBluetoothManager_GetState_Response::clear_is_service_available() {
  is_service_available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CBluetoothManager_GetState_Response::_internal_is_service_available() const {
  return is_service_available_;
}
inline bool CBluetoothManager_GetState_Response::is_service_available() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetState_Response.is_service_available)
  return _internal_is_service_available();
}
inline void CBluetoothManager_GetState_Response::_internal_set_is_service_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_service_available_ = value;
}
inline void CBluetoothManager_GetState_Response::set_is_service_available(bool value) {
  _internal_set_is_service_available(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_GetState_Response.is_service_available)
}

// optional bool is_enabled = 2;
inline bool CBluetoothManager_GetState_Response::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBluetoothManager_GetState_Response::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CBluetoothManager_GetState_Response::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBluetoothManager_GetState_Response::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CBluetoothManager_GetState_Response::is_enabled() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetState_Response.is_enabled)
  return _internal_is_enabled();
}
inline void CBluetoothManager_GetState_Response::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_enabled_ = value;
}
inline void CBluetoothManager_GetState_Response::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_GetState_Response.is_enabled)
}

// optional bool is_discovering = 3;
inline bool CBluetoothManager_GetState_Response::_internal_has_is_discovering() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBluetoothManager_GetState_Response::has_is_discovering() const {
  return _internal_has_is_discovering();
}
inline void CBluetoothManager_GetState_Response::clear_is_discovering() {
  is_discovering_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBluetoothManager_GetState_Response::_internal_is_discovering() const {
  return is_discovering_;
}
inline bool CBluetoothManager_GetState_Response::is_discovering() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetState_Response.is_discovering)
  return _internal_is_discovering();
}
inline void CBluetoothManager_GetState_Response::_internal_set_is_discovering(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_discovering_ = value;
}
inline void CBluetoothManager_GetState_Response::set_is_discovering(bool value) {
  _internal_set_is_discovering(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_GetState_Response.is_discovering)
}

// repeated .CMsgBluetoothManagerAdapterInfo adapters = 4;
inline int CBluetoothManager_GetState_Response::_internal_adapters_size() const {
  return adapters_.size();
}
inline int CBluetoothManager_GetState_Response::adapters_size() const {
  return _internal_adapters_size();
}
inline void CBluetoothManager_GetState_Response::clear_adapters() {
  adapters_.Clear();
}
inline ::CMsgBluetoothManagerAdapterInfo* CBluetoothManager_GetState_Response::mutable_adapters(int index) {
  // @@protoc_insertion_point(field_mutable:CBluetoothManager_GetState_Response.adapters)
  return adapters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerAdapterInfo >*
CBluetoothManager_GetState_Response::mutable_adapters() {
  // @@protoc_insertion_point(field_mutable_list:CBluetoothManager_GetState_Response.adapters)
  return &adapters_;
}
inline const ::CMsgBluetoothManagerAdapterInfo& CBluetoothManager_GetState_Response::_internal_adapters(int index) const {
  return adapters_.Get(index);
}
inline const ::CMsgBluetoothManagerAdapterInfo& CBluetoothManager_GetState_Response::adapters(int index) const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetState_Response.adapters)
  return _internal_adapters(index);
}
inline ::CMsgBluetoothManagerAdapterInfo* CBluetoothManager_GetState_Response::_internal_add_adapters() {
  return adapters_.Add();
}
inline ::CMsgBluetoothManagerAdapterInfo* CBluetoothManager_GetState_Response::add_adapters() {
  // @@protoc_insertion_point(field_add:CBluetoothManager_GetState_Response.adapters)
  return _internal_add_adapters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerAdapterInfo >&
CBluetoothManager_GetState_Response::adapters() const {
  // @@protoc_insertion_point(field_list:CBluetoothManager_GetState_Response.adapters)
  return adapters_;
}

// repeated .CMsgBluetoothManagerDeviceInfo devices = 5;
inline int CBluetoothManager_GetState_Response::_internal_devices_size() const {
  return devices_.size();
}
inline int CBluetoothManager_GetState_Response::devices_size() const {
  return _internal_devices_size();
}
inline void CBluetoothManager_GetState_Response::clear_devices() {
  devices_.Clear();
}
inline ::CMsgBluetoothManagerDeviceInfo* CBluetoothManager_GetState_Response::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CBluetoothManager_GetState_Response.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerDeviceInfo >*
CBluetoothManager_GetState_Response::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CBluetoothManager_GetState_Response.devices)
  return &devices_;
}
inline const ::CMsgBluetoothManagerDeviceInfo& CBluetoothManager_GetState_Response::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CMsgBluetoothManagerDeviceInfo& CBluetoothManager_GetState_Response::devices(int index) const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetState_Response.devices)
  return _internal_devices(index);
}
inline ::CMsgBluetoothManagerDeviceInfo* CBluetoothManager_GetState_Response::_internal_add_devices() {
  return devices_.Add();
}
inline ::CMsgBluetoothManagerDeviceInfo* CBluetoothManager_GetState_Response::add_devices() {
  // @@protoc_insertion_point(field_add:CBluetoothManager_GetState_Response.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothManagerDeviceInfo >&
CBluetoothManager_GetState_Response::devices() const {
  // @@protoc_insertion_point(field_list:CBluetoothManager_GetState_Response.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CBluetoothManager_GetAdapterDetails_Request

// optional uint32 id = 1;
inline bool CBluetoothManager_GetAdapterDetails_Request::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_GetAdapterDetails_Request::has_id() const {
  return _internal_has_id();
}
inline void CBluetoothManager_GetAdapterDetails_Request::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_GetAdapterDetails_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_GetAdapterDetails_Request::id() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetAdapterDetails_Request.id)
  return _internal_id();
}
inline void CBluetoothManager_GetAdapterDetails_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CBluetoothManager_GetAdapterDetails_Request::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_GetAdapterDetails_Request.id)
}

// -------------------------------------------------------------------

// CMsgBluetoothManagerAdapterDetails

// optional uint32 id = 1 [default = 0];
inline bool CMsgBluetoothManagerAdapterDetails::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterDetails::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothManagerAdapterDetails::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerAdapterDetails::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerAdapterDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterDetails.id)
  return _internal_id();
}
inline void CMsgBluetoothManagerAdapterDetails::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgBluetoothManagerAdapterDetails::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterDetails.id)
}

// optional string mac = 2;
inline bool CMsgBluetoothManagerAdapterDetails::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterDetails::has_mac() const {
  return _internal_has_mac();
}
inline void CMsgBluetoothManagerAdapterDetails::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBluetoothManagerAdapterDetails::mac() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterDetails.mac)
  return _internal_mac();
}
inline void CMsgBluetoothManagerAdapterDetails::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterDetails.mac)
}
inline std::string* CMsgBluetoothManagerAdapterDetails::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothManagerAdapterDetails.mac)
  return _internal_mutable_mac();
}
inline const std::string& CMsgBluetoothManagerAdapterDetails::_internal_mac() const {
  return mac_.Get();
}
inline void CMsgBluetoothManagerAdapterDetails::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgBluetoothManagerAdapterDetails::set_mac(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgBluetoothManagerAdapterDetails.mac)
}
inline void CMsgBluetoothManagerAdapterDetails::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgBluetoothManagerAdapterDetails.mac)
}
inline void CMsgBluetoothManagerAdapterDetails::set_mac(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgBluetoothManagerAdapterDetails.mac)
}
inline std::string* CMsgBluetoothManagerAdapterDetails::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgBluetoothManagerAdapterDetails::release_mac() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothManagerAdapterDetails.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgBluetoothManagerAdapterDetails::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothManagerAdapterDetails.mac)
}

// optional string name = 3;
inline bool CMsgBluetoothManagerAdapterDetails::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgBluetoothManagerAdapterDetails::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBluetoothManagerAdapterDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterDetails.name)
  return _internal_name();
}
inline void CMsgBluetoothManagerAdapterDetails::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterDetails.name)
}
inline std::string* CMsgBluetoothManagerAdapterDetails::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothManagerAdapterDetails.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgBluetoothManagerAdapterDetails::_internal_name() const {
  return name_.Get();
}
inline void CMsgBluetoothManagerAdapterDetails::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgBluetoothManagerAdapterDetails::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgBluetoothManagerAdapterDetails.name)
}
inline void CMsgBluetoothManagerAdapterDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgBluetoothManagerAdapterDetails.name)
}
inline void CMsgBluetoothManagerAdapterDetails::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgBluetoothManagerAdapterDetails.name)
}
inline std::string* CMsgBluetoothManagerAdapterDetails::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgBluetoothManagerAdapterDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothManagerAdapterDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgBluetoothManagerAdapterDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothManagerAdapterDetails.name)
}

// optional bool is_enabled = 4;
inline bool CMsgBluetoothManagerAdapterDetails::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterDetails::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CMsgBluetoothManagerAdapterDetails::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBluetoothManagerAdapterDetails::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CMsgBluetoothManagerAdapterDetails::is_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterDetails.is_enabled)
  return _internal_is_enabled();
}
inline void CMsgBluetoothManagerAdapterDetails::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_enabled_ = value;
}
inline void CMsgBluetoothManagerAdapterDetails::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterDetails.is_enabled)
}

// optional bool is_discovering = 5;
inline bool CMsgBluetoothManagerAdapterDetails::_internal_has_is_discovering() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerAdapterDetails::has_is_discovering() const {
  return _internal_has_is_discovering();
}
inline void CMsgBluetoothManagerAdapterDetails::clear_is_discovering() {
  is_discovering_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgBluetoothManagerAdapterDetails::_internal_is_discovering() const {
  return is_discovering_;
}
inline bool CMsgBluetoothManagerAdapterDetails::is_discovering() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerAdapterDetails.is_discovering)
  return _internal_is_discovering();
}
inline void CMsgBluetoothManagerAdapterDetails::_internal_set_is_discovering(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_discovering_ = value;
}
inline void CMsgBluetoothManagerAdapterDetails::set_is_discovering(bool value) {
  _internal_set_is_discovering(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerAdapterDetails.is_discovering)
}

// -------------------------------------------------------------------

// CBluetoothManager_GetAdapterDetails_Response

// optional .CMsgBluetoothManagerAdapterDetails adapter = 1;
inline bool CBluetoothManager_GetAdapterDetails_Response::_internal_has_adapter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || adapter_ != nullptr);
  return value;
}
inline bool CBluetoothManager_GetAdapterDetails_Response::has_adapter() const {
  return _internal_has_adapter();
}
inline void CBluetoothManager_GetAdapterDetails_Response::clear_adapter() {
  if (adapter_ != nullptr) adapter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBluetoothManagerAdapterDetails& CBluetoothManager_GetAdapterDetails_Response::_internal_adapter() const {
  const ::CMsgBluetoothManagerAdapterDetails* p = adapter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBluetoothManagerAdapterDetails&>(
      ::_CMsgBluetoothManagerAdapterDetails_default_instance_);
}
inline const ::CMsgBluetoothManagerAdapterDetails& CBluetoothManager_GetAdapterDetails_Response::adapter() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetAdapterDetails_Response.adapter)
  return _internal_adapter();
}
inline void CBluetoothManager_GetAdapterDetails_Response::unsafe_arena_set_allocated_adapter(
    ::CMsgBluetoothManagerAdapterDetails* adapter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adapter_);
  }
  adapter_ = adapter;
  if (adapter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBluetoothManager_GetAdapterDetails_Response.adapter)
}
inline ::CMsgBluetoothManagerAdapterDetails* CBluetoothManager_GetAdapterDetails_Response::release_adapter() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothManagerAdapterDetails* temp = adapter_;
  adapter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgBluetoothManagerAdapterDetails* CBluetoothManager_GetAdapterDetails_Response::unsafe_arena_release_adapter() {
  // @@protoc_insertion_point(field_release:CBluetoothManager_GetAdapterDetails_Response.adapter)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothManagerAdapterDetails* temp = adapter_;
  adapter_ = nullptr;
  return temp;
}
inline ::CMsgBluetoothManagerAdapterDetails* CBluetoothManager_GetAdapterDetails_Response::_internal_mutable_adapter() {
  _has_bits_[0] |= 0x00000001u;
  if (adapter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBluetoothManagerAdapterDetails>(GetArena());
    adapter_ = p;
  }
  return adapter_;
}
inline ::CMsgBluetoothManagerAdapterDetails* CBluetoothManager_GetAdapterDetails_Response::mutable_adapter() {
  // @@protoc_insertion_point(field_mutable:CBluetoothManager_GetAdapterDetails_Response.adapter)
  return _internal_mutable_adapter();
}
inline void CBluetoothManager_GetAdapterDetails_Response::set_allocated_adapter(::CMsgBluetoothManagerAdapterDetails* adapter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete adapter_;
  }
  if (adapter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adapter);
    if (message_arena != submessage_arena) {
      adapter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adapter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adapter_ = adapter;
  // @@protoc_insertion_point(field_set_allocated:CBluetoothManager_GetAdapterDetails_Response.adapter)
}

// -------------------------------------------------------------------

// CBluetoothManager_GetDeviceDetails_Request

// optional uint32 id = 1;
inline bool CBluetoothManager_GetDeviceDetails_Request::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_GetDeviceDetails_Request::has_id() const {
  return _internal_has_id();
}
inline void CBluetoothManager_GetDeviceDetails_Request::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_GetDeviceDetails_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_GetDeviceDetails_Request::id() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetDeviceDetails_Request.id)
  return _internal_id();
}
inline void CBluetoothManager_GetDeviceDetails_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CBluetoothManager_GetDeviceDetails_Request::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_GetDeviceDetails_Request.id)
}

// -------------------------------------------------------------------

// CMsgBluetoothManagerDeviceDetails

// optional uint32 id = 1 [default = 0];
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceDetails::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.id)
  return _internal_id();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.id)
}

// optional uint32 adapter_id = 2 [default = 0];
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_adapter_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_adapter_id() const {
  return _internal_has_adapter_id();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_adapter_id() {
  adapter_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceDetails::_internal_adapter_id() const {
  return adapter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBluetoothManagerDeviceDetails::adapter_id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.adapter_id)
  return _internal_adapter_id();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_adapter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  adapter_id_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_adapter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adapter_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.adapter_id)
}

// optional .EBluetoothDeviceType etype = 3 [default = BluetoothDeviceType_Invalid];
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EBluetoothDeviceType CMsgBluetoothManagerDeviceDetails::_internal_etype() const {
  return static_cast< ::EBluetoothDeviceType >(etype_);
}
inline ::EBluetoothDeviceType CMsgBluetoothManagerDeviceDetails::etype() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.etype)
  return _internal_etype();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_etype(::EBluetoothDeviceType value) {
  assert(::EBluetoothDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  etype_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_etype(::EBluetoothDeviceType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.etype)
}

// optional string mac = 4;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_mac() const {
  return _internal_has_mac();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBluetoothManagerDeviceDetails::mac() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.mac)
  return _internal_mac();
}
inline void CMsgBluetoothManagerDeviceDetails::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.mac)
}
inline std::string* CMsgBluetoothManagerDeviceDetails::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothManagerDeviceDetails.mac)
  return _internal_mutable_mac();
}
inline const std::string& CMsgBluetoothManagerDeviceDetails::_internal_mac() const {
  return mac_.Get();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgBluetoothManagerDeviceDetails::set_mac(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgBluetoothManagerDeviceDetails.mac)
}
inline void CMsgBluetoothManagerDeviceDetails::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgBluetoothManagerDeviceDetails.mac)
}
inline void CMsgBluetoothManagerDeviceDetails::set_mac(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgBluetoothManagerDeviceDetails.mac)
}
inline std::string* CMsgBluetoothManagerDeviceDetails::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgBluetoothManagerDeviceDetails::release_mac() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothManagerDeviceDetails.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgBluetoothManagerDeviceDetails::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothManagerDeviceDetails.mac)
}

// optional string name = 5;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBluetoothManagerDeviceDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.name)
  return _internal_name();
}
inline void CMsgBluetoothManagerDeviceDetails::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.name)
}
inline std::string* CMsgBluetoothManagerDeviceDetails::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothManagerDeviceDetails.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgBluetoothManagerDeviceDetails::_internal_name() const {
  return name_.Get();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgBluetoothManagerDeviceDetails::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgBluetoothManagerDeviceDetails.name)
}
inline void CMsgBluetoothManagerDeviceDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgBluetoothManagerDeviceDetails.name)
}
inline void CMsgBluetoothManagerDeviceDetails::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgBluetoothManagerDeviceDetails.name)
}
inline std::string* CMsgBluetoothManagerDeviceDetails::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgBluetoothManagerDeviceDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothManagerDeviceDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgBluetoothManagerDeviceDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothManagerDeviceDetails.name)
}

// optional bool is_connected = 6;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_is_connected() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_is_connected() const {
  return _internal_has_is_connected();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_is_connected() {
  is_connected_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_is_connected() const {
  return is_connected_;
}
inline bool CMsgBluetoothManagerDeviceDetails::is_connected() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.is_connected)
  return _internal_is_connected();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_is_connected(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_connected_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.is_connected)
}

// optional bool is_paired = 7;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_is_paired() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_is_paired() const {
  return _internal_has_is_paired();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_is_paired() {
  is_paired_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_is_paired() const {
  return is_paired_;
}
inline bool CMsgBluetoothManagerDeviceDetails::is_paired() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.is_paired)
  return _internal_is_paired();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_is_paired(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_paired_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_is_paired(bool value) {
  _internal_set_is_paired(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.is_paired)
}

// optional bool is_pairing = 8;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_is_pairing() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_is_pairing() const {
  return _internal_has_is_pairing();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_is_pairing() {
  is_pairing_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_is_pairing() const {
  return is_pairing_;
}
inline bool CMsgBluetoothManagerDeviceDetails::is_pairing() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.is_pairing)
  return _internal_is_pairing();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_is_pairing(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_pairing_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_is_pairing(bool value) {
  _internal_set_is_pairing(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.is_pairing)
}

// optional bool wake_allowed = 9;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_wake_allowed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_wake_allowed() const {
  return _internal_has_wake_allowed();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_wake_allowed() {
  wake_allowed_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_wake_allowed() const {
  return wake_allowed_;
}
inline bool CMsgBluetoothManagerDeviceDetails::wake_allowed() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.wake_allowed)
  return _internal_wake_allowed();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_wake_allowed(bool value) {
  _has_bits_[0] |= 0x00000100u;
  wake_allowed_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_wake_allowed(bool value) {
  _internal_set_wake_allowed(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.wake_allowed)
}

// optional bool wake_allowed_supported = 10;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_wake_allowed_supported() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_wake_allowed_supported() const {
  return _internal_has_wake_allowed_supported();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_wake_allowed_supported() {
  wake_allowed_supported_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_wake_allowed_supported() const {
  return wake_allowed_supported_;
}
inline bool CMsgBluetoothManagerDeviceDetails::wake_allowed_supported() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.wake_allowed_supported)
  return _internal_wake_allowed_supported();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_wake_allowed_supported(bool value) {
  _has_bits_[0] |= 0x00000400u;
  wake_allowed_supported_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_wake_allowed_supported(bool value) {
  _internal_set_wake_allowed_supported(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.wake_allowed_supported)
}

// optional int32 battery_percent = 11;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_battery_percent() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_battery_percent() const {
  return _internal_has_battery_percent();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_battery_percent() {
  battery_percent_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgBluetoothManagerDeviceDetails::_internal_battery_percent() const {
  return battery_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgBluetoothManagerDeviceDetails::battery_percent() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.battery_percent)
  return _internal_battery_percent();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_battery_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  battery_percent_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_battery_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battery_percent(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.battery_percent)
}

// optional bool operation_in_progress = 12;
inline bool CMsgBluetoothManagerDeviceDetails::_internal_has_operation_in_progress() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBluetoothManagerDeviceDetails::has_operation_in_progress() const {
  return _internal_has_operation_in_progress();
}
inline void CMsgBluetoothManagerDeviceDetails::clear_operation_in_progress() {
  operation_in_progress_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgBluetoothManagerDeviceDetails::_internal_operation_in_progress() const {
  return operation_in_progress_;
}
inline bool CMsgBluetoothManagerDeviceDetails::operation_in_progress() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothManagerDeviceDetails.operation_in_progress)
  return _internal_operation_in_progress();
}
inline void CMsgBluetoothManagerDeviceDetails::_internal_set_operation_in_progress(bool value) {
  _has_bits_[0] |= 0x00000800u;
  operation_in_progress_ = value;
}
inline void CMsgBluetoothManagerDeviceDetails::set_operation_in_progress(bool value) {
  _internal_set_operation_in_progress(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothManagerDeviceDetails.operation_in_progress)
}

// -------------------------------------------------------------------

// CBluetoothManager_GetDeviceDetails_Response

// optional .CMsgBluetoothManagerDeviceDetails device = 1;
inline bool CBluetoothManager_GetDeviceDetails_Response::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool CBluetoothManager_GetDeviceDetails_Response::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_GetDeviceDetails_Response::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBluetoothManagerDeviceDetails& CBluetoothManager_GetDeviceDetails_Response::_internal_device() const {
  const ::CMsgBluetoothManagerDeviceDetails* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBluetoothManagerDeviceDetails&>(
      ::_CMsgBluetoothManagerDeviceDetails_default_instance_);
}
inline const ::CMsgBluetoothManagerDeviceDetails& CBluetoothManager_GetDeviceDetails_Response::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_GetDeviceDetails_Response.device)
  return _internal_device();
}
inline void CBluetoothManager_GetDeviceDetails_Response::unsafe_arena_set_allocated_device(
    ::CMsgBluetoothManagerDeviceDetails* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBluetoothManager_GetDeviceDetails_Response.device)
}
inline ::CMsgBluetoothManagerDeviceDetails* CBluetoothManager_GetDeviceDetails_Response::release_device() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothManagerDeviceDetails* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgBluetoothManagerDeviceDetails* CBluetoothManager_GetDeviceDetails_Response::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:CBluetoothManager_GetDeviceDetails_Response.device)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothManagerDeviceDetails* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::CMsgBluetoothManagerDeviceDetails* CBluetoothManager_GetDeviceDetails_Response::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000001u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBluetoothManagerDeviceDetails>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::CMsgBluetoothManagerDeviceDetails* CBluetoothManager_GetDeviceDetails_Response::mutable_device() {
  // @@protoc_insertion_point(field_mutable:CBluetoothManager_GetDeviceDetails_Response.device)
  return _internal_mutable_device();
}
inline void CBluetoothManager_GetDeviceDetails_Response::set_allocated_device(::CMsgBluetoothManagerDeviceDetails* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:CBluetoothManager_GetDeviceDetails_Response.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_StateChanged_Notification

// -------------------------------------------------------------------

// CBluetoothManager_SetDiscovering_Request

// optional bool enabled = 1;
inline bool CBluetoothManager_SetDiscovering_Request::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_SetDiscovering_Request::has_enabled() const {
  return _internal_has_enabled();
}
inline void CBluetoothManager_SetDiscovering_Request::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CBluetoothManager_SetDiscovering_Request::_internal_enabled() const {
  return enabled_;
}
inline bool CBluetoothManager_SetDiscovering_Request::enabled() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_SetDiscovering_Request.enabled)
  return _internal_enabled();
}
inline void CBluetoothManager_SetDiscovering_Request::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void CBluetoothManager_SetDiscovering_Request::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_SetDiscovering_Request.enabled)
}

// -------------------------------------------------------------------

// CBluetoothManager_SetDiscovering_Response

// -------------------------------------------------------------------

// CBluetoothManager_Pair_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_Pair_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_Pair_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_Pair_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Pair_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Pair_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_Pair_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_Pair_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_Pair_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_Pair_Request.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_Pair_Response

// -------------------------------------------------------------------

// CBluetoothManager_CancelPair_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_CancelPair_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_CancelPair_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_CancelPair_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_CancelPair_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_CancelPair_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_CancelPair_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_CancelPair_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_CancelPair_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_CancelPair_Request.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_CancelPair_Response

// -------------------------------------------------------------------

// CBluetoothManager_Forget_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_Forget_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_Forget_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_Forget_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Forget_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Forget_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_Forget_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_Forget_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_Forget_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_Forget_Request.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_Forget_Response

// -------------------------------------------------------------------

// CBluetoothManager_Connect_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_Connect_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_Connect_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_Connect_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Connect_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Connect_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_Connect_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_Connect_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_Connect_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_Connect_Request.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_Connect_Response

// -------------------------------------------------------------------

// CBluetoothManager_Disconnect_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_Disconnect_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_Disconnect_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_Disconnect_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Disconnect_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_Disconnect_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_Disconnect_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_Disconnect_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_Disconnect_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_Disconnect_Request.device)
}

// -------------------------------------------------------------------

// CBluetoothManager_Disconnect_Response

// -------------------------------------------------------------------

// CBluetoothManager_SetWakeAllowed_Request

// optional uint32 device = 1;
inline bool CBluetoothManager_SetWakeAllowed_Request::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBluetoothManager_SetWakeAllowed_Request::has_device() const {
  return _internal_has_device();
}
inline void CBluetoothManager_SetWakeAllowed_Request::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_SetWakeAllowed_Request::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBluetoothManager_SetWakeAllowed_Request::device() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_SetWakeAllowed_Request.device)
  return _internal_device();
}
inline void CBluetoothManager_SetWakeAllowed_Request::_internal_set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CBluetoothManager_SetWakeAllowed_Request::set_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_SetWakeAllowed_Request.device)
}

// optional bool allowed = 2;
inline bool CBluetoothManager_SetWakeAllowed_Request::_internal_has_allowed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBluetoothManager_SetWakeAllowed_Request::has_allowed() const {
  return _internal_has_allowed();
}
inline void CBluetoothManager_SetWakeAllowed_Request::clear_allowed() {
  allowed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBluetoothManager_SetWakeAllowed_Request::_internal_allowed() const {
  return allowed_;
}
inline bool CBluetoothManager_SetWakeAllowed_Request::allowed() const {
  // @@protoc_insertion_point(field_get:CBluetoothManager_SetWakeAllowed_Request.allowed)
  return _internal_allowed();
}
inline void CBluetoothManager_SetWakeAllowed_Request::_internal_set_allowed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  allowed_ = value;
}
inline void CBluetoothManager_SetWakeAllowed_Request::set_allowed(bool value) {
  _internal_set_allowed(value);
  // @@protoc_insertion_point(field_set:CBluetoothManager_SetWakeAllowed_Request.allowed)
}

// -------------------------------------------------------------------

// CBluetoothManager_SetWakeAllowed_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fbluetooth_2eproto
