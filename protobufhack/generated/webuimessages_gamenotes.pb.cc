// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamenotes.proto

#include "webuimessages_gamenotes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameNotes_UploadImage_Request::CGameNotes_UploadImage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameNotes_UploadImage_RequestDefaultTypeInternal {
  constexpr CGameNotes_UploadImage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNotes_UploadImage_RequestDefaultTypeInternal() {}
  union {
    CGameNotes_UploadImage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNotes_UploadImage_RequestDefaultTypeInternal _CGameNotes_UploadImage_Request_default_instance_;
constexpr CGameNotes_UploadImage_Response::CGameNotes_UploadImage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameNotes_UploadImage_ResponseDefaultTypeInternal {
  constexpr CGameNotes_UploadImage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNotes_UploadImage_ResponseDefaultTypeInternal() {}
  union {
    CGameNotes_UploadImage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNotes_UploadImage_ResponseDefaultTypeInternal _CGameNotes_UploadImage_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fgamenotes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fgamenotes_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fgamenotes_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fgamenotes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Request, file_prefix_),
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Request, mime_type_),
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Request, data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameNotes_UploadImage_Response, filename_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CGameNotes_UploadImage_Request)},
  { 11, 17, sizeof(::CGameNotes_UploadImage_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNotes_UploadImage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNotes_UploadImage_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fgamenotes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035webuimessages_gamenotes.proto\032 google/"
  "protobuf/descriptor.proto\032\030steammessages"
  "_base.proto\032\030webuimessages_base.proto\"V\n"
  "\036CGameNotes_UploadImage_Request\022\023\n\013file_"
  "prefix\030\001 \001(\t\022\021\n\tmime_type\030\002 \001(\t\022\014\n\004data\030"
  "\003 \001(\014\"3\n\037CGameNotes_UploadImage_Response"
  "\022\020\n\010filename\030\001 \001(\t2c\n\tGameNotes\022P\n\013Uploa"
  "dImage\022\037.CGameNotes_UploadImage_Request\032"
  " .CGameNotes_UploadImage_Response\032\004\200\227\"\001B"
  "\037H\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fgamenotes_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fgamenotes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamenotes_2eproto = {
  false, false, 392, descriptor_table_protodef_webuimessages_5fgamenotes_2eproto, "webuimessages_gamenotes.proto", 
  &descriptor_table_webuimessages_5fgamenotes_2eproto_once, descriptor_table_webuimessages_5fgamenotes_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_webuimessages_5fgamenotes_2eproto::offsets,
  file_level_metadata_webuimessages_5fgamenotes_2eproto, file_level_enum_descriptors_webuimessages_5fgamenotes_2eproto, file_level_service_descriptors_webuimessages_5fgamenotes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fgamenotes_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamenotes_2eproto);
  return descriptor_table_webuimessages_5fgamenotes_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fgamenotes_2eproto(&descriptor_table_webuimessages_5fgamenotes_2eproto);

// ===================================================================

class CGameNotes_UploadImage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNotes_UploadImage_Request>()._has_bits_);
  static void set_has_file_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameNotes_UploadImage_Request::CGameNotes_UploadImage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNotes_UploadImage_Request)
}
CGameNotes_UploadImage_Request::CGameNotes_UploadImage_Request(const CGameNotes_UploadImage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_prefix()) {
    file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_prefix(), 
      GetArena());
  }
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mime_type()) {
    mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mime_type(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameNotes_UploadImage_Request)
}

void CGameNotes_UploadImage_Request::SharedCtor() {
file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameNotes_UploadImage_Request::~CGameNotes_UploadImage_Request() {
  // @@protoc_insertion_point(destructor:CGameNotes_UploadImage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameNotes_UploadImage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameNotes_UploadImage_Request::ArenaDtor(void* object) {
  CGameNotes_UploadImage_Request* _this = reinterpret_cast< CGameNotes_UploadImage_Request* >(object);
  (void)_this;
}
void CGameNotes_UploadImage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNotes_UploadImage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNotes_UploadImage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotes_UploadImage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNotes_UploadImage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNotes_UploadImage_Request.file_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mime_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNotes_UploadImage_Request.mime_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameNotes_UploadImage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotes_UploadImage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_prefix().data(), static_cast<int>(this->_internal_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNotes_UploadImage_Request.file_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_prefix(), target);
  }

  // optional string mime_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNotes_UploadImage_Request.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotes_UploadImage_Request)
  return target;
}

size_t CGameNotes_UploadImage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotes_UploadImage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_prefix());
    }

    // optional string mime_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mime_type());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotes_UploadImage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotes_UploadImage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotes_UploadImage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameNotes_UploadImage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotes_UploadImage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotes_UploadImage_Request)
    MergeFrom(*source);
  }
}

void CGameNotes_UploadImage_Request::MergeFrom(const CGameNotes_UploadImage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotes_UploadImage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_prefix(from._internal_file_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void CGameNotes_UploadImage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotes_UploadImage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotes_UploadImage_Request::CopyFrom(const CGameNotes_UploadImage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotes_UploadImage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotes_UploadImage_Request::IsInitialized() const {
  return true;
}

void CGameNotes_UploadImage_Request::InternalSwap(CGameNotes_UploadImage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_prefix_.Swap(&other->file_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mime_type_.Swap(&other->mime_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNotes_UploadImage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameNotes_UploadImage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNotes_UploadImage_Response>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameNotes_UploadImage_Response::CGameNotes_UploadImage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNotes_UploadImage_Response)
}
CGameNotes_UploadImage_Response::CGameNotes_UploadImage_Response(const CGameNotes_UploadImage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameNotes_UploadImage_Response)
}

void CGameNotes_UploadImage_Response::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameNotes_UploadImage_Response::~CGameNotes_UploadImage_Response() {
  // @@protoc_insertion_point(destructor:CGameNotes_UploadImage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameNotes_UploadImage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameNotes_UploadImage_Response::ArenaDtor(void* object) {
  CGameNotes_UploadImage_Response* _this = reinterpret_cast< CGameNotes_UploadImage_Response* >(object);
  (void)_this;
}
void CGameNotes_UploadImage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNotes_UploadImage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNotes_UploadImage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNotes_UploadImage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNotes_UploadImage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNotes_UploadImage_Response.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameNotes_UploadImage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNotes_UploadImage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNotes_UploadImage_Response.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNotes_UploadImage_Response)
  return target;
}

size_t CGameNotes_UploadImage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNotes_UploadImage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string filename = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNotes_UploadImage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNotes_UploadImage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotes_UploadImage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameNotes_UploadImage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNotes_UploadImage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNotes_UploadImage_Response)
    MergeFrom(*source);
  }
}

void CGameNotes_UploadImage_Response::MergeFrom(const CGameNotes_UploadImage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNotes_UploadImage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filename()) {
    _internal_set_filename(from._internal_filename());
  }
}

void CGameNotes_UploadImage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNotes_UploadImage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotes_UploadImage_Response::CopyFrom(const CGameNotes_UploadImage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNotes_UploadImage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotes_UploadImage_Response::IsInitialized() const {
  return true;
}

void CGameNotes_UploadImage_Response::InternalSwap(CGameNotes_UploadImage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNotes_UploadImage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GameNotes::~GameNotes() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameNotes::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamenotes_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamenotes_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameNotes::GetDescriptor() {
  return descriptor();
}

void GameNotes::UploadImage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameNotes_UploadImage_Request*,
                         ::CGameNotes_UploadImage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadImage() not implemented.");
  done->Run();
}

void GameNotes::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamenotes_2eproto[0]);
  switch(method->index()) {
    case 0:
      UploadImage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameNotes_UploadImage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameNotes_UploadImage_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameNotes::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNotes_UploadImage_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameNotes::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNotes_UploadImage_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNotes_Stub::GameNotes_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNotes_Stub::GameNotes_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameNotes_Stub::~GameNotes_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNotes_Stub::UploadImage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameNotes_UploadImage_Request* request,
                              ::CGameNotes_UploadImage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameNotes_UploadImage_Request* Arena::CreateMaybeMessage< ::CGameNotes_UploadImage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNotes_UploadImage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameNotes_UploadImage_Response* Arena::CreateMaybeMessage< ::CGameNotes_UploadImage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNotes_UploadImage_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
