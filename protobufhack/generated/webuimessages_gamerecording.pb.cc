// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamerecording.proto

#include "webuimessages_gamerecording.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Request_default_instance_;
constexpr CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , most_recent_start_time_(0u)
  , recording_type_(0)

  , video_duration_seconds_(0)
  , timeline_duration_seconds_(0)
  , file_size_(PROTOBUF_ULONGLONG(0))
  , is_active_(false){}
struct CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Response_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Response_App_default_instance_;
constexpr CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Response_default_instance_;
constexpr CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Request_default_instance_;
constexpr CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_(){}
struct CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Response_default_instance_;
constexpr CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Request_default_instance_;
constexpr CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_()
  , game_id_(PROTOBUF_ULONGLONG(0))
  , first_timeline_start_offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Response_default_instance_;
constexpr CGameRecording_QueryPhases_Request_Tag::CGameRecording_QueryPhases_Request_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_QueryPhases_Request_TagDefaultTypeInternal {
  constexpr CGameRecording_QueryPhases_Request_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_QueryPhases_Request_TagDefaultTypeInternal() {}
  union {
    CGameRecording_QueryPhases_Request_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_QueryPhases_Request_TagDefaultTypeInternal _CGameRecording_QueryPhases_Request_Tag_default_instance_;
constexpr CGameRecording_QueryPhases_Request::CGameRecording_QueryPhases_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_tags_()
  , filter_search_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filter_phase_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0u)
  , count_(0u)
  , filter_gameid_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_QueryPhases_RequestDefaultTypeInternal {
  constexpr CGameRecording_QueryPhases_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_QueryPhases_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_QueryPhases_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_QueryPhases_RequestDefaultTypeInternal _CGameRecording_QueryPhases_Request_default_instance_;
constexpr CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal {
  constexpr CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal() {}
  union {
    CGameRecording_QueryPhases_Response_Phase_BackgroundRecording _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal _CGameRecording_QueryPhases_Response_Phase_BackgroundRecording_default_instance_;
constexpr CGameRecording_QueryPhases_Response_Phase::CGameRecording_QueryPhases_Response_Phase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , contained_tags_()
  , clip_ids_()
  , screenshots_()
  , significant_events_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phase_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , background_recording_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u)
  , active_(false)
  , start_ms_(PROTOBUF_ULONGLONG(0))
  , type_(1)
{}
struct CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal {
  constexpr CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal() {}
  union {
    CGameRecording_QueryPhases_Response_Phase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal _CGameRecording_QueryPhases_Response_Phase_default_instance_;
constexpr CGameRecording_QueryPhases_Response::CGameRecording_QueryPhases_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phases_()
  , total_count_(0u){}
struct CGameRecording_QueryPhases_ResponseDefaultTypeInternal {
  constexpr CGameRecording_QueryPhases_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_QueryPhases_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_QueryPhases_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_QueryPhases_ResponseDefaultTypeInternal _CGameRecording_QueryPhases_Response_default_instance_;
constexpr CGameRecording_GetTags_Request::CGameRecording_GetTags_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTags_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTags_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTags_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTags_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTags_RequestDefaultTypeInternal _CGameRecording_GetTags_Request_default_instance_;
constexpr CGameRecording_GetTags_Response::CGameRecording_GetTags_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct CGameRecording_GetTags_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTags_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTags_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTags_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTags_ResponseDefaultTypeInternal _CGameRecording_GetTags_Response_default_instance_;
constexpr CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetEnoughDiskSpace_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Request_default_instance_;
constexpr CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enough_space_(false){}
struct CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetEnoughDiskSpace_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Response_default_instance_;
constexpr CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetAvailableDiskSpace_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Request_default_instance_;
constexpr CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(0){}
struct CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetAvailableDiskSpace_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Response_default_instance_;
constexpr CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , start_time_(0u)
  , notification_type_(1)
{}
struct CGameRecording_TimelineChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_TimelineChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TimelineChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_TimelineChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TimelineChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineChanged_Notification_default_instance_;
constexpr CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , start_offset_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , recording_type_(0)

  , notification_type_(1)
{}
struct CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_RecordingSessionChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal _CGameRecording_RecordingSessionChanged_Notification_default_instance_;
constexpr CTimelineEntry::CTimelineEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_()
  , timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , achievement_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phase_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_id_(PROTOBUF_ULONGLONG(0))
  , time_(PROTOBUF_ULONGLONG(0))
  , type_(0)

  , game_mode_(0)
  , range_duration_(PROTOBUF_ULONGLONG(0))
  , range_possible_clip_(0)
  , marker_priority_(0)
  , screenshot_handle_(0u){}
struct CTimelineEntryDefaultTypeInternal {
  constexpr CTimelineEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimelineEntryDefaultTypeInternal() {}
  union {
    CTimelineEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimelineEntryDefaultTypeInternal _CTimelineEntry_default_instance_;
constexpr CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_TimelineEntryChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineEntryChanged_Notification_default_instance_;
constexpr CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal {
  constexpr CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_LowDiskSpace_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal _CGameRecording_LowDiskSpace_Notification_default_instance_;
constexpr CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_PostGameHighlightsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal _CGameRecording_PostGameHighlightsChanged_Notification_default_instance_;
constexpr CGameRecording_OpenOverlayToGamePhase_Notification::CGameRecording_OpenOverlayToGamePhase_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phase_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal {
  constexpr CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_OpenOverlayToGamePhase_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal _CGameRecording_OpenOverlayToGamePhase_Notification_default_instance_;
constexpr CGameRecording_OpenOverlayToTimelineEvent_Notification::CGameRecording_OpenOverlayToTimelineEvent_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , entry_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal {
  constexpr CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_OpenOverlayToTimelineEvent_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal _CGameRecording_OpenOverlayToTimelineEvent_Notification_default_instance_;
constexpr CGameRecording_PhaseListChanged_Notification::CGameRecording_PhaseListChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_PhaseListChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal _CGameRecording_PhaseListChanged_Notification_default_instance_;
constexpr CGameRecording_ClipSummary::CGameRecording_ClipSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , start_offset_ms_(PROTOBUF_ULONGLONG(0))
  , published_file_id_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u)
  , date_clipped_(0u)
  , file_size_(PROTOBUF_ULONGLONG(0))
  , temporary_(false)
  , original_gaming_device_type_(0u)
  , date_downloaded_(0u)
  , thumbnail_width_(0u)
  , thumbnail_height_(0u){}
struct CGameRecording_ClipSummaryDefaultTypeInternal {
  constexpr CGameRecording_ClipSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipSummaryDefaultTypeInternal() {}
  union {
    CGameRecording_ClipSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipSummaryDefaultTypeInternal _CGameRecording_ClipSummary_default_instance_;
constexpr CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_SaveClip_Request_PositionDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_Request_PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_Request_PositionDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Request_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_Request_PositionDefaultTypeInternal _CGameRecording_SaveClip_Request_Position_default_instance_;
constexpr CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , src_clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(nullptr)
  , end_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , temporary_(false){}
struct CGameRecording_SaveClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_RequestDefaultTypeInternal _CGameRecording_SaveClip_Request_default_instance_;
constexpr CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_SaveClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_ResponseDefaultTypeInternal _CGameRecording_SaveClip_Response_default_instance_;
constexpr CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_DeleteClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_DeleteClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteClip_RequestDefaultTypeInternal _CGameRecording_DeleteClip_Request_default_instance_;
constexpr CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_DeleteClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_DeleteClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteClip_ResponseDefaultTypeInternal _CGameRecording_DeleteClip_Response_default_instance_;
constexpr CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitrate_kbps_(0)
  , width_(0)
  , height_(0)
  , frames_per_second_(0){}
struct CGameRecording_ExportClip_SettingsDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_SettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_SettingsDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_SettingsDefaultTypeInternal _CGameRecording_ExportClip_Settings_default_instance_;
constexpr CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export_mp4_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr){}
struct CGameRecording_ExportClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_RequestDefaultTypeInternal _CGameRecording_ExportClip_Request_default_instance_;
constexpr CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_ExportClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_ResponseDefaultTypeInternal _CGameRecording_ExportClip_Response_default_instance_;
constexpr CGameRecording_TakeScreenshot_Request::CGameRecording_TakeScreenshot_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , timeline_offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_TakeScreenshot_RequestDefaultTypeInternal {
  constexpr CGameRecording_TakeScreenshot_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TakeScreenshot_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_TakeScreenshot_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TakeScreenshot_RequestDefaultTypeInternal _CGameRecording_TakeScreenshot_Request_default_instance_;
constexpr CGameRecording_TakeScreenshot_Response::CGameRecording_TakeScreenshot_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : screenshot_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal {
  constexpr CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_TakeScreenshot_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal _CGameRecording_TakeScreenshot_Response_default_instance_;
constexpr CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visibility_(0){}
struct CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal {
  constexpr CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UploadClipToSteam_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal _CGameRecording_UploadClipToSteam_Request_default_instance_;
constexpr CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UploadClipToSteam_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal _CGameRecording_UploadClipToSteam_Response_default_instance_;
constexpr CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_ZipClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_ZipClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ZipClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ZipClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ZipClip_RequestDefaultTypeInternal _CGameRecording_ZipClip_Request_default_instance_;
constexpr CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zip_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_ZipClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ZipClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ZipClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ZipClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ZipClip_ResponseDefaultTypeInternal _CGameRecording_ZipClip_Response_default_instance_;
constexpr CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , created_after_(0u)
  , include_temporary_(false){}
struct CGameRecording_GetClips_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetClips_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetClips_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetClips_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetClips_RequestDefaultTypeInternal _CGameRecording_GetClips_Request_default_instance_;
constexpr CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_(){}
struct CGameRecording_GetClips_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetClips_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetClips_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetClips_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetClips_ResponseDefaultTypeInternal _CGameRecording_GetClips_Response_default_instance_;
constexpr CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , created_after_(0u){}
struct CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetAndTrimPostGameHighlights_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_;
constexpr CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetAndTrimPostGameHighlights_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_;
constexpr CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserAddTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserAddTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Response_default_instance_;
constexpr CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserUpdateTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserUpdateTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Response_default_instance_;
constexpr CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , entry_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserRemoveTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserRemoveTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Response_default_instance_;
constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_ids_(){}
struct CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal {
  constexpr CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ManuallyDeleteRecordingsForApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_;
constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ManuallyDeleteRecordingsForApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_;
constexpr CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : folder_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTotalDiskSpaceUsage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_;
constexpr CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTotalDiskSpaceUsage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_;
constexpr CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_offset_us_()
  , recording_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_precision_(0)

  , major_axis_(512u)
  , format_(1)
{}
struct CGameRecording_GetThumbnails_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_RequestDefaultTypeInternal _CGameRecording_GetThumbnails_Request_default_instance_;
constexpr CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u){}
struct CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Response_Thumbnail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal _CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_;
constexpr CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnails_(){}
struct CGameRecording_GetThumbnails_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_ResponseDefaultTypeInternal _CGameRecording_GetThumbnails_Response_default_instance_;
constexpr CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_StartRecording_RequestDefaultTypeInternal {
  constexpr CGameRecording_StartRecording_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StartRecording_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_StartRecording_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StartRecording_RequestDefaultTypeInternal _CGameRecording_StartRecording_Request_default_instance_;
constexpr CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_StartRecording_ResponseDefaultTypeInternal {
  constexpr CGameRecording_StartRecording_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StartRecording_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_StartRecording_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StartRecording_ResponseDefaultTypeInternal _CGameRecording_StartRecording_Response_default_instance_;
constexpr CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_StopRecording_RequestDefaultTypeInternal {
  constexpr CGameRecording_StopRecording_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StopRecording_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_StopRecording_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StopRecording_RequestDefaultTypeInternal _CGameRecording_StopRecording_Request_default_instance_;
constexpr CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_StopRecording_ResponseDefaultTypeInternal {
  constexpr CGameRecording_StopRecording_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StopRecording_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_StopRecording_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StopRecording_ResponseDefaultTypeInternal _CGameRecording_StopRecording_Response_default_instance_;
constexpr CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetRecordingSize_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetRecordingSize_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetRecordingSize_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetRecordingSize_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetRecordingSize_RequestDefaultTypeInternal _CGameRecording_GetRecordingSize_Request_default_instance_;
constexpr CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_size_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetRecordingSize_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal _CGameRecording_GetRecordingSize_Response_default_instance_;
constexpr CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal {
  constexpr CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_CleanupBackgroundRecordings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Request_default_instance_;
constexpr CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal {
  constexpr CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_CleanupBackgroundRecordings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Response_default_instance_;
constexpr CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetPlatformCapabilities_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Request_default_instance_;
constexpr CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_process_audio_capture_(false){}
struct CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetPlatformCapabilities_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Response_default_instance_;
constexpr CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_ClipCreated_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ClipCreated_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipCreated_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ClipCreated_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipCreated_NotificationDefaultTypeInternal _CGameRecording_ClipCreated_Notification_default_instance_;
constexpr CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_ClipDeleted_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ClipDeleted_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipDeleted_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ClipDeleted_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipDeleted_NotificationDefaultTypeInternal _CGameRecording_ClipDeleted_Notification_default_instance_;
constexpr CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0)
  , eresult_(0){}
struct CGameRecording_ExportProgress_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ExportProgress_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportProgress_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ExportProgress_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportProgress_NotificationDefaultTypeInternal _CGameRecording_ExportProgress_Notification_default_instance_;
constexpr CGameRecording_PerGameSettings::CGameRecording_PerGameSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(PROTOBUF_ULONGLONG(0))
  , enabled_(false)
  , minutes_(0)
  , bitrate_(0){}
struct CGameRecording_PerGameSettingsDefaultTypeInternal {
  constexpr CGameRecording_PerGameSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_PerGameSettingsDefaultTypeInternal() {}
  union {
    CGameRecording_PerGameSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_PerGameSettingsDefaultTypeInternal _CGameRecording_PerGameSettings_default_instance_;
constexpr CGameRecording_GetPerGameSettings_Request::CGameRecording_GetPerGameSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetPerGameSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal _CGameRecording_GetPerGameSettings_Request_default_instance_;
constexpr CGameRecording_GetPerGameSettings_Response::CGameRecording_GetPerGameSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(){}
struct CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetPerGameSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal _CGameRecording_GetPerGameSettings_Response_default_instance_;
constexpr CGameRecording_SetPerGameSettings_Request::CGameRecording_SetPerGameSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_settings_(nullptr){}
struct CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal {
  constexpr CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_SetPerGameSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal _CGameRecording_SetPerGameSettings_Request_default_instance_;
constexpr CGameRecording_SetPerGameSettings_Response::CGameRecording_SetPerGameSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal {
  constexpr CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_SetPerGameSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal _CGameRecording_SetPerGameSettings_Response_default_instance_;
constexpr CGameRecording_DeletePerGameSettings_Request::CGameRecording_DeletePerGameSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal {
  constexpr CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_DeletePerGameSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal _CGameRecording_DeletePerGameSettings_Request_default_instance_;
constexpr CGameRecording_DeletePerGameSettings_Response::CGameRecording_DeletePerGameSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal {
  constexpr CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_DeletePerGameSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal _CGameRecording_DeletePerGameSettings_Response_default_instance_;
constexpr CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0)
  , eresult_(0){}
struct CGameRecording_UploadProgress_NotificationDefaultTypeInternal {
  constexpr CGameRecording_UploadProgress_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadProgress_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_UploadProgress_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadProgress_NotificationDefaultTypeInternal _CGameRecording_UploadProgress_Notification_default_instance_;
constexpr CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal {
  constexpr CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_SwitchBackgroundRecordingGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_;
constexpr CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal {
  constexpr CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_SwitchBackgroundRecordingGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineHighlightMarker_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineHighlightMarker_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineHighlightMarker_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineHighlightMarker_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineTimestamp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineTimestamp_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineTimestamp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineTimestamp_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeStart_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeStart_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeStart_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeStart_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeEnd_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeEnd_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeEnd_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeEnd_Response_default_instance_;
constexpr CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , mode_(0u){}
struct CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_SetTimelineGameMode_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal _CGameRecordingDebug_SetTimelineGameMode_Request_default_instance_;
constexpr CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_SetTimelineGameMode_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal _CGameRecordingDebug_SetTimelineGameMode_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fgamerecording_2eproto[92];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fgamerecording_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, most_recent_start_time_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, recording_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, video_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, timeline_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, is_active_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, file_size_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response, apps_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Response, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, first_timeline_start_offset_ms_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request_Tag, group_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request_Tag, name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, page_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, filter_gameid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, filter_search_string_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, filter_tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Request, filter_phase_id_),
  2,
  3,
  4,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, offset_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, duration_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, desc_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, icon_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, contained_tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, background_recording_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, clip_ids_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, start_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, screenshots_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, active_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response_Phase, significant_events_),
  5,
  0,
  1,
  2,
  7,
  6,
  ~0u,
  ~0u,
  4,
  ~0u,
  10,
  9,
  ~0u,
  8,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response, phases_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_QueryPhases_Response, total_count_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTags_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTags_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTags_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTags_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTags_Response, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, enough_space_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, size_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, notification_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, start_time_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, duration_ms_),
  4,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, notification_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, start_offset_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, recording_type_),
  6,
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, time_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, type_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_title_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_duration_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_possible_clip_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, timestamp_title_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_icon_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_description_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_priority_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, screenshot_handle_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, achievement_name_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, phase_id_),
  0,
  7,
  8,
  9,
  10,
  1,
  11,
  12,
  2,
  3,
  4,
  13,
  14,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, entry_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, game_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_LowDiskSpace_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToGamePhase_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToGamePhase_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToGamePhase_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToGamePhase_Notification, phase_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToTimelineEvent_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToTimelineEvent_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToTimelineEvent_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_OpenOverlayToTimelineEvent_Notification, entry_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PhaseListChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, start_timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, start_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, file_size_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_clipped_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, temporary_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, original_device_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, original_gaming_device_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_height_),
  0,
  5,
  6,
  9,
  1,
  7,
  8,
  11,
  2,
  10,
  12,
  3,
  13,
  14,
  4,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, offset_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, start_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, end_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, src_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, temporary_),
  4,
  2,
  3,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, clip_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, bitrate_kbps_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, height_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, frames_per_second_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, export_mp4_path_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, settings_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Request, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Request, timeline_offset_ms_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TakeScreenshot_Response, screenshot_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, desc_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, visibility_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, zip_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, created_after_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, include_temporary_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Response, clip_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, created_after_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Response, events_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, entry_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, clip_id_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, entry_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, entry_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, clip_id_),
  2,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, clip_id_),
  2,
  0,
  3,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Request, game_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, folder_path_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, size_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, start_offset_us_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, major_axis_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, time_precision_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, format_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, image_data_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, height_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response, thumbnails_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, file_size_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CleanupBackgroundRecordings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CleanupBackgroundRecordings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, per_process_audio_capture_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, game_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, progress_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, gameid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, enabled_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, minutes_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PerGameSettings, bitrate_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPerGameSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPerGameSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPerGameSettings_Response, settings_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SetPerGameSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SetPerGameSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SetPerGameSettings_Request, game_settings_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SetPerGameSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeletePerGameSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeletePerGameSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeletePerGameSettings_Request, gameid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeletePerGameSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, progress_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, icon_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, desc_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, title_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, title_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CGameRecording_GetActiveTimelineApps_Request)},
  { 5, 17, sizeof(::CGameRecording_GetActiveTimelineApps_Response_App)},
  { 24, -1, sizeof(::CGameRecording_GetActiveTimelineApps_Response)},
  { 30, 36, sizeof(::CGameRecording_GetTimelinesForApp_Request)},
  { 37, -1, sizeof(::CGameRecording_GetTimelinesForApp_Response)},
  { 43, 49, sizeof(::CGameRecording_GetTimelinesForClip_Request)},
  { 50, 58, sizeof(::CGameRecording_GetTimelinesForClip_Response)},
  { 61, 68, sizeof(::CGameRecording_QueryPhases_Request_Tag)},
  { 70, 81, sizeof(::CGameRecording_QueryPhases_Request)},
  { 87, 95, sizeof(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording)},
  { 98, 119, sizeof(::CGameRecording_QueryPhases_Response_Phase)},
  { 135, 142, sizeof(::CGameRecording_QueryPhases_Response)},
  { 144, 150, sizeof(::CGameRecording_GetTags_Request)},
  { 151, -1, sizeof(::CGameRecording_GetTags_Response)},
  { 157, -1, sizeof(::CGameRecording_GetEnoughDiskSpace_Request)},
  { 162, 168, sizeof(::CGameRecording_GetEnoughDiskSpace_Response)},
  { 169, -1, sizeof(::CGameRecording_GetAvailableDiskSpace_Request)},
  { 174, 180, sizeof(::CGameRecording_GetAvailableDiskSpace_Response)},
  { 181, 191, sizeof(::CGameRecording_TimelineChanged_Notification)},
  { 196, 208, sizeof(::CGameRecording_RecordingSessionChanged_Notification)},
  { 215, 236, sizeof(::CTimelineEntry)},
  { 252, 259, sizeof(::CGameRecording_TimelineEntryChanged_Notification)},
  { 261, -1, sizeof(::CGameRecording_LowDiskSpace_Notification)},
  { 266, 272, sizeof(::CGameRecording_PostGameHighlightsChanged_Notification)},
  { 273, 280, sizeof(::CGameRecording_OpenOverlayToGamePhase_Notification)},
  { 282, 289, sizeof(::CGameRecording_OpenOverlayToTimelineEvent_Notification)},
  { 291, -1, sizeof(::CGameRecording_PhaseListChanged_Notification)},
  { 296, 318, sizeof(::CGameRecording_ClipSummary)},
  { 335, 342, sizeof(::CGameRecording_SaveClip_Request_Position)},
  { 344, 355, sizeof(::CGameRecording_SaveClip_Request)},
  { 361, 367, sizeof(::CGameRecording_SaveClip_Response)},
  { 368, 374, sizeof(::CGameRecording_DeleteClip_Request)},
  { 375, -1, sizeof(::CGameRecording_DeleteClip_Response)},
  { 380, 389, sizeof(::CGameRecording_ExportClip_Settings)},
  { 393, 401, sizeof(::CGameRecording_ExportClip_Request)},
  { 404, -1, sizeof(::CGameRecording_ExportClip_Response)},
  { 409, 417, sizeof(::CGameRecording_TakeScreenshot_Request)},
  { 420, 426, sizeof(::CGameRecording_TakeScreenshot_Response)},
  { 427, 436, sizeof(::CGameRecording_UploadClipToSteam_Request)},
  { 440, 446, sizeof(::CGameRecording_UploadClipToSteam_Response)},
  { 447, 453, sizeof(::CGameRecording_ZipClip_Request)},
  { 454, 460, sizeof(::CGameRecording_ZipClip_Response)},
  { 461, 469, sizeof(::CGameRecording_GetClips_Request)},
  { 472, -1, sizeof(::CGameRecording_GetClips_Response)},
  { 478, 485, sizeof(::CGameRecording_GetAndTrimPostGameHighlights_Request)},
  { 487, -1, sizeof(::CGameRecording_GetAndTrimPostGameHighlights_Response)},
  { 493, 501, sizeof(::CGameRecording_UserAddTimelineEntry_Request)},
  { 504, 510, sizeof(::CGameRecording_UserAddTimelineEntry_Response)},
  { 511, 519, sizeof(::CGameRecording_UserUpdateTimelineEntry_Request)},
  { 522, -1, sizeof(::CGameRecording_UserUpdateTimelineEntry_Response)},
  { 527, 536, sizeof(::CGameRecording_UserRemoveTimelineEntry_Request)},
  { 540, -1, sizeof(::CGameRecording_UserRemoveTimelineEntry_Response)},
  { 545, -1, sizeof(::CGameRecording_ManuallyDeleteRecordingsForApps_Request)},
  { 551, -1, sizeof(::CGameRecording_ManuallyDeleteRecordingsForApps_Response)},
  { 556, 563, sizeof(::CGameRecording_GetTotalDiskSpaceUsage_Request)},
  { 565, 571, sizeof(::CGameRecording_GetTotalDiskSpaceUsage_Response)},
  { 572, 584, sizeof(::CGameRecording_GetThumbnails_Request)},
  { 591, 599, sizeof(::CGameRecording_GetThumbnails_Response_Thumbnail)},
  { 602, -1, sizeof(::CGameRecording_GetThumbnails_Response)},
  { 608, 614, sizeof(::CGameRecording_StartRecording_Request)},
  { 615, -1, sizeof(::CGameRecording_StartRecording_Response)},
  { 620, 626, sizeof(::CGameRecording_StopRecording_Request)},
  { 627, 633, sizeof(::CGameRecording_StopRecording_Response)},
  { 634, 640, sizeof(::CGameRecording_GetRecordingSize_Request)},
  { 641, 647, sizeof(::CGameRecording_GetRecordingSize_Response)},
  { 648, -1, sizeof(::CGameRecording_CleanupBackgroundRecordings_Request)},
  { 653, -1, sizeof(::CGameRecording_CleanupBackgroundRecordings_Response)},
  { 658, -1, sizeof(::CGameRecording_GetPlatformCapabilities_Request)},
  { 663, 669, sizeof(::CGameRecording_GetPlatformCapabilities_Response)},
  { 670, 676, sizeof(::CGameRecording_ClipCreated_Notification)},
  { 677, 684, sizeof(::CGameRecording_ClipDeleted_Notification)},
  { 686, 694, sizeof(::CGameRecording_ExportProgress_Notification)},
  { 697, 706, sizeof(::CGameRecording_PerGameSettings)},
  { 710, -1, sizeof(::CGameRecording_GetPerGameSettings_Request)},
  { 715, -1, sizeof(::CGameRecording_GetPerGameSettings_Response)},
  { 721, 727, sizeof(::CGameRecording_SetPerGameSettings_Request)},
  { 728, -1, sizeof(::CGameRecording_SetPerGameSettings_Response)},
  { 733, 739, sizeof(::CGameRecording_DeletePerGameSettings_Request)},
  { 740, -1, sizeof(::CGameRecording_DeletePerGameSettings_Response)},
  { 745, 753, sizeof(::CGameRecording_UploadProgress_Notification)},
  { 756, 762, sizeof(::CGameRecording_SwitchBackgroundRecordingGame_Request)},
  { 763, -1, sizeof(::CGameRecording_SwitchBackgroundRecordingGame_Response)},
  { 768, 777, sizeof(::CGameRecordingDebug_AddTimelineHighlightMarker_Request)},
  { 781, -1, sizeof(::CGameRecordingDebug_AddTimelineHighlightMarker_Response)},
  { 786, 793, sizeof(::CGameRecordingDebug_AddTimelineTimestamp_Request)},
  { 795, -1, sizeof(::CGameRecordingDebug_AddTimelineTimestamp_Response)},
  { 800, 808, sizeof(::CGameRecordingDebug_AddTimelineRangeStart_Request)},
  { 811, -1, sizeof(::CGameRecordingDebug_AddTimelineRangeStart_Response)},
  { 816, 823, sizeof(::CGameRecordingDebug_AddTimelineRangeEnd_Request)},
  { 825, -1, sizeof(::CGameRecordingDebug_AddTimelineRangeEnd_Response)},
  { 830, 837, sizeof(::CGameRecordingDebug_SetTimelineGameMode_Request)},
  { 839, -1, sizeof(::CGameRecordingDebug_SetTimelineGameMode_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Response_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_QueryPhases_Request_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_QueryPhases_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_QueryPhases_Response_Phase_BackgroundRecording_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_QueryPhases_Response_Phase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_QueryPhases_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTags_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTags_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetEnoughDiskSpace_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetEnoughDiskSpace_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAvailableDiskSpace_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAvailableDiskSpace_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TimelineChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_RecordingSessionChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimelineEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TimelineEntryChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_LowDiskSpace_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_PostGameHighlightsChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_OpenOverlayToGamePhase_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_OpenOverlayToTimelineEvent_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_PhaseListChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Request_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TakeScreenshot_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TakeScreenshot_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadClipToSteam_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadClipToSteam_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ZipClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ZipClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetClips_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetClips_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserAddTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserAddTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserUpdateTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserUpdateTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserRemoveTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserRemoveTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StartRecording_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StartRecording_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StopRecording_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StopRecording_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetRecordingSize_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetRecordingSize_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CleanupBackgroundRecordings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CleanupBackgroundRecordings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPlatformCapabilities_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPlatformCapabilities_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipCreated_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipDeleted_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportProgress_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_PerGameSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPerGameSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPerGameSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SetPerGameSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SetPerGameSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeletePerGameSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeletePerGameSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadProgress_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineHighlightMarker_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineHighlightMarker_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineTimestamp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineTimestamp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeStart_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeStart_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeEnd_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeEnd_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_SetTimelineGameMode_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_SetTimelineGameMode_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fgamerecording_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!webuimessages_gamerecording.proto\032 goo"
  "gle/protobuf/descriptor.proto\032\013enums.pro"
  "to\032\030steammessages_base.proto\032\030webuimessa"
  "ges_base.proto\032&webuimessages_gamerecord"
  "ingfiles.proto\".\n,CGameRecording_GetActi"
  "veTimelineApps_Request\"\334\002\n-CGameRecordin"
  "g_GetActiveTimelineApps_Response\022@\n\004apps"
  "\030\001 \003(\01322.CGameRecording_GetActiveTimelin"
  "eApps_Response.App\032\350\001\n\003App\022\017\n\007game_id\030\001 "
  "\001(\004\022\036\n\026most_recent_start_time\030\002 \001(\r\022G\n\016r"
  "ecording_type\030\003 \001(\0162\023.EGameRecordingType"
  ":\032EGameRecordingType_Unknown\022\036\n\026video_du"
  "ration_seconds\030\004 \001(\001\022!\n\031timeline_duratio"
  "n_seconds\030\005 \001(\001\022\021\n\tis_active\030\006 \001(\010\022\021\n\tfi"
  "le_size\030\007 \001(\004\"<\n)CGameRecording_GetTimel"
  "inesForApp_Request\022\017\n\007game_id\030\001 \001(\004\"`\n*C"
  "GameRecording_GetTimelinesForApp_Respons"
  "e\0222\n\ttimelines\030\001 \003(\0132\037.CGameRecordingTim"
  "elineMetadata\"=\n*CGameRecording_GetTimel"
  "inesForClip_Request\022\017\n\007clip_id\030\001 \001(\t\"\232\001\n"
  "+CGameRecording_GetTimelinesForClip_Resp"
  "onse\022\017\n\007game_id\030\001 \001(\004\0222\n\ttimelines\030\002 \003(\013"
  "2\037.CGameRecordingTimelineMetadata\022&\n\036fir"
  "st_timeline_start_offset_ms\030\003 \001(\004\"\361\001\n\"CG"
  "ameRecording_QueryPhases_Request\022\014\n\004page"
  "\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\025\n\rfilter_gameid\030\n"
  " \001(\004\022\034\n\024filter_search_string\030\013 \001(\t\022<\n\013fi"
  "lter_tags\030\014 \003(\0132\'.CGameRecording_QueryPh"
  "ases_Request.Tag\022\027\n\017filter_phase_id\030\r \001("
  "\t\032\"\n\003Tag\022\r\n\005group\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\240\005"
  "\n#CGameRecording_QueryPhases_Response\022:\n"
  "\006phases\030\001 \003(\0132*.CGameRecording_QueryPhas"
  "es_Response.Phase\022\023\n\013total_count\030\002 \001(\r\032\247"
  "\004\n\005Phase\022\017\n\007game_id\030\001 \001(\004\022\r\n\005title\030\002 \001(\t"
  "\022\014\n\004desc\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t\022\025\n\rdate_rec"
  "orded\030\005 \001(\r\022\023\n\013duration_ms\030\006 \001(\004\022\033\n\004tags"
  "\030\007 \003(\0132\r.CTimelineTag\022%\n\016contained_tags\030"
  "\010 \003(\0132\r.CTimelineTag\022\\\n\024background_recor"
  "ding\030\t \001(\0132>.CGameRecording_QueryPhases_"
  "Response.Phase.BackgroundRecording\022\020\n\010cl"
  "ip_ids\030\n \003(\t\022;\n\004type\030\013 \001(\0162\021.EPhaseResul"
  "tType:\032EPhaseResultType_Automatic\022\020\n\010sta"
  "rt_ms\030\014 \001(\004\022\023\n\013screenshots\030\r \003(\r\022\016\n\006acti"
  "ve\030\016 \001(\010\022\020\n\010phase_id\030\017 \001(\t\022+\n\022significan"
  "t_events\030\020 \003(\0132\017.CTimelineEntry\032O\n\023Backg"
  "roundRecording\022\023\n\013timeline_id\030\001 \001(\t\022\016\n\006o"
  "ffset\030\002 \001(\004\022\023\n\013duration_ms\030\003 \001(\004\"1\n\036CGam"
  "eRecording_GetTags_Request\022\017\n\007game_id\030\001 "
  "\001(\004\">\n\037CGameRecording_GetTags_Response\022\033"
  "\n\004tags\030\001 \003(\0132\r.CTimelineTag\"+\n)CGameReco"
  "rding_GetEnoughDiskSpace_Request\"B\n*CGam"
  "eRecording_GetEnoughDiskSpace_Response\022\024"
  "\n\014enough_space\030\001 \001(\010\".\n,CGameRecording_G"
  "etAvailableDiskSpace_Request\"=\n-CGameRec"
  "ording_GetAvailableDiskSpace_Response\022\014\n"
  "\004size\030\001 \001(\001\"\342\001\n+CGameRecording_TimelineC"
  "hanged_Notification\022d\n\021notification_type"
  "\030\001 \001(\0162 .ETimelineChangeNotificationType"
  ":\'ETimelineChangeNotificationType_Starte"
  "d\022\023\n\013timeline_id\030\002 \001(\t\022\017\n\007game_id\030\003 \001(\004\022"
  "\022\n\nstart_time\030\004 \001(\r\022\023\n\013duration_ms\030\005 \001(\004"
  "\"\331\002\n3CGameRecording_RecordingSessionChan"
  "ged_Notification\022t\n\021notification_type\030\001 "
  "\001(\0162(.ERecordingSessionChangeNotificatio"
  "nType:/ERecordingSessionChangeNotificati"
  "onType_Started\022\023\n\013timeline_id\030\002 \001(\t\022\017\n\007g"
  "ame_id\030\004 \001(\004\022\022\n\nsession_id\030\005 \001(\t\022\024\n\014star"
  "t_offset\030\006 \001(\004\022\023\n\013duration_ms\030\007 \001(\004\022G\n\016r"
  "ecording_type\030\010 \001(\0162\023.EGameRecordingType"
  ":\032EGameRecordingType_Unknown\"\247\003\n\016CTimeli"
  "neEntry\022\023\n\013timeline_id\030\001 \001(\t\022\020\n\010entry_id"
  "\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\022=\n\004type\030\004 \001(\0162\023.ETi"
  "melineEntryType:\032ETimelineEntryType_Inva"
  "lid\022\021\n\tgame_mode\030\005 \001(\005\022\023\n\013range_title\030\007 "
  "\001(\t\022\026\n\016range_duration\030\010 \001(\004\022\033\n\023range_pos"
  "sible_clip\030\t \001(\005\022\027\n\017timestamp_title\030\n \001("
  "\t\022\023\n\013marker_icon\030\013 \001(\t\022\032\n\022marker_descrip"
  "tion\030\r \001(\t\022\027\n\017marker_priority\030\016 \001(\005\022\031\n\021s"
  "creenshot_handle\030\017 \001(\r\022\030\n\020achievement_na"
  "me\030\020 \001(\t\022\032\n\003tag\030\021 \003(\0132\r.CTimelineTag\022\020\n\010"
  "phase_id\030\022 \001(\t\"c\n0CGameRecording_Timelin"
  "eEntryChanged_Notification\022\036\n\005entry\030\001 \001("
  "\0132\017.CTimelineEntry\022\017\n\007game_id\030\002 \001(\006\"*\n(C"
  "GameRecording_LowDiskSpace_Notification\""
  "H\n5CGameRecording_PostGameHighlightsChan"
  "ged_Notification\022\017\n\007game_id\030\001 \001(\004\"W\n2CGa"
  "meRecording_OpenOverlayToGamePhase_Notif"
  "ication\022\017\n\007game_id\030\001 \001(\004\022\020\n\010phase_id\030\002 \001"
  "(\t\"[\n6CGameRecording_OpenOverlayToTimeli"
  "neEvent_Notification\022\017\n\007game_id\030\001 \001(\004\022\020\n"
  "\010entry_id\030\002 \001(\004\".\n,CGameRecording_PhaseL"
  "istChanged_Notification\"\244\003\n\032CGameRecordi"
  "ng_ClipSummary\022\017\n\007clip_id\030\001 \001(\t\022\017\n\007game_"
  "id\030\002 \001(\004\022\023\n\013duration_ms\030\003 \001(\004\022\025\n\rdate_re"
  "corded\030\004 \001(\r\022\031\n\021start_timeline_id\030\005 \001(\t\022"
  "\027\n\017start_offset_ms\030\006 \001(\004\022\031\n\021published_fi"
  "le_id\030\007 \001(\004\022\021\n\tfile_size\030\010 \001(\004\022\014\n\004name\030\t"
  " \001(\t\022\024\n\014date_clipped\030\n \001(\r\022\021\n\ttemporary\030"
  "\013 \001(\010\022\027\n\017original_device\030\014 \001(\t\022#\n\033origin"
  "al_gaming_device_type\030\r \001(\r\022\027\n\017date_down"
  "loaded\030\016 \001(\r\022\025\n\rthumbnail_url\030\017 \001(\t\022\027\n\017t"
  "humbnail_width\030\020 \001(\r\022\030\n\020thumbnail_height"
  "\030\021 \001(\r\"\216\002\n\037CGameRecording_SaveClip_Reque"
  "st\022\017\n\007game_id\030\001 \001(\004\0228\n\005start\030\002 \001(\0132).CGa"
  "meRecording_SaveClip_Request.Position\0226\n"
  "\003end\030\003 \001(\0132).CGameRecording_SaveClip_Req"
  "uest.Position\022\014\n\004name\030\004 \001(\t\022\023\n\013src_clip_"
  "id\030\005 \001(\t\022\021\n\ttemporary\030\006 \001(\010\0322\n\010Position\022"
  "\023\n\013timeline_id\030\001 \001(\t\022\021\n\toffset_ms\030\002 \001(\004\""
  "P\n CGameRecording_SaveClip_Response\022,\n\007s"
  "ummary\030\001 \001(\0132\033.CGameRecording_ClipSummar"
  "y\"4\n!CGameRecording_DeleteClip_Request\022\017"
  "\n\007clip_id\030\001 \001(\t\"$\n\"CGameRecording_Delete"
  "Clip_Response\"t\n\"CGameRecording_ExportCl"
  "ip_Settings\022\024\n\014bitrate_kbps\030\001 \001(\005\022\r\n\005wid"
  "th\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\031\n\021frames_per_s"
  "econd\030\004 \001(\005\"\204\001\n!CGameRecording_ExportCli"
  "p_Request\022\017\n\007clip_id\030\001 \001(\t\022\027\n\017export_mp4"
  "_path\030\002 \001(\t\0225\n\010settings\030\003 \001(\0132#.CGameRec"
  "ording_ExportClip_Settings\"$\n\"CGameRecor"
  "ding_ExportClip_Response\"i\n%CGameRecordi"
  "ng_TakeScreenshot_Request\022\017\n\007game_id\030\001 \001"
  "(\006\022\023\n\013timeline_id\030\002 \001(\t\022\032\n\022timeline_offs"
  "et_ms\030\003 \001(\004\"\?\n&CGameRecording_TakeScreen"
  "shot_Response\022\025\n\rscreenshot_id\030\001 \001(\006\"l\n("
  "CGameRecording_UploadClipToSteam_Request"
  "\022\017\n\007clip_id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\014\n\004desc"
  "\030\003 \001(\t\022\022\n\nvisibility\030\004 \001(\005\"Y\n)CGameRecor"
  "ding_UploadClipToSteam_Response\022,\n\007summa"
  "ry\030\001 \001(\0132\033.CGameRecording_ClipSummary\"1\n"
  "\036CGameRecording_ZipClip_Request\022\017\n\007clip_"
  "id\030\001 \001(\t\"3\n\037CGameRecording_ZipClip_Respo"
  "nse\022\020\n\010zip_path\030\001 \001(\t\"d\n\037CGameRecording_"
  "GetClips_Request\022\017\n\007game_id\030\001 \001(\004\022\025\n\rcre"
  "ated_after\030\002 \001(\r\022\031\n\021include_temporary\030\003 "
  "\001(\010\"M\n CGameRecording_GetClips_Response\022"
  ")\n\004clip\030\001 \003(\0132\033.CGameRecording_ClipSumma"
  "ry\"]\n3CGameRecording_GetAndTrimPostGameH"
  "ighlights_Request\022\017\n\007game_id\030\001 \001(\004\022\025\n\rcr"
  "eated_after\030\002 \001(\r\"d\n4CGameRecording_GetA"
  "ndTrimPostGameHighlights_Response\022,\n\006eve"
  "nts\030\001 \003(\0132\034.CGameRecordingTimelineEvent\""
  "o\n+CGameRecording_UserAddTimelineEntry_R"
  "equest\022\017\n\007game_id\030\001 \001(\004\022\036\n\005entry\030\002 \001(\0132\017"
  ".CTimelineEntry\022\017\n\007clip_id\030\003 \001(\t\"@\n,CGam"
  "eRecording_UserAddTimelineEntry_Response"
  "\022\020\n\010entry_id\030\001 \001(\004\"r\n.CGameRecording_Use"
  "rUpdateTimelineEntry_Request\022\017\n\007game_id\030"
  "\001 \001(\004\022\036\n\005entry\030\002 \001(\0132\017.CTimelineEntry\022\017\n"
  "\007clip_id\030\003 \001(\t\"1\n/CGameRecording_UserUpd"
  "ateTimelineEntry_Response\"y\n.CGameRecord"
  "ing_UserRemoveTimelineEntry_Request\022\017\n\007g"
  "ame_id\030\001 \001(\004\022\023\n\013timeline_id\030\002 \001(\t\022\020\n\010ent"
  "ry_id\030\003 \001(\004\022\017\n\007clip_id\030\004 \001(\t\"1\n/CGameRec"
  "ording_UserRemoveTimelineEntry_Response\""
  "J\n6CGameRecording_ManuallyDeleteRecordin"
  "gsForApps_Request\022\020\n\010game_ids\030\001 \003(\004\"9\n7C"
  "GameRecording_ManuallyDeleteRecordingsFo"
  "rApps_Response\"}\n-CGameRecording_GetTota"
  "lDiskSpaceUsage_Request\022\023\n\013folder_path\030\001"
  " \001(\t\0227\n\004type\030\002 \001(\0162\017.EDiskSpaceType:\030eDi"
  "skSpaceType_Recording\">\n.CGameRecording_"
  "GetTotalDiskSpaceUsage_Response\022\014\n\004size\030"
  "\001 \001(\004\"\372\001\n$CGameRecording_GetThumbnails_R"
  "equest\022\024\n\014recording_id\030\001 \001(\t\022\017\n\007clip_id\030"
  "\003 \001(\t\022\023\n\013timeline_id\030\007 \001(\t\022\027\n\017start_offs"
  "et_us\030\004 \003(\003\022\027\n\nmajor_axis\030\005 \001(\r:\003512\022:\n\016"
  "time_precision\030\006 \001(\0162\030.EThumbnailTimePre"
  "cision:\010ePrecise\022(\n\006format\030\010 \001(\0162\021.EThum"
  "bnailFormat:\005eJPEG\"\255\001\n%CGameRecording_Ge"
  "tThumbnails_Response\022D\n\nthumbnails\030\001 \003(\013"
  "20.CGameRecording_GetThumbnails_Response"
  ".Thumbnail\032>\n\tThumbnail\022\022\n\nimage_data\030\001 "
  "\001(\014\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"8\n%CG"
  "ameRecording_StartRecording_Request\022\017\n\007g"
  "ame_id\030\001 \001(\004\"(\n&CGameRecording_StartReco"
  "rding_Response\"7\n$CGameRecording_StopRec"
  "ording_Request\022\017\n\007game_id\030\001 \001(\004\"U\n%CGame"
  "Recording_StopRecording_Response\022,\n\007summ"
  "ary\030\001 \001(\0132\033.CGameRecording_ClipSummary\":"
  "\n\'CGameRecording_GetRecordingSize_Reques"
  "t\022\017\n\007game_id\030\001 \001(\004\"=\n(CGameRecording_Get"
  "RecordingSize_Response\022\021\n\tfile_size\030\001 \001("
  "\004\"4\n2CGameRecording_CleanupBackgroundRec"
  "ordings_Request\"5\n3CGameRecording_Cleanu"
  "pBackgroundRecordings_Response\"0\n.CGameR"
  "ecording_GetPlatformCapabilities_Request"
  "\"T\n/CGameRecording_GetPlatformCapabiliti"
  "es_Response\022!\n\031per_process_audio_capture"
  "\030\001 \001(\010\"W\n\'CGameRecording_ClipCreated_Not"
  "ification\022,\n\007summary\030\001 \001(\0132\033.CGameRecord"
  "ing_ClipSummary\"K\n\'CGameRecording_ClipDe"
  "leted_Notification\022\017\n\007clip_id\030\001 \001(\t\022\017\n\007g"
  "ame_id\030\002 \001(\004\"`\n*CGameRecording_ExportPro"
  "gress_Notification\022\020\n\010progress\030\001 \001(\002\022\017\n\007"
  "clip_id\030\002 \001(\t\022\017\n\007eresult\030\003 \001(\005\"c\n\036CGameR"
  "ecording_PerGameSettings\022\016\n\006gameid\030\001 \001(\006"
  "\022\017\n\007enabled\030\002 \001(\010\022\017\n\007minutes\030\003 \001(\005\022\017\n\007bi"
  "trate\030\004 \001(\005\"+\n)CGameRecording_GetPerGame"
  "Settings_Request\"_\n*CGameRecording_GetPe"
  "rGameSettings_Response\0221\n\010settings\030\001 \003(\013"
  "2\037.CGameRecording_PerGameSettings\"c\n)CGa"
  "meRecording_SetPerGameSettings_Request\0226"
  "\n\rgame_settings\030\001 \001(\0132\037.CGameRecording_P"
  "erGameSettings\",\n*CGameRecording_SetPerG"
  "ameSettings_Response\">\n,CGameRecording_D"
  "eletePerGameSettings_Request\022\016\n\006gameid\030\001"
  " \001(\006\"/\n-CGameRecording_DeletePerGameSett"
  "ings_Response\"`\n*CGameRecording_UploadPr"
  "ogress_Notification\022\020\n\010progress\030\001 \001(\002\022\017\n"
  "\007clip_id\030\002 \001(\t\022\017\n\007eresult\030\003 \001(\005\"G\n4CGame"
  "Recording_SwitchBackgroundRecordingGame_"
  "Request\022\017\n\007game_id\030\001 \001(\004\"7\n5CGameRecordi"
  "ng_SwitchBackgroundRecordingGame_Respons"
  "e\"r\n6CGameRecordingDebug_AddTimelineHigh"
  "lightMarker_Request\022\r\n\005appid\030\001 \001(\r\022\014\n\004ic"
  "on\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\"9\n"
  "7CGameRecordingDebug_AddTimelineHighligh"
  "tMarker_Response\"P\n0CGameRecordingDebug_"
  "AddTimelineTimestamp_Request\022\r\n\005appid\030\001 "
  "\001(\r\022\r\n\005title\030\002 \001(\t\"3\n1CGameRecordingDebu"
  "g_AddTimelineTimestamp_Response\"]\n1CGame"
  "RecordingDebug_AddTimelineRangeStart_Req"
  "uest\022\r\n\005appid\030\001 \001(\r\022\n\n\002id\030\002 \001(\t\022\r\n\005title"
  "\030\003 \001(\t\"4\n2CGameRecordingDebug_AddTimelin"
  "eRangeStart_Response\"L\n/CGameRecordingDe"
  "bug_AddTimelineRangeEnd_Request\022\r\n\005appid"
  "\030\001 \001(\r\022\n\n\002id\030\002 \001(\t\"2\n0CGameRecordingDebu"
  "g_AddTimelineRangeEnd_Response\"N\n/CGameR"
  "ecordingDebug_SetTimelineGameMode_Reques"
  "t\022\r\n\005appid\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\"2\n0CGameR"
  "ecordingDebug_SetTimelineGameMode_Respon"
  "se*\342\002\n\022ETimelineEntryType\022\036\n\032ETimelineEn"
  "tryType_Invalid\020\000\022\037\n\033ETimelineEntryType_"
  "GameMode\020\001\022\034\n\030ETimelineEntryType_Event\020\002"
  "\022\'\n#ETimelineEntryType_StateDescription\020"
  "\003\022\"\n\036ETimelineEntryType_Achievement\020\004\022!\n"
  "\035ETimelineEntryType_UserMarker\020\005\022!\n\035ETim"
  "elineEntryType_Screenshot\020\006\022\034\n\030ETimeline"
  "EntryType_Error\020\007\022\032\n\026ETimelineEntryType_"
  "Tag\020\010\022 \n\034ETimelineEntryType_GamePhase\020\t*"
  "h\n\020EPhaseResultType\022\036\n\032EPhaseResultType_"
  "Automatic\020\001\022\032\n\026EPhaseResultType_Blank\020\002\022"
  "\030\n\024EPhaseResultType_API\020\003*\312\002\n\037ETimelineC"
  "hangeNotificationType\022+\n\'ETimelineChange"
  "NotificationType_Started\020\001\022+\n\'ETimelineC"
  "hangeNotificationType_Stopped\020\002\022+\n\'ETime"
  "lineChangeNotificationType_Deleted\020\003\0224\n0"
  "ETimelineChangeNotificationType_Recordin"
  "gStarted\020\004\0224\n0ETimelineChangeNotificatio"
  "nType_RecordingStopped\020\005\0224\n0ETimelineCha"
  "ngeNotificationType_RecordingUpdated\020\006*\375"
  "\001\n\'ERecordingSessionChangeNotificationTy"
  "pe\0223\n/ERecordingSessionChangeNotificatio"
  "nType_Started\020\001\0223\n/ERecordingSessionChan"
  "geNotificationType_Stopped\020\002\0223\n/ERecordi"
  "ngSessionChangeNotificationType_Deleted\020"
  "\003\0223\n/ERecordingSessionChangeNotification"
  "Type_Updated\020\004*G\n\016EDiskSpaceType\022\034\n\030eDis"
  "kSpaceType_Recording\020\000\022\027\n\023eDiskSpaceType"
  "_Clip\020\001*3\n\027EThumbnailTimePrecision\022\014\n\010eP"
  "recise\020\000\022\n\n\006eLoose\020\001*\'\n\020EThumbnailFormat"
  "\022\t\n\005eJPEG\020\001\022\010\n\004eRGB\020\0022\353\"\n\rGameRecording\022"
  "v\n\025GetActiveTimelineApps\022-.CGameRecordin"
  "g_GetActiveTimelineApps_Request\032..CGameR"
  "ecording_GetActiveTimelineApps_Response\022"
  "m\n\022GetTimelinesForApp\022*.CGameRecording_G"
  "etTimelinesForApp_Request\032+.CGameRecordi"
  "ng_GetTimelinesForApp_Response\022p\n\023GetTim"
  "elinesForClip\022+.CGameRecording_GetTimeli"
  "nesForClip_Request\032,.CGameRecording_GetT"
  "imelinesForClip_Response\022X\n\013QueryPhases\022"
  "#.CGameRecording_QueryPhases_Request\032$.C"
  "GameRecording_QueryPhases_Response\022L\n\007Ge"
  "tTags\022\037.CGameRecording_GetTags_Request\032 "
  ".CGameRecording_GetTags_Response\022m\n\022GetE"
  "noughDiskSpace\022*.CGameRecording_GetEnoug"
  "hDiskSpace_Request\032+.CGameRecording_GetE"
  "noughDiskSpace_Response\022v\n\025GetAvailableD"
  "iskSpace\022-.CGameRecording_GetAvailableDi"
  "skSpace_Request\032..CGameRecording_GetAvai"
  "lableDiskSpace_Response\022O\n\010SaveClip\022 .CG"
  "ameRecording_SaveClip_Request\032!.CGameRec"
  "ording_SaveClip_Response\022U\n\nDeleteClip\022\""
  ".CGameRecording_DeleteClip_Request\032#.CGa"
  "meRecording_DeleteClip_Response\022O\n\010GetCl"
  "ips\022 .CGameRecording_GetClips_Request\032!."
  "CGameRecording_GetClips_Response\022j\n\021Uplo"
  "adClipToSteam\022).CGameRecording_UploadCli"
  "pToSteam_Request\032*.CGameRecording_Upload"
  "ClipToSteam_Response\022U\n\nExportClip\022\".CGa"
  "meRecording_ExportClip_Request\032#.CGameRe"
  "cording_ExportClip_Response\022a\n\016TakeScree"
  "nshot\022&.CGameRecording_TakeScreenshot_Re"
  "quest\032\'.CGameRecording_TakeScreenshot_Re"
  "sponse\022L\n\007ZipClip\022\037.CGameRecording_ZipCl"
  "ip_Request\032 .CGameRecording_ZipClip_Resp"
  "onse\022a\n\016StartRecording\022&.CGameRecording_"
  "StartRecording_Request\032\'.CGameRecording_"
  "StartRecording_Response\022^\n\rStopRecording"
  "\022%.CGameRecording_StopRecording_Request\032"
  "&.CGameRecording_StopRecording_Response\022"
  "u\n\036GetBackgroundRecordingFileSize\022(.CGam"
  "eRecording_GetRecordingSize_Request\032).CG"
  "ameRecording_GetRecordingSize_Response\022\210"
  "\001\n\033CleanupBackgroundRecordings\0223.CGameRe"
  "cording_CleanupBackgroundRecordings_Requ"
  "est\0324.CGameRecording_CleanupBackgroundRe"
  "cordings_Response\022\213\001\n\034GetAndTrimPostGame"
  "Highlights\0224.CGameRecording_GetAndTrimPo"
  "stGameHighlights_Request\0325.CGameRecordin"
  "g_GetAndTrimPostGameHighlights_Response\022"
  "^\n\rGetThumbnails\022%.CGameRecording_GetThu"
  "mbnails_Request\032&.CGameRecording_GetThum"
  "bnails_Response\022|\n\027GetPlatformCapabiliti"
  "es\022/.CGameRecording_GetPlatformCapabilit"
  "ies_Request\0320.CGameRecording_GetPlatform"
  "Capabilities_Response\022W\n\025NotifyTimelineC"
  "hanged\022,.CGameRecording_TimelineChanged_"
  "Notification\032\020.WebUINoResponse\022g\n\035Notify"
  "RecordingSessionChanged\0224.CGameRecording"
  "_RecordingSessionChanged_Notification\032\020."
  "WebUINoResponse\022a\n\032NotifyTimelineEntryCh"
  "anged\0221.CGameRecording_TimelineEntryChan"
  "ged_Notification\032\020.WebUINoResponse\022O\n\021No"
  "tifyClipCreated\022(.CGameRecording_ClipCre"
  "ated_Notification\032\020.WebUINoResponse\022O\n\021N"
  "otifyClipDeleted\022(.CGameRecording_ClipDe"
  "leted_Notification\032\020.WebUINoResponse\022U\n\024"
  "NotifyExportProgress\022+.CGameRecording_Ex"
  "portProgress_Notification\032\020.WebUINoRespo"
  "nse\022U\n\024NotifyUploadProgress\022+.CGameRecor"
  "ding_UploadProgress_Notification\032\020.WebUI"
  "NoResponse\022Q\n\022NotifyLowDiskSpace\022).CGame"
  "Recording_LowDiskSpace_Notification\032\020.We"
  "bUINoResponse\022k\n\037NotifyPostGameHighlight"
  "sChanged\0226.CGameRecording_PostGameHighli"
  "ghtsChanged_Notification\032\020.WebUINoRespon"
  "se\022e\n\034NotifyOpenOverlayToGamePhase\0223.CGa"
  "meRecording_OpenOverlayToGamePhase_Notif"
  "ication\032\020.WebUINoResponse\022m\n NotifyOpenO"
  "verlayToTimelineEvent\0227.CGameRecording_O"
  "penOverlayToTimelineEvent_Notification\032\020"
  ".WebUINoResponse\022Y\n\026NotifyPhaseListChang"
  "ed\022-.CGameRecording_PhaseListChanged_Not"
  "ification\032\020.WebUINoResponse\022m\n\022GetPerGam"
  "eSettings\022*.CGameRecording_GetPerGameSet"
  "tings_Request\032+.CGameRecording_GetPerGam"
  "eSettings_Response\022m\n\022SetPerGameSettings"
  "\022*.CGameRecording_SetPerGameSettings_Req"
  "uest\032+.CGameRecording_SetPerGameSettings"
  "_Response\022v\n\025DeletePerGameSettings\022-.CGa"
  "meRecording_DeletePerGameSettings_Reques"
  "t\032..CGameRecording_DeletePerGameSettings"
  "_Response\022s\n\024UserAddTimelineEntry\022,.CGam"
  "eRecording_UserAddTimelineEntry_Request\032"
  "-.CGameRecording_UserAddTimelineEntry_Re"
  "sponse\022|\n\027UserUpdateTimelineEntry\022/.CGam"
  "eRecording_UserUpdateTimelineEntry_Reque"
  "st\0320.CGameRecording_UserUpdateTimelineEn"
  "try_Response\022|\n\027UserRemoveTimelineEntry\022"
  "/.CGameRecording_UserRemoveTimelineEntry"
  "_Request\0320.CGameRecording_UserRemoveTime"
  "lineEntry_Response\022\224\001\n\037ManuallyDeleteRec"
  "ordingsForApps\0227.CGameRecording_Manually"
  "DeleteRecordingsForApps_Request\0328.CGameR"
  "ecording_ManuallyDeleteRecordingsForApps"
  "_Response\022y\n\026GetTotalDiskSpaceUsage\022..CG"
  "ameRecording_GetTotalDiskSpaceUsage_Requ"
  "est\032/.CGameRecording_GetTotalDiskSpaceUs"
  "age_Response\022\216\001\n\035SwitchBackgroundRecordi"
  "ngGame\0225.CGameRecording_SwitchBackground"
  "RecordingGame_Request\0326.CGameRecording_S"
  "witchBackgroundRecordingGame_Response\032\004\200"
  "\227\"\0012\246\005\n\022GameRecordingDebug\022\217\001\n\032AddTimeli"
  "neHighlightMarker\0227.CGameRecordingDebug_"
  "AddTimelineHighlightMarker_Request\0328.CGa"
  "meRecordingDebug_AddTimelineHighlightMar"
  "ker_Response\022}\n\024AddTimelineTimestamp\0221.C"
  "GameRecordingDebug_AddTimelineTimestamp_"
  "Request\0322.CGameRecordingDebug_AddTimelin"
  "eTimestamp_Response\022\200\001\n\025AddTimelineRange"
  "Start\0222.CGameRecordingDebug_AddTimelineR"
  "angeStart_Request\0323.CGameRecordingDebug_"
  "AddTimelineRangeStart_Response\022z\n\023AddTim"
  "elineRangeEnd\0220.CGameRecordingDebug_AddT"
  "imelineRangeEnd_Request\0321.CGameRecording"
  "Debug_AddTimelineRangeEnd_Response\022z\n\023Se"
  "tTimelineGameMode\0220.CGameRecordingDebug_"
  "SetTimelineGameMode_Request\0321.CGameRecor"
  "dingDebug_SetTimelineGameMode_Response\032\004"
  "\200\227\"\001B\037H\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fgamerecording_2eproto_deps[5] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fgamerecording_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamerecording_2eproto = {
  false, false, 15677, descriptor_table_protodef_webuimessages_5fgamerecording_2eproto, "webuimessages_gamerecording.proto", 
  &descriptor_table_webuimessages_5fgamerecording_2eproto_once, descriptor_table_webuimessages_5fgamerecording_2eproto_deps, 5, 92,
  schemas, file_default_instances, TableStruct_webuimessages_5fgamerecording_2eproto::offsets,
  file_level_metadata_webuimessages_5fgamerecording_2eproto, file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto, file_level_service_descriptors_webuimessages_5fgamerecording_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return descriptor_table_webuimessages_5fgamerecording_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fgamerecording_2eproto(&descriptor_table_webuimessages_5fgamerecording_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineEntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[0];
}
bool ETimelineEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPhaseResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[1];
}
bool EPhaseResultType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineChangeNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[2];
}
bool ETimelineChangeNotificationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERecordingSessionChangeNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[3];
}
bool ERecordingSessionChangeNotificationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDiskSpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[4];
}
bool EDiskSpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EThumbnailTimePrecision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[5];
}
bool EThumbnailTimePrecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EThumbnailFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[6];
}
bool EThumbnailFormat_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Request::_Internal {
 public:
};

CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Request)
}
CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(const CGameRecording_GetActiveTimelineApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Request)
}

void CGameRecording_GetActiveTimelineApps_Request::SharedCtor() {
}

CGameRecording_GetActiveTimelineApps_Request::~CGameRecording_GetActiveTimelineApps_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Request::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Request* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Request* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Request)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Request::MergeFrom(const CGameRecording_GetActiveTimelineApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetActiveTimelineApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Request::CopyFrom(const CGameRecording_GetActiveTimelineApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Request::InternalSwap(CGameRecording_GetActiveTimelineApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Response_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetActiveTimelineApps_Response_App>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_most_recent_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recording_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Response.App)
}
CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(const CGameRecording_GetActiveTimelineApps_Response_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Response.App)
}

void CGameRecording_GetActiveTimelineApps_Response_App::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
}

CGameRecording_GetActiveTimelineApps_Response_App::~CGameRecording_GetActiveTimelineApps_Response_App() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Response.App)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Response_App::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Response_App::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Response_App* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Response_App* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Response_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Response_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_active_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Response_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 most_recent_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_most_recent_start_time(&has_bits);
          most_recent_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameRecordingType_IsValid(val))) {
            _internal_set_recording_type(static_cast<::EGameRecordingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double video_duration_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_video_duration_seconds(&has_bits);
          video_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double timeline_duration_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_timeline_duration_seconds(&has_bits);
          timeline_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Response_App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 most_recent_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_most_recent_start_time(), target);
  }

  // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_recording_type(), target);
  }

  // optional double video_duration_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_video_duration_seconds(), target);
  }

  // optional double timeline_duration_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_timeline_duration_seconds(), target);
  }

  // optional bool is_active = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_active(), target);
  }

  // optional uint64 file_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Response.App)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Response.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 most_recent_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_most_recent_start_time());
    }

    // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_type());
    }

    // optional double video_duration_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double timeline_duration_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 file_size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional bool is_active = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Response_App::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Response_App* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Response_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Response.App)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Response.App)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Response_App::MergeFrom(const CGameRecording_GetActiveTimelineApps_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      most_recent_start_time_ = from.most_recent_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      recording_type_ = from.recording_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_duration_seconds_ = from.video_duration_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeline_duration_seconds_ = from.timeline_duration_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_active_ = from.is_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetActiveTimelineApps_Response_App::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Response_App::CopyFrom(const CGameRecording_GetActiveTimelineApps_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Response_App::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Response_App::InternalSwap(CGameRecording_GetActiveTimelineApps_Response_App* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetActiveTimelineApps_Response_App, is_active_)
      + sizeof(CGameRecording_GetActiveTimelineApps_Response_App::is_active_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetActiveTimelineApps_Response_App, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Response_App::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Response::_Internal {
 public:
};

CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Response)
}
CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(const CGameRecording_GetActiveTimelineApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Response)
}

void CGameRecording_GetActiveTimelineApps_Response::SharedCtor() {
}

CGameRecording_GetActiveTimelineApps_Response::~CGameRecording_GetActiveTimelineApps_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Response::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Response* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Response* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Response)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Response::MergeFrom(const CGameRecording_GetActiveTimelineApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void CGameRecording_GetActiveTimelineApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Response::CopyFrom(const CGameRecording_GetActiveTimelineApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Response::InternalSwap(CGameRecording_GetActiveTimelineApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForApp_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForApp_Request)
}
CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(const CGameRecording_GetTimelinesForApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForApp_Request)
}

void CGameRecording_GetTimelinesForApp_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetTimelinesForApp_Request::~CGameRecording_GetTimelinesForApp_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForApp_Request::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForApp_Request* _this = reinterpret_cast< CGameRecording_GetTimelinesForApp_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForApp_Request)
  return target;
}

size_t CGameRecording_GetTimelinesForApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForApp_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForApp_Request::MergeFrom(const CGameRecording_GetTimelinesForApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_GetTimelinesForApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForApp_Request::CopyFrom(const CGameRecording_GetTimelinesForApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForApp_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForApp_Request::InternalSwap(CGameRecording_GetTimelinesForApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForApp_Response::_Internal {
 public:
};

void CGameRecording_GetTimelinesForApp_Response::clear_timelines() {
  timelines_.Clear();
}
CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForApp_Response)
}
CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(const CGameRecording_GetTimelinesForApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timelines_(from.timelines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForApp_Response)
}

void CGameRecording_GetTimelinesForApp_Response::SharedCtor() {
}

CGameRecording_GetTimelinesForApp_Response::~CGameRecording_GetTimelinesForApp_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForApp_Response::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForApp_Response* _this = reinterpret_cast< CGameRecording_GetTimelinesForApp_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineMetadata timelines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_timelines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForApp_Response)
  return target;
}

size_t CGameRecording_GetTimelinesForApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForApp_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForApp_Response::MergeFrom(const CGameRecording_GetTimelinesForApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
}

void CGameRecording_GetTimelinesForApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForApp_Response::CopyFrom(const CGameRecording_GetTimelinesForApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForApp_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForApp_Response::InternalSwap(CGameRecording_GetTimelinesForApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timelines_.InternalSwap(&other->timelines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForClip_Request)
}
CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(const CGameRecording_GetTimelinesForClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForClip_Request)
}

void CGameRecording_GetTimelinesForClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_GetTimelinesForClip_Request::~CGameRecording_GetTimelinesForClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetTimelinesForClip_Request::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForClip_Request* _this = reinterpret_cast< CGameRecording_GetTimelinesForClip_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetTimelinesForClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetTimelinesForClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForClip_Request)
  return target;
}

size_t CGameRecording_GetTimelinesForClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForClip_Request::MergeFrom(const CGameRecording_GetTimelinesForClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_GetTimelinesForClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForClip_Request::CopyFrom(const CGameRecording_GetTimelinesForClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForClip_Request::InternalSwap(CGameRecording_GetTimelinesForClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForClip_Response>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_timeline_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CGameRecording_GetTimelinesForClip_Response::clear_timelines() {
  timelines_.Clear();
}
CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForClip_Response)
}
CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(const CGameRecording_GetTimelinesForClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timelines_(from.timelines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForClip_Response)
}

void CGameRecording_GetTimelinesForClip_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
}

CGameRecording_GetTimelinesForClip_Response::~CGameRecording_GetTimelinesForClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForClip_Response::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForClip_Response* _this = reinterpret_cast< CGameRecording_GetTimelinesForClip_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTimelineMetadata timelines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 first_timeline_start_offset_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_timeline_start_offset_ms(&has_bits);
          first_timeline_start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // repeated .CGameRecordingTimelineMetadata timelines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_timelines(i), target, stream);
  }

  // optional uint64 first_timeline_start_offset_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_first_timeline_start_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForClip_Response)
  return target;
}

size_t CGameRecording_GetTimelinesForClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 2;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 first_timeline_start_offset_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_timeline_start_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForClip_Response::MergeFrom(const CGameRecording_GetTimelinesForClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_timeline_start_offset_ms_ = from.first_timeline_start_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetTimelinesForClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForClip_Response::CopyFrom(const CGameRecording_GetTimelinesForClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForClip_Response::InternalSwap(CGameRecording_GetTimelinesForClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timelines_.InternalSwap(&other->timelines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetTimelinesForClip_Response, first_timeline_start_offset_ms_)
      + sizeof(CGameRecording_GetTimelinesForClip_Response::first_timeline_start_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetTimelinesForClip_Response, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_QueryPhases_Request_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_QueryPhases_Request_Tag>()._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_QueryPhases_Request_Tag::CGameRecording_QueryPhases_Request_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_QueryPhases_Request.Tag)
}
CGameRecording_QueryPhases_Request_Tag::CGameRecording_QueryPhases_Request_Tag(const CGameRecording_QueryPhases_Request_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_QueryPhases_Request.Tag)
}

void CGameRecording_QueryPhases_Request_Tag::SharedCtor() {
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_QueryPhases_Request_Tag::~CGameRecording_QueryPhases_Request_Tag() {
  // @@protoc_insertion_point(destructor:CGameRecording_QueryPhases_Request.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_QueryPhases_Request_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_QueryPhases_Request_Tag::ArenaDtor(void* object) {
  CGameRecording_QueryPhases_Request_Tag* _this = reinterpret_cast< CGameRecording_QueryPhases_Request_Tag* >(object);
  (void)_this;
}
void CGameRecording_QueryPhases_Request_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_QueryPhases_Request_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_QueryPhases_Request_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_QueryPhases_Request.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_QueryPhases_Request_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Request.Tag.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Request.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_QueryPhases_Request_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_QueryPhases_Request.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Request.Tag.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Request.Tag.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_QueryPhases_Request.Tag)
  return target;
}

size_t CGameRecording_QueryPhases_Request_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_QueryPhases_Request.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_QueryPhases_Request_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_QueryPhases_Request.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_QueryPhases_Request_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_QueryPhases_Request_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_QueryPhases_Request.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_QueryPhases_Request.Tag)
    MergeFrom(*source);
  }
}

void CGameRecording_QueryPhases_Request_Tag::MergeFrom(const CGameRecording_QueryPhases_Request_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_QueryPhases_Request.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void CGameRecording_QueryPhases_Request_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_QueryPhases_Request.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_QueryPhases_Request_Tag::CopyFrom(const CGameRecording_QueryPhases_Request_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_QueryPhases_Request.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_QueryPhases_Request_Tag::IsInitialized() const {
  return true;
}

void CGameRecording_QueryPhases_Request_Tag::InternalSwap(CGameRecording_QueryPhases_Request_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_QueryPhases_Request_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_QueryPhases_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_QueryPhases_Request>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_search_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_QueryPhases_Request::CGameRecording_QueryPhases_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filter_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_QueryPhases_Request)
}
CGameRecording_QueryPhases_Request::CGameRecording_QueryPhases_Request(const CGameRecording_QueryPhases_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filter_tags_(from.filter_tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter_search_string()) {
    filter_search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_search_string(), 
      GetArena());
  }
  filter_phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter_phase_id()) {
    filter_phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_phase_id(), 
      GetArena());
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_gameid_) -
    reinterpret_cast<char*>(&page_)) + sizeof(filter_gameid_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_QueryPhases_Request)
}

void CGameRecording_QueryPhases_Request::SharedCtor() {
filter_search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filter_phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_gameid_) -
    reinterpret_cast<char*>(&page_)) + sizeof(filter_gameid_));
}

CGameRecording_QueryPhases_Request::~CGameRecording_QueryPhases_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_QueryPhases_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_QueryPhases_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_search_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_phase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_QueryPhases_Request::ArenaDtor(void* object) {
  CGameRecording_QueryPhases_Request* _this = reinterpret_cast< CGameRecording_QueryPhases_Request* >(object);
  (void)_this;
}
void CGameRecording_QueryPhases_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_QueryPhases_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_QueryPhases_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_QueryPhases_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filter_search_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filter_phase_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_gameid_) -
        reinterpret_cast<char*>(&page_)) + sizeof(filter_gameid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_QueryPhases_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 filter_gameid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_filter_gameid(&has_bits);
          filter_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filter_search_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_filter_search_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Request.filter_search_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecording_QueryPhases_Request.Tag filter_tags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string filter_phase_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_filter_phase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Request.filter_phase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_QueryPhases_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_QueryPhases_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint64 filter_gameid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_filter_gameid(), target);
  }

  // optional string filter_search_string = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_search_string().data(), static_cast<int>(this->_internal_filter_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Request.filter_search_string");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_filter_search_string(), target);
  }

  // repeated .CGameRecording_QueryPhases_Request.Tag filter_tags = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_filter_tags(i), target, stream);
  }

  // optional string filter_phase_id = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_phase_id().data(), static_cast<int>(this->_internal_filter_phase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Request.filter_phase_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_filter_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_QueryPhases_Request)
  return target;
}

size_t CGameRecording_QueryPhases_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_QueryPhases_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_QueryPhases_Request.Tag filter_tags = 12;
  total_size += 1UL * this->_internal_filter_tags_size();
  for (const auto& msg : this->filter_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filter_search_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_search_string());
    }

    // optional string filter_phase_id = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_phase_id());
    }

    // optional uint32 page = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint64 filter_gameid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_filter_gameid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_QueryPhases_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_QueryPhases_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_QueryPhases_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_QueryPhases_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_QueryPhases_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_QueryPhases_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_QueryPhases_Request::MergeFrom(const CGameRecording_QueryPhases_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_QueryPhases_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_tags_.MergeFrom(from.filter_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filter_search_string(from._internal_filter_search_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filter_phase_id(from._internal_filter_phase_id());
    }
    if (cached_has_bits & 0x00000004u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_gameid_ = from.filter_gameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_QueryPhases_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_QueryPhases_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_QueryPhases_Request::CopyFrom(const CGameRecording_QueryPhases_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_QueryPhases_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_QueryPhases_Request::IsInitialized() const {
  return true;
}

void CGameRecording_QueryPhases_Request::InternalSwap(CGameRecording_QueryPhases_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_tags_.InternalSwap(&other->filter_tags_);
  filter_search_string_.Swap(&other->filter_search_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_phase_id_.Swap(&other->filter_phase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Request, filter_gameid_)
      + sizeof(CGameRecording_QueryPhases_Request::filter_gameid_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Request, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_QueryPhases_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
}
CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(duration_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(duration_ms_));
}

CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::~CGameRecording_QueryPhases_Response_Phase_BackgroundRecording() {
  // @@protoc_insertion_point(destructor:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::ArenaDtor(void* object) {
  CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* _this = reinterpret_cast< CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* >(object);
  (void)_this;
}
void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_ms_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // optional uint64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  return target;
}

size_t CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_offset());
    }

    // optional uint64 duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
    MergeFrom(*source);
  }
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::MergeFrom(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::CopyFrom(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::IsInitialized() const {
  return true;
}

void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::InternalSwap(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, duration_ms_)
      + sizeof(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::duration_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_QueryPhases_Response_Phase::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_QueryPhases_Response_Phase>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& background_recording(const CGameRecording_QueryPhases_Response_Phase* msg);
  static void set_has_background_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_start_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording&
CGameRecording_QueryPhases_Response_Phase::_Internal::background_recording(const CGameRecording_QueryPhases_Response_Phase* msg) {
  return *msg->background_recording_;
}
void CGameRecording_QueryPhases_Response_Phase::clear_tags() {
  tags_.Clear();
}
void CGameRecording_QueryPhases_Response_Phase::clear_contained_tags() {
  contained_tags_.Clear();
}
CGameRecording_QueryPhases_Response_Phase::CGameRecording_QueryPhases_Response_Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  contained_tags_(arena),
  clip_ids_(arena),
  screenshots_(arena),
  significant_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_QueryPhases_Response.Phase)
}
CGameRecording_QueryPhases_Response_Phase::CGameRecording_QueryPhases_Response_Phase(const CGameRecording_QueryPhases_Response_Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      contained_tags_(from.contained_tags_),
      clip_ids_(from.clip_ids_),
      screenshots_(from.screenshots_),
      significant_events_(from.significant_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phase_id()) {
    phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase_id(), 
      GetArena());
  }
  if (from._internal_has_background_recording()) {
    background_recording_ = new ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(*from.background_recording_);
  } else {
    background_recording_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_QueryPhases_Response.Phase)
}

void CGameRecording_QueryPhases_Response_Phase::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&background_recording_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_ms_) -
    reinterpret_cast<char*>(&background_recording_)) + sizeof(start_ms_));
type_ = 1;
}

CGameRecording_QueryPhases_Response_Phase::~CGameRecording_QueryPhases_Response_Phase() {
  // @@protoc_insertion_point(destructor:CGameRecording_QueryPhases_Response.Phase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_QueryPhases_Response_Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_recording_;
}

void CGameRecording_QueryPhases_Response_Phase::ArenaDtor(void* object) {
  CGameRecording_QueryPhases_Response_Phase* _this = reinterpret_cast< CGameRecording_QueryPhases_Response_Phase* >(object);
  (void)_this;
}
void CGameRecording_QueryPhases_Response_Phase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_QueryPhases_Response_Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_QueryPhases_Response_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_QueryPhases_Response.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  contained_tags_.Clear();
  clip_ids_.Clear();
  screenshots_.Clear();
  significant_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      phase_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(background_recording_ != nullptr);
      background_recording_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_recorded_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(date_recorded_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_ms_) -
        reinterpret_cast<char*>(&active_)) + sizeof(start_ms_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_QueryPhases_Response_Phase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTimelineTag tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CTimelineTag contained_tags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_QueryPhases_Response.Phase.BackgroundRecording background_recording = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string clip_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clip_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.clip_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EPhaseResultType type = 11 [default = EPhaseResultType_Automatic];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPhaseResultType_IsValid(val))) {
            _internal_set_type(static_cast<::EPhaseResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 start_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_start_ms(&has_bits);
          start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 screenshots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_screenshots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_screenshots(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phase_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_phase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_QueryPhases_Response.Phase.phase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTimelineEntry significant_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_significant_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_QueryPhases_Response_Phase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_QueryPhases_Response.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.icon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  // optional uint32 date_recorded = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_date_recorded(), target);
  }

  // optional uint64 duration_ms = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_duration_ms(), target);
  }

  // repeated .CTimelineTag tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tags(i), target, stream);
  }

  // repeated .CTimelineTag contained_tags = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_contained_tags(i), target, stream);
  }

  // optional .CGameRecording_QueryPhases_Response.Phase.BackgroundRecording background_recording = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::background_recording(this), target, stream);
  }

  // repeated string clip_ids = 10;
  for (int i = 0, n = this->_internal_clip_ids_size(); i < n; i++) {
    const auto& s = this->_internal_clip_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.clip_ids");
    target = stream->WriteString(10, s, target);
  }

  // optional .EPhaseResultType type = 11 [default = EPhaseResultType_Automatic];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // optional uint64 start_ms = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_start_ms(), target);
  }

  // repeated uint32 screenshots = 13;
  for (int i = 0, n = this->_internal_screenshots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_screenshots(i), target);
  }

  // optional bool active = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_active(), target);
  }

  // optional string phase_id = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phase_id().data(), static_cast<int>(this->_internal_phase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_QueryPhases_Response.Phase.phase_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_phase_id(), target);
  }

  // repeated .CTimelineEntry significant_events = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_significant_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_significant_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_QueryPhases_Response.Phase)
  return target;
}

size_t CGameRecording_QueryPhases_Response_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_QueryPhases_Response.Phase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTimelineTag tags = 7;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CTimelineTag contained_tags = 8;
  total_size += 1UL * this->_internal_contained_tags_size();
  for (const auto& msg : this->contained_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string clip_ids = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clip_ids_.size());
  for (int i = 0, n = clip_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clip_ids_.Get(i));
  }

  // repeated uint32 screenshots = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->screenshots_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_screenshots_size());
    total_size += data_size;
  }

  // repeated .CTimelineEntry significant_events = 16;
  total_size += 2UL * this->_internal_significant_events_size();
  for (const auto& msg : this->significant_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional string icon = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string phase_id = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phase_id());
    }

    // optional .CGameRecording_QueryPhases_Response.Phase.BackgroundRecording background_recording = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_recording_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint32 date_recorded = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool active = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 start_ms = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_ms());
    }

    // optional .EPhaseResultType type = 11 [default = EPhaseResultType_Automatic];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_QueryPhases_Response_Phase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_QueryPhases_Response.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_QueryPhases_Response_Phase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_QueryPhases_Response_Phase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_QueryPhases_Response.Phase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_QueryPhases_Response.Phase)
    MergeFrom(*source);
  }
}

void CGameRecording_QueryPhases_Response_Phase::MergeFrom(const CGameRecording_QueryPhases_Response_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_QueryPhases_Response.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  contained_tags_.MergeFrom(from.contained_tags_);
  clip_ids_.MergeFrom(from.clip_ids_);
  screenshots_.MergeFrom(from.screenshots_);
  significant_events_.MergeFrom(from.significant_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_phase_id(from._internal_phase_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_background_recording()->::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::MergeFrom(from._internal_background_recording());
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      date_recorded_ = from.date_recorded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000200u) {
      start_ms_ = from.start_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_QueryPhases_Response_Phase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_QueryPhases_Response.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_QueryPhases_Response_Phase::CopyFrom(const CGameRecording_QueryPhases_Response_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_QueryPhases_Response.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_QueryPhases_Response_Phase::IsInitialized() const {
  return true;
}

void CGameRecording_QueryPhases_Response_Phase::InternalSwap(CGameRecording_QueryPhases_Response_Phase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  contained_tags_.InternalSwap(&other->contained_tags_);
  clip_ids_.InternalSwap(&other->clip_ids_);
  screenshots_.InternalSwap(&other->screenshots_);
  significant_events_.InternalSwap(&other->significant_events_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phase_id_.Swap(&other->phase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Response_Phase, start_ms_)
      + sizeof(CGameRecording_QueryPhases_Response_Phase::start_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_QueryPhases_Response_Phase, background_recording_)>(
          reinterpret_cast<char*>(&background_recording_),
          reinterpret_cast<char*>(&other->background_recording_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_QueryPhases_Response_Phase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_QueryPhases_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_QueryPhases_Response>()._has_bits_);
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_QueryPhases_Response::CGameRecording_QueryPhases_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_QueryPhases_Response)
}
CGameRecording_QueryPhases_Response::CGameRecording_QueryPhases_Response(const CGameRecording_QueryPhases_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_QueryPhases_Response)
}

void CGameRecording_QueryPhases_Response::SharedCtor() {
total_count_ = 0u;
}

CGameRecording_QueryPhases_Response::~CGameRecording_QueryPhases_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_QueryPhases_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_QueryPhases_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_QueryPhases_Response::ArenaDtor(void* object) {
  CGameRecording_QueryPhases_Response* _this = reinterpret_cast< CGameRecording_QueryPhases_Response* >(object);
  (void)_this;
}
void CGameRecording_QueryPhases_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_QueryPhases_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_QueryPhases_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_QueryPhases_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  total_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_QueryPhases_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_QueryPhases_Response.Phase phases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_QueryPhases_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_QueryPhases_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_QueryPhases_Response.Phase phases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_phases(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_QueryPhases_Response)
  return target;
}

size_t CGameRecording_QueryPhases_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_QueryPhases_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_QueryPhases_Response.Phase phases = 1;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 total_count = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_QueryPhases_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_QueryPhases_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_QueryPhases_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_QueryPhases_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_QueryPhases_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_QueryPhases_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_QueryPhases_Response::MergeFrom(const CGameRecording_QueryPhases_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_QueryPhases_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  if (from._internal_has_total_count()) {
    _internal_set_total_count(from._internal_total_count());
  }
}

void CGameRecording_QueryPhases_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_QueryPhases_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_QueryPhases_Response::CopyFrom(const CGameRecording_QueryPhases_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_QueryPhases_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_QueryPhases_Response::IsInitialized() const {
  return true;
}

void CGameRecording_QueryPhases_Response::InternalSwap(CGameRecording_QueryPhases_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phases_.InternalSwap(&other->phases_);
  swap(total_count_, other->total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_QueryPhases_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTags_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTags_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTags_Request::CGameRecording_GetTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTags_Request)
}
CGameRecording_GetTags_Request::CGameRecording_GetTags_Request(const CGameRecording_GetTags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTags_Request)
}

void CGameRecording_GetTags_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetTags_Request::~CGameRecording_GetTags_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTags_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTags_Request::ArenaDtor(void* object) {
  CGameRecording_GetTags_Request* _this = reinterpret_cast< CGameRecording_GetTags_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTags_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTags_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTags_Request)
  return target;
}

size_t CGameRecording_GetTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTags_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTags_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTags_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTags_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTags_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTags_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTags_Request::MergeFrom(const CGameRecording_GetTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_GetTags_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTags_Request::CopyFrom(const CGameRecording_GetTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTags_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTags_Request::InternalSwap(CGameRecording_GetTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTags_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTags_Response::_Internal {
 public:
};

void CGameRecording_GetTags_Response::clear_tags() {
  tags_.Clear();
}
CGameRecording_GetTags_Response::CGameRecording_GetTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTags_Response)
}
CGameRecording_GetTags_Response::CGameRecording_GetTags_Response(const CGameRecording_GetTags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTags_Response)
}

void CGameRecording_GetTags_Response::SharedCtor() {
}

CGameRecording_GetTags_Response::~CGameRecording_GetTags_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTags_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTags_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTags_Response::ArenaDtor(void* object) {
  CGameRecording_GetTags_Response* _this = reinterpret_cast< CGameRecording_GetTags_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTags_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTags_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CTimelineTag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTags_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTags_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CTimelineTag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTags_Response)
  return target;
}

size_t CGameRecording_GetTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTags_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTimelineTag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTags_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTags_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTags_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTags_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTags_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTags_Response::MergeFrom(const CGameRecording_GetTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void CGameRecording_GetTags_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTags_Response::CopyFrom(const CGameRecording_GetTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTags_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTags_Response::InternalSwap(CGameRecording_GetTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTags_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetEnoughDiskSpace_Request::_Internal {
 public:
};

CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetEnoughDiskSpace_Request)
}
CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(const CGameRecording_GetEnoughDiskSpace_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetEnoughDiskSpace_Request)
}

void CGameRecording_GetEnoughDiskSpace_Request::SharedCtor() {
}

CGameRecording_GetEnoughDiskSpace_Request::~CGameRecording_GetEnoughDiskSpace_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetEnoughDiskSpace_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetEnoughDiskSpace_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetEnoughDiskSpace_Request::ArenaDtor(void* object) {
  CGameRecording_GetEnoughDiskSpace_Request* _this = reinterpret_cast< CGameRecording_GetEnoughDiskSpace_Request* >(object);
  (void)_this;
}
void CGameRecording_GetEnoughDiskSpace_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetEnoughDiskSpace_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetEnoughDiskSpace_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetEnoughDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetEnoughDiskSpace_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetEnoughDiskSpace_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetEnoughDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetEnoughDiskSpace_Request)
  return target;
}

size_t CGameRecording_GetEnoughDiskSpace_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetEnoughDiskSpace_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetEnoughDiskSpace_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetEnoughDiskSpace_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetEnoughDiskSpace_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetEnoughDiskSpace_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetEnoughDiskSpace_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetEnoughDiskSpace_Request::MergeFrom(const CGameRecording_GetEnoughDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetEnoughDiskSpace_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetEnoughDiskSpace_Request::CopyFrom(const CGameRecording_GetEnoughDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetEnoughDiskSpace_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetEnoughDiskSpace_Request::InternalSwap(CGameRecording_GetEnoughDiskSpace_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetEnoughDiskSpace_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetEnoughDiskSpace_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetEnoughDiskSpace_Response>()._has_bits_);
  static void set_has_enough_space(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetEnoughDiskSpace_Response)
}
CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(const CGameRecording_GetEnoughDiskSpace_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enough_space_ = from.enough_space_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetEnoughDiskSpace_Response)
}

void CGameRecording_GetEnoughDiskSpace_Response::SharedCtor() {
enough_space_ = false;
}

CGameRecording_GetEnoughDiskSpace_Response::~CGameRecording_GetEnoughDiskSpace_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetEnoughDiskSpace_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetEnoughDiskSpace_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetEnoughDiskSpace_Response::ArenaDtor(void* object) {
  CGameRecording_GetEnoughDiskSpace_Response* _this = reinterpret_cast< CGameRecording_GetEnoughDiskSpace_Response* >(object);
  (void)_this;
}
void CGameRecording_GetEnoughDiskSpace_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetEnoughDiskSpace_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetEnoughDiskSpace_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetEnoughDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enough_space_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetEnoughDiskSpace_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enough_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enough_space(&has_bits);
          enough_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetEnoughDiskSpace_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetEnoughDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enough_space = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enough_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetEnoughDiskSpace_Response)
  return target;
}

size_t CGameRecording_GetEnoughDiskSpace_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetEnoughDiskSpace_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enough_space = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetEnoughDiskSpace_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetEnoughDiskSpace_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetEnoughDiskSpace_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetEnoughDiskSpace_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetEnoughDiskSpace_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetEnoughDiskSpace_Response::MergeFrom(const CGameRecording_GetEnoughDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enough_space()) {
    _internal_set_enough_space(from._internal_enough_space());
  }
}

void CGameRecording_GetEnoughDiskSpace_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetEnoughDiskSpace_Response::CopyFrom(const CGameRecording_GetEnoughDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetEnoughDiskSpace_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetEnoughDiskSpace_Response::InternalSwap(CGameRecording_GetEnoughDiskSpace_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enough_space_, other->enough_space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetEnoughDiskSpace_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAvailableDiskSpace_Request::_Internal {
 public:
};

CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAvailableDiskSpace_Request)
}
CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(const CGameRecording_GetAvailableDiskSpace_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAvailableDiskSpace_Request)
}

void CGameRecording_GetAvailableDiskSpace_Request::SharedCtor() {
}

CGameRecording_GetAvailableDiskSpace_Request::~CGameRecording_GetAvailableDiskSpace_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAvailableDiskSpace_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAvailableDiskSpace_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAvailableDiskSpace_Request::ArenaDtor(void* object) {
  CGameRecording_GetAvailableDiskSpace_Request* _this = reinterpret_cast< CGameRecording_GetAvailableDiskSpace_Request* >(object);
  (void)_this;
}
void CGameRecording_GetAvailableDiskSpace_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAvailableDiskSpace_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAvailableDiskSpace_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAvailableDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAvailableDiskSpace_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAvailableDiskSpace_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAvailableDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAvailableDiskSpace_Request)
  return target;
}

size_t CGameRecording_GetAvailableDiskSpace_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAvailableDiskSpace_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAvailableDiskSpace_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAvailableDiskSpace_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAvailableDiskSpace_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAvailableDiskSpace_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAvailableDiskSpace_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAvailableDiskSpace_Request::MergeFrom(const CGameRecording_GetAvailableDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetAvailableDiskSpace_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAvailableDiskSpace_Request::CopyFrom(const CGameRecording_GetAvailableDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAvailableDiskSpace_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetAvailableDiskSpace_Request::InternalSwap(CGameRecording_GetAvailableDiskSpace_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAvailableDiskSpace_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAvailableDiskSpace_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetAvailableDiskSpace_Response>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAvailableDiskSpace_Response)
}
CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(const CGameRecording_GetAvailableDiskSpace_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAvailableDiskSpace_Response)
}

void CGameRecording_GetAvailableDiskSpace_Response::SharedCtor() {
size_ = 0;
}

CGameRecording_GetAvailableDiskSpace_Response::~CGameRecording_GetAvailableDiskSpace_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAvailableDiskSpace_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAvailableDiskSpace_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAvailableDiskSpace_Response::ArenaDtor(void* object) {
  CGameRecording_GetAvailableDiskSpace_Response* _this = reinterpret_cast< CGameRecording_GetAvailableDiskSpace_Response* >(object);
  (void)_this;
}
void CGameRecording_GetAvailableDiskSpace_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAvailableDiskSpace_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAvailableDiskSpace_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAvailableDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAvailableDiskSpace_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAvailableDiskSpace_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAvailableDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAvailableDiskSpace_Response)
  return target;
}

size_t CGameRecording_GetAvailableDiskSpace_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAvailableDiskSpace_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAvailableDiskSpace_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAvailableDiskSpace_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAvailableDiskSpace_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAvailableDiskSpace_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAvailableDiskSpace_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAvailableDiskSpace_Response::MergeFrom(const CGameRecording_GetAvailableDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_set_size(from._internal_size());
  }
}

void CGameRecording_GetAvailableDiskSpace_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAvailableDiskSpace_Response::CopyFrom(const CGameRecording_GetAvailableDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAvailableDiskSpace_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetAvailableDiskSpace_Response::InternalSwap(CGameRecording_GetAvailableDiskSpace_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAvailableDiskSpace_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TimelineChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TimelineChanged_Notification>()._has_bits_);
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TimelineChanged_Notification)
}
CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(const CGameRecording_TimelineChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(notification_type_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TimelineChanged_Notification)
}

void CGameRecording_TimelineChanged_Notification::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(start_time_));
notification_type_ = 1;
}

CGameRecording_TimelineChanged_Notification::~CGameRecording_TimelineChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_TimelineChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TimelineChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_TimelineChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_TimelineChanged_Notification* _this = reinterpret_cast< CGameRecording_TimelineChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_TimelineChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TimelineChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TimelineChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TimelineChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(start_time_));
    notification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TimelineChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETimelineChangeNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ETimelineChangeNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_TimelineChanged_Notification.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TimelineChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TimelineChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notification_type(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_TimelineChanged_Notification.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 game_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_game_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_time(), target);
  }

  // optional uint64 duration_ms = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TimelineChanged_Notification)
  return target;
}

size_t CGameRecording_TimelineChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TimelineChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 game_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TimelineChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TimelineChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TimelineChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TimelineChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TimelineChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TimelineChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_TimelineChanged_Notification::MergeFrom(const CGameRecording_TimelineChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TimelineChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      notification_type_ = from.notification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_TimelineChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TimelineChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TimelineChanged_Notification::CopyFrom(const CGameRecording_TimelineChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TimelineChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TimelineChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_TimelineChanged_Notification::InternalSwap(CGameRecording_TimelineChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineChanged_Notification, start_time_)
      + sizeof(CGameRecording_TimelineChanged_Notification::start_time_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineChanged_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(notification_type_, other->notification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TimelineChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_RecordingSessionChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_RecordingSessionChanged_Notification>()._has_bits_);
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recording_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_RecordingSessionChanged_Notification)
}
CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(const CGameRecording_RecordingSessionChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(notification_type_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_RecordingSessionChanged_Notification)
}

void CGameRecording_RecordingSessionChanged_Notification::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recording_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(recording_type_));
notification_type_ = 1;
}

CGameRecording_RecordingSessionChanged_Notification::~CGameRecording_RecordingSessionChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_RecordingSessionChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_RecordingSessionChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_RecordingSessionChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_RecordingSessionChanged_Notification* _this = reinterpret_cast< CGameRecording_RecordingSessionChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_RecordingSessionChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_RecordingSessionChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_RecordingSessionChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_RecordingSessionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recording_type_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(recording_type_));
    notification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_RecordingSessionChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ERecordingSessionChangeNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ERecordingSessionChangeNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_RecordingSessionChanged_Notification.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_RecordingSessionChanged_Notification.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_offset(&has_bits);
          start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameRecordingType_IsValid(val))) {
            _internal_set_recording_type(static_cast<::EGameRecordingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_RecordingSessionChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_RecordingSessionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notification_type(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_RecordingSessionChanged_Notification.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 game_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_game_id(), target);
  }

  // optional string session_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_RecordingSessionChanged_Notification.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // optional uint64 start_offset = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_offset(), target);
  }

  // optional uint64 duration_ms = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_duration_ms(), target);
  }

  // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_recording_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_RecordingSessionChanged_Notification)
  return target;
}

size_t CGameRecording_RecordingSessionChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_RecordingSessionChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string session_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional uint64 game_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 start_offset = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_offset());
    }

    // optional uint64 duration_ms = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_type());
    }

    // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_RecordingSessionChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_RecordingSessionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_RecordingSessionChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_RecordingSessionChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_RecordingSessionChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_RecordingSessionChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_RecordingSessionChanged_Notification::MergeFrom(const CGameRecording_RecordingSessionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_RecordingSessionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_offset_ = from.start_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      recording_type_ = from.recording_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      notification_type_ = from.notification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_RecordingSessionChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_RecordingSessionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_RecordingSessionChanged_Notification::CopyFrom(const CGameRecording_RecordingSessionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_RecordingSessionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_RecordingSessionChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_RecordingSessionChanged_Notification::InternalSwap(CGameRecording_RecordingSessionChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_RecordingSessionChanged_Notification, recording_type_)
      + sizeof(CGameRecording_RecordingSessionChanged_Notification::recording_type_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_RecordingSessionChanged_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(notification_type_, other->notification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_RecordingSessionChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimelineEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimelineEntry>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_range_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_range_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_range_possible_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timestamp_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_marker_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_marker_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_marker_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_screenshot_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_achievement_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

void CTimelineEntry::clear_tag() {
  tag_.Clear();
}
CTimelineEntry::CTimelineEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tag_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimelineEntry)
}
CTimelineEntry::CTimelineEntry(const CTimelineEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  range_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_range_title()) {
    range_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_title(), 
      GetArena());
  }
  timestamp_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timestamp_title()) {
    timestamp_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp_title(), 
      GetArena());
  }
  marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_icon()) {
    marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_icon(), 
      GetArena());
  }
  marker_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_description()) {
    marker_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_description(), 
      GetArena());
  }
  achievement_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_achievement_name()) {
    achievement_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_achievement_name(), 
      GetArena());
  }
  phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phase_id()) {
    phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase_id(), 
      GetArena());
  }
  ::memcpy(&entry_id_, &from.entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&screenshot_handle_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(screenshot_handle_));
  // @@protoc_insertion_point(copy_constructor:CTimelineEntry)
}

void CTimelineEntry::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
range_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
achievement_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&screenshot_handle_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(screenshot_handle_));
}

CTimelineEntry::~CTimelineEntry() {
  // @@protoc_insertion_point(destructor:CTimelineEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimelineEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  achievement_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTimelineEntry::ArenaDtor(void* object) {
  CTimelineEntry* _this = reinterpret_cast< CTimelineEntry* >(object);
  (void)_this;
}
void CTimelineEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimelineEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimelineEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimelineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      range_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      marker_icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      marker_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      achievement_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      phase_id_.ClearNonDefaultToEmpty();
    }
  }
  entry_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screenshot_handle_) -
        reinterpret_cast<char*>(&time_)) + sizeof(screenshot_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimelineEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETimelineEntryType_IsValid(val))) {
            _internal_set_type(static_cast<::ETimelineEntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string range_title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_range_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.range_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 range_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_range_duration(&has_bits);
          range_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range_possible_clip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_range_possible_clip(&has_bits);
          range_possible_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timestamp_title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_timestamp_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.timestamp_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_icon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_marker_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.marker_icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_description = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_marker_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.marker_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 marker_priority = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_marker_priority(&has_bits);
          marker_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenshot_handle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_screenshot_handle(&has_bits);
          screenshot_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string achievement_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_achievement_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.achievement_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTimelineTag tag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string phase_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_phase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.phase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimelineEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimelineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entry_id(), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional int32 game_mode = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional string range_title = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_range_title().data(), static_cast<int>(this->_internal_range_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.range_title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_range_title(), target);
  }

  // optional uint64 range_duration = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_range_duration(), target);
  }

  // optional int32 range_possible_clip = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_range_possible_clip(), target);
  }

  // optional string timestamp_title = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp_title().data(), static_cast<int>(this->_internal_timestamp_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.timestamp_title");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_timestamp_title(), target);
  }

  // optional string marker_icon = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_icon().data(), static_cast<int>(this->_internal_marker_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.marker_icon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_marker_icon(), target);
  }

  // optional string marker_description = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_description().data(), static_cast<int>(this->_internal_marker_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.marker_description");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_marker_description(), target);
  }

  // optional int32 marker_priority = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_marker_priority(), target);
  }

  // optional uint32 screenshot_handle = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_screenshot_handle(), target);
  }

  // optional string achievement_name = 16;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_achievement_name().data(), static_cast<int>(this->_internal_achievement_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.achievement_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_achievement_name(), target);
  }

  // repeated .CTimelineTag tag = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_tag(i), target, stream);
  }

  // optional string phase_id = 18;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phase_id().data(), static_cast<int>(this->_internal_phase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.phase_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimelineEntry)
  return target;
}

size_t CTimelineEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimelineEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTimelineTag tag = 17;
  total_size += 2UL * this->_internal_tag_size();
  for (const auto& msg : this->tag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string range_title = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_range_title());
    }

    // optional string timestamp_title = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timestamp_title());
    }

    // optional string marker_icon = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_icon());
    }

    // optional string marker_description = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_description());
    }

    // optional string achievement_name = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_achievement_name());
    }

    // optional string phase_id = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phase_id());
    }

    // optional uint64 entry_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint64 time = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time());
    }

    // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 game_mode = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_mode());
    }

    // optional uint64 range_duration = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_range_duration());
    }

    // optional int32 range_possible_clip = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range_possible_clip());
    }

    // optional int32 marker_priority = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marker_priority());
    }

    // optional uint32 screenshot_handle = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenshot_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimelineEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimelineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimelineEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimelineEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimelineEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimelineEntry)
    MergeFrom(*source);
  }
}

void CTimelineEntry::MergeFrom(const CTimelineEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimelineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_range_title(from._internal_range_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_timestamp_title(from._internal_timestamp_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_marker_icon(from._internal_marker_icon());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_marker_description(from._internal_marker_description());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_achievement_name(from._internal_achievement_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_phase_id(from._internal_phase_id());
    }
    if (cached_has_bits & 0x00000080u) {
      entry_id_ = from.entry_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      range_duration_ = from.range_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      range_possible_clip_ = from.range_possible_clip_;
    }
    if (cached_has_bits & 0x00002000u) {
      marker_priority_ = from.marker_priority_;
    }
    if (cached_has_bits & 0x00004000u) {
      screenshot_handle_ = from.screenshot_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimelineEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimelineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimelineEntry::CopyFrom(const CTimelineEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimelineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimelineEntry::IsInitialized() const {
  return true;
}

void CTimelineEntry::InternalSwap(CTimelineEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.InternalSwap(&other->tag_);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_title_.Swap(&other->range_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_title_.Swap(&other->timestamp_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_icon_.Swap(&other->marker_icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_description_.Swap(&other->marker_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  achievement_name_.Swap(&other->achievement_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phase_id_.Swap(&other->phase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimelineEntry, screenshot_handle_)
      + sizeof(CTimelineEntry::screenshot_handle_)
      - PROTOBUF_FIELD_OFFSET(CTimelineEntry, entry_id_)>(
          reinterpret_cast<char*>(&entry_id_),
          reinterpret_cast<char*>(&other->entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimelineEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TimelineEntryChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TimelineEntryChanged_Notification>()._has_bits_);
  static const ::CTimelineEntry& entry(const CGameRecording_TimelineEntryChanged_Notification* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CTimelineEntry&
CGameRecording_TimelineEntryChanged_Notification::_Internal::entry(const CGameRecording_TimelineEntryChanged_Notification* msg) {
  return *msg->entry_;
}
CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TimelineEntryChanged_Notification)
}
CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(const CGameRecording_TimelineEntryChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TimelineEntryChanged_Notification)
}

void CGameRecording_TimelineEntryChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(game_id_));
}

CGameRecording_TimelineEntryChanged_Notification::~CGameRecording_TimelineEntryChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_TimelineEntryChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TimelineEntryChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_TimelineEntryChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_TimelineEntryChanged_Notification* _this = reinterpret_cast< CGameRecording_TimelineEntryChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_TimelineEntryChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TimelineEntryChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TimelineEntryChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TimelineEntryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entry_ != nullptr);
    entry_->Clear();
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TimelineEntryChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CTimelineEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TimelineEntryChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TimelineEntryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CTimelineEntry entry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entry(this), target, stream);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TimelineEntryChanged_Notification)
  return target;
}

size_t CGameRecording_TimelineEntryChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TimelineEntryChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CTimelineEntry entry = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TimelineEntryChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TimelineEntryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TimelineEntryChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TimelineEntryChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TimelineEntryChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TimelineEntryChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_TimelineEntryChanged_Notification::MergeFrom(const CGameRecording_TimelineEntryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TimelineEntryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_TimelineEntryChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TimelineEntryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TimelineEntryChanged_Notification::CopyFrom(const CGameRecording_TimelineEntryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TimelineEntryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TimelineEntryChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_TimelineEntryChanged_Notification::InternalSwap(CGameRecording_TimelineEntryChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineEntryChanged_Notification, game_id_)
      + sizeof(CGameRecording_TimelineEntryChanged_Notification::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineEntryChanged_Notification, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TimelineEntryChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_LowDiskSpace_Notification::_Internal {
 public:
};

CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_LowDiskSpace_Notification)
}
CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(const CGameRecording_LowDiskSpace_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_LowDiskSpace_Notification)
}

void CGameRecording_LowDiskSpace_Notification::SharedCtor() {
}

CGameRecording_LowDiskSpace_Notification::~CGameRecording_LowDiskSpace_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_LowDiskSpace_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_LowDiskSpace_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_LowDiskSpace_Notification::ArenaDtor(void* object) {
  CGameRecording_LowDiskSpace_Notification* _this = reinterpret_cast< CGameRecording_LowDiskSpace_Notification* >(object);
  (void)_this;
}
void CGameRecording_LowDiskSpace_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_LowDiskSpace_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_LowDiskSpace_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_LowDiskSpace_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_LowDiskSpace_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_LowDiskSpace_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_LowDiskSpace_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_LowDiskSpace_Notification)
  return target;
}

size_t CGameRecording_LowDiskSpace_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_LowDiskSpace_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_LowDiskSpace_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_LowDiskSpace_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_LowDiskSpace_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_LowDiskSpace_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_LowDiskSpace_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_LowDiskSpace_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_LowDiskSpace_Notification::MergeFrom(const CGameRecording_LowDiskSpace_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_LowDiskSpace_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_LowDiskSpace_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_LowDiskSpace_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_LowDiskSpace_Notification::CopyFrom(const CGameRecording_LowDiskSpace_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_LowDiskSpace_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_LowDiskSpace_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_LowDiskSpace_Notification::InternalSwap(CGameRecording_LowDiskSpace_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_LowDiskSpace_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_PostGameHighlightsChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_PostGameHighlightsChanged_Notification>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_PostGameHighlightsChanged_Notification)
}
CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(const CGameRecording_PostGameHighlightsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_PostGameHighlightsChanged_Notification)
}

void CGameRecording_PostGameHighlightsChanged_Notification::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_PostGameHighlightsChanged_Notification::~CGameRecording_PostGameHighlightsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_PostGameHighlightsChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_PostGameHighlightsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_PostGameHighlightsChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_PostGameHighlightsChanged_Notification* _this = reinterpret_cast< CGameRecording_PostGameHighlightsChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_PostGameHighlightsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_PostGameHighlightsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_PostGameHighlightsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_PostGameHighlightsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_PostGameHighlightsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_PostGameHighlightsChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_PostGameHighlightsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_PostGameHighlightsChanged_Notification)
  return target;
}

size_t CGameRecording_PostGameHighlightsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_PostGameHighlightsChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_PostGameHighlightsChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_PostGameHighlightsChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_PostGameHighlightsChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_PostGameHighlightsChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_PostGameHighlightsChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_PostGameHighlightsChanged_Notification::MergeFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_PostGameHighlightsChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_PostGameHighlightsChanged_Notification::CopyFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_PostGameHighlightsChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_PostGameHighlightsChanged_Notification::InternalSwap(CGameRecording_PostGameHighlightsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_PostGameHighlightsChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_OpenOverlayToGamePhase_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_OpenOverlayToGamePhase_Notification>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_OpenOverlayToGamePhase_Notification::CGameRecording_OpenOverlayToGamePhase_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_OpenOverlayToGamePhase_Notification)
}
CGameRecording_OpenOverlayToGamePhase_Notification::CGameRecording_OpenOverlayToGamePhase_Notification(const CGameRecording_OpenOverlayToGamePhase_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phase_id()) {
    phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase_id(), 
      GetArena());
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_OpenOverlayToGamePhase_Notification)
}

void CGameRecording_OpenOverlayToGamePhase_Notification::SharedCtor() {
phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_OpenOverlayToGamePhase_Notification::~CGameRecording_OpenOverlayToGamePhase_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_OpenOverlayToGamePhase_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_OpenOverlayToGamePhase_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_OpenOverlayToGamePhase_Notification::ArenaDtor(void* object) {
  CGameRecording_OpenOverlayToGamePhase_Notification* _this = reinterpret_cast< CGameRecording_OpenOverlayToGamePhase_Notification* >(object);
  (void)_this;
}
void CGameRecording_OpenOverlayToGamePhase_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_OpenOverlayToGamePhase_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_OpenOverlayToGamePhase_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phase_id_.ClearNonDefaultToEmpty();
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_OpenOverlayToGamePhase_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_OpenOverlayToGamePhase_Notification.phase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_OpenOverlayToGamePhase_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional string phase_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phase_id().data(), static_cast<int>(this->_internal_phase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_OpenOverlayToGamePhase_Notification.phase_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_OpenOverlayToGamePhase_Notification)
  return target;
}

size_t CGameRecording_OpenOverlayToGamePhase_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string phase_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phase_id());
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_OpenOverlayToGamePhase_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_OpenOverlayToGamePhase_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_OpenOverlayToGamePhase_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_OpenOverlayToGamePhase_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_OpenOverlayToGamePhase_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_OpenOverlayToGamePhase_Notification::MergeFrom(const CGameRecording_OpenOverlayToGamePhase_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_phase_id(from._internal_phase_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_OpenOverlayToGamePhase_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_OpenOverlayToGamePhase_Notification::CopyFrom(const CGameRecording_OpenOverlayToGamePhase_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_OpenOverlayToGamePhase_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_OpenOverlayToGamePhase_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_OpenOverlayToGamePhase_Notification::InternalSwap(CGameRecording_OpenOverlayToGamePhase_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phase_id_.Swap(&other->phase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_OpenOverlayToGamePhase_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_OpenOverlayToTimelineEvent_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_OpenOverlayToTimelineEvent_Notification>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_OpenOverlayToTimelineEvent_Notification::CGameRecording_OpenOverlayToTimelineEvent_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_OpenOverlayToTimelineEvent_Notification)
}
CGameRecording_OpenOverlayToTimelineEvent_Notification::CGameRecording_OpenOverlayToTimelineEvent_Notification(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_OpenOverlayToTimelineEvent_Notification)
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
}

CGameRecording_OpenOverlayToTimelineEvent_Notification::~CGameRecording_OpenOverlayToTimelineEvent_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::ArenaDtor(void* object) {
  CGameRecording_OpenOverlayToTimelineEvent_Notification* _this = reinterpret_cast< CGameRecording_OpenOverlayToTimelineEvent_Notification* >(object);
  (void)_this;
}
void CGameRecording_OpenOverlayToTimelineEvent_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_OpenOverlayToTimelineEvent_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_id_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_OpenOverlayToTimelineEvent_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_OpenOverlayToTimelineEvent_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint64 entry_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  return target;
}

size_t CGameRecording_OpenOverlayToTimelineEvent_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 entry_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_OpenOverlayToTimelineEvent_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_OpenOverlayToTimelineEvent_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_OpenOverlayToTimelineEvent_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_OpenOverlayToTimelineEvent_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::MergeFrom(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      entry_id_ = from.entry_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::CopyFrom(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_OpenOverlayToTimelineEvent_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_OpenOverlayToTimelineEvent_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_OpenOverlayToTimelineEvent_Notification::InternalSwap(CGameRecording_OpenOverlayToTimelineEvent_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_OpenOverlayToTimelineEvent_Notification, entry_id_)
      + sizeof(CGameRecording_OpenOverlayToTimelineEvent_Notification::entry_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_OpenOverlayToTimelineEvent_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_OpenOverlayToTimelineEvent_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_PhaseListChanged_Notification::_Internal {
 public:
};

CGameRecording_PhaseListChanged_Notification::CGameRecording_PhaseListChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_PhaseListChanged_Notification)
}
CGameRecording_PhaseListChanged_Notification::CGameRecording_PhaseListChanged_Notification(const CGameRecording_PhaseListChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_PhaseListChanged_Notification)
}

void CGameRecording_PhaseListChanged_Notification::SharedCtor() {
}

CGameRecording_PhaseListChanged_Notification::~CGameRecording_PhaseListChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_PhaseListChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_PhaseListChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_PhaseListChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_PhaseListChanged_Notification* _this = reinterpret_cast< CGameRecording_PhaseListChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_PhaseListChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_PhaseListChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_PhaseListChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_PhaseListChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_PhaseListChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_PhaseListChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_PhaseListChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_PhaseListChanged_Notification)
  return target;
}

size_t CGameRecording_PhaseListChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_PhaseListChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_PhaseListChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_PhaseListChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_PhaseListChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_PhaseListChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_PhaseListChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_PhaseListChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_PhaseListChanged_Notification::MergeFrom(const CGameRecording_PhaseListChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_PhaseListChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_PhaseListChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_PhaseListChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_PhaseListChanged_Notification::CopyFrom(const CGameRecording_PhaseListChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_PhaseListChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_PhaseListChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_PhaseListChanged_Notification::InternalSwap(CGameRecording_PhaseListChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_PhaseListChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipSummary>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_start_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_clipped(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_original_device(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_original_gaming_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_date_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thumbnail_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_thumbnail_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CGameRecording_ClipSummary::CGameRecording_ClipSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipSummary)
}
CGameRecording_ClipSummary::CGameRecording_ClipSummary(const CGameRecording_ClipSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  start_timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_timeline_id()) {
    start_timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_timeline_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_device()) {
    original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_device(), 
      GetArena());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipSummary)
}

void CGameRecording_ClipSummary::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(thumbnail_height_));
}

CGameRecording_ClipSummary::~CGameRecording_ClipSummary() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ClipSummary::ArenaDtor(void* object) {
  CGameRecording_ClipSummary* _this = reinterpret_cast< CGameRecording_ClipSummary* >(object);
  (void)_this;
}
void CGameRecording_ClipSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      original_device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(start_offset_ms_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_width_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(thumbnail_width_));
  }
  thumbnail_height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_timeline_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_start_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.start_timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_offset_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_offset_ms(&has_bits);
          start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 published_file_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_clipped = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_date_clipped(&has_bits);
          date_clipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_temporary(&has_bits);
          temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_original_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.original_device");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_gaming_device_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_original_gaming_device_type(&has_bits);
          original_gaming_device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_downloaded = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_date_downloaded(&has_bits);
          date_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_url = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_thumbnail_width(&has_bits);
          thumbnail_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_height = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_thumbnail_height(&has_bits);
          thumbnail_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional uint64 game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint64 duration_ms = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // optional uint32 date_recorded = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date_recorded(), target);
  }

  // optional string start_timeline_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_timeline_id().data(), static_cast<int>(this->_internal_start_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.start_timeline_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_timeline_id(), target);
  }

  // optional uint64 start_offset_ms = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_offset_ms(), target);
  }

  // optional uint64 published_file_id = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_published_file_id(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_file_size(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // optional uint32 date_clipped = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_date_clipped(), target);
  }

  // optional bool temporary = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_temporary(), target);
  }

  // optional string original_device = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_device().data(), static_cast<int>(this->_internal_original_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.original_device");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_original_device(), target);
  }

  // optional uint32 original_gaming_device_type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_original_gaming_device_type(), target);
  }

  // optional uint32 date_downloaded = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_date_downloaded(), target);
  }

  // optional string thumbnail_url = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_thumbnail_url(), target);
  }

  // optional uint32 thumbnail_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_thumbnail_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipSummary)
  return target;
}

size_t CGameRecording_ClipSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string start_timeline_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_timeline_id());
    }

    // optional string name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string original_device = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_device());
    }

    // optional string thumbnail_url = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional uint64 game_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint64 start_offset_ms = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_offset_ms());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 published_file_id = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_published_file_id());
    }

    // optional uint32 date_recorded = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

    // optional uint32 date_clipped = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_clipped());
    }

    // optional uint64 file_size = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional bool temporary = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 original_gaming_device_type = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_gaming_device_type());
    }

    // optional uint32 date_downloaded = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_downloaded());
    }

    // optional uint32 thumbnail_width = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thumbnail_width());
    }

  }
  // optional uint32 thumbnail_height = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thumbnail_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipSummary)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipSummary::MergeFrom(const CGameRecording_ClipSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_timeline_id(from._internal_start_timeline_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_original_device(from._internal_original_device());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_offset_ms_ = from.start_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      date_recorded_ = from.date_recorded_;
    }
    if (cached_has_bits & 0x00000400u) {
      date_clipped_ = from.date_clipped_;
    }
    if (cached_has_bits & 0x00000800u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      temporary_ = from.temporary_;
    }
    if (cached_has_bits & 0x00002000u) {
      original_gaming_device_type_ = from.original_gaming_device_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      date_downloaded_ = from.date_downloaded_;
    }
    if (cached_has_bits & 0x00008000u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_thumbnail_height(from._internal_thumbnail_height());
  }
}

void CGameRecording_ClipSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipSummary::CopyFrom(const CGameRecording_ClipSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipSummary::IsInitialized() const {
  return true;
}

void CGameRecording_ClipSummary::InternalSwap(CGameRecording_ClipSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_timeline_id_.Swap(&other->start_timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_device_.Swap(&other->original_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ClipSummary, thumbnail_height_)
      + sizeof(CGameRecording_ClipSummary::thumbnail_height_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ClipSummary, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Request_Position::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Request_Position>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Request.Position)
}
CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(const CGameRecording_SaveClip_Request_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  offset_ms_ = from.offset_ms_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Request.Position)
}

void CGameRecording_SaveClip_Request_Position::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
offset_ms_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_SaveClip_Request_Position::~CGameRecording_SaveClip_Request_Position() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Request.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Request_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_SaveClip_Request_Position::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Request_Position* _this = reinterpret_cast< CGameRecording_SaveClip_Request_Position* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Request_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Request_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Request_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Request.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Request_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.Position.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset_ms(&has_bits);
          offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Request_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Request.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.Position.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 offset_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Request.Position)
  return target;
}

size_t CGameRecording_SaveClip_Request_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Request.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 offset_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Request_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Request.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Request_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Request_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Request.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Request.Position)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Request_Position::MergeFrom(const CGameRecording_SaveClip_Request_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Request.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ms_ = from.offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_SaveClip_Request_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Request.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Request_Position::CopyFrom(const CGameRecording_SaveClip_Request_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Request.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Request_Position::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Request_Position::InternalSwap(CGameRecording_SaveClip_Request_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_ms_, other->offset_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Request_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CGameRecording_SaveClip_Request_Position& start(const CGameRecording_SaveClip_Request* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CGameRecording_SaveClip_Request_Position& end(const CGameRecording_SaveClip_Request* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CGameRecording_SaveClip_Request_Position&
CGameRecording_SaveClip_Request::_Internal::start(const CGameRecording_SaveClip_Request* msg) {
  return *msg->start_;
}
const ::CGameRecording_SaveClip_Request_Position&
CGameRecording_SaveClip_Request::_Internal::end(const CGameRecording_SaveClip_Request* msg) {
  return *msg->end_;
}
CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Request)
}
CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(const CGameRecording_SaveClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  src_clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_clip_id()) {
    src_clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_clip_id(), 
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new ::CGameRecording_SaveClip_Request_Position(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::CGameRecording_SaveClip_Request_Position(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(temporary_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Request)
}

void CGameRecording_SaveClip_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
src_clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temporary_) -
    reinterpret_cast<char*>(&start_)) + sizeof(temporary_));
}

CGameRecording_SaveClip_Request::~CGameRecording_SaveClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void CGameRecording_SaveClip_Request::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Request* _this = reinterpret_cast< CGameRecording_SaveClip_Request* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      src_clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temporary_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(temporary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_SaveClip_Request.Position start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_SaveClip_Request.Position end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_clip_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_src_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.src_clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_temporary(&has_bits);
          temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CGameRecording_SaveClip_Request.Position start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // optional .CGameRecording_SaveClip_Request.Position end = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string src_clip_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_clip_id().data(), static_cast<int>(this->_internal_src_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.src_clip_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_src_clip_id(), target);
  }

  // optional bool temporary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_temporary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Request)
  return target;
}

size_t CGameRecording_SaveClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string src_clip_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_clip_id());
    }

    // optional .CGameRecording_SaveClip_Request.Position start = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .CGameRecording_SaveClip_Request.Position end = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional bool temporary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Request::MergeFrom(const CGameRecording_SaveClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_src_clip_id(from._internal_src_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start()->::CGameRecording_SaveClip_Request_Position::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_end()->::CGameRecording_SaveClip_Request_Position::MergeFrom(from._internal_end());
    }
    if (cached_has_bits & 0x00000010u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      temporary_ = from.temporary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_SaveClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Request::CopyFrom(const CGameRecording_SaveClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Request::InternalSwap(CGameRecording_SaveClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_clip_id_.Swap(&other->src_clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_SaveClip_Request, temporary_)
      + sizeof(CGameRecording_SaveClip_Request::temporary_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_SaveClip_Request, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_SaveClip_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_SaveClip_Response::_Internal::summary(const CGameRecording_SaveClip_Response* msg) {
  return *msg->summary_;
}
CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Response)
}
CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(const CGameRecording_SaveClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Response)
}

void CGameRecording_SaveClip_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_SaveClip_Response::~CGameRecording_SaveClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_SaveClip_Response::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Response* _this = reinterpret_cast< CGameRecording_SaveClip_Response* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Response)
  return target;
}

size_t CGameRecording_SaveClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Response::MergeFrom(const CGameRecording_SaveClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_SaveClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Response::CopyFrom(const CGameRecording_SaveClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Response::InternalSwap(CGameRecording_SaveClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_DeleteClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteClip_Request)
}
CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(const CGameRecording_DeleteClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteClip_Request)
}

void CGameRecording_DeleteClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_DeleteClip_Request::~CGameRecording_DeleteClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_DeleteClip_Request::ArenaDtor(void* object) {
  CGameRecording_DeleteClip_Request* _this = reinterpret_cast< CGameRecording_DeleteClip_Request* >(object);
  (void)_this;
}
void CGameRecording_DeleteClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_DeleteClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_DeleteClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteClip_Request)
  return target;
}

size_t CGameRecording_DeleteClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteClip_Request::MergeFrom(const CGameRecording_DeleteClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_DeleteClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteClip_Request::CopyFrom(const CGameRecording_DeleteClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteClip_Request::InternalSwap(CGameRecording_DeleteClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteClip_Response::_Internal {
 public:
};

CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteClip_Response)
}
CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(const CGameRecording_DeleteClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteClip_Response)
}

void CGameRecording_DeleteClip_Response::SharedCtor() {
}

CGameRecording_DeleteClip_Response::~CGameRecording_DeleteClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeleteClip_Response::ArenaDtor(void* object) {
  CGameRecording_DeleteClip_Response* _this = reinterpret_cast< CGameRecording_DeleteClip_Response* >(object);
  (void)_this;
}
void CGameRecording_DeleteClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteClip_Response)
  return target;
}

size_t CGameRecording_DeleteClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteClip_Response::MergeFrom(const CGameRecording_DeleteClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_DeleteClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteClip_Response::CopyFrom(const CGameRecording_DeleteClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteClip_Response::InternalSwap(CGameRecording_DeleteClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Settings::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportClip_Settings>()._has_bits_);
  static void set_has_bitrate_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Settings)
}
CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(const CGameRecording_ExportClip_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bitrate_kbps_, &from.bitrate_kbps_,
    static_cast<size_t>(reinterpret_cast<char*>(&frames_per_second_) -
    reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Settings)
}

void CGameRecording_ExportClip_Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bitrate_kbps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frames_per_second_) -
    reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
}

CGameRecording_ExportClip_Settings::~CGameRecording_ExportClip_Settings() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ExportClip_Settings::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Settings* _this = reinterpret_cast< CGameRecording_ExportClip_Settings* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&bitrate_kbps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frames_per_second_) -
        reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bitrate_kbps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bitrate_kbps(&has_bits);
          bitrate_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frames_per_second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frames_per_second(&has_bits);
          frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bitrate_kbps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bitrate_kbps(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional int32 frames_per_second = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frames_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Settings)
  return target;
}

size_t CGameRecording_ExportClip_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 bitrate_kbps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bitrate_kbps());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 frames_per_second = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frames_per_second());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Settings)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Settings::MergeFrom(const CGameRecording_ExportClip_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bitrate_kbps_ = from.bitrate_kbps_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      frames_per_second_ = from.frames_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ExportClip_Settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Settings::CopyFrom(const CGameRecording_ExportClip_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Settings::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Settings::InternalSwap(CGameRecording_ExportClip_Settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ExportClip_Settings, frames_per_second_)
      + sizeof(CGameRecording_ExportClip_Settings::frames_per_second_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ExportClip_Settings, bitrate_kbps_)>(
          reinterpret_cast<char*>(&bitrate_kbps_),
          reinterpret_cast<char*>(&other->bitrate_kbps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_export_mp4_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CGameRecording_ExportClip_Settings& settings(const CGameRecording_ExportClip_Request* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CGameRecording_ExportClip_Settings&
CGameRecording_ExportClip_Request::_Internal::settings(const CGameRecording_ExportClip_Request* msg) {
  return *msg->settings_;
}
CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Request)
}
CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(const CGameRecording_ExportClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  export_mp4_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_export_mp4_path()) {
    export_mp4_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_export_mp4_path(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::CGameRecording_ExportClip_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Request)
}

void CGameRecording_ExportClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
export_mp4_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settings_ = nullptr;
}

CGameRecording_ExportClip_Request::~CGameRecording_ExportClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  export_mp4_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CGameRecording_ExportClip_Request::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Request* _this = reinterpret_cast< CGameRecording_ExportClip_Request* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      export_mp4_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string export_mp4_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_export_mp4_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportClip_Request.export_mp4_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_ExportClip_Settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional string export_mp4_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_export_mp4_path().data(), static_cast<int>(this->_internal_export_mp4_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportClip_Request.export_mp4_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_export_mp4_path(), target);
  }

  // optional .CGameRecording_ExportClip_Settings settings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Request)
  return target;
}

size_t CGameRecording_ExportClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string export_mp4_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_export_mp4_path());
    }

    // optional .CGameRecording_ExportClip_Settings settings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Request::MergeFrom(const CGameRecording_ExportClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_export_mp4_path(from._internal_export_mp4_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_settings()->::CGameRecording_ExportClip_Settings::MergeFrom(from._internal_settings());
    }
  }
}

void CGameRecording_ExportClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Request::CopyFrom(const CGameRecording_ExportClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Request::InternalSwap(CGameRecording_ExportClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  export_mp4_path_.Swap(&other->export_mp4_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Response::_Internal {
 public:
};

CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Response)
}
CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(const CGameRecording_ExportClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Response)
}

void CGameRecording_ExportClip_Response::SharedCtor() {
}

CGameRecording_ExportClip_Response::~CGameRecording_ExportClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ExportClip_Response::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Response* _this = reinterpret_cast< CGameRecording_ExportClip_Response* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Response)
  return target;
}

size_t CGameRecording_ExportClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Response::MergeFrom(const CGameRecording_ExportClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_ExportClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Response::CopyFrom(const CGameRecording_ExportClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Response::InternalSwap(CGameRecording_ExportClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TakeScreenshot_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TakeScreenshot_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeline_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_TakeScreenshot_Request::CGameRecording_TakeScreenshot_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TakeScreenshot_Request)
}
CGameRecording_TakeScreenshot_Request::CGameRecording_TakeScreenshot_Request(const CGameRecording_TakeScreenshot_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeline_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(timeline_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TakeScreenshot_Request)
}

void CGameRecording_TakeScreenshot_Request::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeline_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(timeline_offset_ms_));
}

CGameRecording_TakeScreenshot_Request::~CGameRecording_TakeScreenshot_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_TakeScreenshot_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TakeScreenshot_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_TakeScreenshot_Request::ArenaDtor(void* object) {
  CGameRecording_TakeScreenshot_Request* _this = reinterpret_cast< CGameRecording_TakeScreenshot_Request* >(object);
  (void)_this;
}
void CGameRecording_TakeScreenshot_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TakeScreenshot_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TakeScreenshot_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TakeScreenshot_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeline_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(timeline_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TakeScreenshot_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_TakeScreenshot_Request.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timeline_offset_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timeline_offset_ms(&has_bits);
          timeline_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TakeScreenshot_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TakeScreenshot_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_TakeScreenshot_Request.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 timeline_offset_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timeline_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TakeScreenshot_Request)
  return target;
}

size_t CGameRecording_TakeScreenshot_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TakeScreenshot_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 timeline_offset_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timeline_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TakeScreenshot_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TakeScreenshot_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TakeScreenshot_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TakeScreenshot_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TakeScreenshot_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TakeScreenshot_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_TakeScreenshot_Request::MergeFrom(const CGameRecording_TakeScreenshot_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TakeScreenshot_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeline_offset_ms_ = from.timeline_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_TakeScreenshot_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TakeScreenshot_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TakeScreenshot_Request::CopyFrom(const CGameRecording_TakeScreenshot_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TakeScreenshot_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TakeScreenshot_Request::IsInitialized() const {
  return true;
}

void CGameRecording_TakeScreenshot_Request::InternalSwap(CGameRecording_TakeScreenshot_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_TakeScreenshot_Request, timeline_offset_ms_)
      + sizeof(CGameRecording_TakeScreenshot_Request::timeline_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_TakeScreenshot_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TakeScreenshot_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TakeScreenshot_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TakeScreenshot_Response>()._has_bits_);
  static void set_has_screenshot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_TakeScreenshot_Response::CGameRecording_TakeScreenshot_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TakeScreenshot_Response)
}
CGameRecording_TakeScreenshot_Response::CGameRecording_TakeScreenshot_Response(const CGameRecording_TakeScreenshot_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  screenshot_id_ = from.screenshot_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TakeScreenshot_Response)
}

void CGameRecording_TakeScreenshot_Response::SharedCtor() {
screenshot_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_TakeScreenshot_Response::~CGameRecording_TakeScreenshot_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_TakeScreenshot_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TakeScreenshot_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_TakeScreenshot_Response::ArenaDtor(void* object) {
  CGameRecording_TakeScreenshot_Response* _this = reinterpret_cast< CGameRecording_TakeScreenshot_Response* >(object);
  (void)_this;
}
void CGameRecording_TakeScreenshot_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TakeScreenshot_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TakeScreenshot_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TakeScreenshot_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screenshot_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TakeScreenshot_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 screenshot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_screenshot_id(&has_bits);
          screenshot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TakeScreenshot_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TakeScreenshot_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 screenshot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_screenshot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TakeScreenshot_Response)
  return target;
}

size_t CGameRecording_TakeScreenshot_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TakeScreenshot_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 screenshot_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TakeScreenshot_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TakeScreenshot_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TakeScreenshot_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TakeScreenshot_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TakeScreenshot_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TakeScreenshot_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_TakeScreenshot_Response::MergeFrom(const CGameRecording_TakeScreenshot_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TakeScreenshot_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_screenshot_id()) {
    _internal_set_screenshot_id(from._internal_screenshot_id());
  }
}

void CGameRecording_TakeScreenshot_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TakeScreenshot_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TakeScreenshot_Response::CopyFrom(const CGameRecording_TakeScreenshot_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TakeScreenshot_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TakeScreenshot_Response::IsInitialized() const {
  return true;
}

void CGameRecording_TakeScreenshot_Response::InternalSwap(CGameRecording_TakeScreenshot_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(screenshot_id_, other->screenshot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TakeScreenshot_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadClipToSteam_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadClipToSteam_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadClipToSteam_Request)
}
CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(const CGameRecording_UploadClipToSteam_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadClipToSteam_Request)
}

void CGameRecording_UploadClipToSteam_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
visibility_ = 0;
}

CGameRecording_UploadClipToSteam_Request::~CGameRecording_UploadClipToSteam_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadClipToSteam_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadClipToSteam_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UploadClipToSteam_Request::ArenaDtor(void* object) {
  CGameRecording_UploadClipToSteam_Request* _this = reinterpret_cast< CGameRecording_UploadClipToSteam_Request* >(object);
  (void)_this;
}
void CGameRecording_UploadClipToSteam_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadClipToSteam_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadClipToSteam_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadClipToSteam_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadClipToSteam_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadClipToSteam_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadClipToSteam_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional int32 visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadClipToSteam_Request)
  return target;
}

size_t CGameRecording_UploadClipToSteam_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadClipToSteam_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional int32 visibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_visibility());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadClipToSteam_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadClipToSteam_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadClipToSteam_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadClipToSteam_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadClipToSteam_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadClipToSteam_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadClipToSteam_Request::MergeFrom(const CGameRecording_UploadClipToSteam_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadClipToSteam_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UploadClipToSteam_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadClipToSteam_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadClipToSteam_Request::CopyFrom(const CGameRecording_UploadClipToSteam_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadClipToSteam_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadClipToSteam_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UploadClipToSteam_Request::InternalSwap(CGameRecording_UploadClipToSteam_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadClipToSteam_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadClipToSteam_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadClipToSteam_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_UploadClipToSteam_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_UploadClipToSteam_Response::_Internal::summary(const CGameRecording_UploadClipToSteam_Response* msg) {
  return *msg->summary_;
}
CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadClipToSteam_Response)
}
CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(const CGameRecording_UploadClipToSteam_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadClipToSteam_Response)
}

void CGameRecording_UploadClipToSteam_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_UploadClipToSteam_Response::~CGameRecording_UploadClipToSteam_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadClipToSteam_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadClipToSteam_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_UploadClipToSteam_Response::ArenaDtor(void* object) {
  CGameRecording_UploadClipToSteam_Response* _this = reinterpret_cast< CGameRecording_UploadClipToSteam_Response* >(object);
  (void)_this;
}
void CGameRecording_UploadClipToSteam_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadClipToSteam_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadClipToSteam_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadClipToSteam_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadClipToSteam_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadClipToSteam_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadClipToSteam_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadClipToSteam_Response)
  return target;
}

size_t CGameRecording_UploadClipToSteam_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadClipToSteam_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadClipToSteam_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadClipToSteam_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadClipToSteam_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadClipToSteam_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadClipToSteam_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadClipToSteam_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadClipToSteam_Response::MergeFrom(const CGameRecording_UploadClipToSteam_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadClipToSteam_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_UploadClipToSteam_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadClipToSteam_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadClipToSteam_Response::CopyFrom(const CGameRecording_UploadClipToSteam_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadClipToSteam_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadClipToSteam_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UploadClipToSteam_Response::InternalSwap(CGameRecording_UploadClipToSteam_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadClipToSteam_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ZipClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ZipClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ZipClip_Request)
}
CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(const CGameRecording_ZipClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ZipClip_Request)
}

void CGameRecording_ZipClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_ZipClip_Request::~CGameRecording_ZipClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ZipClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ZipClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ZipClip_Request::ArenaDtor(void* object) {
  CGameRecording_ZipClip_Request* _this = reinterpret_cast< CGameRecording_ZipClip_Request* >(object);
  (void)_this;
}
void CGameRecording_ZipClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ZipClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ZipClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ZipClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ZipClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ZipClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ZipClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ZipClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ZipClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ZipClip_Request)
  return target;
}

size_t CGameRecording_ZipClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ZipClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ZipClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ZipClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ZipClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ZipClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ZipClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ZipClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ZipClip_Request::MergeFrom(const CGameRecording_ZipClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ZipClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_ZipClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ZipClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ZipClip_Request::CopyFrom(const CGameRecording_ZipClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ZipClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ZipClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ZipClip_Request::InternalSwap(CGameRecording_ZipClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ZipClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ZipClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ZipClip_Response>()._has_bits_);
  static void set_has_zip_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ZipClip_Response)
}
CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(const CGameRecording_ZipClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zip_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_zip_path()) {
    zip_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zip_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ZipClip_Response)
}

void CGameRecording_ZipClip_Response::SharedCtor() {
zip_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_ZipClip_Response::~CGameRecording_ZipClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ZipClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ZipClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  zip_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ZipClip_Response::ArenaDtor(void* object) {
  CGameRecording_ZipClip_Response* _this = reinterpret_cast< CGameRecording_ZipClip_Response* >(object);
  (void)_this;
}
void CGameRecording_ZipClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ZipClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ZipClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ZipClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    zip_path_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ZipClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string zip_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_zip_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ZipClip_Response.zip_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ZipClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ZipClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string zip_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_zip_path().data(), static_cast<int>(this->_internal_zip_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ZipClip_Response.zip_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_zip_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ZipClip_Response)
  return target;
}

size_t CGameRecording_ZipClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ZipClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zip_path = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zip_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ZipClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ZipClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ZipClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ZipClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ZipClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ZipClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ZipClip_Response::MergeFrom(const CGameRecording_ZipClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ZipClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_zip_path()) {
    _internal_set_zip_path(from._internal_zip_path());
  }
}

void CGameRecording_ZipClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ZipClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ZipClip_Response::CopyFrom(const CGameRecording_ZipClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ZipClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ZipClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ZipClip_Response::InternalSwap(CGameRecording_ZipClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  zip_path_.Swap(&other->zip_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ZipClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetClips_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetClips_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_after(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetClips_Request)
}
CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(const CGameRecording_GetClips_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetClips_Request)
}

void CGameRecording_GetClips_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
}

CGameRecording_GetClips_Request::~CGameRecording_GetClips_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetClips_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetClips_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetClips_Request::ArenaDtor(void* object) {
  CGameRecording_GetClips_Request* _this = reinterpret_cast< CGameRecording_GetClips_Request* >(object);
  (void)_this;
}
void CGameRecording_GetClips_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetClips_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetClips_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_temporary_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetClips_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 created_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_created_after(&has_bits);
          created_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_temporary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_temporary(&has_bits);
          include_temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetClips_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 created_after = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_after(), target);
  }

  // optional bool include_temporary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_temporary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetClips_Request)
  return target;
}

size_t CGameRecording_GetClips_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetClips_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 created_after = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_created_after());
    }

    // optional bool include_temporary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetClips_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetClips_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetClips_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetClips_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetClips_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetClips_Request::MergeFrom(const CGameRecording_GetClips_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      created_after_ = from.created_after_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_temporary_ = from.include_temporary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetClips_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetClips_Request::CopyFrom(const CGameRecording_GetClips_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetClips_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetClips_Request::InternalSwap(CGameRecording_GetClips_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetClips_Request, include_temporary_)
      + sizeof(CGameRecording_GetClips_Request::include_temporary_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetClips_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetClips_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetClips_Response::_Internal {
 public:
};

CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clip_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetClips_Response)
}
CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(const CGameRecording_GetClips_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clip_(from.clip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetClips_Response)
}

void CGameRecording_GetClips_Response::SharedCtor() {
}

CGameRecording_GetClips_Response::~CGameRecording_GetClips_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetClips_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetClips_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetClips_Response::ArenaDtor(void* object) {
  CGameRecording_GetClips_Response* _this = reinterpret_cast< CGameRecording_GetClips_Response* >(object);
  (void)_this;
}
void CGameRecording_GetClips_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetClips_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetClips_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clip_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetClips_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_ClipSummary clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetClips_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_ClipSummary clip = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_clip(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetClips_Response)
  return target;
}

size_t CGameRecording_GetClips_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetClips_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_ClipSummary clip = 1;
  total_size += 1UL * this->_internal_clip_size();
  for (const auto& msg : this->clip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetClips_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetClips_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetClips_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetClips_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetClips_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetClips_Response::MergeFrom(const CGameRecording_GetClips_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clip_.MergeFrom(from.clip_);
}

void CGameRecording_GetClips_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetClips_Response::CopyFrom(const CGameRecording_GetClips_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetClips_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetClips_Response::InternalSwap(CGameRecording_GetClips_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clip_.InternalSwap(&other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetClips_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAndTrimPostGameHighlights_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetAndTrimPostGameHighlights_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_after(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
}
CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(const CGameRecording_GetAndTrimPostGameHighlights_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_after_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_after_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
}

CGameRecording_GetAndTrimPostGameHighlights_Request::~CGameRecording_GetAndTrimPostGameHighlights_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::ArenaDtor(void* object) {
  CGameRecording_GetAndTrimPostGameHighlights_Request* _this = reinterpret_cast< CGameRecording_GetAndTrimPostGameHighlights_Request* >(object);
  (void)_this;
}
void CGameRecording_GetAndTrimPostGameHighlights_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAndTrimPostGameHighlights_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&created_after_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAndTrimPostGameHighlights_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 created_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_created_after(&has_bits);
          created_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAndTrimPostGameHighlights_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 created_after = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAndTrimPostGameHighlights_Request)
  return target;
}

size_t CGameRecording_GetAndTrimPostGameHighlights_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 created_after = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_created_after());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAndTrimPostGameHighlights_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAndTrimPostGameHighlights_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAndTrimPostGameHighlights_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAndTrimPostGameHighlights_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      created_after_ = from.created_after_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAndTrimPostGameHighlights_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetAndTrimPostGameHighlights_Request, created_after_)
      + sizeof(CGameRecording_GetAndTrimPostGameHighlights_Request::created_after_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetAndTrimPostGameHighlights_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAndTrimPostGameHighlights_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAndTrimPostGameHighlights_Response::_Internal {
 public:
};

void CGameRecording_GetAndTrimPostGameHighlights_Response::clear_events() {
  events_.Clear();
}
CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
}
CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(const CGameRecording_GetAndTrimPostGameHighlights_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::SharedCtor() {
}

CGameRecording_GetAndTrimPostGameHighlights_Response::~CGameRecording_GetAndTrimPostGameHighlights_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::ArenaDtor(void* object) {
  CGameRecording_GetAndTrimPostGameHighlights_Response* _this = reinterpret_cast< CGameRecording_GetAndTrimPostGameHighlights_Response* >(object);
  (void)_this;
}
void CGameRecording_GetAndTrimPostGameHighlights_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAndTrimPostGameHighlights_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAndTrimPostGameHighlights_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAndTrimPostGameHighlights_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAndTrimPostGameHighlights_Response)
  return target;
}

size_t CGameRecording_GetAndTrimPostGameHighlights_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAndTrimPostGameHighlights_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAndTrimPostGameHighlights_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAndTrimPostGameHighlights_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAndTrimPostGameHighlights_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAndTrimPostGameHighlights_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAndTrimPostGameHighlights_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserAddTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserAddTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CTimelineEntry& entry(const CGameRecording_UserAddTimelineEntry_Request* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineEntry&
CGameRecording_UserAddTimelineEntry_Request::_Internal::entry(const CGameRecording_UserAddTimelineEntry_Request* msg) {
  return *msg->entry_;
}
CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserAddTimelineEntry_Request)
}
CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(const CGameRecording_UserAddTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserAddTimelineEntry_Request)
}

void CGameRecording_UserAddTimelineEntry_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(game_id_));
}

CGameRecording_UserAddTimelineEntry_Request::~CGameRecording_UserAddTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserAddTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserAddTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_UserAddTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserAddTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserAddTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserAddTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserAddTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserAddTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserAddTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entry_ != nullptr);
      entry_->Clear();
    }
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserAddTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTimelineEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserAddTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserAddTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserAddTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CTimelineEntry entry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entry(this), target, stream);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserAddTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserAddTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserAddTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserAddTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional .CTimelineEntry entry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserAddTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserAddTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserAddTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserAddTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserAddTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserAddTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserAddTimelineEntry_Request::MergeFrom(const CGameRecording_UserAddTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserAddTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserAddTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserAddTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserAddTimelineEntry_Request::CopyFrom(const CGameRecording_UserAddTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserAddTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserAddTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserAddTimelineEntry_Request::InternalSwap(CGameRecording_UserAddTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserAddTimelineEntry_Request, game_id_)
      + sizeof(CGameRecording_UserAddTimelineEntry_Request::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserAddTimelineEntry_Request, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserAddTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserAddTimelineEntry_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserAddTimelineEntry_Response>()._has_bits_);
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserAddTimelineEntry_Response)
}
CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(const CGameRecording_UserAddTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_id_ = from.entry_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserAddTimelineEntry_Response)
}

void CGameRecording_UserAddTimelineEntry_Response::SharedCtor() {
entry_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_UserAddTimelineEntry_Response::~CGameRecording_UserAddTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserAddTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserAddTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserAddTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserAddTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserAddTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserAddTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserAddTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserAddTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserAddTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserAddTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserAddTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserAddTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 entry_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_entry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserAddTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserAddTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserAddTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 entry_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_entry_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserAddTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserAddTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserAddTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserAddTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserAddTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserAddTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserAddTimelineEntry_Response::MergeFrom(const CGameRecording_UserAddTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserAddTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry_id()) {
    _internal_set_entry_id(from._internal_entry_id());
  }
}

void CGameRecording_UserAddTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserAddTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserAddTimelineEntry_Response::CopyFrom(const CGameRecording_UserAddTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserAddTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserAddTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserAddTimelineEntry_Response::InternalSwap(CGameRecording_UserAddTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entry_id_, other->entry_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserAddTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserUpdateTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserUpdateTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CTimelineEntry& entry(const CGameRecording_UserUpdateTimelineEntry_Request* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineEntry&
CGameRecording_UserUpdateTimelineEntry_Request::_Internal::entry(const CGameRecording_UserUpdateTimelineEntry_Request* msg) {
  return *msg->entry_;
}
CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserUpdateTimelineEntry_Request)
}
CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(const CGameRecording_UserUpdateTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserUpdateTimelineEntry_Request)
}

void CGameRecording_UserUpdateTimelineEntry_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(game_id_));
}

CGameRecording_UserUpdateTimelineEntry_Request::~CGameRecording_UserUpdateTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserUpdateTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserUpdateTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_UserUpdateTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserUpdateTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserUpdateTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserUpdateTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserUpdateTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserUpdateTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserUpdateTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entry_ != nullptr);
      entry_->Clear();
    }
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserUpdateTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTimelineEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserUpdateTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserUpdateTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserUpdateTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CTimelineEntry entry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entry(this), target, stream);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserUpdateTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserUpdateTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserUpdateTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserUpdateTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional .CTimelineEntry entry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserUpdateTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserUpdateTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserUpdateTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserUpdateTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserUpdateTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserUpdateTimelineEntry_Request::MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserUpdateTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserUpdateTimelineEntry_Request::CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserUpdateTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserUpdateTimelineEntry_Request::InternalSwap(CGameRecording_UserUpdateTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserUpdateTimelineEntry_Request, game_id_)
      + sizeof(CGameRecording_UserUpdateTimelineEntry_Request::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserUpdateTimelineEntry_Request, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserUpdateTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserUpdateTimelineEntry_Response::_Internal {
 public:
};

CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserUpdateTimelineEntry_Response)
}
CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(const CGameRecording_UserUpdateTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserUpdateTimelineEntry_Response)
}

void CGameRecording_UserUpdateTimelineEntry_Response::SharedCtor() {
}

CGameRecording_UserUpdateTimelineEntry_Response::~CGameRecording_UserUpdateTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserUpdateTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserUpdateTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserUpdateTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserUpdateTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserUpdateTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserUpdateTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserUpdateTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserUpdateTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserUpdateTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserUpdateTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserUpdateTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserUpdateTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserUpdateTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserUpdateTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserUpdateTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserUpdateTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserUpdateTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserUpdateTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserUpdateTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserUpdateTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserUpdateTimelineEntry_Response::MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_UserUpdateTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserUpdateTimelineEntry_Response::CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserUpdateTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserUpdateTimelineEntry_Response::InternalSwap(CGameRecording_UserUpdateTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserUpdateTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserRemoveTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserRemoveTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserRemoveTimelineEntry_Request)
}
CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(const CGameRecording_UserRemoveTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserRemoveTimelineEntry_Request)
}

void CGameRecording_UserRemoveTimelineEntry_Request::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
}

CGameRecording_UserRemoveTimelineEntry_Request::~CGameRecording_UserRemoveTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserRemoveTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserRemoveTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UserRemoveTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserRemoveTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserRemoveTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserRemoveTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserRemoveTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserRemoveTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserRemoveTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_id_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserRemoveTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserRemoveTimelineEntry_Request.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserRemoveTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserRemoveTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserRemoveTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserRemoveTimelineEntry_Request.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_entry_id(), target);
  }

  // optional string clip_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserRemoveTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserRemoveTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserRemoveTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserRemoveTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string clip_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 entry_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserRemoveTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserRemoveTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserRemoveTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserRemoveTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserRemoveTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserRemoveTimelineEntry_Request::MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      entry_id_ = from.entry_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserRemoveTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserRemoveTimelineEntry_Request::CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserRemoveTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserRemoveTimelineEntry_Request::InternalSwap(CGameRecording_UserRemoveTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserRemoveTimelineEntry_Request, entry_id_)
      + sizeof(CGameRecording_UserRemoveTimelineEntry_Request::entry_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserRemoveTimelineEntry_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserRemoveTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserRemoveTimelineEntry_Response::_Internal {
 public:
};

CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserRemoveTimelineEntry_Response)
}
CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(const CGameRecording_UserRemoveTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserRemoveTimelineEntry_Response)
}

void CGameRecording_UserRemoveTimelineEntry_Response::SharedCtor() {
}

CGameRecording_UserRemoveTimelineEntry_Response::~CGameRecording_UserRemoveTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserRemoveTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserRemoveTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserRemoveTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserRemoveTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserRemoveTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserRemoveTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserRemoveTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserRemoveTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserRemoveTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserRemoveTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserRemoveTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserRemoveTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserRemoveTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserRemoveTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserRemoveTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserRemoveTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserRemoveTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserRemoveTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserRemoveTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserRemoveTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserRemoveTimelineEntry_Response::MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_UserRemoveTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserRemoveTimelineEntry_Response::CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserRemoveTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserRemoveTimelineEntry_Response::InternalSwap(CGameRecording_UserRemoveTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserRemoveTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ManuallyDeleteRecordingsForApps_Request::_Internal {
 public:
};

CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
}
CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_ids_(from.game_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SharedCtor() {
}

CGameRecording_ManuallyDeleteRecordingsForApps_Request::~CGameRecording_ManuallyDeleteRecordingsForApps_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::ArenaDtor(void* object) {
  CGameRecording_ManuallyDeleteRecordingsForApps_Request* _this = reinterpret_cast< CGameRecording_ManuallyDeleteRecordingsForApps_Request* >(object);
  (void)_this;
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ManuallyDeleteRecordingsForApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 game_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_game_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_game_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ManuallyDeleteRecordingsForApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 game_ids = 1;
  for (int i = 0, n = this->_internal_game_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  return target;
}

size_t CGameRecording_ManuallyDeleteRecordingsForApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 game_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->game_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ManuallyDeleteRecordingsForApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ManuallyDeleteRecordingsForApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_ids_.MergeFrom(from.game_ids_);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ManuallyDeleteRecordingsForApps_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_ids_.InternalSwap(&other->game_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ManuallyDeleteRecordingsForApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ManuallyDeleteRecordingsForApps_Response::_Internal {
 public:
};

CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
}
CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SharedCtor() {
}

CGameRecording_ManuallyDeleteRecordingsForApps_Response::~CGameRecording_ManuallyDeleteRecordingsForApps_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::ArenaDtor(void* object) {
  CGameRecording_ManuallyDeleteRecordingsForApps_Response* _this = reinterpret_cast< CGameRecording_ManuallyDeleteRecordingsForApps_Response* >(object);
  (void)_this;
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ManuallyDeleteRecordingsForApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ManuallyDeleteRecordingsForApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  return target;
}

size_t CGameRecording_ManuallyDeleteRecordingsForApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ManuallyDeleteRecordingsForApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ManuallyDeleteRecordingsForApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ManuallyDeleteRecordingsForApps_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ManuallyDeleteRecordingsForApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTotalDiskSpaceUsage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTotalDiskSpaceUsage_Request>()._has_bits_);
  static void set_has_folder_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
}
CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(const CGameRecording_GetTotalDiskSpaceUsage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_folder_path()) {
    folder_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_folder_path(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::SharedCtor() {
folder_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

CGameRecording_GetTotalDiskSpaceUsage_Request::~CGameRecording_GetTotalDiskSpaceUsage_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  folder_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::ArenaDtor(void* object) {
  CGameRecording_GetTotalDiskSpaceUsage_Request* _this = reinterpret_cast< CGameRecording_GetTotalDiskSpaceUsage_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTotalDiskSpaceUsage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTotalDiskSpaceUsage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    folder_path_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTotalDiskSpaceUsage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string folder_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_folder_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDiskSpaceType_IsValid(val))) {
            _internal_set_type(static_cast<::EDiskSpaceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTotalDiskSpaceUsage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string folder_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_folder_path().data(), static_cast<int>(this->_internal_folder_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_folder_path(), target);
  }

  // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTotalDiskSpaceUsage_Request)
  return target;
}

size_t CGameRecording_GetTotalDiskSpaceUsage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string folder_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_folder_path());
    }

    // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTotalDiskSpaceUsage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTotalDiskSpaceUsage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTotalDiskSpaceUsage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTotalDiskSpaceUsage_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_folder_path(from._internal_folder_path());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTotalDiskSpaceUsage_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  folder_path_.Swap(&other->folder_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTotalDiskSpaceUsage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTotalDiskSpaceUsage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTotalDiskSpaceUsage_Response>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
}
CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(const CGameRecording_GetTotalDiskSpaceUsage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::SharedCtor() {
size_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetTotalDiskSpaceUsage_Response::~CGameRecording_GetTotalDiskSpaceUsage_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::ArenaDtor(void* object) {
  CGameRecording_GetTotalDiskSpaceUsage_Response* _this = reinterpret_cast< CGameRecording_GetTotalDiskSpaceUsage_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTotalDiskSpaceUsage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTotalDiskSpaceUsage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTotalDiskSpaceUsage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTotalDiskSpaceUsage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTotalDiskSpaceUsage_Response)
  return target;
}

size_t CGameRecording_GetTotalDiskSpaceUsage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTotalDiskSpaceUsage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTotalDiskSpaceUsage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTotalDiskSpaceUsage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTotalDiskSpaceUsage_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_set_size(from._internal_size());
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTotalDiskSpaceUsage_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTotalDiskSpaceUsage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetThumbnails_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_major_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  start_offset_us_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Request)
}
CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(const CGameRecording_GetThumbnails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      start_offset_us_(from.start_offset_us_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recording_id()) {
    recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recording_id(), 
      GetArena());
  }
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&time_precision_, &from.time_precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&time_precision_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Request)
}

void CGameRecording_GetThumbnails_Request::SharedCtor() {
recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_precision_ = 0;
major_axis_ = 512u;
format_ = 1;
}

CGameRecording_GetThumbnails_Request::~CGameRecording_GetThumbnails_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recording_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetThumbnails_Request::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Request* _this = reinterpret_cast< CGameRecording_GetThumbnails_Request* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_offset_us_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      recording_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    time_precision_ = 0;
    major_axis_ = 512u;
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recording_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.recording_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 start_offset_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_start_offset_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_start_offset_us(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 major_axis = 5 [default = 512];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_major_axis(&has_bits);
          major_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EThumbnailTimePrecision_IsValid(val))) {
            _internal_set_time_precision(static_cast<::EThumbnailTimePrecision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EThumbnailFormat format = 8 [default = eJPEG];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EThumbnailFormat_IsValid(val))) {
            _internal_set_format(static_cast<::EThumbnailFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string recording_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recording_id().data(), static_cast<int>(this->_internal_recording_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.recording_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recording_id(), target);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  // repeated int64 start_offset_us = 4;
  for (int i = 0, n = this->_internal_start_offset_us_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_offset_us(i), target);
  }

  // optional uint32 major_axis = 5 [default = 512];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_major_axis(), target);
  }

  // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_time_precision(), target);
  }

  // optional string timeline_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.timeline_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timeline_id(), target);
  }

  // optional .EThumbnailFormat format = 8 [default = eJPEG];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Request)
  return target;
}

size_t CGameRecording_GetThumbnails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 start_offset_us = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->start_offset_us_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_start_offset_us_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string recording_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recording_id());
    }

    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string timeline_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_precision());
    }

    // optional uint32 major_axis = 5 [default = 512];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_major_axis());
    }

    // optional .EThumbnailFormat format = 8 [default = eJPEG];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Request::MergeFrom(const CGameRecording_GetThumbnails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_offset_us_.MergeFrom(from.start_offset_us_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_recording_id(from._internal_recording_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000008u) {
      time_precision_ = from.time_precision_;
    }
    if (cached_has_bits & 0x00000010u) {
      major_axis_ = from.major_axis_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetThumbnails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Request::CopyFrom(const CGameRecording_GetThumbnails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Request::InternalSwap(CGameRecording_GetThumbnails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_offset_us_.InternalSwap(&other->start_offset_us_);
  recording_id_.Swap(&other->recording_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_precision_, other->time_precision_);
  swap(major_axis_, other->major_axis_);
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Response_Thumbnail::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetThumbnails_Response_Thumbnail>()._has_bits_);
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Response.Thumbnail)
}
CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(const CGameRecording_GetThumbnails_Response_Thumbnail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_data()) {
    image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_data(), 
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Response.Thumbnail)
}

void CGameRecording_GetThumbnails_Response_Thumbnail::SharedCtor() {
image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

CGameRecording_GetThumbnails_Response_Thumbnail::~CGameRecording_GetThumbnails_Response_Thumbnail() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Response.Thumbnail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Response_Thumbnail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetThumbnails_Response_Thumbnail::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Response_Thumbnail* _this = reinterpret_cast< CGameRecording_GetThumbnails_Response_Thumbnail* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Response_Thumbnail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Response_Thumbnail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Response_Thumbnail::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Response_Thumbnail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes image_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Response_Thumbnail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes image_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image_data(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Response.Thumbnail)
  return target;
}

size_t CGameRecording_GetThumbnails_Response_Thumbnail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes image_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image_data());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Response_Thumbnail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Response_Thumbnail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Response_Thumbnail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Response.Thumbnail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Response.Thumbnail)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Response_Thumbnail::MergeFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_data(from._internal_image_data());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetThumbnails_Response_Thumbnail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Response_Thumbnail::CopyFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Response_Thumbnail::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Response_Thumbnail::InternalSwap(CGameRecording_GetThumbnails_Response_Thumbnail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetThumbnails_Response_Thumbnail, height_)
      + sizeof(CGameRecording_GetThumbnails_Response_Thumbnail::height_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetThumbnails_Response_Thumbnail, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Response_Thumbnail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Response::_Internal {
 public:
};

CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  thumbnails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Response)
}
CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(const CGameRecording_GetThumbnails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      thumbnails_(from.thumbnails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Response)
}

void CGameRecording_GetThumbnails_Response::SharedCtor() {
}

CGameRecording_GetThumbnails_Response::~CGameRecording_GetThumbnails_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetThumbnails_Response::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Response* _this = reinterpret_cast< CGameRecording_GetThumbnails_Response* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumbnails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thumbnails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_thumbnails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Response)
  return target;
}

size_t CGameRecording_GetThumbnails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
  total_size += 1UL * this->_internal_thumbnails_size();
  for (const auto& msg : this->thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Response::MergeFrom(const CGameRecording_GetThumbnails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumbnails_.MergeFrom(from.thumbnails_);
}

void CGameRecording_GetThumbnails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Response::CopyFrom(const CGameRecording_GetThumbnails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Response::InternalSwap(CGameRecording_GetThumbnails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  thumbnails_.InternalSwap(&other->thumbnails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StartRecording_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StartRecording_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StartRecording_Request)
}
CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(const CGameRecording_StartRecording_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StartRecording_Request)
}

void CGameRecording_StartRecording_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_StartRecording_Request::~CGameRecording_StartRecording_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_StartRecording_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StartRecording_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StartRecording_Request::ArenaDtor(void* object) {
  CGameRecording_StartRecording_Request* _this = reinterpret_cast< CGameRecording_StartRecording_Request* >(object);
  (void)_this;
}
void CGameRecording_StartRecording_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StartRecording_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StartRecording_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StartRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StartRecording_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StartRecording_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StartRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StartRecording_Request)
  return target;
}

size_t CGameRecording_StartRecording_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StartRecording_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StartRecording_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StartRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StartRecording_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StartRecording_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StartRecording_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StartRecording_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_StartRecording_Request::MergeFrom(const CGameRecording_StartRecording_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StartRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_StartRecording_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StartRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StartRecording_Request::CopyFrom(const CGameRecording_StartRecording_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StartRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StartRecording_Request::IsInitialized() const {
  return true;
}

void CGameRecording_StartRecording_Request::InternalSwap(CGameRecording_StartRecording_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StartRecording_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StartRecording_Response::_Internal {
 public:
};

CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StartRecording_Response)
}
CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(const CGameRecording_StartRecording_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StartRecording_Response)
}

void CGameRecording_StartRecording_Response::SharedCtor() {
}

CGameRecording_StartRecording_Response::~CGameRecording_StartRecording_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_StartRecording_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StartRecording_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StartRecording_Response::ArenaDtor(void* object) {
  CGameRecording_StartRecording_Response* _this = reinterpret_cast< CGameRecording_StartRecording_Response* >(object);
  (void)_this;
}
void CGameRecording_StartRecording_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StartRecording_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StartRecording_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StartRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StartRecording_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StartRecording_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StartRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StartRecording_Response)
  return target;
}

size_t CGameRecording_StartRecording_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StartRecording_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StartRecording_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StartRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StartRecording_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StartRecording_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StartRecording_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StartRecording_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_StartRecording_Response::MergeFrom(const CGameRecording_StartRecording_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StartRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_StartRecording_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StartRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StartRecording_Response::CopyFrom(const CGameRecording_StartRecording_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StartRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StartRecording_Response::IsInitialized() const {
  return true;
}

void CGameRecording_StartRecording_Response::InternalSwap(CGameRecording_StartRecording_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StartRecording_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StopRecording_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StopRecording_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StopRecording_Request)
}
CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(const CGameRecording_StopRecording_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StopRecording_Request)
}

void CGameRecording_StopRecording_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_StopRecording_Request::~CGameRecording_StopRecording_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_StopRecording_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StopRecording_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StopRecording_Request::ArenaDtor(void* object) {
  CGameRecording_StopRecording_Request* _this = reinterpret_cast< CGameRecording_StopRecording_Request* >(object);
  (void)_this;
}
void CGameRecording_StopRecording_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StopRecording_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StopRecording_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StopRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StopRecording_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StopRecording_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StopRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StopRecording_Request)
  return target;
}

size_t CGameRecording_StopRecording_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StopRecording_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StopRecording_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StopRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StopRecording_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StopRecording_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StopRecording_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StopRecording_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_StopRecording_Request::MergeFrom(const CGameRecording_StopRecording_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StopRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_StopRecording_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StopRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StopRecording_Request::CopyFrom(const CGameRecording_StopRecording_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StopRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StopRecording_Request::IsInitialized() const {
  return true;
}

void CGameRecording_StopRecording_Request::InternalSwap(CGameRecording_StopRecording_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StopRecording_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StopRecording_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StopRecording_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_StopRecording_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_StopRecording_Response::_Internal::summary(const CGameRecording_StopRecording_Response* msg) {
  return *msg->summary_;
}
CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StopRecording_Response)
}
CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(const CGameRecording_StopRecording_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StopRecording_Response)
}

void CGameRecording_StopRecording_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_StopRecording_Response::~CGameRecording_StopRecording_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_StopRecording_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StopRecording_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_StopRecording_Response::ArenaDtor(void* object) {
  CGameRecording_StopRecording_Response* _this = reinterpret_cast< CGameRecording_StopRecording_Response* >(object);
  (void)_this;
}
void CGameRecording_StopRecording_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StopRecording_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StopRecording_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StopRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StopRecording_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StopRecording_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StopRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StopRecording_Response)
  return target;
}

size_t CGameRecording_StopRecording_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StopRecording_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StopRecording_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StopRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StopRecording_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StopRecording_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StopRecording_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StopRecording_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_StopRecording_Response::MergeFrom(const CGameRecording_StopRecording_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StopRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_StopRecording_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StopRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StopRecording_Response::CopyFrom(const CGameRecording_StopRecording_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StopRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StopRecording_Response::IsInitialized() const {
  return true;
}

void CGameRecording_StopRecording_Response::InternalSwap(CGameRecording_StopRecording_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StopRecording_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetRecordingSize_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetRecordingSize_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetRecordingSize_Request)
}
CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(const CGameRecording_GetRecordingSize_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetRecordingSize_Request)
}

void CGameRecording_GetRecordingSize_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetRecordingSize_Request::~CGameRecording_GetRecordingSize_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetRecordingSize_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetRecordingSize_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetRecordingSize_Request::ArenaDtor(void* object) {
  CGameRecording_GetRecordingSize_Request* _this = reinterpret_cast< CGameRecording_GetRecordingSize_Request* >(object);
  (void)_this;
}
void CGameRecording_GetRecordingSize_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetRecordingSize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetRecordingSize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetRecordingSize_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetRecordingSize_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetRecordingSize_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetRecordingSize_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetRecordingSize_Request)
  return target;
}

size_t CGameRecording_GetRecordingSize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetRecordingSize_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetRecordingSize_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetRecordingSize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetRecordingSize_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetRecordingSize_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetRecordingSize_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetRecordingSize_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetRecordingSize_Request::MergeFrom(const CGameRecording_GetRecordingSize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetRecordingSize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_GetRecordingSize_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetRecordingSize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetRecordingSize_Request::CopyFrom(const CGameRecording_GetRecordingSize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetRecordingSize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetRecordingSize_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetRecordingSize_Request::InternalSwap(CGameRecording_GetRecordingSize_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetRecordingSize_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetRecordingSize_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetRecordingSize_Response>()._has_bits_);
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetRecordingSize_Response)
}
CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(const CGameRecording_GetRecordingSize_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetRecordingSize_Response)
}

void CGameRecording_GetRecordingSize_Response::SharedCtor() {
file_size_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetRecordingSize_Response::~CGameRecording_GetRecordingSize_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetRecordingSize_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetRecordingSize_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetRecordingSize_Response::ArenaDtor(void* object) {
  CGameRecording_GetRecordingSize_Response* _this = reinterpret_cast< CGameRecording_GetRecordingSize_Response* >(object);
  (void)_this;
}
void CGameRecording_GetRecordingSize_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetRecordingSize_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetRecordingSize_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetRecordingSize_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetRecordingSize_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetRecordingSize_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetRecordingSize_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetRecordingSize_Response)
  return target;
}

size_t CGameRecording_GetRecordingSize_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetRecordingSize_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 file_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetRecordingSize_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetRecordingSize_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetRecordingSize_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetRecordingSize_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetRecordingSize_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetRecordingSize_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetRecordingSize_Response::MergeFrom(const CGameRecording_GetRecordingSize_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetRecordingSize_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_size()) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void CGameRecording_GetRecordingSize_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetRecordingSize_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetRecordingSize_Response::CopyFrom(const CGameRecording_GetRecordingSize_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetRecordingSize_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetRecordingSize_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetRecordingSize_Response::InternalSwap(CGameRecording_GetRecordingSize_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_size_, other->file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetRecordingSize_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CleanupBackgroundRecordings_Request::_Internal {
 public:
};

CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CleanupBackgroundRecordings_Request)
}
CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(const CGameRecording_CleanupBackgroundRecordings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CleanupBackgroundRecordings_Request)
}

void CGameRecording_CleanupBackgroundRecordings_Request::SharedCtor() {
}

CGameRecording_CleanupBackgroundRecordings_Request::~CGameRecording_CleanupBackgroundRecordings_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_CleanupBackgroundRecordings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CleanupBackgroundRecordings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_CleanupBackgroundRecordings_Request::ArenaDtor(void* object) {
  CGameRecording_CleanupBackgroundRecordings_Request* _this = reinterpret_cast< CGameRecording_CleanupBackgroundRecordings_Request* >(object);
  (void)_this;
}
void CGameRecording_CleanupBackgroundRecordings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CleanupBackgroundRecordings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CleanupBackgroundRecordings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CleanupBackgroundRecordings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CleanupBackgroundRecordings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CleanupBackgroundRecordings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CleanupBackgroundRecordings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CleanupBackgroundRecordings_Request)
  return target;
}

size_t CGameRecording_CleanupBackgroundRecordings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CleanupBackgroundRecordings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CleanupBackgroundRecordings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CleanupBackgroundRecordings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CleanupBackgroundRecordings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CleanupBackgroundRecordings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CleanupBackgroundRecordings_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_CleanupBackgroundRecordings_Request::MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_CleanupBackgroundRecordings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CleanupBackgroundRecordings_Request::CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CleanupBackgroundRecordings_Request::IsInitialized() const {
  return true;
}

void CGameRecording_CleanupBackgroundRecordings_Request::InternalSwap(CGameRecording_CleanupBackgroundRecordings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CleanupBackgroundRecordings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CleanupBackgroundRecordings_Response::_Internal {
 public:
};

CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CleanupBackgroundRecordings_Response)
}
CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(const CGameRecording_CleanupBackgroundRecordings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CleanupBackgroundRecordings_Response)
}

void CGameRecording_CleanupBackgroundRecordings_Response::SharedCtor() {
}

CGameRecording_CleanupBackgroundRecordings_Response::~CGameRecording_CleanupBackgroundRecordings_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_CleanupBackgroundRecordings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CleanupBackgroundRecordings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_CleanupBackgroundRecordings_Response::ArenaDtor(void* object) {
  CGameRecording_CleanupBackgroundRecordings_Response* _this = reinterpret_cast< CGameRecording_CleanupBackgroundRecordings_Response* >(object);
  (void)_this;
}
void CGameRecording_CleanupBackgroundRecordings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CleanupBackgroundRecordings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CleanupBackgroundRecordings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CleanupBackgroundRecordings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CleanupBackgroundRecordings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CleanupBackgroundRecordings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CleanupBackgroundRecordings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CleanupBackgroundRecordings_Response)
  return target;
}

size_t CGameRecording_CleanupBackgroundRecordings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CleanupBackgroundRecordings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CleanupBackgroundRecordings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CleanupBackgroundRecordings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CleanupBackgroundRecordings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CleanupBackgroundRecordings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CleanupBackgroundRecordings_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_CleanupBackgroundRecordings_Response::MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_CleanupBackgroundRecordings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CleanupBackgroundRecordings_Response::CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CleanupBackgroundRecordings_Response::IsInitialized() const {
  return true;
}

void CGameRecording_CleanupBackgroundRecordings_Response::InternalSwap(CGameRecording_CleanupBackgroundRecordings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CleanupBackgroundRecordings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPlatformCapabilities_Request::_Internal {
 public:
};

CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPlatformCapabilities_Request)
}
CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(const CGameRecording_GetPlatformCapabilities_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPlatformCapabilities_Request)
}

void CGameRecording_GetPlatformCapabilities_Request::SharedCtor() {
}

CGameRecording_GetPlatformCapabilities_Request::~CGameRecording_GetPlatformCapabilities_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPlatformCapabilities_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPlatformCapabilities_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPlatformCapabilities_Request::ArenaDtor(void* object) {
  CGameRecording_GetPlatformCapabilities_Request* _this = reinterpret_cast< CGameRecording_GetPlatformCapabilities_Request* >(object);
  (void)_this;
}
void CGameRecording_GetPlatformCapabilities_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPlatformCapabilities_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPlatformCapabilities_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPlatformCapabilities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPlatformCapabilities_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPlatformCapabilities_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPlatformCapabilities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPlatformCapabilities_Request)
  return target;
}

size_t CGameRecording_GetPlatformCapabilities_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPlatformCapabilities_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPlatformCapabilities_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPlatformCapabilities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPlatformCapabilities_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPlatformCapabilities_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPlatformCapabilities_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPlatformCapabilities_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPlatformCapabilities_Request::MergeFrom(const CGameRecording_GetPlatformCapabilities_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPlatformCapabilities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetPlatformCapabilities_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPlatformCapabilities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPlatformCapabilities_Request::CopyFrom(const CGameRecording_GetPlatformCapabilities_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPlatformCapabilities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPlatformCapabilities_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetPlatformCapabilities_Request::InternalSwap(CGameRecording_GetPlatformCapabilities_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPlatformCapabilities_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPlatformCapabilities_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetPlatformCapabilities_Response>()._has_bits_);
  static void set_has_per_process_audio_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPlatformCapabilities_Response)
}
CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(const CGameRecording_GetPlatformCapabilities_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_process_audio_capture_ = from.per_process_audio_capture_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPlatformCapabilities_Response)
}

void CGameRecording_GetPlatformCapabilities_Response::SharedCtor() {
per_process_audio_capture_ = false;
}

CGameRecording_GetPlatformCapabilities_Response::~CGameRecording_GetPlatformCapabilities_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPlatformCapabilities_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPlatformCapabilities_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPlatformCapabilities_Response::ArenaDtor(void* object) {
  CGameRecording_GetPlatformCapabilities_Response* _this = reinterpret_cast< CGameRecording_GetPlatformCapabilities_Response* >(object);
  (void)_this;
}
void CGameRecording_GetPlatformCapabilities_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPlatformCapabilities_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPlatformCapabilities_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPlatformCapabilities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_process_audio_capture_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPlatformCapabilities_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool per_process_audio_capture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_per_process_audio_capture(&has_bits);
          per_process_audio_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPlatformCapabilities_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPlatformCapabilities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool per_process_audio_capture = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_per_process_audio_capture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPlatformCapabilities_Response)
  return target;
}

size_t CGameRecording_GetPlatformCapabilities_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPlatformCapabilities_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool per_process_audio_capture = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPlatformCapabilities_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPlatformCapabilities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPlatformCapabilities_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPlatformCapabilities_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPlatformCapabilities_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPlatformCapabilities_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPlatformCapabilities_Response::MergeFrom(const CGameRecording_GetPlatformCapabilities_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPlatformCapabilities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_per_process_audio_capture()) {
    _internal_set_per_process_audio_capture(from._internal_per_process_audio_capture());
  }
}

void CGameRecording_GetPlatformCapabilities_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPlatformCapabilities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPlatformCapabilities_Response::CopyFrom(const CGameRecording_GetPlatformCapabilities_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPlatformCapabilities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPlatformCapabilities_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetPlatformCapabilities_Response::InternalSwap(CGameRecording_GetPlatformCapabilities_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(per_process_audio_capture_, other->per_process_audio_capture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPlatformCapabilities_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipCreated_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipCreated_Notification>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_ClipCreated_Notification* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_ClipCreated_Notification::_Internal::summary(const CGameRecording_ClipCreated_Notification* msg) {
  return *msg->summary_;
}
CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipCreated_Notification)
}
CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(const CGameRecording_ClipCreated_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipCreated_Notification)
}

void CGameRecording_ClipCreated_Notification::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_ClipCreated_Notification::~CGameRecording_ClipCreated_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipCreated_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipCreated_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_ClipCreated_Notification::ArenaDtor(void* object) {
  CGameRecording_ClipCreated_Notification* _this = reinterpret_cast< CGameRecording_ClipCreated_Notification* >(object);
  (void)_this;
}
void CGameRecording_ClipCreated_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipCreated_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipCreated_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipCreated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipCreated_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipCreated_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipCreated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipCreated_Notification)
  return target;
}

size_t CGameRecording_ClipCreated_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipCreated_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipCreated_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipCreated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipCreated_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipCreated_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipCreated_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipCreated_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipCreated_Notification::MergeFrom(const CGameRecording_ClipCreated_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipCreated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_ClipCreated_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipCreated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipCreated_Notification::CopyFrom(const CGameRecording_ClipCreated_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipCreated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipCreated_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ClipCreated_Notification::InternalSwap(CGameRecording_ClipCreated_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipCreated_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipDeleted_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipDeleted_Notification>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipDeleted_Notification)
}
CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(const CGameRecording_ClipDeleted_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipDeleted_Notification)
}

void CGameRecording_ClipDeleted_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_ClipDeleted_Notification::~CGameRecording_ClipDeleted_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipDeleted_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipDeleted_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ClipDeleted_Notification::ArenaDtor(void* object) {
  CGameRecording_ClipDeleted_Notification* _this = reinterpret_cast< CGameRecording_ClipDeleted_Notification* >(object);
  (void)_this;
}
void CGameRecording_ClipDeleted_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipDeleted_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipDeleted_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipDeleted_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipDeleted_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipDeleted_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipDeleted_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipDeleted_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipDeleted_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional uint64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipDeleted_Notification)
  return target;
}

size_t CGameRecording_ClipDeleted_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipDeleted_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional uint64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipDeleted_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipDeleted_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipDeleted_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipDeleted_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipDeleted_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipDeleted_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipDeleted_Notification::MergeFrom(const CGameRecording_ClipDeleted_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipDeleted_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ClipDeleted_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipDeleted_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipDeleted_Notification::CopyFrom(const CGameRecording_ClipDeleted_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipDeleted_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipDeleted_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ClipDeleted_Notification::InternalSwap(CGameRecording_ClipDeleted_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipDeleted_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportProgress_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportProgress_Notification>()._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportProgress_Notification)
}
CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(const CGameRecording_ExportProgress_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportProgress_Notification)
}

void CGameRecording_ExportProgress_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
}

CGameRecording_ExportProgress_Notification::~CGameRecording_ExportProgress_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportProgress_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportProgress_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ExportProgress_Notification::ArenaDtor(void* object) {
  CGameRecording_ExportProgress_Notification* _this = reinterpret_cast< CGameRecording_ExportProgress_Notification* >(object);
  (void)_this;
}
void CGameRecording_ExportProgress_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportProgress_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportProgress_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportProgress_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportProgress_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportProgress_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float progress = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_progress(), target);
  }

  // optional string clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportProgress_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clip_id(), target);
  }

  // optional int32 eresult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportProgress_Notification)
  return target;
}

size_t CGameRecording_ExportProgress_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportProgress_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional float progress = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 eresult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportProgress_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportProgress_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportProgress_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportProgress_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportProgress_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportProgress_Notification::MergeFrom(const CGameRecording_ExportProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ExportProgress_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportProgress_Notification::CopyFrom(const CGameRecording_ExportProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportProgress_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ExportProgress_Notification::InternalSwap(CGameRecording_ExportProgress_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ExportProgress_Notification, eresult_)
      + sizeof(CGameRecording_ExportProgress_Notification::eresult_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ExportProgress_Notification, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportProgress_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_PerGameSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_PerGameSettings>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_PerGameSettings::CGameRecording_PerGameSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_PerGameSettings)
}
CGameRecording_PerGameSettings::CGameRecording_PerGameSettings(const CGameRecording_PerGameSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(bitrate_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_PerGameSettings)
}

void CGameRecording_PerGameSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(bitrate_));
}

CGameRecording_PerGameSettings::~CGameRecording_PerGameSettings() {
  // @@protoc_insertion_point(destructor:CGameRecording_PerGameSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_PerGameSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_PerGameSettings::ArenaDtor(void* object) {
  CGameRecording_PerGameSettings* _this = reinterpret_cast< CGameRecording_PerGameSettings* >(object);
  (void)_this;
}
void CGameRecording_PerGameSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_PerGameSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_PerGameSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_PerGameSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bitrate_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(bitrate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_PerGameSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_minutes(&has_bits);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bitrate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bitrate(&has_bits);
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_PerGameSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_PerGameSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gameid(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional int32 minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minutes(), target);
  }

  // optional int32 bitrate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bitrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_PerGameSettings)
  return target;
}

size_t CGameRecording_PerGameSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_PerGameSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 gameid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 minutes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minutes());
    }

    // optional int32 bitrate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bitrate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_PerGameSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_PerGameSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_PerGameSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_PerGameSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_PerGameSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_PerGameSettings)
    MergeFrom(*source);
  }
}

void CGameRecording_PerGameSettings::MergeFrom(const CGameRecording_PerGameSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_PerGameSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      bitrate_ = from.bitrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_PerGameSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_PerGameSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_PerGameSettings::CopyFrom(const CGameRecording_PerGameSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_PerGameSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_PerGameSettings::IsInitialized() const {
  return true;
}

void CGameRecording_PerGameSettings::InternalSwap(CGameRecording_PerGameSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_PerGameSettings, bitrate_)
      + sizeof(CGameRecording_PerGameSettings::bitrate_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_PerGameSettings, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_PerGameSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPerGameSettings_Request::_Internal {
 public:
};

CGameRecording_GetPerGameSettings_Request::CGameRecording_GetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPerGameSettings_Request)
}
CGameRecording_GetPerGameSettings_Request::CGameRecording_GetPerGameSettings_Request(const CGameRecording_GetPerGameSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPerGameSettings_Request)
}

void CGameRecording_GetPerGameSettings_Request::SharedCtor() {
}

CGameRecording_GetPerGameSettings_Request::~CGameRecording_GetPerGameSettings_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPerGameSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPerGameSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPerGameSettings_Request::ArenaDtor(void* object) {
  CGameRecording_GetPerGameSettings_Request* _this = reinterpret_cast< CGameRecording_GetPerGameSettings_Request* >(object);
  (void)_this;
}
void CGameRecording_GetPerGameSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPerGameSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPerGameSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPerGameSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPerGameSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPerGameSettings_Request)
  return target;
}

size_t CGameRecording_GetPerGameSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPerGameSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPerGameSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPerGameSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPerGameSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPerGameSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPerGameSettings_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPerGameSettings_Request::MergeFrom(const CGameRecording_GetPerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetPerGameSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPerGameSettings_Request::CopyFrom(const CGameRecording_GetPerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPerGameSettings_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetPerGameSettings_Request::InternalSwap(CGameRecording_GetPerGameSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPerGameSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPerGameSettings_Response::_Internal {
 public:
};

CGameRecording_GetPerGameSettings_Response::CGameRecording_GetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPerGameSettings_Response)
}
CGameRecording_GetPerGameSettings_Response::CGameRecording_GetPerGameSettings_Response(const CGameRecording_GetPerGameSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPerGameSettings_Response)
}

void CGameRecording_GetPerGameSettings_Response::SharedCtor() {
}

CGameRecording_GetPerGameSettings_Response::~CGameRecording_GetPerGameSettings_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPerGameSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPerGameSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPerGameSettings_Response::ArenaDtor(void* object) {
  CGameRecording_GetPerGameSettings_Response* _this = reinterpret_cast< CGameRecording_GetPerGameSettings_Response* >(object);
  (void)_this;
}
void CGameRecording_GetPerGameSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPerGameSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPerGameSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPerGameSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_PerGameSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPerGameSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_PerGameSettings settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPerGameSettings_Response)
  return target;
}

size_t CGameRecording_GetPerGameSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPerGameSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_PerGameSettings settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPerGameSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPerGameSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPerGameSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPerGameSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPerGameSettings_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPerGameSettings_Response::MergeFrom(const CGameRecording_GetPerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void CGameRecording_GetPerGameSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPerGameSettings_Response::CopyFrom(const CGameRecording_GetPerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPerGameSettings_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetPerGameSettings_Response::InternalSwap(CGameRecording_GetPerGameSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPerGameSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SetPerGameSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SetPerGameSettings_Request>()._has_bits_);
  static const ::CGameRecording_PerGameSettings& game_settings(const CGameRecording_SetPerGameSettings_Request* msg);
  static void set_has_game_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_PerGameSettings&
CGameRecording_SetPerGameSettings_Request::_Internal::game_settings(const CGameRecording_SetPerGameSettings_Request* msg) {
  return *msg->game_settings_;
}
CGameRecording_SetPerGameSettings_Request::CGameRecording_SetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SetPerGameSettings_Request)
}
CGameRecording_SetPerGameSettings_Request::CGameRecording_SetPerGameSettings_Request(const CGameRecording_SetPerGameSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_settings()) {
    game_settings_ = new ::CGameRecording_PerGameSettings(*from.game_settings_);
  } else {
    game_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SetPerGameSettings_Request)
}

void CGameRecording_SetPerGameSettings_Request::SharedCtor() {
game_settings_ = nullptr;
}

CGameRecording_SetPerGameSettings_Request::~CGameRecording_SetPerGameSettings_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_SetPerGameSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SetPerGameSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_settings_;
}

void CGameRecording_SetPerGameSettings_Request::ArenaDtor(void* object) {
  CGameRecording_SetPerGameSettings_Request* _this = reinterpret_cast< CGameRecording_SetPerGameSettings_Request* >(object);
  (void)_this;
}
void CGameRecording_SetPerGameSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SetPerGameSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SetPerGameSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SetPerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_settings_ != nullptr);
    game_settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SetPerGameSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_PerGameSettings game_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SetPerGameSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SetPerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_PerGameSettings game_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SetPerGameSettings_Request)
  return target;
}

size_t CGameRecording_SetPerGameSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SetPerGameSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_PerGameSettings game_settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SetPerGameSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SetPerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SetPerGameSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SetPerGameSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SetPerGameSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SetPerGameSettings_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_SetPerGameSettings_Request::MergeFrom(const CGameRecording_SetPerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SetPerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_settings()) {
    _internal_mutable_game_settings()->::CGameRecording_PerGameSettings::MergeFrom(from._internal_game_settings());
  }
}

void CGameRecording_SetPerGameSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SetPerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SetPerGameSettings_Request::CopyFrom(const CGameRecording_SetPerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SetPerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SetPerGameSettings_Request::IsInitialized() const {
  return true;
}

void CGameRecording_SetPerGameSettings_Request::InternalSwap(CGameRecording_SetPerGameSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_settings_, other->game_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SetPerGameSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SetPerGameSettings_Response::_Internal {
 public:
};

CGameRecording_SetPerGameSettings_Response::CGameRecording_SetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SetPerGameSettings_Response)
}
CGameRecording_SetPerGameSettings_Response::CGameRecording_SetPerGameSettings_Response(const CGameRecording_SetPerGameSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SetPerGameSettings_Response)
}

void CGameRecording_SetPerGameSettings_Response::SharedCtor() {
}

CGameRecording_SetPerGameSettings_Response::~CGameRecording_SetPerGameSettings_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_SetPerGameSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SetPerGameSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_SetPerGameSettings_Response::ArenaDtor(void* object) {
  CGameRecording_SetPerGameSettings_Response* _this = reinterpret_cast< CGameRecording_SetPerGameSettings_Response* >(object);
  (void)_this;
}
void CGameRecording_SetPerGameSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SetPerGameSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SetPerGameSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SetPerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SetPerGameSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SetPerGameSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SetPerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SetPerGameSettings_Response)
  return target;
}

size_t CGameRecording_SetPerGameSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SetPerGameSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SetPerGameSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SetPerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SetPerGameSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SetPerGameSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SetPerGameSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SetPerGameSettings_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_SetPerGameSettings_Response::MergeFrom(const CGameRecording_SetPerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SetPerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_SetPerGameSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SetPerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SetPerGameSettings_Response::CopyFrom(const CGameRecording_SetPerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SetPerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SetPerGameSettings_Response::IsInitialized() const {
  return true;
}

void CGameRecording_SetPerGameSettings_Response::InternalSwap(CGameRecording_SetPerGameSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SetPerGameSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeletePerGameSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_DeletePerGameSettings_Request>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_DeletePerGameSettings_Request::CGameRecording_DeletePerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeletePerGameSettings_Request)
}
CGameRecording_DeletePerGameSettings_Request::CGameRecording_DeletePerGameSettings_Request(const CGameRecording_DeletePerGameSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeletePerGameSettings_Request)
}

void CGameRecording_DeletePerGameSettings_Request::SharedCtor() {
gameid_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_DeletePerGameSettings_Request::~CGameRecording_DeletePerGameSettings_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeletePerGameSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeletePerGameSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeletePerGameSettings_Request::ArenaDtor(void* object) {
  CGameRecording_DeletePerGameSettings_Request* _this = reinterpret_cast< CGameRecording_DeletePerGameSettings_Request* >(object);
  (void)_this;
}
void CGameRecording_DeletePerGameSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeletePerGameSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeletePerGameSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeletePerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeletePerGameSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeletePerGameSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeletePerGameSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeletePerGameSettings_Request)
  return target;
}

size_t CGameRecording_DeletePerGameSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeletePerGameSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 gameid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeletePerGameSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeletePerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeletePerGameSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeletePerGameSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeletePerGameSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeletePerGameSettings_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_DeletePerGameSettings_Request::MergeFrom(const CGameRecording_DeletePerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeletePerGameSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CGameRecording_DeletePerGameSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeletePerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeletePerGameSettings_Request::CopyFrom(const CGameRecording_DeletePerGameSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeletePerGameSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeletePerGameSettings_Request::IsInitialized() const {
  return true;
}

void CGameRecording_DeletePerGameSettings_Request::InternalSwap(CGameRecording_DeletePerGameSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeletePerGameSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeletePerGameSettings_Response::_Internal {
 public:
};

CGameRecording_DeletePerGameSettings_Response::CGameRecording_DeletePerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeletePerGameSettings_Response)
}
CGameRecording_DeletePerGameSettings_Response::CGameRecording_DeletePerGameSettings_Response(const CGameRecording_DeletePerGameSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeletePerGameSettings_Response)
}

void CGameRecording_DeletePerGameSettings_Response::SharedCtor() {
}

CGameRecording_DeletePerGameSettings_Response::~CGameRecording_DeletePerGameSettings_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeletePerGameSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeletePerGameSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeletePerGameSettings_Response::ArenaDtor(void* object) {
  CGameRecording_DeletePerGameSettings_Response* _this = reinterpret_cast< CGameRecording_DeletePerGameSettings_Response* >(object);
  (void)_this;
}
void CGameRecording_DeletePerGameSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeletePerGameSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeletePerGameSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeletePerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeletePerGameSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeletePerGameSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeletePerGameSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeletePerGameSettings_Response)
  return target;
}

size_t CGameRecording_DeletePerGameSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeletePerGameSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeletePerGameSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeletePerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeletePerGameSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeletePerGameSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeletePerGameSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeletePerGameSettings_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_DeletePerGameSettings_Response::MergeFrom(const CGameRecording_DeletePerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeletePerGameSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_DeletePerGameSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeletePerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeletePerGameSettings_Response::CopyFrom(const CGameRecording_DeletePerGameSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeletePerGameSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeletePerGameSettings_Response::IsInitialized() const {
  return true;
}

void CGameRecording_DeletePerGameSettings_Response::InternalSwap(CGameRecording_DeletePerGameSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeletePerGameSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadProgress_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadProgress_Notification>()._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadProgress_Notification)
}
CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(const CGameRecording_UploadProgress_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadProgress_Notification)
}

void CGameRecording_UploadProgress_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
}

CGameRecording_UploadProgress_Notification::~CGameRecording_UploadProgress_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadProgress_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadProgress_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UploadProgress_Notification::ArenaDtor(void* object) {
  CGameRecording_UploadProgress_Notification* _this = reinterpret_cast< CGameRecording_UploadProgress_Notification* >(object);
  (void)_this;
}
void CGameRecording_UploadProgress_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadProgress_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadProgress_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadProgress_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadProgress_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadProgress_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float progress = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_progress(), target);
  }

  // optional string clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadProgress_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clip_id(), target);
  }

  // optional int32 eresult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadProgress_Notification)
  return target;
}

size_t CGameRecording_UploadProgress_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadProgress_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional float progress = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 eresult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadProgress_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadProgress_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadProgress_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadProgress_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadProgress_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadProgress_Notification::MergeFrom(const CGameRecording_UploadProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UploadProgress_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadProgress_Notification::CopyFrom(const CGameRecording_UploadProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadProgress_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_UploadProgress_Notification::InternalSwap(CGameRecording_UploadProgress_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UploadProgress_Notification, eresult_)
      + sizeof(CGameRecording_UploadProgress_Notification::eresult_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UploadProgress_Notification, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadProgress_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SwitchBackgroundRecordingGame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SwitchBackgroundRecordingGame_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
}
CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(const CGameRecording_SwitchBackgroundRecordingGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_SwitchBackgroundRecordingGame_Request::~CGameRecording_SwitchBackgroundRecordingGame_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::ArenaDtor(void* object) {
  CGameRecording_SwitchBackgroundRecordingGame_Request* _this = reinterpret_cast< CGameRecording_SwitchBackgroundRecordingGame_Request* >(object);
  (void)_this;
}
void CGameRecording_SwitchBackgroundRecordingGame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SwitchBackgroundRecordingGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SwitchBackgroundRecordingGame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SwitchBackgroundRecordingGame_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SwitchBackgroundRecordingGame_Request)
  return target;
}

size_t CGameRecording_SwitchBackgroundRecordingGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SwitchBackgroundRecordingGame_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SwitchBackgroundRecordingGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SwitchBackgroundRecordingGame_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SwitchBackgroundRecordingGame_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SwitchBackgroundRecordingGame_Request::IsInitialized() const {
  return true;
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SwitchBackgroundRecordingGame_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SwitchBackgroundRecordingGame_Response::_Internal {
 public:
};

CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
}
CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(const CGameRecording_SwitchBackgroundRecordingGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::SharedCtor() {
}

CGameRecording_SwitchBackgroundRecordingGame_Response::~CGameRecording_SwitchBackgroundRecordingGame_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::ArenaDtor(void* object) {
  CGameRecording_SwitchBackgroundRecordingGame_Response* _this = reinterpret_cast< CGameRecording_SwitchBackgroundRecordingGame_Response* >(object);
  (void)_this;
}
void CGameRecording_SwitchBackgroundRecordingGame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SwitchBackgroundRecordingGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SwitchBackgroundRecordingGame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SwitchBackgroundRecordingGame_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SwitchBackgroundRecordingGame_Response)
  return target;
}

size_t CGameRecording_SwitchBackgroundRecordingGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SwitchBackgroundRecordingGame_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SwitchBackgroundRecordingGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SwitchBackgroundRecordingGame_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SwitchBackgroundRecordingGame_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_SwitchBackgroundRecordingGame_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SwitchBackgroundRecordingGame_Response::IsInitialized() const {
  return true;
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SwitchBackgroundRecordingGame_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineHighlightMarker_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineHighlightMarker_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
}
CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SharedCtor() {
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineHighlightMarker_Request::~CGameRecordingDebug_AddTimelineHighlightMarker_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineHighlightMarker_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineHighlightMarker_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineHighlightMarker_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineHighlightMarker_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineHighlightMarker_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string icon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string desc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineHighlightMarker_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineHighlightMarker_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::MergeFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::CopyFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineHighlightMarker_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::InternalSwap(CGameRecordingDebug_AddTimelineHighlightMarker_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineHighlightMarker_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineHighlightMarker_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
}
CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineHighlightMarker_Response::~CGameRecordingDebug_AddTimelineHighlightMarker_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineHighlightMarker_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineHighlightMarker_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineHighlightMarker_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineHighlightMarker_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineHighlightMarker_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineHighlightMarker_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineHighlightMarker_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::MergeFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::CopyFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineHighlightMarker_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::InternalSwap(CGameRecordingDebug_AddTimelineHighlightMarker_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineHighlightMarker_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineTimestamp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineTimestamp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
}
CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(const CGameRecordingDebug_AddTimelineTimestamp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineTimestamp_Request::~CGameRecordingDebug_AddTimelineTimestamp_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineTimestamp_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineTimestamp_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineTimestamp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineTimestamp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineTimestamp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineTimestamp_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineTimestamp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineTimestamp_Request.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineTimestamp_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineTimestamp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineTimestamp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineTimestamp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineTimestamp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineTimestamp_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::MergeFrom(const CGameRecordingDebug_AddTimelineTimestamp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::CopyFrom(const CGameRecordingDebug_AddTimelineTimestamp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineTimestamp_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::InternalSwap(CGameRecordingDebug_AddTimelineTimestamp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineTimestamp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineTimestamp_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
}
CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(const CGameRecordingDebug_AddTimelineTimestamp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineTimestamp_Response::~CGameRecordingDebug_AddTimelineTimestamp_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineTimestamp_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineTimestamp_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineTimestamp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineTimestamp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineTimestamp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineTimestamp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineTimestamp_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineTimestamp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineTimestamp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineTimestamp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineTimestamp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineTimestamp_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::MergeFrom(const CGameRecordingDebug_AddTimelineTimestamp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineTimestamp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::CopyFrom(const CGameRecordingDebug_AddTimelineTimestamp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineTimestamp_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::InternalSwap(CGameRecordingDebug_AddTimelineTimestamp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineTimestamp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeStart_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineRangeStart_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
}
CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(const CGameRecordingDebug_AddTimelineRangeStart_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineRangeStart_Request::~CGameRecordingDebug_AddTimelineRangeStart_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeStart_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeStart_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeStart_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeStart_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeStart_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeStart_Request.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeStart_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeStart_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeStart_Request.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeStart_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeStart_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeStart_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeStart_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeStart_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeStart_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeStart_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::MergeFrom(const CGameRecordingDebug_AddTimelineRangeStart_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::CopyFrom(const CGameRecordingDebug_AddTimelineRangeStart_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeStart_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::InternalSwap(CGameRecordingDebug_AddTimelineRangeStart_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeStart_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeStart_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
}
CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(const CGameRecordingDebug_AddTimelineRangeStart_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineRangeStart_Response::~CGameRecordingDebug_AddTimelineRangeStart_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeStart_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeStart_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeStart_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeStart_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeStart_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeStart_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeStart_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeStart_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeStart_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeStart_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeStart_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeStart_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::MergeFrom(const CGameRecordingDebug_AddTimelineRangeStart_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineRangeStart_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::CopyFrom(const CGameRecordingDebug_AddTimelineRangeStart_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeStart_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::InternalSwap(CGameRecordingDebug_AddTimelineRangeStart_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeStart_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeEnd_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineRangeEnd_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
}
CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineRangeEnd_Request::~CGameRecordingDebug_AddTimelineRangeEnd_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeEnd_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeEnd_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeEnd_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeEnd_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeEnd_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeEnd_Request.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeEnd_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeEnd_Request.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeEnd_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeEnd_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeEnd_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeEnd_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeEnd_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::MergeFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::CopyFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeEnd_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::InternalSwap(CGameRecordingDebug_AddTimelineRangeEnd_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeEnd_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeEnd_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
}
CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineRangeEnd_Response::~CGameRecordingDebug_AddTimelineRangeEnd_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeEnd_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeEnd_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeEnd_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeEnd_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeEnd_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeEnd_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeEnd_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeEnd_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeEnd_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeEnd_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeEnd_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::MergeFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::CopyFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeEnd_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::InternalSwap(CGameRecordingDebug_AddTimelineRangeEnd_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeEnd_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_SetTimelineGameMode_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_SetTimelineGameMode_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_SetTimelineGameMode_Request)
}
CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(const CGameRecordingDebug_SetTimelineGameMode_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_SetTimelineGameMode_Request)
}

void CGameRecordingDebug_SetTimelineGameMode_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
}

CGameRecordingDebug_SetTimelineGameMode_Request::~CGameRecordingDebug_SetTimelineGameMode_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_SetTimelineGameMode_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_SetTimelineGameMode_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_SetTimelineGameMode_Request* _this = reinterpret_cast< CGameRecordingDebug_SetTimelineGameMode_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_SetTimelineGameMode_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_SetTimelineGameMode_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_SetTimelineGameMode_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_SetTimelineGameMode_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_SetTimelineGameMode_Request)
  return target;
}

size_t CGameRecordingDebug_SetTimelineGameMode_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_SetTimelineGameMode_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_SetTimelineGameMode_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_SetTimelineGameMode_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_SetTimelineGameMode_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_SetTimelineGameMode_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Request::MergeFrom(const CGameRecordingDebug_SetTimelineGameMode_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::CopyFrom(const CGameRecordingDebug_SetTimelineGameMode_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_SetTimelineGameMode_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_SetTimelineGameMode_Request::InternalSwap(CGameRecordingDebug_SetTimelineGameMode_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingDebug_SetTimelineGameMode_Request, mode_)
      + sizeof(CGameRecordingDebug_SetTimelineGameMode_Request::mode_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingDebug_SetTimelineGameMode_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_SetTimelineGameMode_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_SetTimelineGameMode_Response::_Internal {
 public:
};

CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_SetTimelineGameMode_Response)
}
CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(const CGameRecordingDebug_SetTimelineGameMode_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_SetTimelineGameMode_Response)
}

void CGameRecordingDebug_SetTimelineGameMode_Response::SharedCtor() {
}

CGameRecordingDebug_SetTimelineGameMode_Response::~CGameRecordingDebug_SetTimelineGameMode_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_SetTimelineGameMode_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_SetTimelineGameMode_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_SetTimelineGameMode_Response* _this = reinterpret_cast< CGameRecordingDebug_SetTimelineGameMode_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_SetTimelineGameMode_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_SetTimelineGameMode_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_SetTimelineGameMode_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_SetTimelineGameMode_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_SetTimelineGameMode_Response)
  return target;
}

size_t CGameRecordingDebug_SetTimelineGameMode_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_SetTimelineGameMode_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_SetTimelineGameMode_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_SetTimelineGameMode_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_SetTimelineGameMode_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_SetTimelineGameMode_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Response::MergeFrom(const CGameRecordingDebug_SetTimelineGameMode_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_SetTimelineGameMode_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::CopyFrom(const CGameRecordingDebug_SetTimelineGameMode_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_SetTimelineGameMode_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_SetTimelineGameMode_Response::InternalSwap(CGameRecordingDebug_SetTimelineGameMode_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_SetTimelineGameMode_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GameRecording::~GameRecording() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecording::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecording::GetDescriptor() {
  return descriptor();
}

void GameRecording::GetActiveTimelineApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetActiveTimelineApps_Request*,
                         ::CGameRecording_GetActiveTimelineApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetActiveTimelineApps() not implemented.");
  done->Run();
}

void GameRecording::GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTimelinesForApp_Request*,
                         ::CGameRecording_GetTimelinesForApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimelinesForApp() not implemented.");
  done->Run();
}

void GameRecording::GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTimelinesForClip_Request*,
                         ::CGameRecording_GetTimelinesForClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimelinesForClip() not implemented.");
  done->Run();
}

void GameRecording::QueryPhases(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_QueryPhases_Request*,
                         ::CGameRecording_QueryPhases_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryPhases() not implemented.");
  done->Run();
}

void GameRecording::GetTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTags_Request*,
                         ::CGameRecording_GetTags_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTags() not implemented.");
  done->Run();
}

void GameRecording::GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetEnoughDiskSpace_Request*,
                         ::CGameRecording_GetEnoughDiskSpace_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEnoughDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetAvailableDiskSpace_Request*,
                         ::CGameRecording_GetAvailableDiskSpace_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAvailableDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_SaveClip_Request*,
                         ::CGameRecording_SaveClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveClip() not implemented.");
  done->Run();
}

void GameRecording::DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_DeleteClip_Request*,
                         ::CGameRecording_DeleteClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteClip() not implemented.");
  done->Run();
}

void GameRecording::GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetClips_Request*,
                         ::CGameRecording_GetClips_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClips() not implemented.");
  done->Run();
}

void GameRecording::UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UploadClipToSteam_Request*,
                         ::CGameRecording_UploadClipToSteam_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadClipToSteam() not implemented.");
  done->Run();
}

void GameRecording::ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ExportClip_Request*,
                         ::CGameRecording_ExportClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExportClip() not implemented.");
  done->Run();
}

void GameRecording::TakeScreenshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_TakeScreenshot_Request*,
                         ::CGameRecording_TakeScreenshot_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TakeScreenshot() not implemented.");
  done->Run();
}

void GameRecording::ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ZipClip_Request*,
                         ::CGameRecording_ZipClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ZipClip() not implemented.");
  done->Run();
}

void GameRecording::StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_StartRecording_Request*,
                         ::CGameRecording_StartRecording_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartRecording() not implemented.");
  done->Run();
}

void GameRecording::StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_StopRecording_Request*,
                         ::CGameRecording_StopRecording_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopRecording() not implemented.");
  done->Run();
}

void GameRecording::GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetRecordingSize_Request*,
                         ::CGameRecording_GetRecordingSize_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBackgroundRecordingFileSize() not implemented.");
  done->Run();
}

void GameRecording::CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_CleanupBackgroundRecordings_Request*,
                         ::CGameRecording_CleanupBackgroundRecordings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CleanupBackgroundRecordings() not implemented.");
  done->Run();
}

void GameRecording::GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetAndTrimPostGameHighlights_Request*,
                         ::CGameRecording_GetAndTrimPostGameHighlights_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAndTrimPostGameHighlights() not implemented.");
  done->Run();
}

void GameRecording::GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetThumbnails_Request*,
                         ::CGameRecording_GetThumbnails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetThumbnails() not implemented.");
  done->Run();
}

void GameRecording::GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetPlatformCapabilities_Request*,
                         ::CGameRecording_GetPlatformCapabilities_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPlatformCapabilities() not implemented.");
  done->Run();
}

void GameRecording::NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_TimelineChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTimelineChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_RecordingSessionChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRecordingSessionChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_TimelineEntryChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTimelineEntryChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ClipCreated_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClipCreated() not implemented.");
  done->Run();
}

void GameRecording::NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ClipDeleted_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClipDeleted() not implemented.");
  done->Run();
}

void GameRecording::NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ExportProgress_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyExportProgress() not implemented.");
  done->Run();
}

void GameRecording::NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UploadProgress_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUploadProgress() not implemented.");
  done->Run();
}

void GameRecording::NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_LowDiskSpace_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLowDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_PostGameHighlightsChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPostGameHighlightsChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyOpenOverlayToGamePhase(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_OpenOverlayToGamePhase_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyOpenOverlayToGamePhase() not implemented.");
  done->Run();
}

void GameRecording::NotifyOpenOverlayToTimelineEvent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_OpenOverlayToTimelineEvent_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyOpenOverlayToTimelineEvent() not implemented.");
  done->Run();
}

void GameRecording::NotifyPhaseListChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_PhaseListChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPhaseListChanged() not implemented.");
  done->Run();
}

void GameRecording::GetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetPerGameSettings_Request*,
                         ::CGameRecording_GetPerGameSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPerGameSettings() not implemented.");
  done->Run();
}

void GameRecording::SetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_SetPerGameSettings_Request*,
                         ::CGameRecording_SetPerGameSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPerGameSettings() not implemented.");
  done->Run();
}

void GameRecording::DeletePerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_DeletePerGameSettings_Request*,
                         ::CGameRecording_DeletePerGameSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeletePerGameSettings() not implemented.");
  done->Run();
}

void GameRecording::UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserAddTimelineEntry_Request*,
                         ::CGameRecording_UserAddTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserAddTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserUpdateTimelineEntry_Request*,
                         ::CGameRecording_UserUpdateTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserUpdateTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserRemoveTimelineEntry_Request*,
                         ::CGameRecording_UserRemoveTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserRemoveTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request*,
                         ::CGameRecording_ManuallyDeleteRecordingsForApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ManuallyDeleteRecordingsForApps() not implemented.");
  done->Run();
}

void GameRecording::GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTotalDiskSpaceUsage_Request*,
                         ::CGameRecording_GetTotalDiskSpaceUsage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTotalDiskSpaceUsage() not implemented.");
  done->Run();
}

void GameRecording::SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_SwitchBackgroundRecordingGame_Request*,
                         ::CGameRecording_SwitchBackgroundRecordingGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SwitchBackgroundRecordingGame() not implemented.");
  done->Run();
}

void GameRecording::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetActiveTimelineApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetActiveTimelineApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetActiveTimelineApps_Response*>(
                 response),
             done);
      break;
    case 1:
      GetTimelinesForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTimelinesForApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTimelinesForApp_Response*>(
                 response),
             done);
      break;
    case 2:
      GetTimelinesForClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTimelinesForClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTimelinesForClip_Response*>(
                 response),
             done);
      break;
    case 3:
      QueryPhases(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_QueryPhases_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_QueryPhases_Response*>(
                 response),
             done);
      break;
    case 4:
      GetTags(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTags_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTags_Response*>(
                 response),
             done);
      break;
    case 5:
      GetEnoughDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetEnoughDiskSpace_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetEnoughDiskSpace_Response*>(
                 response),
             done);
      break;
    case 6:
      GetAvailableDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetAvailableDiskSpace_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetAvailableDiskSpace_Response*>(
                 response),
             done);
      break;
    case 7:
      SaveClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_SaveClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_SaveClip_Response*>(
                 response),
             done);
      break;
    case 8:
      DeleteClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_DeleteClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_DeleteClip_Response*>(
                 response),
             done);
      break;
    case 9:
      GetClips(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetClips_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetClips_Response*>(
                 response),
             done);
      break;
    case 10:
      UploadClipToSteam(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UploadClipToSteam_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UploadClipToSteam_Response*>(
                 response),
             done);
      break;
    case 11:
      ExportClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ExportClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ExportClip_Response*>(
                 response),
             done);
      break;
    case 12:
      TakeScreenshot(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_TakeScreenshot_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_TakeScreenshot_Response*>(
                 response),
             done);
      break;
    case 13:
      ZipClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ZipClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ZipClip_Response*>(
                 response),
             done);
      break;
    case 14:
      StartRecording(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_StartRecording_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_StartRecording_Response*>(
                 response),
             done);
      break;
    case 15:
      StopRecording(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_StopRecording_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_StopRecording_Response*>(
                 response),
             done);
      break;
    case 16:
      GetBackgroundRecordingFileSize(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetRecordingSize_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetRecordingSize_Response*>(
                 response),
             done);
      break;
    case 17:
      CleanupBackgroundRecordings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_CleanupBackgroundRecordings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_CleanupBackgroundRecordings_Response*>(
                 response),
             done);
      break;
    case 18:
      GetAndTrimPostGameHighlights(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetAndTrimPostGameHighlights_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetAndTrimPostGameHighlights_Response*>(
                 response),
             done);
      break;
    case 19:
      GetThumbnails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetThumbnails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetThumbnails_Response*>(
                 response),
             done);
      break;
    case 20:
      GetPlatformCapabilities(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetPlatformCapabilities_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetPlatformCapabilities_Response*>(
                 response),
             done);
      break;
    case 21:
      NotifyTimelineChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_TimelineChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 22:
      NotifyRecordingSessionChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_RecordingSessionChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 23:
      NotifyTimelineEntryChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_TimelineEntryChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 24:
      NotifyClipCreated(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ClipCreated_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 25:
      NotifyClipDeleted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ClipDeleted_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 26:
      NotifyExportProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ExportProgress_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 27:
      NotifyUploadProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UploadProgress_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 28:
      NotifyLowDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_LowDiskSpace_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 29:
      NotifyPostGameHighlightsChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_PostGameHighlightsChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 30:
      NotifyOpenOverlayToGamePhase(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_OpenOverlayToGamePhase_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 31:
      NotifyOpenOverlayToTimelineEvent(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_OpenOverlayToTimelineEvent_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 32:
      NotifyPhaseListChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_PhaseListChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 33:
      GetPerGameSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetPerGameSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetPerGameSettings_Response*>(
                 response),
             done);
      break;
    case 34:
      SetPerGameSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_SetPerGameSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_SetPerGameSettings_Response*>(
                 response),
             done);
      break;
    case 35:
      DeletePerGameSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_DeletePerGameSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_DeletePerGameSettings_Response*>(
                 response),
             done);
      break;
    case 36:
      UserAddTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserAddTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserAddTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 37:
      UserUpdateTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserUpdateTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserUpdateTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 38:
      UserRemoveTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserRemoveTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserRemoveTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 39:
      ManuallyDeleteRecordingsForApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ManuallyDeleteRecordingsForApps_Response*>(
                 response),
             done);
      break;
    case 40:
      GetTotalDiskSpaceUsage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTotalDiskSpaceUsage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTotalDiskSpaceUsage_Response*>(
                 response),
             done);
      break;
    case 41:
      SwitchBackgroundRecordingGame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_SwitchBackgroundRecordingGame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_SwitchBackgroundRecordingGame_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecording::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_GetActiveTimelineApps_Request::default_instance();
    case 1:
      return ::CGameRecording_GetTimelinesForApp_Request::default_instance();
    case 2:
      return ::CGameRecording_GetTimelinesForClip_Request::default_instance();
    case 3:
      return ::CGameRecording_QueryPhases_Request::default_instance();
    case 4:
      return ::CGameRecording_GetTags_Request::default_instance();
    case 5:
      return ::CGameRecording_GetEnoughDiskSpace_Request::default_instance();
    case 6:
      return ::CGameRecording_GetAvailableDiskSpace_Request::default_instance();
    case 7:
      return ::CGameRecording_SaveClip_Request::default_instance();
    case 8:
      return ::CGameRecording_DeleteClip_Request::default_instance();
    case 9:
      return ::CGameRecording_GetClips_Request::default_instance();
    case 10:
      return ::CGameRecording_UploadClipToSteam_Request::default_instance();
    case 11:
      return ::CGameRecording_ExportClip_Request::default_instance();
    case 12:
      return ::CGameRecording_TakeScreenshot_Request::default_instance();
    case 13:
      return ::CGameRecording_ZipClip_Request::default_instance();
    case 14:
      return ::CGameRecording_StartRecording_Request::default_instance();
    case 15:
      return ::CGameRecording_StopRecording_Request::default_instance();
    case 16:
      return ::CGameRecording_GetRecordingSize_Request::default_instance();
    case 17:
      return ::CGameRecording_CleanupBackgroundRecordings_Request::default_instance();
    case 18:
      return ::CGameRecording_GetAndTrimPostGameHighlights_Request::default_instance();
    case 19:
      return ::CGameRecording_GetThumbnails_Request::default_instance();
    case 20:
      return ::CGameRecording_GetPlatformCapabilities_Request::default_instance();
    case 21:
      return ::CGameRecording_TimelineChanged_Notification::default_instance();
    case 22:
      return ::CGameRecording_RecordingSessionChanged_Notification::default_instance();
    case 23:
      return ::CGameRecording_TimelineEntryChanged_Notification::default_instance();
    case 24:
      return ::CGameRecording_ClipCreated_Notification::default_instance();
    case 25:
      return ::CGameRecording_ClipDeleted_Notification::default_instance();
    case 26:
      return ::CGameRecording_ExportProgress_Notification::default_instance();
    case 27:
      return ::CGameRecording_UploadProgress_Notification::default_instance();
    case 28:
      return ::CGameRecording_LowDiskSpace_Notification::default_instance();
    case 29:
      return ::CGameRecording_PostGameHighlightsChanged_Notification::default_instance();
    case 30:
      return ::CGameRecording_OpenOverlayToGamePhase_Notification::default_instance();
    case 31:
      return ::CGameRecording_OpenOverlayToTimelineEvent_Notification::default_instance();
    case 32:
      return ::CGameRecording_PhaseListChanged_Notification::default_instance();
    case 33:
      return ::CGameRecording_GetPerGameSettings_Request::default_instance();
    case 34:
      return ::CGameRecording_SetPerGameSettings_Request::default_instance();
    case 35:
      return ::CGameRecording_DeletePerGameSettings_Request::default_instance();
    case 36:
      return ::CGameRecording_UserAddTimelineEntry_Request::default_instance();
    case 37:
      return ::CGameRecording_UserUpdateTimelineEntry_Request::default_instance();
    case 38:
      return ::CGameRecording_UserRemoveTimelineEntry_Request::default_instance();
    case 39:
      return ::CGameRecording_ManuallyDeleteRecordingsForApps_Request::default_instance();
    case 40:
      return ::CGameRecording_GetTotalDiskSpaceUsage_Request::default_instance();
    case 41:
      return ::CGameRecording_SwitchBackgroundRecordingGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecording::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_GetActiveTimelineApps_Response::default_instance();
    case 1:
      return ::CGameRecording_GetTimelinesForApp_Response::default_instance();
    case 2:
      return ::CGameRecording_GetTimelinesForClip_Response::default_instance();
    case 3:
      return ::CGameRecording_QueryPhases_Response::default_instance();
    case 4:
      return ::CGameRecording_GetTags_Response::default_instance();
    case 5:
      return ::CGameRecording_GetEnoughDiskSpace_Response::default_instance();
    case 6:
      return ::CGameRecording_GetAvailableDiskSpace_Response::default_instance();
    case 7:
      return ::CGameRecording_SaveClip_Response::default_instance();
    case 8:
      return ::CGameRecording_DeleteClip_Response::default_instance();
    case 9:
      return ::CGameRecording_GetClips_Response::default_instance();
    case 10:
      return ::CGameRecording_UploadClipToSteam_Response::default_instance();
    case 11:
      return ::CGameRecording_ExportClip_Response::default_instance();
    case 12:
      return ::CGameRecording_TakeScreenshot_Response::default_instance();
    case 13:
      return ::CGameRecording_ZipClip_Response::default_instance();
    case 14:
      return ::CGameRecording_StartRecording_Response::default_instance();
    case 15:
      return ::CGameRecording_StopRecording_Response::default_instance();
    case 16:
      return ::CGameRecording_GetRecordingSize_Response::default_instance();
    case 17:
      return ::CGameRecording_CleanupBackgroundRecordings_Response::default_instance();
    case 18:
      return ::CGameRecording_GetAndTrimPostGameHighlights_Response::default_instance();
    case 19:
      return ::CGameRecording_GetThumbnails_Response::default_instance();
    case 20:
      return ::CGameRecording_GetPlatformCapabilities_Response::default_instance();
    case 21:
      return ::WebUINoResponse::default_instance();
    case 22:
      return ::WebUINoResponse::default_instance();
    case 23:
      return ::WebUINoResponse::default_instance();
    case 24:
      return ::WebUINoResponse::default_instance();
    case 25:
      return ::WebUINoResponse::default_instance();
    case 26:
      return ::WebUINoResponse::default_instance();
    case 27:
      return ::WebUINoResponse::default_instance();
    case 28:
      return ::WebUINoResponse::default_instance();
    case 29:
      return ::WebUINoResponse::default_instance();
    case 30:
      return ::WebUINoResponse::default_instance();
    case 31:
      return ::WebUINoResponse::default_instance();
    case 32:
      return ::WebUINoResponse::default_instance();
    case 33:
      return ::CGameRecording_GetPerGameSettings_Response::default_instance();
    case 34:
      return ::CGameRecording_SetPerGameSettings_Response::default_instance();
    case 35:
      return ::CGameRecording_DeletePerGameSettings_Response::default_instance();
    case 36:
      return ::CGameRecording_UserAddTimelineEntry_Response::default_instance();
    case 37:
      return ::CGameRecording_UserUpdateTimelineEntry_Response::default_instance();
    case 38:
      return ::CGameRecording_UserRemoveTimelineEntry_Response::default_instance();
    case 39:
      return ::CGameRecording_ManuallyDeleteRecordingsForApps_Response::default_instance();
    case 40:
      return ::CGameRecording_GetTotalDiskSpaceUsage_Response::default_instance();
    case 41:
      return ::CGameRecording_SwitchBackgroundRecordingGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameRecording_Stub::GameRecording_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameRecording_Stub::GameRecording_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameRecording_Stub::~GameRecording_Stub() {
  if (owns_channel_) delete channel_;
}

void GameRecording_Stub::GetActiveTimelineApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetActiveTimelineApps_Request* request,
                              ::CGameRecording_GetActiveTimelineApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTimelinesForApp_Request* request,
                              ::CGameRecording_GetTimelinesForApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTimelinesForClip_Request* request,
                              ::CGameRecording_GetTimelinesForClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameRecording_Stub::QueryPhases(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_QueryPhases_Request* request,
                              ::CGameRecording_QueryPhases_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTags_Request* request,
                              ::CGameRecording_GetTags_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GameRecording_Stub::GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetEnoughDiskSpace_Request* request,
                              ::CGameRecording_GetEnoughDiskSpace_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void GameRecording_Stub::GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetAvailableDiskSpace_Request* request,
                              ::CGameRecording_GetAvailableDiskSpace_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void GameRecording_Stub::SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_SaveClip_Request* request,
                              ::CGameRecording_SaveClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void GameRecording_Stub::DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_DeleteClip_Request* request,
                              ::CGameRecording_DeleteClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void GameRecording_Stub::GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetClips_Request* request,
                              ::CGameRecording_GetClips_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void GameRecording_Stub::UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UploadClipToSteam_Request* request,
                              ::CGameRecording_UploadClipToSteam_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void GameRecording_Stub::ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ExportClip_Request* request,
                              ::CGameRecording_ExportClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void GameRecording_Stub::TakeScreenshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_TakeScreenshot_Request* request,
                              ::CGameRecording_TakeScreenshot_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void GameRecording_Stub::ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ZipClip_Request* request,
                              ::CGameRecording_ZipClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void GameRecording_Stub::StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_StartRecording_Request* request,
                              ::CGameRecording_StartRecording_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void GameRecording_Stub::StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_StopRecording_Request* request,
                              ::CGameRecording_StopRecording_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void GameRecording_Stub::GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetRecordingSize_Request* request,
                              ::CGameRecording_GetRecordingSize_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void GameRecording_Stub::CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_CleanupBackgroundRecordings_Request* request,
                              ::CGameRecording_CleanupBackgroundRecordings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void GameRecording_Stub::GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetAndTrimPostGameHighlights_Request* request,
                              ::CGameRecording_GetAndTrimPostGameHighlights_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void GameRecording_Stub::GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetThumbnails_Request* request,
                              ::CGameRecording_GetThumbnails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void GameRecording_Stub::GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetPlatformCapabilities_Request* request,
                              ::CGameRecording_GetPlatformCapabilities_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_TimelineChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_RecordingSessionChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_TimelineEntryChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ClipCreated_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ClipDeleted_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ExportProgress_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UploadProgress_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_LowDiskSpace_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_PostGameHighlightsChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyOpenOverlayToGamePhase(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_OpenOverlayToGamePhase_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyOpenOverlayToTimelineEvent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_OpenOverlayToTimelineEvent_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyPhaseListChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_PhaseListChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void GameRecording_Stub::GetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetPerGameSettings_Request* request,
                              ::CGameRecording_GetPerGameSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void GameRecording_Stub::SetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_SetPerGameSettings_Request* request,
                              ::CGameRecording_SetPerGameSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void GameRecording_Stub::DeletePerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_DeletePerGameSettings_Request* request,
                              ::CGameRecording_DeletePerGameSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void GameRecording_Stub::UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserAddTimelineEntry_Request* request,
                              ::CGameRecording_UserAddTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void GameRecording_Stub::UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserUpdateTimelineEntry_Request* request,
                              ::CGameRecording_UserUpdateTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}
void GameRecording_Stub::UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserRemoveTimelineEntry_Request* request,
                              ::CGameRecording_UserRemoveTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38),
                       controller, request, response, done);
}
void GameRecording_Stub::ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* request,
                              ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTotalDiskSpaceUsage_Request* request,
                              ::CGameRecording_GetTotalDiskSpaceUsage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40),
                       controller, request, response, done);
}
void GameRecording_Stub::SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_SwitchBackgroundRecordingGame_Request* request,
                              ::CGameRecording_SwitchBackgroundRecordingGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41),
                       controller, request, response, done);
}
// ===================================================================

GameRecordingDebug::~GameRecordingDebug() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingDebug::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingDebug::GetDescriptor() {
  return descriptor();
}

void GameRecordingDebug::AddTimelineHighlightMarker(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request*,
                         ::CGameRecordingDebug_AddTimelineHighlightMarker_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineHighlightMarker() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineTimestamp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineTimestamp_Request*,
                         ::CGameRecordingDebug_AddTimelineTimestamp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineTimestamp() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineRangeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineRangeStart_Request*,
                         ::CGameRecordingDebug_AddTimelineRangeStart_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineRangeStart() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineRangeEnd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineRangeEnd_Request*,
                         ::CGameRecordingDebug_AddTimelineRangeEnd_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineRangeEnd() not implemented.");
  done->Run();
}

void GameRecordingDebug::SetTimelineGameMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_SetTimelineGameMode_Request*,
                         ::CGameRecordingDebug_SetTimelineGameMode_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetTimelineGameMode() not implemented.");
  done->Run();
}

void GameRecordingDebug::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[1]);
  switch(method->index()) {
    case 0:
      AddTimelineHighlightMarker(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineHighlightMarker_Response*>(
                 response),
             done);
      break;
    case 1:
      AddTimelineTimestamp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineTimestamp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineTimestamp_Response*>(
                 response),
             done);
      break;
    case 2:
      AddTimelineRangeStart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineRangeStart_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineRangeStart_Response*>(
                 response),
             done);
      break;
    case 3:
      AddTimelineRangeEnd(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineRangeEnd_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineRangeEnd_Response*>(
                 response),
             done);
      break;
    case 4:
      SetTimelineGameMode(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_SetTimelineGameMode_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_SetTimelineGameMode_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingDebug::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecordingDebug_AddTimelineHighlightMarker_Request::default_instance();
    case 1:
      return ::CGameRecordingDebug_AddTimelineTimestamp_Request::default_instance();
    case 2:
      return ::CGameRecordingDebug_AddTimelineRangeStart_Request::default_instance();
    case 3:
      return ::CGameRecordingDebug_AddTimelineRangeEnd_Request::default_instance();
    case 4:
      return ::CGameRecordingDebug_SetTimelineGameMode_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingDebug::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecordingDebug_AddTimelineHighlightMarker_Response::default_instance();
    case 1:
      return ::CGameRecordingDebug_AddTimelineTimestamp_Response::default_instance();
    case 2:
      return ::CGameRecordingDebug_AddTimelineRangeStart_Response::default_instance();
    case 3:
      return ::CGameRecordingDebug_AddTimelineRangeEnd_Response::default_instance();
    case 4:
      return ::CGameRecordingDebug_SetTimelineGameMode_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameRecordingDebug_Stub::GameRecordingDebug_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameRecordingDebug_Stub::GameRecordingDebug_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameRecordingDebug_Stub::~GameRecordingDebug_Stub() {
  if (owns_channel_) delete channel_;
}

void GameRecordingDebug_Stub::AddTimelineHighlightMarker(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request* request,
                              ::CGameRecordingDebug_AddTimelineHighlightMarker_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineTimestamp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineTimestamp_Request* request,
                              ::CGameRecordingDebug_AddTimelineTimestamp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineRangeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineRangeStart_Request* request,
                              ::CGameRecordingDebug_AddTimelineRangeStart_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineRangeEnd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineRangeEnd_Request* request,
                              ::CGameRecordingDebug_AddTimelineRangeEnd_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::SetTimelineGameMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_SetTimelineGameMode_Request* request,
                              ::CGameRecordingDebug_SetTimelineGameMode_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Response_App* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Response_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Response_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForApp_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForApp_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_QueryPhases_Request_Tag* Arena::CreateMaybeMessage< ::CGameRecording_QueryPhases_Request_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_QueryPhases_Request_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_QueryPhases_Request* Arena::CreateMaybeMessage< ::CGameRecording_QueryPhases_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_QueryPhases_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* Arena::CreateMaybeMessage< ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_QueryPhases_Response_Phase* Arena::CreateMaybeMessage< ::CGameRecording_QueryPhases_Response_Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_QueryPhases_Response_Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_QueryPhases_Response* Arena::CreateMaybeMessage< ::CGameRecording_QueryPhases_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_QueryPhases_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTags_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTags_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetEnoughDiskSpace_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetEnoughDiskSpace_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetEnoughDiskSpace_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetEnoughDiskSpace_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetEnoughDiskSpace_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetEnoughDiskSpace_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAvailableDiskSpace_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetAvailableDiskSpace_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAvailableDiskSpace_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAvailableDiskSpace_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetAvailableDiskSpace_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAvailableDiskSpace_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TimelineChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_TimelineChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TimelineChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_RecordingSessionChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_RecordingSessionChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_RecordingSessionChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimelineEntry* Arena::CreateMaybeMessage< ::CTimelineEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimelineEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TimelineEntryChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_TimelineEntryChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TimelineEntryChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_LowDiskSpace_Notification* Arena::CreateMaybeMessage< ::CGameRecording_LowDiskSpace_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_LowDiskSpace_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_PostGameHighlightsChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_PostGameHighlightsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_PostGameHighlightsChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_OpenOverlayToGamePhase_Notification* Arena::CreateMaybeMessage< ::CGameRecording_OpenOverlayToGamePhase_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_OpenOverlayToGamePhase_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_OpenOverlayToTimelineEvent_Notification* Arena::CreateMaybeMessage< ::CGameRecording_OpenOverlayToTimelineEvent_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_OpenOverlayToTimelineEvent_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_PhaseListChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_PhaseListChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_PhaseListChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipSummary* Arena::CreateMaybeMessage< ::CGameRecording_ClipSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Request_Position* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Request_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Request_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_DeleteClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_DeleteClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Settings* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TakeScreenshot_Request* Arena::CreateMaybeMessage< ::CGameRecording_TakeScreenshot_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TakeScreenshot_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TakeScreenshot_Response* Arena::CreateMaybeMessage< ::CGameRecording_TakeScreenshot_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TakeScreenshot_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadClipToSteam_Request* Arena::CreateMaybeMessage< ::CGameRecording_UploadClipToSteam_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadClipToSteam_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadClipToSteam_Response* Arena::CreateMaybeMessage< ::CGameRecording_UploadClipToSteam_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadClipToSteam_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ZipClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_ZipClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ZipClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ZipClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_ZipClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ZipClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetClips_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetClips_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetClips_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetClips_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetClips_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetClips_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAndTrimPostGameHighlights_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetAndTrimPostGameHighlights_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAndTrimPostGameHighlights_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAndTrimPostGameHighlights_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetAndTrimPostGameHighlights_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAndTrimPostGameHighlights_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserAddTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserAddTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserAddTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserAddTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserAddTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserAddTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserUpdateTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserUpdateTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserUpdateTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserUpdateTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserUpdateTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserUpdateTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserRemoveTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserRemoveTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserRemoveTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserRemoveTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserRemoveTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserRemoveTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* Arena::CreateMaybeMessage< ::CGameRecording_ManuallyDeleteRecordingsForApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ManuallyDeleteRecordingsForApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* Arena::CreateMaybeMessage< ::CGameRecording_ManuallyDeleteRecordingsForApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ManuallyDeleteRecordingsForApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTotalDiskSpaceUsage_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTotalDiskSpaceUsage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTotalDiskSpaceUsage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTotalDiskSpaceUsage_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTotalDiskSpaceUsage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTotalDiskSpaceUsage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Response_Thumbnail* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Response_Thumbnail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Response_Thumbnail >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StartRecording_Request* Arena::CreateMaybeMessage< ::CGameRecording_StartRecording_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StartRecording_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StartRecording_Response* Arena::CreateMaybeMessage< ::CGameRecording_StartRecording_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StartRecording_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StopRecording_Request* Arena::CreateMaybeMessage< ::CGameRecording_StopRecording_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StopRecording_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StopRecording_Response* Arena::CreateMaybeMessage< ::CGameRecording_StopRecording_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StopRecording_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetRecordingSize_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetRecordingSize_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetRecordingSize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetRecordingSize_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetRecordingSize_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetRecordingSize_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CleanupBackgroundRecordings_Request* Arena::CreateMaybeMessage< ::CGameRecording_CleanupBackgroundRecordings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CleanupBackgroundRecordings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CleanupBackgroundRecordings_Response* Arena::CreateMaybeMessage< ::CGameRecording_CleanupBackgroundRecordings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CleanupBackgroundRecordings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPlatformCapabilities_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetPlatformCapabilities_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPlatformCapabilities_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPlatformCapabilities_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetPlatformCapabilities_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPlatformCapabilities_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipCreated_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ClipCreated_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipCreated_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipDeleted_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ClipDeleted_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipDeleted_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportProgress_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ExportProgress_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportProgress_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_PerGameSettings* Arena::CreateMaybeMessage< ::CGameRecording_PerGameSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_PerGameSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPerGameSettings_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetPerGameSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPerGameSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPerGameSettings_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetPerGameSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPerGameSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SetPerGameSettings_Request* Arena::CreateMaybeMessage< ::CGameRecording_SetPerGameSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SetPerGameSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SetPerGameSettings_Response* Arena::CreateMaybeMessage< ::CGameRecording_SetPerGameSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SetPerGameSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeletePerGameSettings_Request* Arena::CreateMaybeMessage< ::CGameRecording_DeletePerGameSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeletePerGameSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeletePerGameSettings_Response* Arena::CreateMaybeMessage< ::CGameRecording_DeletePerGameSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeletePerGameSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadProgress_Notification* Arena::CreateMaybeMessage< ::CGameRecording_UploadProgress_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadProgress_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SwitchBackgroundRecordingGame_Request* Arena::CreateMaybeMessage< ::CGameRecording_SwitchBackgroundRecordingGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SwitchBackgroundRecordingGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SwitchBackgroundRecordingGame_Response* Arena::CreateMaybeMessage< ::CGameRecording_SwitchBackgroundRecordingGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SwitchBackgroundRecordingGame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineHighlightMarker_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineHighlightMarker_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineHighlightMarker_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineHighlightMarker_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineHighlightMarker_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineHighlightMarker_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineTimestamp_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineTimestamp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineTimestamp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineTimestamp_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineTimestamp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineTimestamp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeStart_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeStart_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeStart_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeStart_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeStart_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeStart_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeEnd_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeEnd_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeEnd_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeEnd_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeEnd_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeEnd_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_SetTimelineGameMode_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_SetTimelineGameMode_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_SetTimelineGameMode_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_SetTimelineGameMode_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_SetTimelineGameMode_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_SetTimelineGameMode_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
