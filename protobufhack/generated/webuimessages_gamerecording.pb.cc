// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamerecording.proto

#include "webuimessages_gamerecording.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_RequestDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Request_default_instance_;
constexpr CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , most_recent_start_time_(0u)
  , recording_type_(0)

  , video_duration_seconds_(0)
  , timeline_duration_seconds_(0)
  , file_size_(PROTOBUF_ULONGLONG(0))
  , is_active_(false){}
struct CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Response_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_Response_AppDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Response_App_default_instance_;
constexpr CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetActiveTimelineApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetActiveTimelineApps_ResponseDefaultTypeInternal _CGameRecording_GetActiveTimelineApps_Response_default_instance_;
constexpr CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Request_default_instance_;
constexpr CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_(){}
struct CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Response_default_instance_;
constexpr CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Request_default_instance_;
constexpr CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_()
  , game_id_(PROTOBUF_ULONGLONG(0))
  , first_timeline_start_offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTimelinesForClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Response_default_instance_;
constexpr CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetEnoughDiskSpace_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Request_default_instance_;
constexpr CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enough_space_(false){}
struct CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetEnoughDiskSpace_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Response_default_instance_;
constexpr CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetAvailableDiskSpace_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Request_default_instance_;
constexpr CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(0){}
struct CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetAvailableDiskSpace_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Response_default_instance_;
constexpr CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , start_time_(0u)
  , notification_type_(1)
{}
struct CGameRecording_TimelineChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_TimelineChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TimelineChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_TimelineChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TimelineChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineChanged_Notification_default_instance_;
constexpr CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , start_offset_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , recording_type_(0)

  , notification_type_(1)
{}
struct CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_RecordingSessionChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal _CGameRecording_RecordingSessionChanged_Notification_default_instance_;
constexpr CTimelineEntry::CTimelineEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , achievement_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_id_(PROTOBUF_ULONGLONG(0))
  , time_(PROTOBUF_ULONGLONG(0))
  , type_(0)

  , game_mode_(0)
  , range_duration_(PROTOBUF_ULONGLONG(0))
  , range_possible_clip_(0)
  , marker_priority_(0)
  , screenshot_handle_(0u){}
struct CTimelineEntryDefaultTypeInternal {
  constexpr CTimelineEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimelineEntryDefaultTypeInternal() {}
  union {
    CTimelineEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimelineEntryDefaultTypeInternal _CTimelineEntry_default_instance_;
constexpr CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(nullptr){}
struct CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_TimelineEntryChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineEntryChanged_Notification_default_instance_;
constexpr CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal {
  constexpr CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_LowDiskSpace_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal _CGameRecording_LowDiskSpace_Notification_default_instance_;
constexpr CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_PostGameHighlightsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal _CGameRecording_PostGameHighlightsChanged_Notification_default_instance_;
constexpr CGameRecording_ClipSummary::CGameRecording_ClipSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , start_offset_ms_(PROTOBUF_ULONGLONG(0))
  , published_file_id_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u)
  , date_clipped_(0u)
  , file_size_(PROTOBUF_ULONGLONG(0))
  , temporary_(false)
  , original_gaming_device_type_(0u)
  , date_downloaded_(0u)
  , thumbnail_width_(0u)
  , thumbnail_height_(0u){}
struct CGameRecording_ClipSummaryDefaultTypeInternal {
  constexpr CGameRecording_ClipSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipSummaryDefaultTypeInternal() {}
  union {
    CGameRecording_ClipSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipSummaryDefaultTypeInternal _CGameRecording_ClipSummary_default_instance_;
constexpr CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_SaveClip_Request_PositionDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_Request_PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_Request_PositionDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Request_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_Request_PositionDefaultTypeInternal _CGameRecording_SaveClip_Request_Position_default_instance_;
constexpr CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , src_clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(nullptr)
  , end_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , temporary_(false){}
struct CGameRecording_SaveClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_RequestDefaultTypeInternal _CGameRecording_SaveClip_Request_default_instance_;
constexpr CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_SaveClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_SaveClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SaveClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_SaveClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SaveClip_ResponseDefaultTypeInternal _CGameRecording_SaveClip_Response_default_instance_;
constexpr CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_DeleteClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_DeleteClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteClip_RequestDefaultTypeInternal _CGameRecording_DeleteClip_Request_default_instance_;
constexpr CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_DeleteClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_DeleteClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteClip_ResponseDefaultTypeInternal _CGameRecording_DeleteClip_Response_default_instance_;
constexpr CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bitrate_kbps_(0)
  , width_(0)
  , height_(0)
  , frames_per_second_(0){}
struct CGameRecording_ExportClip_SettingsDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_SettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_SettingsDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_SettingsDefaultTypeInternal _CGameRecording_ExportClip_Settings_default_instance_;
constexpr CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export_mp4_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr){}
struct CGameRecording_ExportClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_RequestDefaultTypeInternal _CGameRecording_ExportClip_Request_default_instance_;
constexpr CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_ExportClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ExportClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ExportClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportClip_ResponseDefaultTypeInternal _CGameRecording_ExportClip_Response_default_instance_;
constexpr CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visibility_(0){}
struct CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal {
  constexpr CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UploadClipToSteam_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal _CGameRecording_UploadClipToSteam_Request_default_instance_;
constexpr CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UploadClipToSteam_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal _CGameRecording_UploadClipToSteam_Response_default_instance_;
constexpr CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_ZipClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_ZipClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ZipClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ZipClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ZipClip_RequestDefaultTypeInternal _CGameRecording_ZipClip_Request_default_instance_;
constexpr CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zip_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecording_ZipClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ZipClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ZipClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ZipClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ZipClip_ResponseDefaultTypeInternal _CGameRecording_ZipClip_Response_default_instance_;
constexpr CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , created_after_(0u)
  , include_temporary_(false){}
struct CGameRecording_GetClips_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetClips_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetClips_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetClips_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetClips_RequestDefaultTypeInternal _CGameRecording_GetClips_Request_default_instance_;
constexpr CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_(){}
struct CGameRecording_GetClips_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetClips_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetClips_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetClips_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetClips_ResponseDefaultTypeInternal _CGameRecording_GetClips_Response_default_instance_;
constexpr CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , created_after_(0u){}
struct CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetAndTrimPostGameHighlights_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_;
constexpr CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetAndTrimPostGameHighlights_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_;
constexpr CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserAddTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserAddTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Response_default_instance_;
constexpr CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserUpdateTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserUpdateTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Response_default_instance_;
constexpr CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , entry_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal {
  constexpr CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_UserRemoveTimelineEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Request_default_instance_;
constexpr CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal {
  constexpr CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_UserRemoveTimelineEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Response_default_instance_;
constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_ids_(){}
struct CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal {
  constexpr CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_ManuallyDeleteRecordingsForApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_;
constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal {
  constexpr CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_ManuallyDeleteRecordingsForApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_;
constexpr CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : folder_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetTotalDiskSpaceUsage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_;
constexpr CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetTotalDiskSpaceUsage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_;
constexpr CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_offset_us_()
  , recording_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_precision_(0)

  , major_axis_(512u){}
struct CGameRecording_GetThumbnails_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_RequestDefaultTypeInternal _CGameRecording_GetThumbnails_Request_default_instance_;
constexpr CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u){}
struct CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Response_Thumbnail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal _CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_;
constexpr CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnails_(){}
struct CGameRecording_GetThumbnails_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetThumbnails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetThumbnails_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetThumbnails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetThumbnails_ResponseDefaultTypeInternal _CGameRecording_GetThumbnails_Response_default_instance_;
constexpr CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_StartRecording_RequestDefaultTypeInternal {
  constexpr CGameRecording_StartRecording_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StartRecording_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_StartRecording_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StartRecording_RequestDefaultTypeInternal _CGameRecording_StartRecording_Request_default_instance_;
constexpr CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_StartRecording_ResponseDefaultTypeInternal {
  constexpr CGameRecording_StartRecording_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StartRecording_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_StartRecording_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StartRecording_ResponseDefaultTypeInternal _CGameRecording_StartRecording_Response_default_instance_;
constexpr CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_StopRecording_RequestDefaultTypeInternal {
  constexpr CGameRecording_StopRecording_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StopRecording_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_StopRecording_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StopRecording_RequestDefaultTypeInternal _CGameRecording_StopRecording_Request_default_instance_;
constexpr CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_StopRecording_ResponseDefaultTypeInternal {
  constexpr CGameRecording_StopRecording_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_StopRecording_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_StopRecording_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_StopRecording_ResponseDefaultTypeInternal _CGameRecording_StopRecording_Response_default_instance_;
constexpr CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetRecordingSize_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetRecordingSize_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetRecordingSize_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetRecordingSize_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetRecordingSize_RequestDefaultTypeInternal _CGameRecording_GetRecordingSize_Request_default_instance_;
constexpr CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_size_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetRecordingSize_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal _CGameRecording_GetRecordingSize_Response_default_instance_;
constexpr CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal {
  constexpr CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_CleanupBackgroundRecordings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Request_default_instance_;
constexpr CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal {
  constexpr CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_CleanupBackgroundRecordings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Response_default_instance_;
constexpr CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetPlatformCapabilities_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Request_default_instance_;
constexpr CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_process_audio_capture_(false){}
struct CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetPlatformCapabilities_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Response_default_instance_;
constexpr CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CGameRecording_ClipCreated_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ClipCreated_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipCreated_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ClipCreated_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipCreated_NotificationDefaultTypeInternal _CGameRecording_ClipCreated_Notification_default_instance_;
constexpr CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_ClipDeleted_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ClipDeleted_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ClipDeleted_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ClipDeleted_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ClipDeleted_NotificationDefaultTypeInternal _CGameRecording_ClipDeleted_Notification_default_instance_;
constexpr CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0)
  , eresult_(0){}
struct CGameRecording_ExportProgress_NotificationDefaultTypeInternal {
  constexpr CGameRecording_ExportProgress_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_ExportProgress_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_ExportProgress_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_ExportProgress_NotificationDefaultTypeInternal _CGameRecording_ExportProgress_Notification_default_instance_;
constexpr CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0)
  , eresult_(0){}
struct CGameRecording_UploadProgress_NotificationDefaultTypeInternal {
  constexpr CGameRecording_UploadProgress_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_UploadProgress_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_UploadProgress_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_UploadProgress_NotificationDefaultTypeInternal _CGameRecording_UploadProgress_Notification_default_instance_;
constexpr CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal {
  constexpr CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_SwitchBackgroundRecordingGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_;
constexpr CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal {
  constexpr CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_SwitchBackgroundRecordingGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineHighlightMarker_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineHighlightMarker_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineHighlightMarker_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineHighlightMarker_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineHighlightMarker_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineHighlightMarker_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineTimestamp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineTimestamp_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineTimestamp_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineTimestamp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineTimestamp_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineTimestamp_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeStart_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeStart_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeStart_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeStart_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeStart_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeStart_Response_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeEnd_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeEnd_RequestDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeEnd_Request_default_instance_;
constexpr CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_AddTimelineRangeEnd_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_AddTimelineRangeEnd_ResponseDefaultTypeInternal _CGameRecordingDebug_AddTimelineRangeEnd_Response_default_instance_;
constexpr CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , mode_(0u){}
struct CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal {
  constexpr CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_SetTimelineGameMode_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_SetTimelineGameMode_RequestDefaultTypeInternal _CGameRecordingDebug_SetTimelineGameMode_Request_default_instance_;
constexpr CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal {
  constexpr CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal() {}
  union {
    CGameRecordingDebug_SetTimelineGameMode_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingDebug_SetTimelineGameMode_ResponseDefaultTypeInternal _CGameRecordingDebug_SetTimelineGameMode_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fgamerecording_2eproto[73];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fgamerecording_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, most_recent_start_time_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, recording_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, video_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, timeline_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, is_active_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response_App, file_size_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetActiveTimelineApps_Response, apps_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForApp_Response, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Request, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTimelinesForClip_Response, first_timeline_start_offset_ms_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetEnoughDiskSpace_Response, enough_space_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAvailableDiskSpace_Response, size_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, notification_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, start_time_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineChanged_Notification, duration_ms_),
  4,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, notification_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, start_offset_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_RecordingSessionChanged_Notification, recording_type_),
  6,
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, time_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, type_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_id_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_title_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_duration_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, range_possible_clip_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, timestamp_title_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_icon_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_title_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_description_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, marker_priority_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, screenshot_handle_),
  PROTOBUF_FIELD_OFFSET(::CTimelineEntry, achievement_name_),
  0,
  8,
  9,
  10,
  11,
  1,
  2,
  12,
  13,
  3,
  4,
  5,
  6,
  14,
  15,
  7,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_TimelineEntryChanged_Notification, entry_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_LowDiskSpace_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_PostGameHighlightsChanged_Notification, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, start_timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, start_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, file_size_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_clipped_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, temporary_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, original_device_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, original_gaming_device_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, date_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipSummary, thumbnail_height_),
  0,
  5,
  6,
  9,
  1,
  7,
  8,
  11,
  2,
  10,
  12,
  3,
  13,
  14,
  4,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request_Position, offset_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, start_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, end_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, src_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Request, temporary_),
  4,
  2,
  3,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SaveClip_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Request, clip_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, bitrate_kbps_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, height_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Settings, frames_per_second_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, export_mp4_path_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Request, settings_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, desc_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Request, visibility_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadClipToSteam_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Request, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ZipClip_Response, zip_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, created_after_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Request, include_temporary_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetClips_Response, clip_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Request, created_after_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetAndTrimPostGameHighlights_Response, events_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, entry_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Request, clip_id_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserAddTimelineEntry_Response, entry_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, entry_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Request, clip_id_),
  2,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserUpdateTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Request, clip_id_),
  2,
  0,
  3,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UserRemoveTimelineEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Request, game_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ManuallyDeleteRecordingsForApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, folder_path_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Request, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetTotalDiskSpaceUsage_Response, size_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, start_offset_us_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, major_axis_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Request, time_precision_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, image_data_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response_Thumbnail, height_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetThumbnails_Response, thumbnails_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StartRecording_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Request, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_StopRecording_Response, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Request, game_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetRecordingSize_Response, file_size_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CleanupBackgroundRecordings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CleanupBackgroundRecordings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetPlatformCapabilities_Response, per_process_audio_capture_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipCreated_Notification, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ClipDeleted_Notification, game_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, progress_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_ExportProgress_Notification, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, progress_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_UploadProgress_Notification, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Request, game_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_SwitchBackgroundRecordingGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, icon_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Request, desc_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineHighlightMarker_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Request, title_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineTimestamp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Request, title_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeStart_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Request, id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_AddTimelineRangeEnd_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Request, mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingDebug_SetTimelineGameMode_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CGameRecording_GetActiveTimelineApps_Request)},
  { 5, 17, sizeof(::CGameRecording_GetActiveTimelineApps_Response_App)},
  { 24, -1, sizeof(::CGameRecording_GetActiveTimelineApps_Response)},
  { 30, 36, sizeof(::CGameRecording_GetTimelinesForApp_Request)},
  { 37, -1, sizeof(::CGameRecording_GetTimelinesForApp_Response)},
  { 43, 49, sizeof(::CGameRecording_GetTimelinesForClip_Request)},
  { 50, 58, sizeof(::CGameRecording_GetTimelinesForClip_Response)},
  { 61, -1, sizeof(::CGameRecording_GetEnoughDiskSpace_Request)},
  { 66, 72, sizeof(::CGameRecording_GetEnoughDiskSpace_Response)},
  { 73, -1, sizeof(::CGameRecording_GetAvailableDiskSpace_Request)},
  { 78, 84, sizeof(::CGameRecording_GetAvailableDiskSpace_Response)},
  { 85, 95, sizeof(::CGameRecording_TimelineChanged_Notification)},
  { 100, 112, sizeof(::CGameRecording_RecordingSessionChanged_Notification)},
  { 119, 140, sizeof(::CTimelineEntry)},
  { 156, 162, sizeof(::CGameRecording_TimelineEntryChanged_Notification)},
  { 163, -1, sizeof(::CGameRecording_LowDiskSpace_Notification)},
  { 168, 174, sizeof(::CGameRecording_PostGameHighlightsChanged_Notification)},
  { 175, 197, sizeof(::CGameRecording_ClipSummary)},
  { 214, 221, sizeof(::CGameRecording_SaveClip_Request_Position)},
  { 223, 234, sizeof(::CGameRecording_SaveClip_Request)},
  { 240, 246, sizeof(::CGameRecording_SaveClip_Response)},
  { 247, 253, sizeof(::CGameRecording_DeleteClip_Request)},
  { 254, -1, sizeof(::CGameRecording_DeleteClip_Response)},
  { 259, 268, sizeof(::CGameRecording_ExportClip_Settings)},
  { 272, 280, sizeof(::CGameRecording_ExportClip_Request)},
  { 283, -1, sizeof(::CGameRecording_ExportClip_Response)},
  { 288, 297, sizeof(::CGameRecording_UploadClipToSteam_Request)},
  { 301, 307, sizeof(::CGameRecording_UploadClipToSteam_Response)},
  { 308, 314, sizeof(::CGameRecording_ZipClip_Request)},
  { 315, 321, sizeof(::CGameRecording_ZipClip_Response)},
  { 322, 330, sizeof(::CGameRecording_GetClips_Request)},
  { 333, -1, sizeof(::CGameRecording_GetClips_Response)},
  { 339, 346, sizeof(::CGameRecording_GetAndTrimPostGameHighlights_Request)},
  { 348, -1, sizeof(::CGameRecording_GetAndTrimPostGameHighlights_Response)},
  { 354, 362, sizeof(::CGameRecording_UserAddTimelineEntry_Request)},
  { 365, 371, sizeof(::CGameRecording_UserAddTimelineEntry_Response)},
  { 372, 380, sizeof(::CGameRecording_UserUpdateTimelineEntry_Request)},
  { 383, -1, sizeof(::CGameRecording_UserUpdateTimelineEntry_Response)},
  { 388, 397, sizeof(::CGameRecording_UserRemoveTimelineEntry_Request)},
  { 401, -1, sizeof(::CGameRecording_UserRemoveTimelineEntry_Response)},
  { 406, -1, sizeof(::CGameRecording_ManuallyDeleteRecordingsForApps_Request)},
  { 412, -1, sizeof(::CGameRecording_ManuallyDeleteRecordingsForApps_Response)},
  { 417, 424, sizeof(::CGameRecording_GetTotalDiskSpaceUsage_Request)},
  { 426, 432, sizeof(::CGameRecording_GetTotalDiskSpaceUsage_Response)},
  { 433, 444, sizeof(::CGameRecording_GetThumbnails_Request)},
  { 450, 458, sizeof(::CGameRecording_GetThumbnails_Response_Thumbnail)},
  { 461, -1, sizeof(::CGameRecording_GetThumbnails_Response)},
  { 467, 473, sizeof(::CGameRecording_StartRecording_Request)},
  { 474, -1, sizeof(::CGameRecording_StartRecording_Response)},
  { 479, 485, sizeof(::CGameRecording_StopRecording_Request)},
  { 486, 492, sizeof(::CGameRecording_StopRecording_Response)},
  { 493, 499, sizeof(::CGameRecording_GetRecordingSize_Request)},
  { 500, 506, sizeof(::CGameRecording_GetRecordingSize_Response)},
  { 507, -1, sizeof(::CGameRecording_CleanupBackgroundRecordings_Request)},
  { 512, -1, sizeof(::CGameRecording_CleanupBackgroundRecordings_Response)},
  { 517, -1, sizeof(::CGameRecording_GetPlatformCapabilities_Request)},
  { 522, 528, sizeof(::CGameRecording_GetPlatformCapabilities_Response)},
  { 529, 535, sizeof(::CGameRecording_ClipCreated_Notification)},
  { 536, 543, sizeof(::CGameRecording_ClipDeleted_Notification)},
  { 545, 553, sizeof(::CGameRecording_ExportProgress_Notification)},
  { 556, 564, sizeof(::CGameRecording_UploadProgress_Notification)},
  { 567, 573, sizeof(::CGameRecording_SwitchBackgroundRecordingGame_Request)},
  { 574, -1, sizeof(::CGameRecording_SwitchBackgroundRecordingGame_Response)},
  { 579, 588, sizeof(::CGameRecordingDebug_AddTimelineHighlightMarker_Request)},
  { 592, -1, sizeof(::CGameRecordingDebug_AddTimelineHighlightMarker_Response)},
  { 597, 604, sizeof(::CGameRecordingDebug_AddTimelineTimestamp_Request)},
  { 606, -1, sizeof(::CGameRecordingDebug_AddTimelineTimestamp_Response)},
  { 611, 619, sizeof(::CGameRecordingDebug_AddTimelineRangeStart_Request)},
  { 622, -1, sizeof(::CGameRecordingDebug_AddTimelineRangeStart_Response)},
  { 627, 634, sizeof(::CGameRecordingDebug_AddTimelineRangeEnd_Request)},
  { 636, -1, sizeof(::CGameRecordingDebug_AddTimelineRangeEnd_Response)},
  { 641, 648, sizeof(::CGameRecordingDebug_SetTimelineGameMode_Request)},
  { 650, -1, sizeof(::CGameRecordingDebug_SetTimelineGameMode_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Response_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetActiveTimelineApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTimelinesForClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetEnoughDiskSpace_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetEnoughDiskSpace_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAvailableDiskSpace_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAvailableDiskSpace_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TimelineChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_RecordingSessionChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimelineEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_TimelineEntryChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_LowDiskSpace_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_PostGameHighlightsChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Request_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SaveClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadClipToSteam_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadClipToSteam_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ZipClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ZipClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetClips_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetClips_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserAddTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserAddTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserUpdateTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserUpdateTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserRemoveTimelineEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UserRemoveTimelineEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetThumbnails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StartRecording_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StartRecording_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StopRecording_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_StopRecording_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetRecordingSize_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetRecordingSize_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CleanupBackgroundRecordings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CleanupBackgroundRecordings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPlatformCapabilities_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetPlatformCapabilities_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipCreated_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ClipDeleted_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_ExportProgress_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_UploadProgress_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineHighlightMarker_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineHighlightMarker_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineTimestamp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineTimestamp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeStart_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeStart_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeEnd_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_AddTimelineRangeEnd_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_SetTimelineGameMode_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingDebug_SetTimelineGameMode_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fgamerecording_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!webuimessages_gamerecording.proto\032 goo"
  "gle/protobuf/descriptor.proto\032\013enums.pro"
  "to\032\030steammessages_base.proto\032\030webuimessa"
  "ges_base.proto\032&webuimessages_gamerecord"
  "ingfiles.proto\".\n,CGameRecording_GetActi"
  "veTimelineApps_Request\"\334\002\n-CGameRecordin"
  "g_GetActiveTimelineApps_Response\022@\n\004apps"
  "\030\001 \003(\01322.CGameRecording_GetActiveTimelin"
  "eApps_Response.App\032\350\001\n\003App\022\017\n\007game_id\030\001 "
  "\001(\004\022\036\n\026most_recent_start_time\030\002 \001(\r\022G\n\016r"
  "ecording_type\030\003 \001(\0162\023.EGameRecordingType"
  ":\032EGameRecordingType_Unknown\022\036\n\026video_du"
  "ration_seconds\030\004 \001(\001\022!\n\031timeline_duratio"
  "n_seconds\030\005 \001(\001\022\021\n\tis_active\030\006 \001(\010\022\021\n\tfi"
  "le_size\030\007 \001(\004\"<\n)CGameRecording_GetTimel"
  "inesForApp_Request\022\017\n\007game_id\030\001 \001(\004\"`\n*C"
  "GameRecording_GetTimelinesForApp_Respons"
  "e\0222\n\ttimelines\030\001 \003(\0132\037.CGameRecordingTim"
  "elineMetadata\"=\n*CGameRecording_GetTimel"
  "inesForClip_Request\022\017\n\007clip_id\030\001 \001(\t\"\232\001\n"
  "+CGameRecording_GetTimelinesForClip_Resp"
  "onse\022\017\n\007game_id\030\001 \001(\004\0222\n\ttimelines\030\002 \003(\013"
  "2\037.CGameRecordingTimelineMetadata\022&\n\036fir"
  "st_timeline_start_offset_ms\030\003 \001(\004\"+\n)CGa"
  "meRecording_GetEnoughDiskSpace_Request\"B"
  "\n*CGameRecording_GetEnoughDiskSpace_Resp"
  "onse\022\024\n\014enough_space\030\001 \001(\010\".\n,CGameRecor"
  "ding_GetAvailableDiskSpace_Request\"=\n-CG"
  "ameRecording_GetAvailableDiskSpace_Respo"
  "nse\022\014\n\004size\030\001 \001(\001\"\342\001\n+CGameRecording_Tim"
  "elineChanged_Notification\022d\n\021notificatio"
  "n_type\030\001 \001(\0162 .ETimelineChangeNotificati"
  "onType:\'ETimelineChangeNotificationType_"
  "Started\022\023\n\013timeline_id\030\002 \001(\t\022\017\n\007game_id\030"
  "\003 \001(\004\022\022\n\nstart_time\030\004 \001(\r\022\023\n\013duration_ms"
  "\030\005 \001(\004\"\331\002\n3CGameRecording_RecordingSessi"
  "onChanged_Notification\022t\n\021notification_t"
  "ype\030\001 \001(\0162(.ERecordingSessionChangeNotif"
  "icationType:/ERecordingSessionChangeNoti"
  "ficationType_Started\022\023\n\013timeline_id\030\002 \001("
  "\t\022\017\n\007game_id\030\004 \001(\004\022\022\n\nsession_id\030\005 \001(\t\022\024"
  "\n\014start_offset\030\006 \001(\004\022\023\n\013duration_ms\030\007 \001("
  "\004\022G\n\016recording_type\030\010 \001(\0162\023.EGameRecordi"
  "ngType:\032EGameRecordingType_Unknown\"\241\003\n\016C"
  "TimelineEntry\022\023\n\013timeline_id\030\001 \001(\t\022\020\n\010en"
  "try_id\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\022=\n\004type\030\004 \001(\016"
  "2\023.ETimelineEntryType:\032ETimelineEntryTyp"
  "e_Invalid\022\021\n\tgame_mode\030\005 \001(\005\022\020\n\010range_id"
  "\030\006 \001(\t\022\023\n\013range_title\030\007 \001(\t\022\026\n\016range_dur"
  "ation\030\010 \001(\004\022\033\n\023range_possible_clip\030\t \001(\005"
  "\022\027\n\017timestamp_title\030\n \001(\t\022\023\n\013marker_icon"
  "\030\013 \001(\t\022\024\n\014marker_title\030\014 \001(\t\022\032\n\022marker_d"
  "escription\030\r \001(\t\022\027\n\017marker_priority\030\016 \001("
  "\005\022\031\n\021screenshot_handle\030\017 \001(\r\022\030\n\020achievem"
  "ent_name\030\020 \001(\t\"R\n0CGameRecording_Timelin"
  "eEntryChanged_Notification\022\036\n\005entry\030\001 \001("
  "\0132\017.CTimelineEntry\"*\n(CGameRecording_Low"
  "DiskSpace_Notification\"H\n5CGameRecording"
  "_PostGameHighlightsChanged_Notification\022"
  "\017\n\007game_id\030\001 \001(\004\"\244\003\n\032CGameRecording_Clip"
  "Summary\022\017\n\007clip_id\030\001 \001(\t\022\017\n\007game_id\030\002 \001("
  "\004\022\023\n\013duration_ms\030\003 \001(\004\022\025\n\rdate_recorded\030"
  "\004 \001(\r\022\031\n\021start_timeline_id\030\005 \001(\t\022\027\n\017star"
  "t_offset_ms\030\006 \001(\004\022\031\n\021published_file_id\030\007"
  " \001(\004\022\021\n\tfile_size\030\010 \001(\004\022\014\n\004name\030\t \001(\t\022\024\n"
  "\014date_clipped\030\n \001(\r\022\021\n\ttemporary\030\013 \001(\010\022\027"
  "\n\017original_device\030\014 \001(\t\022#\n\033original_gami"
  "ng_device_type\030\r \001(\r\022\027\n\017date_downloaded\030"
  "\016 \001(\r\022\025\n\rthumbnail_url\030\017 \001(\t\022\027\n\017thumbnai"
  "l_width\030\020 \001(\r\022\030\n\020thumbnail_height\030\021 \001(\r\""
  "\216\002\n\037CGameRecording_SaveClip_Request\022\017\n\007g"
  "ame_id\030\001 \001(\004\0228\n\005start\030\002 \001(\0132).CGameRecor"
  "ding_SaveClip_Request.Position\0226\n\003end\030\003 "
  "\001(\0132).CGameRecording_SaveClip_Request.Po"
  "sition\022\014\n\004name\030\004 \001(\t\022\023\n\013src_clip_id\030\005 \001("
  "\t\022\021\n\ttemporary\030\006 \001(\010\0322\n\010Position\022\023\n\013time"
  "line_id\030\001 \001(\t\022\021\n\toffset_ms\030\002 \001(\004\"P\n CGam"
  "eRecording_SaveClip_Response\022,\n\007summary\030"
  "\001 \001(\0132\033.CGameRecording_ClipSummary\"4\n!CG"
  "ameRecording_DeleteClip_Request\022\017\n\007clip_"
  "id\030\001 \001(\t\"$\n\"CGameRecording_DeleteClip_Re"
  "sponse\"t\n\"CGameRecording_ExportClip_Sett"
  "ings\022\024\n\014bitrate_kbps\030\001 \001(\005\022\r\n\005width\030\002 \001("
  "\005\022\016\n\006height\030\003 \001(\005\022\031\n\021frames_per_second\030\004"
  " \001(\005\"\204\001\n!CGameRecording_ExportClip_Reque"
  "st\022\017\n\007clip_id\030\001 \001(\t\022\027\n\017export_mp4_path\030\002"
  " \001(\t\0225\n\010settings\030\003 \001(\0132#.CGameRecording_"
  "ExportClip_Settings\"$\n\"CGameRecording_Ex"
  "portClip_Response\"l\n(CGameRecording_Uplo"
  "adClipToSteam_Request\022\017\n\007clip_id\030\001 \001(\t\022\r"
  "\n\005title\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\022\n\nvisibilit"
  "y\030\004 \001(\005\"Y\n)CGameRecording_UploadClipToSt"
  "eam_Response\022,\n\007summary\030\001 \001(\0132\033.CGameRec"
  "ording_ClipSummary\"1\n\036CGameRecording_Zip"
  "Clip_Request\022\017\n\007clip_id\030\001 \001(\t\"3\n\037CGameRe"
  "cording_ZipClip_Response\022\020\n\010zip_path\030\001 \001"
  "(\t\"d\n\037CGameRecording_GetClips_Request\022\017\n"
  "\007game_id\030\001 \001(\004\022\025\n\rcreated_after\030\002 \001(\r\022\031\n"
  "\021include_temporary\030\003 \001(\010\"M\n CGameRecordi"
  "ng_GetClips_Response\022)\n\004clip\030\001 \003(\0132\033.CGa"
  "meRecording_ClipSummary\"]\n3CGameRecordin"
  "g_GetAndTrimPostGameHighlights_Request\022\017"
  "\n\007game_id\030\001 \001(\004\022\025\n\rcreated_after\030\002 \001(\r\"d"
  "\n4CGameRecording_GetAndTrimPostGameHighl"
  "ights_Response\022,\n\006events\030\001 \003(\0132\034.CGameRe"
  "cordingTimelineEvent\"o\n+CGameRecording_U"
  "serAddTimelineEntry_Request\022\017\n\007game_id\030\001"
  " \001(\004\022\036\n\005entry\030\002 \001(\0132\017.CTimelineEntry\022\017\n\007"
  "clip_id\030\003 \001(\t\"@\n,CGameRecording_UserAddT"
  "imelineEntry_Response\022\020\n\010entry_id\030\001 \001(\004\""
  "r\n.CGameRecording_UserUpdateTimelineEntr"
  "y_Request\022\017\n\007game_id\030\001 \001(\004\022\036\n\005entry\030\002 \001("
  "\0132\017.CTimelineEntry\022\017\n\007clip_id\030\003 \001(\t\"1\n/C"
  "GameRecording_UserUpdateTimelineEntry_Re"
  "sponse\"y\n.CGameRecording_UserRemoveTimel"
  "ineEntry_Request\022\017\n\007game_id\030\001 \001(\004\022\023\n\013tim"
  "eline_id\030\002 \001(\t\022\020\n\010entry_id\030\003 \001(\004\022\017\n\007clip"
  "_id\030\004 \001(\t\"1\n/CGameRecording_UserRemoveTi"
  "melineEntry_Response\"J\n6CGameRecording_M"
  "anuallyDeleteRecordingsForApps_Request\022\020"
  "\n\010game_ids\030\001 \003(\004\"9\n7CGameRecording_Manua"
  "llyDeleteRecordingsForApps_Response\"}\n-C"
  "GameRecording_GetTotalDiskSpaceUsage_Req"
  "uest\022\023\n\013folder_path\030\001 \001(\t\0227\n\004type\030\002 \001(\0162"
  "\017.EDiskSpaceType:\030eDiskSpaceType_Recordi"
  "ng\">\n.CGameRecording_GetTotalDiskSpaceUs"
  "age_Response\022\014\n\004size\030\001 \001(\004\"\320\001\n$CGameReco"
  "rding_GetThumbnails_Request\022\024\n\014recording"
  "_id\030\001 \001(\t\022\017\n\007clip_id\030\003 \001(\t\022\023\n\013timeline_i"
  "d\030\007 \001(\t\022\027\n\017start_offset_us\030\004 \003(\003\022\027\n\nmajo"
  "r_axis\030\005 \001(\r:\003512\022:\n\016time_precision\030\006 \001("
  "\0162\030.EThumbnailTimePrecision:\010ePrecise\"\255\001"
  "\n%CGameRecording_GetThumbnails_Response\022"
  "D\n\nthumbnails\030\001 \003(\01320.CGameRecording_Get"
  "Thumbnails_Response.Thumbnail\032>\n\tThumbna"
  "il\022\022\n\nimage_data\030\001 \001(\014\022\r\n\005width\030\002 \001(\r\022\016\n"
  "\006height\030\003 \001(\r\"8\n%CGameRecording_StartRec"
  "ording_Request\022\017\n\007game_id\030\001 \001(\004\"(\n&CGame"
  "Recording_StartRecording_Response\"7\n$CGa"
  "meRecording_StopRecording_Request\022\017\n\007gam"
  "e_id\030\001 \001(\004\"U\n%CGameRecording_StopRecordi"
  "ng_Response\022,\n\007summary\030\001 \001(\0132\033.CGameReco"
  "rding_ClipSummary\":\n\'CGameRecording_GetR"
  "ecordingSize_Request\022\017\n\007game_id\030\001 \001(\004\"=\n"
  "(CGameRecording_GetRecordingSize_Respons"
  "e\022\021\n\tfile_size\030\001 \001(\004\"4\n2CGameRecording_C"
  "leanupBackgroundRecordings_Request\"5\n3CG"
  "ameRecording_CleanupBackgroundRecordings"
  "_Response\"0\n.CGameRecording_GetPlatformC"
  "apabilities_Request\"T\n/CGameRecording_Ge"
  "tPlatformCapabilities_Response\022!\n\031per_pr"
  "ocess_audio_capture\030\001 \001(\010\"W\n\'CGameRecord"
  "ing_ClipCreated_Notification\022,\n\007summary\030"
  "\001 \001(\0132\033.CGameRecording_ClipSummary\"K\n\'CG"
  "ameRecording_ClipDeleted_Notification\022\017\n"
  "\007clip_id\030\001 \001(\t\022\017\n\007game_id\030\002 \001(\004\"`\n*CGame"
  "Recording_ExportProgress_Notification\022\020\n"
  "\010progress\030\001 \001(\002\022\017\n\007clip_id\030\002 \001(\t\022\017\n\007eres"
  "ult\030\003 \001(\005\"`\n*CGameRecording_UploadProgre"
  "ss_Notification\022\020\n\010progress\030\001 \001(\002\022\017\n\007cli"
  "p_id\030\002 \001(\t\022\017\n\007eresult\030\003 \001(\005\"G\n4CGameReco"
  "rding_SwitchBackgroundRecordingGame_Requ"
  "est\022\017\n\007game_id\030\001 \001(\004\"7\n5CGameRecording_S"
  "witchBackgroundRecordingGame_Response\"r\n"
  "6CGameRecordingDebug_AddTimelineHighligh"
  "tMarker_Request\022\r\n\005appid\030\001 \001(\r\022\014\n\004icon\030\002"
  " \001(\t\022\r\n\005title\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\"9\n7CGa"
  "meRecordingDebug_AddTimelineHighlightMar"
  "ker_Response\"P\n0CGameRecordingDebug_AddT"
  "imelineTimestamp_Request\022\r\n\005appid\030\001 \001(\r\022"
  "\r\n\005title\030\002 \001(\t\"3\n1CGameRecordingDebug_Ad"
  "dTimelineTimestamp_Response\"]\n1CGameReco"
  "rdingDebug_AddTimelineRangeStart_Request"
  "\022\r\n\005appid\030\001 \001(\r\022\n\n\002id\030\002 \001(\t\022\r\n\005title\030\003 \001"
  "(\t\"4\n2CGameRecordingDebug_AddTimelineRan"
  "geStart_Response\"L\n/CGameRecordingDebug_"
  "AddTimelineRangeEnd_Request\022\r\n\005appid\030\001 \001"
  "(\r\022\n\n\002id\030\002 \001(\t\"2\n0CGameRecordingDebug_Ad"
  "dTimelineRangeEnd_Response\"N\n/CGameRecor"
  "dingDebug_SetTimelineGameMode_Request\022\r\n"
  "\005appid\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\"2\n0CGameRecor"
  "dingDebug_SetTimelineGameMode_Response*\244"
  "\002\n\022ETimelineEntryType\022\036\n\032ETimelineEntryT"
  "ype_Invalid\020\000\022\037\n\033ETimelineEntryType_Game"
  "Mode\020\001\022\034\n\030ETimelineEntryType_Event\020\002\022\'\n#"
  "ETimelineEntryType_StateDescription\020\003\022\"\n"
  "\036ETimelineEntryType_Achievement\020\004\022!\n\035ETi"
  "melineEntryType_UserMarker\020\005\022!\n\035ETimelin"
  "eEntryType_Screenshot\020\006\022\034\n\030ETimelineEntr"
  "yType_Error\020\007*\312\002\n\037ETimelineChangeNotific"
  "ationType\022+\n\'ETimelineChangeNotification"
  "Type_Started\020\001\022+\n\'ETimelineChangeNotific"
  "ationType_Stopped\020\002\022+\n\'ETimelineChangeNo"
  "tificationType_Deleted\020\003\0224\n0ETimelineCha"
  "ngeNotificationType_RecordingStarted\020\004\0224"
  "\n0ETimelineChangeNotificationType_Record"
  "ingStopped\020\005\0224\n0ETimelineChangeNotificat"
  "ionType_RecordingUpdated\020\006*\375\001\n\'ERecordin"
  "gSessionChangeNotificationType\0223\n/ERecor"
  "dingSessionChangeNotificationType_Starte"
  "d\020\001\0223\n/ERecordingSessionChangeNotificati"
  "onType_Stopped\020\002\0223\n/ERecordingSessionCha"
  "ngeNotificationType_Deleted\020\003\0223\n/ERecord"
  "ingSessionChangeNotificationType_Updated"
  "\020\004*G\n\016EDiskSpaceType\022\034\n\030eDiskSpaceType_R"
  "ecording\020\000\022\027\n\023eDiskSpaceType_Clip\020\001*3\n\027E"
  "ThumbnailTimePrecision\022\014\n\010ePrecise\020\000\022\n\n\006"
  "eLoose\020\0012\331\033\n\rGameRecording\022v\n\025GetActiveT"
  "imelineApps\022-.CGameRecording_GetActiveTi"
  "melineApps_Request\032..CGameRecording_GetA"
  "ctiveTimelineApps_Response\022m\n\022GetTimelin"
  "esForApp\022*.CGameRecording_GetTimelinesFo"
  "rApp_Request\032+.CGameRecording_GetTimelin"
  "esForApp_Response\022p\n\023GetTimelinesForClip"
  "\022+.CGameRecording_GetTimelinesForClip_Re"
  "quest\032,.CGameRecording_GetTimelinesForCl"
  "ip_Response\022m\n\022GetEnoughDiskSpace\022*.CGam"
  "eRecording_GetEnoughDiskSpace_Request\032+."
  "CGameRecording_GetEnoughDiskSpace_Respon"
  "se\022v\n\025GetAvailableDiskSpace\022-.CGameRecor"
  "ding_GetAvailableDiskSpace_Request\032..CGa"
  "meRecording_GetAvailableDiskSpace_Respon"
  "se\022O\n\010SaveClip\022 .CGameRecording_SaveClip"
  "_Request\032!.CGameRecording_SaveClip_Respo"
  "nse\022U\n\nDeleteClip\022\".CGameRecording_Delet"
  "eClip_Request\032#.CGameRecording_DeleteCli"
  "p_Response\022O\n\010GetClips\022 .CGameRecording_"
  "GetClips_Request\032!.CGameRecording_GetCli"
  "ps_Response\022j\n\021UploadClipToSteam\022).CGame"
  "Recording_UploadClipToSteam_Request\032*.CG"
  "ameRecording_UploadClipToSteam_Response\022"
  "U\n\nExportClip\022\".CGameRecording_ExportCli"
  "p_Request\032#.CGameRecording_ExportClip_Re"
  "sponse\022L\n\007ZipClip\022\037.CGameRecording_ZipCl"
  "ip_Request\032 .CGameRecording_ZipClip_Resp"
  "onse\022a\n\016StartRecording\022&.CGameRecording_"
  "StartRecording_Request\032\'.CGameRecording_"
  "StartRecording_Response\022^\n\rStopRecording"
  "\022%.CGameRecording_StopRecording_Request\032"
  "&.CGameRecording_StopRecording_Response\022"
  "u\n\036GetBackgroundRecordingFileSize\022(.CGam"
  "eRecording_GetRecordingSize_Request\032).CG"
  "ameRecording_GetRecordingSize_Response\022\210"
  "\001\n\033CleanupBackgroundRecordings\0223.CGameRe"
  "cording_CleanupBackgroundRecordings_Requ"
  "est\0324.CGameRecording_CleanupBackgroundRe"
  "cordings_Response\022\213\001\n\034GetAndTrimPostGame"
  "Highlights\0224.CGameRecording_GetAndTrimPo"
  "stGameHighlights_Request\0325.CGameRecordin"
  "g_GetAndTrimPostGameHighlights_Response\022"
  "^\n\rGetThumbnails\022%.CGameRecording_GetThu"
  "mbnails_Request\032&.CGameRecording_GetThum"
  "bnails_Response\022|\n\027GetPlatformCapabiliti"
  "es\022/.CGameRecording_GetPlatformCapabilit"
  "ies_Request\0320.CGameRecording_GetPlatform"
  "Capabilities_Response\022W\n\025NotifyTimelineC"
  "hanged\022,.CGameRecording_TimelineChanged_"
  "Notification\032\020.WebUINoResponse\022g\n\035Notify"
  "RecordingSessionChanged\0224.CGameRecording"
  "_RecordingSessionChanged_Notification\032\020."
  "WebUINoResponse\022a\n\032NotifyTimelineEntryCh"
  "anged\0221.CGameRecording_TimelineEntryChan"
  "ged_Notification\032\020.WebUINoResponse\022O\n\021No"
  "tifyClipCreated\022(.CGameRecording_ClipCre"
  "ated_Notification\032\020.WebUINoResponse\022O\n\021N"
  "otifyClipDeleted\022(.CGameRecording_ClipDe"
  "leted_Notification\032\020.WebUINoResponse\022U\n\024"
  "NotifyExportProgress\022+.CGameRecording_Ex"
  "portProgress_Notification\032\020.WebUINoRespo"
  "nse\022U\n\024NotifyUploadProgress\022+.CGameRecor"
  "ding_UploadProgress_Notification\032\020.WebUI"
  "NoResponse\022Q\n\022NotifyLowDiskSpace\022).CGame"
  "Recording_LowDiskSpace_Notification\032\020.We"
  "bUINoResponse\022k\n\037NotifyPostGameHighlight"
  "sChanged\0226.CGameRecording_PostGameHighli"
  "ghtsChanged_Notification\032\020.WebUINoRespon"
  "se\022s\n\024UserAddTimelineEntry\022,.CGameRecord"
  "ing_UserAddTimelineEntry_Request\032-.CGame"
  "Recording_UserAddTimelineEntry_Response\022"
  "|\n\027UserUpdateTimelineEntry\022/.CGameRecord"
  "ing_UserUpdateTimelineEntry_Request\0320.CG"
  "ameRecording_UserUpdateTimelineEntry_Res"
  "ponse\022|\n\027UserRemoveTimelineEntry\022/.CGame"
  "Recording_UserRemoveTimelineEntry_Reques"
  "t\0320.CGameRecording_UserRemoveTimelineEnt"
  "ry_Response\022\224\001\n\037ManuallyDeleteRecordings"
  "ForApps\0227.CGameRecording_ManuallyDeleteR"
  "ecordingsForApps_Request\0328.CGameRecordin"
  "g_ManuallyDeleteRecordingsForApps_Respon"
  "se\022y\n\026GetTotalDiskSpaceUsage\022..CGameReco"
  "rding_GetTotalDiskSpaceUsage_Request\032/.C"
  "GameRecording_GetTotalDiskSpaceUsage_Res"
  "ponse\022\216\001\n\035SwitchBackgroundRecordingGame\022"
  "5.CGameRecording_SwitchBackgroundRecordi"
  "ngGame_Request\0326.CGameRecording_SwitchBa"
  "ckgroundRecordingGame_Response\032\004\200\227\"\0012\246\005\n"
  "\022GameRecordingDebug\022\217\001\n\032AddTimelineHighl"
  "ightMarker\0227.CGameRecordingDebug_AddTime"
  "lineHighlightMarker_Request\0328.CGameRecor"
  "dingDebug_AddTimelineHighlightMarker_Res"
  "ponse\022}\n\024AddTimelineTimestamp\0221.CGameRec"
  "ordingDebug_AddTimelineTimestamp_Request"
  "\0322.CGameRecordingDebug_AddTimelineTimest"
  "amp_Response\022\200\001\n\025AddTimelineRangeStart\0222"
  ".CGameRecordingDebug_AddTimelineRangeSta"
  "rt_Request\0323.CGameRecordingDebug_AddTime"
  "lineRangeStart_Response\022z\n\023AddTimelineRa"
  "ngeEnd\0220.CGameRecordingDebug_AddTimeline"
  "RangeEnd_Request\0321.CGameRecordingDebug_A"
  "ddTimelineRangeEnd_Response\022z\n\023SetTimeli"
  "neGameMode\0220.CGameRecordingDebug_SetTime"
  "lineGameMode_Request\0321.CGameRecordingDeb"
  "ug_SetTimelineGameMode_Response\032\004\200\227\"\001B\037H"
  "\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fgamerecording_2eproto_deps[5] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fgamerecording_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamerecording_2eproto = {
  false, false, 12550, descriptor_table_protodef_webuimessages_5fgamerecording_2eproto, "webuimessages_gamerecording.proto", 
  &descriptor_table_webuimessages_5fgamerecording_2eproto_once, descriptor_table_webuimessages_5fgamerecording_2eproto_deps, 5, 73,
  schemas, file_default_instances, TableStruct_webuimessages_5fgamerecording_2eproto::offsets,
  file_level_metadata_webuimessages_5fgamerecording_2eproto, file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto, file_level_service_descriptors_webuimessages_5fgamerecording_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return descriptor_table_webuimessages_5fgamerecording_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fgamerecording_2eproto(&descriptor_table_webuimessages_5fgamerecording_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineEntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[0];
}
bool ETimelineEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineChangeNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[1];
}
bool ETimelineChangeNotificationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERecordingSessionChangeNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[2];
}
bool ERecordingSessionChangeNotificationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDiskSpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[3];
}
bool EDiskSpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EThumbnailTimePrecision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_enum_descriptors_webuimessages_5fgamerecording_2eproto[4];
}
bool EThumbnailTimePrecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Request::_Internal {
 public:
};

CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Request)
}
CGameRecording_GetActiveTimelineApps_Request::CGameRecording_GetActiveTimelineApps_Request(const CGameRecording_GetActiveTimelineApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Request)
}

void CGameRecording_GetActiveTimelineApps_Request::SharedCtor() {
}

CGameRecording_GetActiveTimelineApps_Request::~CGameRecording_GetActiveTimelineApps_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Request::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Request* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Request* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Request)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Request::MergeFrom(const CGameRecording_GetActiveTimelineApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetActiveTimelineApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Request::CopyFrom(const CGameRecording_GetActiveTimelineApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Request::InternalSwap(CGameRecording_GetActiveTimelineApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Response_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetActiveTimelineApps_Response_App>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_most_recent_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recording_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Response.App)
}
CGameRecording_GetActiveTimelineApps_Response_App::CGameRecording_GetActiveTimelineApps_Response_App(const CGameRecording_GetActiveTimelineApps_Response_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Response.App)
}

void CGameRecording_GetActiveTimelineApps_Response_App::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
}

CGameRecording_GetActiveTimelineApps_Response_App::~CGameRecording_GetActiveTimelineApps_Response_App() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Response.App)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Response_App::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Response_App::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Response_App* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Response_App* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Response_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Response_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_active_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(is_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Response_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 most_recent_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_most_recent_start_time(&has_bits);
          most_recent_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameRecordingType_IsValid(val))) {
            _internal_set_recording_type(static_cast<::EGameRecordingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double video_duration_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_video_duration_seconds(&has_bits);
          video_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double timeline_duration_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_timeline_duration_seconds(&has_bits);
          timeline_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Response_App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 most_recent_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_most_recent_start_time(), target);
  }

  // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_recording_type(), target);
  }

  // optional double video_duration_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_video_duration_seconds(), target);
  }

  // optional double timeline_duration_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_timeline_duration_seconds(), target);
  }

  // optional bool is_active = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_active(), target);
  }

  // optional uint64 file_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Response.App)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Response.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 most_recent_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_most_recent_start_time());
    }

    // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_type());
    }

    // optional double video_duration_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double timeline_duration_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 file_size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional bool is_active = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Response_App::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Response_App* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Response_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Response.App)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Response.App)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Response_App::MergeFrom(const CGameRecording_GetActiveTimelineApps_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      most_recent_start_time_ = from.most_recent_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      recording_type_ = from.recording_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_duration_seconds_ = from.video_duration_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeline_duration_seconds_ = from.timeline_duration_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_active_ = from.is_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetActiveTimelineApps_Response_App::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Response_App::CopyFrom(const CGameRecording_GetActiveTimelineApps_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Response_App::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Response_App::InternalSwap(CGameRecording_GetActiveTimelineApps_Response_App* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetActiveTimelineApps_Response_App, is_active_)
      + sizeof(CGameRecording_GetActiveTimelineApps_Response_App::is_active_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetActiveTimelineApps_Response_App, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Response_App::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetActiveTimelineApps_Response::_Internal {
 public:
};

CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetActiveTimelineApps_Response)
}
CGameRecording_GetActiveTimelineApps_Response::CGameRecording_GetActiveTimelineApps_Response(const CGameRecording_GetActiveTimelineApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetActiveTimelineApps_Response)
}

void CGameRecording_GetActiveTimelineApps_Response::SharedCtor() {
}

CGameRecording_GetActiveTimelineApps_Response::~CGameRecording_GetActiveTimelineApps_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetActiveTimelineApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetActiveTimelineApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetActiveTimelineApps_Response::ArenaDtor(void* object) {
  CGameRecording_GetActiveTimelineApps_Response* _this = reinterpret_cast< CGameRecording_GetActiveTimelineApps_Response* >(object);
  (void)_this;
}
void CGameRecording_GetActiveTimelineApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetActiveTimelineApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetActiveTimelineApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetActiveTimelineApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetActiveTimelineApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetActiveTimelineApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetActiveTimelineApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetActiveTimelineApps_Response)
  return target;
}

size_t CGameRecording_GetActiveTimelineApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetActiveTimelineApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_GetActiveTimelineApps_Response.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetActiveTimelineApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetActiveTimelineApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetActiveTimelineApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetActiveTimelineApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetActiveTimelineApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetActiveTimelineApps_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetActiveTimelineApps_Response::MergeFrom(const CGameRecording_GetActiveTimelineApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetActiveTimelineApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void CGameRecording_GetActiveTimelineApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetActiveTimelineApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetActiveTimelineApps_Response::CopyFrom(const CGameRecording_GetActiveTimelineApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetActiveTimelineApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetActiveTimelineApps_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetActiveTimelineApps_Response::InternalSwap(CGameRecording_GetActiveTimelineApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetActiveTimelineApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForApp_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForApp_Request)
}
CGameRecording_GetTimelinesForApp_Request::CGameRecording_GetTimelinesForApp_Request(const CGameRecording_GetTimelinesForApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForApp_Request)
}

void CGameRecording_GetTimelinesForApp_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetTimelinesForApp_Request::~CGameRecording_GetTimelinesForApp_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForApp_Request::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForApp_Request* _this = reinterpret_cast< CGameRecording_GetTimelinesForApp_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForApp_Request)
  return target;
}

size_t CGameRecording_GetTimelinesForApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForApp_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForApp_Request::MergeFrom(const CGameRecording_GetTimelinesForApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_GetTimelinesForApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForApp_Request::CopyFrom(const CGameRecording_GetTimelinesForApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForApp_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForApp_Request::InternalSwap(CGameRecording_GetTimelinesForApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForApp_Response::_Internal {
 public:
};

void CGameRecording_GetTimelinesForApp_Response::clear_timelines() {
  timelines_.Clear();
}
CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForApp_Response)
}
CGameRecording_GetTimelinesForApp_Response::CGameRecording_GetTimelinesForApp_Response(const CGameRecording_GetTimelinesForApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timelines_(from.timelines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForApp_Response)
}

void CGameRecording_GetTimelinesForApp_Response::SharedCtor() {
}

CGameRecording_GetTimelinesForApp_Response::~CGameRecording_GetTimelinesForApp_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForApp_Response::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForApp_Response* _this = reinterpret_cast< CGameRecording_GetTimelinesForApp_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineMetadata timelines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_timelines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForApp_Response)
  return target;
}

size_t CGameRecording_GetTimelinesForApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForApp_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForApp_Response::MergeFrom(const CGameRecording_GetTimelinesForApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
}

void CGameRecording_GetTimelinesForApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForApp_Response::CopyFrom(const CGameRecording_GetTimelinesForApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForApp_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForApp_Response::InternalSwap(CGameRecording_GetTimelinesForApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timelines_.InternalSwap(&other->timelines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForClip_Request)
}
CGameRecording_GetTimelinesForClip_Request::CGameRecording_GetTimelinesForClip_Request(const CGameRecording_GetTimelinesForClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForClip_Request)
}

void CGameRecording_GetTimelinesForClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_GetTimelinesForClip_Request::~CGameRecording_GetTimelinesForClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetTimelinesForClip_Request::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForClip_Request* _this = reinterpret_cast< CGameRecording_GetTimelinesForClip_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetTimelinesForClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetTimelinesForClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForClip_Request)
  return target;
}

size_t CGameRecording_GetTimelinesForClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForClip_Request::MergeFrom(const CGameRecording_GetTimelinesForClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_GetTimelinesForClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForClip_Request::CopyFrom(const CGameRecording_GetTimelinesForClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForClip_Request::InternalSwap(CGameRecording_GetTimelinesForClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTimelinesForClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTimelinesForClip_Response>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_timeline_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CGameRecording_GetTimelinesForClip_Response::clear_timelines() {
  timelines_.Clear();
}
CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTimelinesForClip_Response)
}
CGameRecording_GetTimelinesForClip_Response::CGameRecording_GetTimelinesForClip_Response(const CGameRecording_GetTimelinesForClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timelines_(from.timelines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTimelinesForClip_Response)
}

void CGameRecording_GetTimelinesForClip_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
}

CGameRecording_GetTimelinesForClip_Response::~CGameRecording_GetTimelinesForClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTimelinesForClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTimelinesForClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTimelinesForClip_Response::ArenaDtor(void* object) {
  CGameRecording_GetTimelinesForClip_Response* _this = reinterpret_cast< CGameRecording_GetTimelinesForClip_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTimelinesForClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTimelinesForClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTimelinesForClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTimelinesForClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_timeline_start_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(first_timeline_start_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTimelinesForClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTimelineMetadata timelines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 first_timeline_start_offset_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_timeline_start_offset_ms(&has_bits);
          first_timeline_start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTimelinesForClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTimelinesForClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // repeated .CGameRecordingTimelineMetadata timelines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_timelines(i), target, stream);
  }

  // optional uint64 first_timeline_start_offset_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_first_timeline_start_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTimelinesForClip_Response)
  return target;
}

size_t CGameRecording_GetTimelinesForClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTimelinesForClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 2;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 first_timeline_start_offset_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_timeline_start_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTimelinesForClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTimelinesForClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTimelinesForClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTimelinesForClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTimelinesForClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTimelinesForClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTimelinesForClip_Response::MergeFrom(const CGameRecording_GetTimelinesForClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTimelinesForClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_timeline_start_offset_ms_ = from.first_timeline_start_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetTimelinesForClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTimelinesForClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTimelinesForClip_Response::CopyFrom(const CGameRecording_GetTimelinesForClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTimelinesForClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTimelinesForClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTimelinesForClip_Response::InternalSwap(CGameRecording_GetTimelinesForClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timelines_.InternalSwap(&other->timelines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetTimelinesForClip_Response, first_timeline_start_offset_ms_)
      + sizeof(CGameRecording_GetTimelinesForClip_Response::first_timeline_start_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetTimelinesForClip_Response, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTimelinesForClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetEnoughDiskSpace_Request::_Internal {
 public:
};

CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetEnoughDiskSpace_Request)
}
CGameRecording_GetEnoughDiskSpace_Request::CGameRecording_GetEnoughDiskSpace_Request(const CGameRecording_GetEnoughDiskSpace_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetEnoughDiskSpace_Request)
}

void CGameRecording_GetEnoughDiskSpace_Request::SharedCtor() {
}

CGameRecording_GetEnoughDiskSpace_Request::~CGameRecording_GetEnoughDiskSpace_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetEnoughDiskSpace_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetEnoughDiskSpace_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetEnoughDiskSpace_Request::ArenaDtor(void* object) {
  CGameRecording_GetEnoughDiskSpace_Request* _this = reinterpret_cast< CGameRecording_GetEnoughDiskSpace_Request* >(object);
  (void)_this;
}
void CGameRecording_GetEnoughDiskSpace_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetEnoughDiskSpace_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetEnoughDiskSpace_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetEnoughDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetEnoughDiskSpace_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetEnoughDiskSpace_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetEnoughDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetEnoughDiskSpace_Request)
  return target;
}

size_t CGameRecording_GetEnoughDiskSpace_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetEnoughDiskSpace_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetEnoughDiskSpace_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetEnoughDiskSpace_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetEnoughDiskSpace_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetEnoughDiskSpace_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetEnoughDiskSpace_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetEnoughDiskSpace_Request::MergeFrom(const CGameRecording_GetEnoughDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetEnoughDiskSpace_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetEnoughDiskSpace_Request::CopyFrom(const CGameRecording_GetEnoughDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetEnoughDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetEnoughDiskSpace_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetEnoughDiskSpace_Request::InternalSwap(CGameRecording_GetEnoughDiskSpace_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetEnoughDiskSpace_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetEnoughDiskSpace_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetEnoughDiskSpace_Response>()._has_bits_);
  static void set_has_enough_space(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetEnoughDiskSpace_Response)
}
CGameRecording_GetEnoughDiskSpace_Response::CGameRecording_GetEnoughDiskSpace_Response(const CGameRecording_GetEnoughDiskSpace_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enough_space_ = from.enough_space_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetEnoughDiskSpace_Response)
}

void CGameRecording_GetEnoughDiskSpace_Response::SharedCtor() {
enough_space_ = false;
}

CGameRecording_GetEnoughDiskSpace_Response::~CGameRecording_GetEnoughDiskSpace_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetEnoughDiskSpace_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetEnoughDiskSpace_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetEnoughDiskSpace_Response::ArenaDtor(void* object) {
  CGameRecording_GetEnoughDiskSpace_Response* _this = reinterpret_cast< CGameRecording_GetEnoughDiskSpace_Response* >(object);
  (void)_this;
}
void CGameRecording_GetEnoughDiskSpace_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetEnoughDiskSpace_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetEnoughDiskSpace_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetEnoughDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enough_space_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetEnoughDiskSpace_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enough_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enough_space(&has_bits);
          enough_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetEnoughDiskSpace_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetEnoughDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enough_space = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enough_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetEnoughDiskSpace_Response)
  return target;
}

size_t CGameRecording_GetEnoughDiskSpace_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetEnoughDiskSpace_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enough_space = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetEnoughDiskSpace_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetEnoughDiskSpace_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetEnoughDiskSpace_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetEnoughDiskSpace_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetEnoughDiskSpace_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetEnoughDiskSpace_Response::MergeFrom(const CGameRecording_GetEnoughDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enough_space()) {
    _internal_set_enough_space(from._internal_enough_space());
  }
}

void CGameRecording_GetEnoughDiskSpace_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetEnoughDiskSpace_Response::CopyFrom(const CGameRecording_GetEnoughDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetEnoughDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetEnoughDiskSpace_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetEnoughDiskSpace_Response::InternalSwap(CGameRecording_GetEnoughDiskSpace_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enough_space_, other->enough_space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetEnoughDiskSpace_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAvailableDiskSpace_Request::_Internal {
 public:
};

CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAvailableDiskSpace_Request)
}
CGameRecording_GetAvailableDiskSpace_Request::CGameRecording_GetAvailableDiskSpace_Request(const CGameRecording_GetAvailableDiskSpace_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAvailableDiskSpace_Request)
}

void CGameRecording_GetAvailableDiskSpace_Request::SharedCtor() {
}

CGameRecording_GetAvailableDiskSpace_Request::~CGameRecording_GetAvailableDiskSpace_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAvailableDiskSpace_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAvailableDiskSpace_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAvailableDiskSpace_Request::ArenaDtor(void* object) {
  CGameRecording_GetAvailableDiskSpace_Request* _this = reinterpret_cast< CGameRecording_GetAvailableDiskSpace_Request* >(object);
  (void)_this;
}
void CGameRecording_GetAvailableDiskSpace_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAvailableDiskSpace_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAvailableDiskSpace_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAvailableDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAvailableDiskSpace_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAvailableDiskSpace_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAvailableDiskSpace_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAvailableDiskSpace_Request)
  return target;
}

size_t CGameRecording_GetAvailableDiskSpace_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAvailableDiskSpace_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAvailableDiskSpace_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAvailableDiskSpace_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAvailableDiskSpace_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAvailableDiskSpace_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAvailableDiskSpace_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAvailableDiskSpace_Request::MergeFrom(const CGameRecording_GetAvailableDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetAvailableDiskSpace_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAvailableDiskSpace_Request::CopyFrom(const CGameRecording_GetAvailableDiskSpace_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAvailableDiskSpace_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAvailableDiskSpace_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetAvailableDiskSpace_Request::InternalSwap(CGameRecording_GetAvailableDiskSpace_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAvailableDiskSpace_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAvailableDiskSpace_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetAvailableDiskSpace_Response>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAvailableDiskSpace_Response)
}
CGameRecording_GetAvailableDiskSpace_Response::CGameRecording_GetAvailableDiskSpace_Response(const CGameRecording_GetAvailableDiskSpace_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAvailableDiskSpace_Response)
}

void CGameRecording_GetAvailableDiskSpace_Response::SharedCtor() {
size_ = 0;
}

CGameRecording_GetAvailableDiskSpace_Response::~CGameRecording_GetAvailableDiskSpace_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAvailableDiskSpace_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAvailableDiskSpace_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAvailableDiskSpace_Response::ArenaDtor(void* object) {
  CGameRecording_GetAvailableDiskSpace_Response* _this = reinterpret_cast< CGameRecording_GetAvailableDiskSpace_Response* >(object);
  (void)_this;
}
void CGameRecording_GetAvailableDiskSpace_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAvailableDiskSpace_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAvailableDiskSpace_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAvailableDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAvailableDiskSpace_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAvailableDiskSpace_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAvailableDiskSpace_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAvailableDiskSpace_Response)
  return target;
}

size_t CGameRecording_GetAvailableDiskSpace_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAvailableDiskSpace_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAvailableDiskSpace_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAvailableDiskSpace_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAvailableDiskSpace_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAvailableDiskSpace_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAvailableDiskSpace_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAvailableDiskSpace_Response::MergeFrom(const CGameRecording_GetAvailableDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_set_size(from._internal_size());
  }
}

void CGameRecording_GetAvailableDiskSpace_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAvailableDiskSpace_Response::CopyFrom(const CGameRecording_GetAvailableDiskSpace_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAvailableDiskSpace_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAvailableDiskSpace_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetAvailableDiskSpace_Response::InternalSwap(CGameRecording_GetAvailableDiskSpace_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAvailableDiskSpace_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TimelineChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TimelineChanged_Notification>()._has_bits_);
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TimelineChanged_Notification)
}
CGameRecording_TimelineChanged_Notification::CGameRecording_TimelineChanged_Notification(const CGameRecording_TimelineChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(notification_type_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TimelineChanged_Notification)
}

void CGameRecording_TimelineChanged_Notification::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(start_time_));
notification_type_ = 1;
}

CGameRecording_TimelineChanged_Notification::~CGameRecording_TimelineChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_TimelineChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TimelineChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_TimelineChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_TimelineChanged_Notification* _this = reinterpret_cast< CGameRecording_TimelineChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_TimelineChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TimelineChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TimelineChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TimelineChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(start_time_));
    notification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TimelineChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETimelineChangeNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ETimelineChangeNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_TimelineChanged_Notification.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TimelineChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TimelineChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notification_type(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_TimelineChanged_Notification.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 game_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_game_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_time(), target);
  }

  // optional uint64 duration_ms = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TimelineChanged_Notification)
  return target;
}

size_t CGameRecording_TimelineChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TimelineChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 game_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TimelineChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TimelineChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TimelineChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TimelineChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TimelineChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TimelineChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_TimelineChanged_Notification::MergeFrom(const CGameRecording_TimelineChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TimelineChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      notification_type_ = from.notification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_TimelineChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TimelineChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TimelineChanged_Notification::CopyFrom(const CGameRecording_TimelineChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TimelineChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TimelineChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_TimelineChanged_Notification::InternalSwap(CGameRecording_TimelineChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineChanged_Notification, start_time_)
      + sizeof(CGameRecording_TimelineChanged_Notification::start_time_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_TimelineChanged_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(notification_type_, other->notification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TimelineChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_RecordingSessionChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_RecordingSessionChanged_Notification>()._has_bits_);
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recording_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_RecordingSessionChanged_Notification)
}
CGameRecording_RecordingSessionChanged_Notification::CGameRecording_RecordingSessionChanged_Notification(const CGameRecording_RecordingSessionChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(notification_type_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_RecordingSessionChanged_Notification)
}

void CGameRecording_RecordingSessionChanged_Notification::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recording_type_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(recording_type_));
notification_type_ = 1;
}

CGameRecording_RecordingSessionChanged_Notification::~CGameRecording_RecordingSessionChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_RecordingSessionChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_RecordingSessionChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_RecordingSessionChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_RecordingSessionChanged_Notification* _this = reinterpret_cast< CGameRecording_RecordingSessionChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_RecordingSessionChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_RecordingSessionChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_RecordingSessionChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_RecordingSessionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recording_type_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(recording_type_));
    notification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_RecordingSessionChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ERecordingSessionChangeNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ERecordingSessionChangeNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_RecordingSessionChanged_Notification.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_RecordingSessionChanged_Notification.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_offset(&has_bits);
          start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameRecordingType_IsValid(val))) {
            _internal_set_recording_type(static_cast<::EGameRecordingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_RecordingSessionChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_RecordingSessionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notification_type(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_RecordingSessionChanged_Notification.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 game_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_game_id(), target);
  }

  // optional string session_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_RecordingSessionChanged_Notification.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // optional uint64 start_offset = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_offset(), target);
  }

  // optional uint64 duration_ms = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_duration_ms(), target);
  }

  // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_recording_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_RecordingSessionChanged_Notification)
  return target;
}

size_t CGameRecording_RecordingSessionChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_RecordingSessionChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string session_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional uint64 game_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 start_offset = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_offset());
    }

    // optional uint64 duration_ms = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_type());
    }

    // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_RecordingSessionChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_RecordingSessionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_RecordingSessionChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_RecordingSessionChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_RecordingSessionChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_RecordingSessionChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_RecordingSessionChanged_Notification::MergeFrom(const CGameRecording_RecordingSessionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_RecordingSessionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_offset_ = from.start_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      recording_type_ = from.recording_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      notification_type_ = from.notification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_RecordingSessionChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_RecordingSessionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_RecordingSessionChanged_Notification::CopyFrom(const CGameRecording_RecordingSessionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_RecordingSessionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_RecordingSessionChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_RecordingSessionChanged_Notification::InternalSwap(CGameRecording_RecordingSessionChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_RecordingSessionChanged_Notification, recording_type_)
      + sizeof(CGameRecording_RecordingSessionChanged_Notification::recording_type_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_RecordingSessionChanged_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(notification_type_, other->notification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_RecordingSessionChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimelineEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimelineEntry>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_range_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_range_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_range_possible_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_marker_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_marker_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_marker_description(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_marker_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_screenshot_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_achievement_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CTimelineEntry::CTimelineEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimelineEntry)
}
CTimelineEntry::CTimelineEntry(const CTimelineEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  range_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_range_id()) {
    range_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_id(), 
      GetArena());
  }
  range_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_range_title()) {
    range_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range_title(), 
      GetArena());
  }
  timestamp_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timestamp_title()) {
    timestamp_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp_title(), 
      GetArena());
  }
  marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_icon()) {
    marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_icon(), 
      GetArena());
  }
  marker_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_title()) {
    marker_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_title(), 
      GetArena());
  }
  marker_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_description()) {
    marker_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_description(), 
      GetArena());
  }
  achievement_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_achievement_name()) {
    achievement_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_achievement_name(), 
      GetArena());
  }
  ::memcpy(&entry_id_, &from.entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&screenshot_handle_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(screenshot_handle_));
  // @@protoc_insertion_point(copy_constructor:CTimelineEntry)
}

void CTimelineEntry::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
range_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
range_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
achievement_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&screenshot_handle_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(screenshot_handle_));
}

CTimelineEntry::~CTimelineEntry() {
  // @@protoc_insertion_point(destructor:CTimelineEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimelineEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  achievement_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTimelineEntry::ArenaDtor(void* object) {
  CTimelineEntry* _this = reinterpret_cast< CTimelineEntry* >(object);
  (void)_this;
}
void CTimelineEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimelineEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimelineEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimelineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      range_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      range_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      marker_icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      marker_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      marker_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      achievement_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&entry_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screenshot_handle_) -
        reinterpret_cast<char*>(&entry_id_)) + sizeof(screenshot_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimelineEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETimelineEntryType_IsValid(val))) {
            _internal_set_type(static_cast<::ETimelineEntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string range_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_range_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.range_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string range_title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_range_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.range_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 range_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_range_duration(&has_bits);
          range_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range_possible_clip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_range_possible_clip(&has_bits);
          range_possible_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timestamp_title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_timestamp_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.timestamp_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_icon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_marker_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.marker_icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_title = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_marker_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.marker_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_description = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_marker_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.marker_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 marker_priority = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_marker_priority(&has_bits);
          marker_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenshot_handle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_screenshot_handle(&has_bits);
          screenshot_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string achievement_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_achievement_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineEntry.achievement_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimelineEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimelineEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entry_id(), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional int32 game_mode = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional string range_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_range_id().data(), static_cast<int>(this->_internal_range_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.range_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_range_id(), target);
  }

  // optional string range_title = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_range_title().data(), static_cast<int>(this->_internal_range_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.range_title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_range_title(), target);
  }

  // optional uint64 range_duration = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_range_duration(), target);
  }

  // optional int32 range_possible_clip = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_range_possible_clip(), target);
  }

  // optional string timestamp_title = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp_title().data(), static_cast<int>(this->_internal_timestamp_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.timestamp_title");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_timestamp_title(), target);
  }

  // optional string marker_icon = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_icon().data(), static_cast<int>(this->_internal_marker_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.marker_icon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_marker_icon(), target);
  }

  // optional string marker_title = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_title().data(), static_cast<int>(this->_internal_marker_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.marker_title");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_marker_title(), target);
  }

  // optional string marker_description = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_description().data(), static_cast<int>(this->_internal_marker_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.marker_description");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_marker_description(), target);
  }

  // optional int32 marker_priority = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_marker_priority(), target);
  }

  // optional uint32 screenshot_handle = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_screenshot_handle(), target);
  }

  // optional string achievement_name = 16;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_achievement_name().data(), static_cast<int>(this->_internal_achievement_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineEntry.achievement_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_achievement_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimelineEntry)
  return target;
}

size_t CTimelineEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimelineEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string range_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_range_id());
    }

    // optional string range_title = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_range_title());
    }

    // optional string timestamp_title = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timestamp_title());
    }

    // optional string marker_icon = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_icon());
    }

    // optional string marker_title = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_title());
    }

    // optional string marker_description = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_description());
    }

    // optional string achievement_name = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_achievement_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 entry_id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

    // optional uint64 time = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time());
    }

    // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 game_mode = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_mode());
    }

    // optional uint64 range_duration = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_range_duration());
    }

    // optional int32 range_possible_clip = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range_possible_clip());
    }

    // optional int32 marker_priority = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marker_priority());
    }

    // optional uint32 screenshot_handle = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenshot_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimelineEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimelineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimelineEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimelineEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimelineEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimelineEntry)
    MergeFrom(*source);
  }
}

void CTimelineEntry::MergeFrom(const CTimelineEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimelineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_range_id(from._internal_range_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_range_title(from._internal_range_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_timestamp_title(from._internal_timestamp_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_marker_icon(from._internal_marker_icon());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_marker_title(from._internal_marker_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_marker_description(from._internal_marker_description());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_achievement_name(from._internal_achievement_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      entry_id_ = from.entry_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      range_duration_ = from.range_duration_;
    }
    if (cached_has_bits & 0x00002000u) {
      range_possible_clip_ = from.range_possible_clip_;
    }
    if (cached_has_bits & 0x00004000u) {
      marker_priority_ = from.marker_priority_;
    }
    if (cached_has_bits & 0x00008000u) {
      screenshot_handle_ = from.screenshot_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimelineEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimelineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimelineEntry::CopyFrom(const CTimelineEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimelineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimelineEntry::IsInitialized() const {
  return true;
}

void CTimelineEntry::InternalSwap(CTimelineEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_id_.Swap(&other->range_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_title_.Swap(&other->range_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_title_.Swap(&other->timestamp_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_icon_.Swap(&other->marker_icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_title_.Swap(&other->marker_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_description_.Swap(&other->marker_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  achievement_name_.Swap(&other->achievement_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTimelineEntry, screenshot_handle_)
      + sizeof(CTimelineEntry::screenshot_handle_)
      - PROTOBUF_FIELD_OFFSET(CTimelineEntry, entry_id_)>(
          reinterpret_cast<char*>(&entry_id_),
          reinterpret_cast<char*>(&other->entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimelineEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_TimelineEntryChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_TimelineEntryChanged_Notification>()._has_bits_);
  static const ::CTimelineEntry& entry(const CGameRecording_TimelineEntryChanged_Notification* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineEntry&
CGameRecording_TimelineEntryChanged_Notification::_Internal::entry(const CGameRecording_TimelineEntryChanged_Notification* msg) {
  return *msg->entry_;
}
CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_TimelineEntryChanged_Notification)
}
CGameRecording_TimelineEntryChanged_Notification::CGameRecording_TimelineEntryChanged_Notification(const CGameRecording_TimelineEntryChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_TimelineEntryChanged_Notification)
}

void CGameRecording_TimelineEntryChanged_Notification::SharedCtor() {
entry_ = nullptr;
}

CGameRecording_TimelineEntryChanged_Notification::~CGameRecording_TimelineEntryChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_TimelineEntryChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_TimelineEntryChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_TimelineEntryChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_TimelineEntryChanged_Notification* _this = reinterpret_cast< CGameRecording_TimelineEntryChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_TimelineEntryChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_TimelineEntryChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_TimelineEntryChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_TimelineEntryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entry_ != nullptr);
    entry_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_TimelineEntryChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CTimelineEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_TimelineEntryChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_TimelineEntryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CTimelineEntry entry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_TimelineEntryChanged_Notification)
  return target;
}

size_t CGameRecording_TimelineEntryChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_TimelineEntryChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CTimelineEntry entry = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_TimelineEntryChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_TimelineEntryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_TimelineEntryChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_TimelineEntryChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_TimelineEntryChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_TimelineEntryChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_TimelineEntryChanged_Notification::MergeFrom(const CGameRecording_TimelineEntryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_TimelineEntryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry()) {
    _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
  }
}

void CGameRecording_TimelineEntryChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_TimelineEntryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_TimelineEntryChanged_Notification::CopyFrom(const CGameRecording_TimelineEntryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_TimelineEntryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_TimelineEntryChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_TimelineEntryChanged_Notification::InternalSwap(CGameRecording_TimelineEntryChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entry_, other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_TimelineEntryChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_LowDiskSpace_Notification::_Internal {
 public:
};

CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_LowDiskSpace_Notification)
}
CGameRecording_LowDiskSpace_Notification::CGameRecording_LowDiskSpace_Notification(const CGameRecording_LowDiskSpace_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_LowDiskSpace_Notification)
}

void CGameRecording_LowDiskSpace_Notification::SharedCtor() {
}

CGameRecording_LowDiskSpace_Notification::~CGameRecording_LowDiskSpace_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_LowDiskSpace_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_LowDiskSpace_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_LowDiskSpace_Notification::ArenaDtor(void* object) {
  CGameRecording_LowDiskSpace_Notification* _this = reinterpret_cast< CGameRecording_LowDiskSpace_Notification* >(object);
  (void)_this;
}
void CGameRecording_LowDiskSpace_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_LowDiskSpace_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_LowDiskSpace_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_LowDiskSpace_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_LowDiskSpace_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_LowDiskSpace_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_LowDiskSpace_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_LowDiskSpace_Notification)
  return target;
}

size_t CGameRecording_LowDiskSpace_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_LowDiskSpace_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_LowDiskSpace_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_LowDiskSpace_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_LowDiskSpace_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_LowDiskSpace_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_LowDiskSpace_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_LowDiskSpace_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_LowDiskSpace_Notification::MergeFrom(const CGameRecording_LowDiskSpace_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_LowDiskSpace_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_LowDiskSpace_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_LowDiskSpace_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_LowDiskSpace_Notification::CopyFrom(const CGameRecording_LowDiskSpace_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_LowDiskSpace_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_LowDiskSpace_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_LowDiskSpace_Notification::InternalSwap(CGameRecording_LowDiskSpace_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_LowDiskSpace_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_PostGameHighlightsChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_PostGameHighlightsChanged_Notification>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_PostGameHighlightsChanged_Notification)
}
CGameRecording_PostGameHighlightsChanged_Notification::CGameRecording_PostGameHighlightsChanged_Notification(const CGameRecording_PostGameHighlightsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_PostGameHighlightsChanged_Notification)
}

void CGameRecording_PostGameHighlightsChanged_Notification::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_PostGameHighlightsChanged_Notification::~CGameRecording_PostGameHighlightsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_PostGameHighlightsChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_PostGameHighlightsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_PostGameHighlightsChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_PostGameHighlightsChanged_Notification* _this = reinterpret_cast< CGameRecording_PostGameHighlightsChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_PostGameHighlightsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_PostGameHighlightsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_PostGameHighlightsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_PostGameHighlightsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_PostGameHighlightsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_PostGameHighlightsChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_PostGameHighlightsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_PostGameHighlightsChanged_Notification)
  return target;
}

size_t CGameRecording_PostGameHighlightsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_PostGameHighlightsChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_PostGameHighlightsChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_PostGameHighlightsChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_PostGameHighlightsChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_PostGameHighlightsChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_PostGameHighlightsChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_PostGameHighlightsChanged_Notification::MergeFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_PostGameHighlightsChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_PostGameHighlightsChanged_Notification::CopyFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_PostGameHighlightsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_PostGameHighlightsChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_PostGameHighlightsChanged_Notification::InternalSwap(CGameRecording_PostGameHighlightsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_PostGameHighlightsChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipSummary>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_start_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_clipped(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_original_device(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_original_gaming_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_date_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thumbnail_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_thumbnail_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CGameRecording_ClipSummary::CGameRecording_ClipSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipSummary)
}
CGameRecording_ClipSummary::CGameRecording_ClipSummary(const CGameRecording_ClipSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  start_timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_timeline_id()) {
    start_timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_timeline_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_device()) {
    original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_device(), 
      GetArena());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipSummary)
}

void CGameRecording_ClipSummary::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(thumbnail_height_));
}

CGameRecording_ClipSummary::~CGameRecording_ClipSummary() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ClipSummary::ArenaDtor(void* object) {
  CGameRecording_ClipSummary* _this = reinterpret_cast< CGameRecording_ClipSummary* >(object);
  (void)_this;
}
void CGameRecording_ClipSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      original_device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(start_offset_ms_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_width_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(thumbnail_width_));
  }
  thumbnail_height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_timeline_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_start_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.start_timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_offset_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_offset_ms(&has_bits);
          start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 published_file_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_clipped = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_date_clipped(&has_bits);
          date_clipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_temporary(&has_bits);
          temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_original_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.original_device");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_gaming_device_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_original_gaming_device_type(&has_bits);
          original_gaming_device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_downloaded = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_date_downloaded(&has_bits);
          date_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumbnail_url = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipSummary.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_thumbnail_width(&has_bits);
          thumbnail_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_height = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_thumbnail_height(&has_bits);
          thumbnail_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional uint64 game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint64 duration_ms = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // optional uint32 date_recorded = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date_recorded(), target);
  }

  // optional string start_timeline_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_timeline_id().data(), static_cast<int>(this->_internal_start_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.start_timeline_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_timeline_id(), target);
  }

  // optional uint64 start_offset_ms = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_offset_ms(), target);
  }

  // optional uint64 published_file_id = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_published_file_id(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_file_size(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // optional uint32 date_clipped = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_date_clipped(), target);
  }

  // optional bool temporary = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_temporary(), target);
  }

  // optional string original_device = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_device().data(), static_cast<int>(this->_internal_original_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.original_device");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_original_device(), target);
  }

  // optional uint32 original_gaming_device_type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_original_gaming_device_type(), target);
  }

  // optional uint32 date_downloaded = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_date_downloaded(), target);
  }

  // optional string thumbnail_url = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipSummary.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_thumbnail_url(), target);
  }

  // optional uint32 thumbnail_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_thumbnail_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipSummary)
  return target;
}

size_t CGameRecording_ClipSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string start_timeline_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_timeline_id());
    }

    // optional string name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string original_device = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_device());
    }

    // optional string thumbnail_url = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional uint64 game_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint64 start_offset_ms = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_offset_ms());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 published_file_id = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_published_file_id());
    }

    // optional uint32 date_recorded = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

    // optional uint32 date_clipped = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_clipped());
    }

    // optional uint64 file_size = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional bool temporary = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 original_gaming_device_type = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_gaming_device_type());
    }

    // optional uint32 date_downloaded = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_downloaded());
    }

    // optional uint32 thumbnail_width = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thumbnail_width());
    }

  }
  // optional uint32 thumbnail_height = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thumbnail_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipSummary)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipSummary::MergeFrom(const CGameRecording_ClipSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_timeline_id(from._internal_start_timeline_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_original_device(from._internal_original_device());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_offset_ms_ = from.start_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      date_recorded_ = from.date_recorded_;
    }
    if (cached_has_bits & 0x00000400u) {
      date_clipped_ = from.date_clipped_;
    }
    if (cached_has_bits & 0x00000800u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      temporary_ = from.temporary_;
    }
    if (cached_has_bits & 0x00002000u) {
      original_gaming_device_type_ = from.original_gaming_device_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      date_downloaded_ = from.date_downloaded_;
    }
    if (cached_has_bits & 0x00008000u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_thumbnail_height(from._internal_thumbnail_height());
  }
}

void CGameRecording_ClipSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipSummary::CopyFrom(const CGameRecording_ClipSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipSummary::IsInitialized() const {
  return true;
}

void CGameRecording_ClipSummary::InternalSwap(CGameRecording_ClipSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_timeline_id_.Swap(&other->start_timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_device_.Swap(&other->original_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ClipSummary, thumbnail_height_)
      + sizeof(CGameRecording_ClipSummary::thumbnail_height_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ClipSummary, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Request_Position::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Request_Position>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Request.Position)
}
CGameRecording_SaveClip_Request_Position::CGameRecording_SaveClip_Request_Position(const CGameRecording_SaveClip_Request_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  offset_ms_ = from.offset_ms_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Request.Position)
}

void CGameRecording_SaveClip_Request_Position::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
offset_ms_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_SaveClip_Request_Position::~CGameRecording_SaveClip_Request_Position() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Request.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Request_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_SaveClip_Request_Position::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Request_Position* _this = reinterpret_cast< CGameRecording_SaveClip_Request_Position* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Request_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Request_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Request_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Request.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Request_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.Position.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset_ms(&has_bits);
          offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Request_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Request.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.Position.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 offset_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Request.Position)
  return target;
}

size_t CGameRecording_SaveClip_Request_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Request.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 offset_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Request_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Request.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Request_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Request_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Request.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Request.Position)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Request_Position::MergeFrom(const CGameRecording_SaveClip_Request_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Request.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ms_ = from.offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_SaveClip_Request_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Request.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Request_Position::CopyFrom(const CGameRecording_SaveClip_Request_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Request.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Request_Position::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Request_Position::InternalSwap(CGameRecording_SaveClip_Request_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_ms_, other->offset_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Request_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CGameRecording_SaveClip_Request_Position& start(const CGameRecording_SaveClip_Request* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CGameRecording_SaveClip_Request_Position& end(const CGameRecording_SaveClip_Request* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CGameRecording_SaveClip_Request_Position&
CGameRecording_SaveClip_Request::_Internal::start(const CGameRecording_SaveClip_Request* msg) {
  return *msg->start_;
}
const ::CGameRecording_SaveClip_Request_Position&
CGameRecording_SaveClip_Request::_Internal::end(const CGameRecording_SaveClip_Request* msg) {
  return *msg->end_;
}
CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Request)
}
CGameRecording_SaveClip_Request::CGameRecording_SaveClip_Request(const CGameRecording_SaveClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  src_clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_clip_id()) {
    src_clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_clip_id(), 
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new ::CGameRecording_SaveClip_Request_Position(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::CGameRecording_SaveClip_Request_Position(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(temporary_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Request)
}

void CGameRecording_SaveClip_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
src_clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temporary_) -
    reinterpret_cast<char*>(&start_)) + sizeof(temporary_));
}

CGameRecording_SaveClip_Request::~CGameRecording_SaveClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void CGameRecording_SaveClip_Request::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Request* _this = reinterpret_cast< CGameRecording_SaveClip_Request* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      src_clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temporary_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(temporary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_SaveClip_Request.Position start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_SaveClip_Request.Position end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_clip_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_src_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_SaveClip_Request.src_clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_temporary(&has_bits);
          temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CGameRecording_SaveClip_Request.Position start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // optional .CGameRecording_SaveClip_Request.Position end = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string src_clip_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_clip_id().data(), static_cast<int>(this->_internal_src_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_SaveClip_Request.src_clip_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_src_clip_id(), target);
  }

  // optional bool temporary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_temporary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Request)
  return target;
}

size_t CGameRecording_SaveClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string src_clip_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_clip_id());
    }

    // optional .CGameRecording_SaveClip_Request.Position start = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .CGameRecording_SaveClip_Request.Position end = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional bool temporary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Request::MergeFrom(const CGameRecording_SaveClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_src_clip_id(from._internal_src_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start()->::CGameRecording_SaveClip_Request_Position::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_end()->::CGameRecording_SaveClip_Request_Position::MergeFrom(from._internal_end());
    }
    if (cached_has_bits & 0x00000010u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      temporary_ = from.temporary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_SaveClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Request::CopyFrom(const CGameRecording_SaveClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Request::InternalSwap(CGameRecording_SaveClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_clip_id_.Swap(&other->src_clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_SaveClip_Request, temporary_)
      + sizeof(CGameRecording_SaveClip_Request::temporary_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_SaveClip_Request, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SaveClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SaveClip_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_SaveClip_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_SaveClip_Response::_Internal::summary(const CGameRecording_SaveClip_Response* msg) {
  return *msg->summary_;
}
CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SaveClip_Response)
}
CGameRecording_SaveClip_Response::CGameRecording_SaveClip_Response(const CGameRecording_SaveClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SaveClip_Response)
}

void CGameRecording_SaveClip_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_SaveClip_Response::~CGameRecording_SaveClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_SaveClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SaveClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_SaveClip_Response::ArenaDtor(void* object) {
  CGameRecording_SaveClip_Response* _this = reinterpret_cast< CGameRecording_SaveClip_Response* >(object);
  (void)_this;
}
void CGameRecording_SaveClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SaveClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SaveClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SaveClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SaveClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SaveClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SaveClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SaveClip_Response)
  return target;
}

size_t CGameRecording_SaveClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SaveClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SaveClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SaveClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SaveClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SaveClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SaveClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SaveClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_SaveClip_Response::MergeFrom(const CGameRecording_SaveClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SaveClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_SaveClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SaveClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SaveClip_Response::CopyFrom(const CGameRecording_SaveClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SaveClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SaveClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_SaveClip_Response::InternalSwap(CGameRecording_SaveClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SaveClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_DeleteClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteClip_Request)
}
CGameRecording_DeleteClip_Request::CGameRecording_DeleteClip_Request(const CGameRecording_DeleteClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteClip_Request)
}

void CGameRecording_DeleteClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_DeleteClip_Request::~CGameRecording_DeleteClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_DeleteClip_Request::ArenaDtor(void* object) {
  CGameRecording_DeleteClip_Request* _this = reinterpret_cast< CGameRecording_DeleteClip_Request* >(object);
  (void)_this;
}
void CGameRecording_DeleteClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_DeleteClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_DeleteClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteClip_Request)
  return target;
}

size_t CGameRecording_DeleteClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteClip_Request::MergeFrom(const CGameRecording_DeleteClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_DeleteClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteClip_Request::CopyFrom(const CGameRecording_DeleteClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteClip_Request::InternalSwap(CGameRecording_DeleteClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteClip_Response::_Internal {
 public:
};

CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteClip_Response)
}
CGameRecording_DeleteClip_Response::CGameRecording_DeleteClip_Response(const CGameRecording_DeleteClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteClip_Response)
}

void CGameRecording_DeleteClip_Response::SharedCtor() {
}

CGameRecording_DeleteClip_Response::~CGameRecording_DeleteClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeleteClip_Response::ArenaDtor(void* object) {
  CGameRecording_DeleteClip_Response* _this = reinterpret_cast< CGameRecording_DeleteClip_Response* >(object);
  (void)_this;
}
void CGameRecording_DeleteClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteClip_Response)
  return target;
}

size_t CGameRecording_DeleteClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteClip_Response::MergeFrom(const CGameRecording_DeleteClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_DeleteClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteClip_Response::CopyFrom(const CGameRecording_DeleteClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteClip_Response::InternalSwap(CGameRecording_DeleteClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Settings::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportClip_Settings>()._has_bits_);
  static void set_has_bitrate_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Settings)
}
CGameRecording_ExportClip_Settings::CGameRecording_ExportClip_Settings(const CGameRecording_ExportClip_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bitrate_kbps_, &from.bitrate_kbps_,
    static_cast<size_t>(reinterpret_cast<char*>(&frames_per_second_) -
    reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Settings)
}

void CGameRecording_ExportClip_Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bitrate_kbps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frames_per_second_) -
    reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
}

CGameRecording_ExportClip_Settings::~CGameRecording_ExportClip_Settings() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ExportClip_Settings::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Settings* _this = reinterpret_cast< CGameRecording_ExportClip_Settings* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&bitrate_kbps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frames_per_second_) -
        reinterpret_cast<char*>(&bitrate_kbps_)) + sizeof(frames_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bitrate_kbps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bitrate_kbps(&has_bits);
          bitrate_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frames_per_second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frames_per_second(&has_bits);
          frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bitrate_kbps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bitrate_kbps(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional int32 frames_per_second = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frames_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Settings)
  return target;
}

size_t CGameRecording_ExportClip_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 bitrate_kbps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bitrate_kbps());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 frames_per_second = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frames_per_second());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Settings)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Settings::MergeFrom(const CGameRecording_ExportClip_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bitrate_kbps_ = from.bitrate_kbps_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      frames_per_second_ = from.frames_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ExportClip_Settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Settings::CopyFrom(const CGameRecording_ExportClip_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Settings::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Settings::InternalSwap(CGameRecording_ExportClip_Settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ExportClip_Settings, frames_per_second_)
      + sizeof(CGameRecording_ExportClip_Settings::frames_per_second_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ExportClip_Settings, bitrate_kbps_)>(
          reinterpret_cast<char*>(&bitrate_kbps_),
          reinterpret_cast<char*>(&other->bitrate_kbps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_export_mp4_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CGameRecording_ExportClip_Settings& settings(const CGameRecording_ExportClip_Request* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CGameRecording_ExportClip_Settings&
CGameRecording_ExportClip_Request::_Internal::settings(const CGameRecording_ExportClip_Request* msg) {
  return *msg->settings_;
}
CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Request)
}
CGameRecording_ExportClip_Request::CGameRecording_ExportClip_Request(const CGameRecording_ExportClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  export_mp4_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_export_mp4_path()) {
    export_mp4_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_export_mp4_path(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::CGameRecording_ExportClip_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Request)
}

void CGameRecording_ExportClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
export_mp4_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settings_ = nullptr;
}

CGameRecording_ExportClip_Request::~CGameRecording_ExportClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  export_mp4_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CGameRecording_ExportClip_Request::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Request* _this = reinterpret_cast< CGameRecording_ExportClip_Request* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      export_mp4_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string export_mp4_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_export_mp4_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportClip_Request.export_mp4_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CGameRecording_ExportClip_Settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional string export_mp4_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_export_mp4_path().data(), static_cast<int>(this->_internal_export_mp4_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportClip_Request.export_mp4_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_export_mp4_path(), target);
  }

  // optional .CGameRecording_ExportClip_Settings settings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Request)
  return target;
}

size_t CGameRecording_ExportClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string export_mp4_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_export_mp4_path());
    }

    // optional .CGameRecording_ExportClip_Settings settings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Request::MergeFrom(const CGameRecording_ExportClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_export_mp4_path(from._internal_export_mp4_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_settings()->::CGameRecording_ExportClip_Settings::MergeFrom(from._internal_settings());
    }
  }
}

void CGameRecording_ExportClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Request::CopyFrom(const CGameRecording_ExportClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Request::InternalSwap(CGameRecording_ExportClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  export_mp4_path_.Swap(&other->export_mp4_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportClip_Response::_Internal {
 public:
};

CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportClip_Response)
}
CGameRecording_ExportClip_Response::CGameRecording_ExportClip_Response(const CGameRecording_ExportClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportClip_Response)
}

void CGameRecording_ExportClip_Response::SharedCtor() {
}

CGameRecording_ExportClip_Response::~CGameRecording_ExportClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ExportClip_Response::ArenaDtor(void* object) {
  CGameRecording_ExportClip_Response* _this = reinterpret_cast< CGameRecording_ExportClip_Response* >(object);
  (void)_this;
}
void CGameRecording_ExportClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportClip_Response)
  return target;
}

size_t CGameRecording_ExportClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportClip_Response::MergeFrom(const CGameRecording_ExportClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_ExportClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportClip_Response::CopyFrom(const CGameRecording_ExportClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ExportClip_Response::InternalSwap(CGameRecording_ExportClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadClipToSteam_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadClipToSteam_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadClipToSteam_Request)
}
CGameRecording_UploadClipToSteam_Request::CGameRecording_UploadClipToSteam_Request(const CGameRecording_UploadClipToSteam_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadClipToSteam_Request)
}

void CGameRecording_UploadClipToSteam_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
visibility_ = 0;
}

CGameRecording_UploadClipToSteam_Request::~CGameRecording_UploadClipToSteam_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadClipToSteam_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadClipToSteam_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UploadClipToSteam_Request::ArenaDtor(void* object) {
  CGameRecording_UploadClipToSteam_Request* _this = reinterpret_cast< CGameRecording_UploadClipToSteam_Request* >(object);
  (void)_this;
}
void CGameRecording_UploadClipToSteam_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadClipToSteam_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadClipToSteam_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadClipToSteam_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadClipToSteam_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadClipToSteam_Request.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadClipToSteam_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadClipToSteam_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadClipToSteam_Request.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional int32 visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadClipToSteam_Request)
  return target;
}

size_t CGameRecording_UploadClipToSteam_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadClipToSteam_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional int32 visibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_visibility());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadClipToSteam_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadClipToSteam_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadClipToSteam_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadClipToSteam_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadClipToSteam_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadClipToSteam_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadClipToSteam_Request::MergeFrom(const CGameRecording_UploadClipToSteam_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadClipToSteam_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UploadClipToSteam_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadClipToSteam_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadClipToSteam_Request::CopyFrom(const CGameRecording_UploadClipToSteam_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadClipToSteam_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadClipToSteam_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UploadClipToSteam_Request::InternalSwap(CGameRecording_UploadClipToSteam_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadClipToSteam_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadClipToSteam_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadClipToSteam_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_UploadClipToSteam_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_UploadClipToSteam_Response::_Internal::summary(const CGameRecording_UploadClipToSteam_Response* msg) {
  return *msg->summary_;
}
CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadClipToSteam_Response)
}
CGameRecording_UploadClipToSteam_Response::CGameRecording_UploadClipToSteam_Response(const CGameRecording_UploadClipToSteam_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadClipToSteam_Response)
}

void CGameRecording_UploadClipToSteam_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_UploadClipToSteam_Response::~CGameRecording_UploadClipToSteam_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadClipToSteam_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadClipToSteam_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_UploadClipToSteam_Response::ArenaDtor(void* object) {
  CGameRecording_UploadClipToSteam_Response* _this = reinterpret_cast< CGameRecording_UploadClipToSteam_Response* >(object);
  (void)_this;
}
void CGameRecording_UploadClipToSteam_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadClipToSteam_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadClipToSteam_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadClipToSteam_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadClipToSteam_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadClipToSteam_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadClipToSteam_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadClipToSteam_Response)
  return target;
}

size_t CGameRecording_UploadClipToSteam_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadClipToSteam_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadClipToSteam_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadClipToSteam_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadClipToSteam_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadClipToSteam_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadClipToSteam_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadClipToSteam_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadClipToSteam_Response::MergeFrom(const CGameRecording_UploadClipToSteam_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadClipToSteam_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_UploadClipToSteam_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadClipToSteam_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadClipToSteam_Response::CopyFrom(const CGameRecording_UploadClipToSteam_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadClipToSteam_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadClipToSteam_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UploadClipToSteam_Response::InternalSwap(CGameRecording_UploadClipToSteam_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadClipToSteam_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ZipClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ZipClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ZipClip_Request)
}
CGameRecording_ZipClip_Request::CGameRecording_ZipClip_Request(const CGameRecording_ZipClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ZipClip_Request)
}

void CGameRecording_ZipClip_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_ZipClip_Request::~CGameRecording_ZipClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ZipClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ZipClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ZipClip_Request::ArenaDtor(void* object) {
  CGameRecording_ZipClip_Request* _this = reinterpret_cast< CGameRecording_ZipClip_Request* >(object);
  (void)_this;
}
void CGameRecording_ZipClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ZipClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ZipClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ZipClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ZipClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ZipClip_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ZipClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ZipClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ZipClip_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ZipClip_Request)
  return target;
}

size_t CGameRecording_ZipClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ZipClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clip_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ZipClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ZipClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ZipClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ZipClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ZipClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ZipClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ZipClip_Request::MergeFrom(const CGameRecording_ZipClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ZipClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_ZipClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ZipClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ZipClip_Request::CopyFrom(const CGameRecording_ZipClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ZipClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ZipClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ZipClip_Request::InternalSwap(CGameRecording_ZipClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ZipClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ZipClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ZipClip_Response>()._has_bits_);
  static void set_has_zip_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ZipClip_Response)
}
CGameRecording_ZipClip_Response::CGameRecording_ZipClip_Response(const CGameRecording_ZipClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zip_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_zip_path()) {
    zip_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zip_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ZipClip_Response)
}

void CGameRecording_ZipClip_Response::SharedCtor() {
zip_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecording_ZipClip_Response::~CGameRecording_ZipClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ZipClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ZipClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  zip_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ZipClip_Response::ArenaDtor(void* object) {
  CGameRecording_ZipClip_Response* _this = reinterpret_cast< CGameRecording_ZipClip_Response* >(object);
  (void)_this;
}
void CGameRecording_ZipClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ZipClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ZipClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ZipClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    zip_path_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ZipClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string zip_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_zip_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ZipClip_Response.zip_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ZipClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ZipClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string zip_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_zip_path().data(), static_cast<int>(this->_internal_zip_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ZipClip_Response.zip_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_zip_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ZipClip_Response)
  return target;
}

size_t CGameRecording_ZipClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ZipClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zip_path = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zip_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ZipClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ZipClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ZipClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ZipClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ZipClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ZipClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ZipClip_Response::MergeFrom(const CGameRecording_ZipClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ZipClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_zip_path()) {
    _internal_set_zip_path(from._internal_zip_path());
  }
}

void CGameRecording_ZipClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ZipClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ZipClip_Response::CopyFrom(const CGameRecording_ZipClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ZipClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ZipClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ZipClip_Response::InternalSwap(CGameRecording_ZipClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  zip_path_.Swap(&other->zip_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ZipClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetClips_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetClips_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_after(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetClips_Request)
}
CGameRecording_GetClips_Request::CGameRecording_GetClips_Request(const CGameRecording_GetClips_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetClips_Request)
}

void CGameRecording_GetClips_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_temporary_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
}

CGameRecording_GetClips_Request::~CGameRecording_GetClips_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetClips_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetClips_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetClips_Request::ArenaDtor(void* object) {
  CGameRecording_GetClips_Request* _this = reinterpret_cast< CGameRecording_GetClips_Request* >(object);
  (void)_this;
}
void CGameRecording_GetClips_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetClips_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetClips_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_temporary_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(include_temporary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetClips_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 created_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_created_after(&has_bits);
          created_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_temporary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_temporary(&has_bits);
          include_temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetClips_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetClips_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 created_after = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_after(), target);
  }

  // optional bool include_temporary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_temporary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetClips_Request)
  return target;
}

size_t CGameRecording_GetClips_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetClips_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 created_after = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_created_after());
    }

    // optional bool include_temporary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetClips_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetClips_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetClips_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetClips_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetClips_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetClips_Request::MergeFrom(const CGameRecording_GetClips_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetClips_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      created_after_ = from.created_after_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_temporary_ = from.include_temporary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetClips_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetClips_Request::CopyFrom(const CGameRecording_GetClips_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetClips_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetClips_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetClips_Request::InternalSwap(CGameRecording_GetClips_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetClips_Request, include_temporary_)
      + sizeof(CGameRecording_GetClips_Request::include_temporary_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetClips_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetClips_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetClips_Response::_Internal {
 public:
};

CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clip_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetClips_Response)
}
CGameRecording_GetClips_Response::CGameRecording_GetClips_Response(const CGameRecording_GetClips_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clip_(from.clip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetClips_Response)
}

void CGameRecording_GetClips_Response::SharedCtor() {
}

CGameRecording_GetClips_Response::~CGameRecording_GetClips_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetClips_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetClips_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetClips_Response::ArenaDtor(void* object) {
  CGameRecording_GetClips_Response* _this = reinterpret_cast< CGameRecording_GetClips_Response* >(object);
  (void)_this;
}
void CGameRecording_GetClips_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetClips_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetClips_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clip_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetClips_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_ClipSummary clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetClips_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetClips_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_ClipSummary clip = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_clip(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetClips_Response)
  return target;
}

size_t CGameRecording_GetClips_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetClips_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_ClipSummary clip = 1;
  total_size += 1UL * this->_internal_clip_size();
  for (const auto& msg : this->clip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetClips_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetClips_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetClips_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetClips_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetClips_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetClips_Response::MergeFrom(const CGameRecording_GetClips_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetClips_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clip_.MergeFrom(from.clip_);
}

void CGameRecording_GetClips_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetClips_Response::CopyFrom(const CGameRecording_GetClips_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetClips_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetClips_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetClips_Response::InternalSwap(CGameRecording_GetClips_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clip_.InternalSwap(&other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetClips_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAndTrimPostGameHighlights_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetAndTrimPostGameHighlights_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_after(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
}
CGameRecording_GetAndTrimPostGameHighlights_Request::CGameRecording_GetAndTrimPostGameHighlights_Request(const CGameRecording_GetAndTrimPostGameHighlights_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_after_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_after_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
}

CGameRecording_GetAndTrimPostGameHighlights_Request::~CGameRecording_GetAndTrimPostGameHighlights_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAndTrimPostGameHighlights_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::ArenaDtor(void* object) {
  CGameRecording_GetAndTrimPostGameHighlights_Request* _this = reinterpret_cast< CGameRecording_GetAndTrimPostGameHighlights_Request* >(object);
  (void)_this;
}
void CGameRecording_GetAndTrimPostGameHighlights_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAndTrimPostGameHighlights_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&created_after_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(created_after_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAndTrimPostGameHighlights_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 created_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_created_after(&has_bits);
          created_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAndTrimPostGameHighlights_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 created_after = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAndTrimPostGameHighlights_Request)
  return target;
}

size_t CGameRecording_GetAndTrimPostGameHighlights_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 created_after = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_created_after());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAndTrimPostGameHighlights_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAndTrimPostGameHighlights_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAndTrimPostGameHighlights_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAndTrimPostGameHighlights_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      created_after_ = from.created_after_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAndTrimPostGameHighlights_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetAndTrimPostGameHighlights_Request::InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetAndTrimPostGameHighlights_Request, created_after_)
      + sizeof(CGameRecording_GetAndTrimPostGameHighlights_Request::created_after_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetAndTrimPostGameHighlights_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAndTrimPostGameHighlights_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetAndTrimPostGameHighlights_Response::_Internal {
 public:
};

void CGameRecording_GetAndTrimPostGameHighlights_Response::clear_events() {
  events_.Clear();
}
CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
}
CGameRecording_GetAndTrimPostGameHighlights_Response::CGameRecording_GetAndTrimPostGameHighlights_Response(const CGameRecording_GetAndTrimPostGameHighlights_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::SharedCtor() {
}

CGameRecording_GetAndTrimPostGameHighlights_Response::~CGameRecording_GetAndTrimPostGameHighlights_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetAndTrimPostGameHighlights_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::ArenaDtor(void* object) {
  CGameRecording_GetAndTrimPostGameHighlights_Response* _this = reinterpret_cast< CGameRecording_GetAndTrimPostGameHighlights_Response* >(object);
  (void)_this;
}
void CGameRecording_GetAndTrimPostGameHighlights_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetAndTrimPostGameHighlights_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetAndTrimPostGameHighlights_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetAndTrimPostGameHighlights_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetAndTrimPostGameHighlights_Response)
  return target;
}

size_t CGameRecording_GetAndTrimPostGameHighlights_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetAndTrimPostGameHighlights_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetAndTrimPostGameHighlights_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetAndTrimPostGameHighlights_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetAndTrimPostGameHighlights_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetAndTrimPostGameHighlights_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetAndTrimPostGameHighlights_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetAndTrimPostGameHighlights_Response::InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetAndTrimPostGameHighlights_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserAddTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserAddTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CTimelineEntry& entry(const CGameRecording_UserAddTimelineEntry_Request* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineEntry&
CGameRecording_UserAddTimelineEntry_Request::_Internal::entry(const CGameRecording_UserAddTimelineEntry_Request* msg) {
  return *msg->entry_;
}
CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserAddTimelineEntry_Request)
}
CGameRecording_UserAddTimelineEntry_Request::CGameRecording_UserAddTimelineEntry_Request(const CGameRecording_UserAddTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserAddTimelineEntry_Request)
}

void CGameRecording_UserAddTimelineEntry_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(game_id_));
}

CGameRecording_UserAddTimelineEntry_Request::~CGameRecording_UserAddTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserAddTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserAddTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_UserAddTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserAddTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserAddTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserAddTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserAddTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserAddTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserAddTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entry_ != nullptr);
      entry_->Clear();
    }
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserAddTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTimelineEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserAddTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserAddTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserAddTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CTimelineEntry entry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entry(this), target, stream);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserAddTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserAddTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserAddTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserAddTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional .CTimelineEntry entry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserAddTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserAddTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserAddTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserAddTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserAddTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserAddTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserAddTimelineEntry_Request::MergeFrom(const CGameRecording_UserAddTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserAddTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserAddTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserAddTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserAddTimelineEntry_Request::CopyFrom(const CGameRecording_UserAddTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserAddTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserAddTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserAddTimelineEntry_Request::InternalSwap(CGameRecording_UserAddTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserAddTimelineEntry_Request, game_id_)
      + sizeof(CGameRecording_UserAddTimelineEntry_Request::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserAddTimelineEntry_Request, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserAddTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserAddTimelineEntry_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserAddTimelineEntry_Response>()._has_bits_);
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserAddTimelineEntry_Response)
}
CGameRecording_UserAddTimelineEntry_Response::CGameRecording_UserAddTimelineEntry_Response(const CGameRecording_UserAddTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_id_ = from.entry_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserAddTimelineEntry_Response)
}

void CGameRecording_UserAddTimelineEntry_Response::SharedCtor() {
entry_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_UserAddTimelineEntry_Response::~CGameRecording_UserAddTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserAddTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserAddTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserAddTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserAddTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserAddTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserAddTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserAddTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserAddTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserAddTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserAddTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserAddTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserAddTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 entry_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_entry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserAddTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserAddTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserAddTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 entry_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_entry_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserAddTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserAddTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserAddTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserAddTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserAddTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserAddTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserAddTimelineEntry_Response::MergeFrom(const CGameRecording_UserAddTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserAddTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry_id()) {
    _internal_set_entry_id(from._internal_entry_id());
  }
}

void CGameRecording_UserAddTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserAddTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserAddTimelineEntry_Response::CopyFrom(const CGameRecording_UserAddTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserAddTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserAddTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserAddTimelineEntry_Response::InternalSwap(CGameRecording_UserAddTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entry_id_, other->entry_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserAddTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserUpdateTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserUpdateTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CTimelineEntry& entry(const CGameRecording_UserUpdateTimelineEntry_Request* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineEntry&
CGameRecording_UserUpdateTimelineEntry_Request::_Internal::entry(const CGameRecording_UserUpdateTimelineEntry_Request* msg) {
  return *msg->entry_;
}
CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserUpdateTimelineEntry_Request)
}
CGameRecording_UserUpdateTimelineEntry_Request::CGameRecording_UserUpdateTimelineEntry_Request(const CGameRecording_UserUpdateTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  if (from._internal_has_entry()) {
    entry_ = new ::CTimelineEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserUpdateTimelineEntry_Request)
}

void CGameRecording_UserUpdateTimelineEntry_Request::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(game_id_));
}

CGameRecording_UserUpdateTimelineEntry_Request::~CGameRecording_UserUpdateTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserUpdateTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserUpdateTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void CGameRecording_UserUpdateTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserUpdateTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserUpdateTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserUpdateTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserUpdateTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserUpdateTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserUpdateTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entry_ != nullptr);
      entry_->Clear();
    }
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserUpdateTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTimelineEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserUpdateTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserUpdateTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserUpdateTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CTimelineEntry entry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entry(this), target, stream);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserUpdateTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserUpdateTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserUpdateTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserUpdateTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional .CTimelineEntry entry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserUpdateTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserUpdateTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserUpdateTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserUpdateTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserUpdateTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserUpdateTimelineEntry_Request::MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entry()->::CTimelineEntry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserUpdateTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserUpdateTimelineEntry_Request::CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserUpdateTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserUpdateTimelineEntry_Request::InternalSwap(CGameRecording_UserUpdateTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserUpdateTimelineEntry_Request, game_id_)
      + sizeof(CGameRecording_UserUpdateTimelineEntry_Request::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserUpdateTimelineEntry_Request, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserUpdateTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserUpdateTimelineEntry_Response::_Internal {
 public:
};

CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserUpdateTimelineEntry_Response)
}
CGameRecording_UserUpdateTimelineEntry_Response::CGameRecording_UserUpdateTimelineEntry_Response(const CGameRecording_UserUpdateTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserUpdateTimelineEntry_Response)
}

void CGameRecording_UserUpdateTimelineEntry_Response::SharedCtor() {
}

CGameRecording_UserUpdateTimelineEntry_Response::~CGameRecording_UserUpdateTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserUpdateTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserUpdateTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserUpdateTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserUpdateTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserUpdateTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserUpdateTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserUpdateTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserUpdateTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserUpdateTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserUpdateTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserUpdateTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserUpdateTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserUpdateTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserUpdateTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserUpdateTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserUpdateTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserUpdateTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserUpdateTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserUpdateTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserUpdateTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserUpdateTimelineEntry_Response::MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_UserUpdateTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserUpdateTimelineEntry_Response::CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserUpdateTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserUpdateTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserUpdateTimelineEntry_Response::InternalSwap(CGameRecording_UserUpdateTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserUpdateTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserRemoveTimelineEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UserRemoveTimelineEntry_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserRemoveTimelineEntry_Request)
}
CGameRecording_UserRemoveTimelineEntry_Request::CGameRecording_UserRemoveTimelineEntry_Request(const CGameRecording_UserRemoveTimelineEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserRemoveTimelineEntry_Request)
}

void CGameRecording_UserRemoveTimelineEntry_Request::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
}

CGameRecording_UserRemoveTimelineEntry_Request::~CGameRecording_UserRemoveTimelineEntry_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserRemoveTimelineEntry_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserRemoveTimelineEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UserRemoveTimelineEntry_Request::ArenaDtor(void* object) {
  CGameRecording_UserRemoveTimelineEntry_Request* _this = reinterpret_cast< CGameRecording_UserRemoveTimelineEntry_Request* >(object);
  (void)_this;
}
void CGameRecording_UserRemoveTimelineEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserRemoveTimelineEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserRemoveTimelineEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserRemoveTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_id_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(entry_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserRemoveTimelineEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserRemoveTimelineEntry_Request.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UserRemoveTimelineEntry_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserRemoveTimelineEntry_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserRemoveTimelineEntry_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserRemoveTimelineEntry_Request.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_entry_id(), target);
  }

  // optional string clip_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UserRemoveTimelineEntry_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserRemoveTimelineEntry_Request)
  return target;
}

size_t CGameRecording_UserRemoveTimelineEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserRemoveTimelineEntry_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string clip_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 entry_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserRemoveTimelineEntry_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserRemoveTimelineEntry_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserRemoveTimelineEntry_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserRemoveTimelineEntry_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserRemoveTimelineEntry_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_UserRemoveTimelineEntry_Request::MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      entry_id_ = from.entry_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UserRemoveTimelineEntry_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserRemoveTimelineEntry_Request::CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserRemoveTimelineEntry_Request::IsInitialized() const {
  return true;
}

void CGameRecording_UserRemoveTimelineEntry_Request::InternalSwap(CGameRecording_UserRemoveTimelineEntry_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UserRemoveTimelineEntry_Request, entry_id_)
      + sizeof(CGameRecording_UserRemoveTimelineEntry_Request::entry_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UserRemoveTimelineEntry_Request, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserRemoveTimelineEntry_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UserRemoveTimelineEntry_Response::_Internal {
 public:
};

CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UserRemoveTimelineEntry_Response)
}
CGameRecording_UserRemoveTimelineEntry_Response::CGameRecording_UserRemoveTimelineEntry_Response(const CGameRecording_UserRemoveTimelineEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UserRemoveTimelineEntry_Response)
}

void CGameRecording_UserRemoveTimelineEntry_Response::SharedCtor() {
}

CGameRecording_UserRemoveTimelineEntry_Response::~CGameRecording_UserRemoveTimelineEntry_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_UserRemoveTimelineEntry_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UserRemoveTimelineEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_UserRemoveTimelineEntry_Response::ArenaDtor(void* object) {
  CGameRecording_UserRemoveTimelineEntry_Response* _this = reinterpret_cast< CGameRecording_UserRemoveTimelineEntry_Response* >(object);
  (void)_this;
}
void CGameRecording_UserRemoveTimelineEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UserRemoveTimelineEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UserRemoveTimelineEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UserRemoveTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UserRemoveTimelineEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UserRemoveTimelineEntry_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UserRemoveTimelineEntry_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UserRemoveTimelineEntry_Response)
  return target;
}

size_t CGameRecording_UserRemoveTimelineEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UserRemoveTimelineEntry_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UserRemoveTimelineEntry_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UserRemoveTimelineEntry_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UserRemoveTimelineEntry_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UserRemoveTimelineEntry_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UserRemoveTimelineEntry_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_UserRemoveTimelineEntry_Response::MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_UserRemoveTimelineEntry_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UserRemoveTimelineEntry_Response::CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UserRemoveTimelineEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UserRemoveTimelineEntry_Response::IsInitialized() const {
  return true;
}

void CGameRecording_UserRemoveTimelineEntry_Response::InternalSwap(CGameRecording_UserRemoveTimelineEntry_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UserRemoveTimelineEntry_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ManuallyDeleteRecordingsForApps_Request::_Internal {
 public:
};

CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
}
CGameRecording_ManuallyDeleteRecordingsForApps_Request::CGameRecording_ManuallyDeleteRecordingsForApps_Request(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_ids_(from.game_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SharedCtor() {
}

CGameRecording_ManuallyDeleteRecordingsForApps_Request::~CGameRecording_ManuallyDeleteRecordingsForApps_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::ArenaDtor(void* object) {
  CGameRecording_ManuallyDeleteRecordingsForApps_Request* _this = reinterpret_cast< CGameRecording_ManuallyDeleteRecordingsForApps_Request* >(object);
  (void)_this;
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ManuallyDeleteRecordingsForApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 game_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_game_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_game_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ManuallyDeleteRecordingsForApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 game_ids = 1;
  for (int i = 0, n = this->_internal_game_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  return target;
}

size_t CGameRecording_ManuallyDeleteRecordingsForApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 game_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->game_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ManuallyDeleteRecordingsForApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ManuallyDeleteRecordingsForApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_ids_.MergeFrom(from.game_ids_);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ManuallyDeleteRecordingsForApps_Request::IsInitialized() const {
  return true;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Request::InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_ids_.InternalSwap(&other->game_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ManuallyDeleteRecordingsForApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ManuallyDeleteRecordingsForApps_Response::_Internal {
 public:
};

CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
}
CGameRecording_ManuallyDeleteRecordingsForApps_Response::CGameRecording_ManuallyDeleteRecordingsForApps_Response(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SharedCtor() {
}

CGameRecording_ManuallyDeleteRecordingsForApps_Response::~CGameRecording_ManuallyDeleteRecordingsForApps_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::ArenaDtor(void* object) {
  CGameRecording_ManuallyDeleteRecordingsForApps_Response* _this = reinterpret_cast< CGameRecording_ManuallyDeleteRecordingsForApps_Response* >(object);
  (void)_this;
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ManuallyDeleteRecordingsForApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ManuallyDeleteRecordingsForApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ManuallyDeleteRecordingsForApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  return target;
}

size_t CGameRecording_ManuallyDeleteRecordingsForApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ManuallyDeleteRecordingsForApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ManuallyDeleteRecordingsForApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ManuallyDeleteRecordingsForApps_Response::IsInitialized() const {
  return true;
}

void CGameRecording_ManuallyDeleteRecordingsForApps_Response::InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ManuallyDeleteRecordingsForApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTotalDiskSpaceUsage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTotalDiskSpaceUsage_Request>()._has_bits_);
  static void set_has_folder_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
}
CGameRecording_GetTotalDiskSpaceUsage_Request::CGameRecording_GetTotalDiskSpaceUsage_Request(const CGameRecording_GetTotalDiskSpaceUsage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_folder_path()) {
    folder_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_folder_path(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::SharedCtor() {
folder_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

CGameRecording_GetTotalDiskSpaceUsage_Request::~CGameRecording_GetTotalDiskSpaceUsage_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTotalDiskSpaceUsage_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  folder_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::ArenaDtor(void* object) {
  CGameRecording_GetTotalDiskSpaceUsage_Request* _this = reinterpret_cast< CGameRecording_GetTotalDiskSpaceUsage_Request* >(object);
  (void)_this;
}
void CGameRecording_GetTotalDiskSpaceUsage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTotalDiskSpaceUsage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    folder_path_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTotalDiskSpaceUsage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string folder_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_folder_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDiskSpaceType_IsValid(val))) {
            _internal_set_type(static_cast<::EDiskSpaceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTotalDiskSpaceUsage_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string folder_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_folder_path().data(), static_cast<int>(this->_internal_folder_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_folder_path(), target);
  }

  // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTotalDiskSpaceUsage_Request)
  return target;
}

size_t CGameRecording_GetTotalDiskSpaceUsage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string folder_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_folder_path());
    }

    // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTotalDiskSpaceUsage_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTotalDiskSpaceUsage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTotalDiskSpaceUsage_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTotalDiskSpaceUsage_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_folder_path(from._internal_folder_path());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTotalDiskSpaceUsage_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetTotalDiskSpaceUsage_Request::InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  folder_path_.Swap(&other->folder_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTotalDiskSpaceUsage_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetTotalDiskSpaceUsage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetTotalDiskSpaceUsage_Response>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
}
CGameRecording_GetTotalDiskSpaceUsage_Response::CGameRecording_GetTotalDiskSpaceUsage_Response(const CGameRecording_GetTotalDiskSpaceUsage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::SharedCtor() {
size_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetTotalDiskSpaceUsage_Response::~CGameRecording_GetTotalDiskSpaceUsage_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetTotalDiskSpaceUsage_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::ArenaDtor(void* object) {
  CGameRecording_GetTotalDiskSpaceUsage_Response* _this = reinterpret_cast< CGameRecording_GetTotalDiskSpaceUsage_Response* >(object);
  (void)_this;
}
void CGameRecording_GetTotalDiskSpaceUsage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetTotalDiskSpaceUsage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetTotalDiskSpaceUsage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetTotalDiskSpaceUsage_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetTotalDiskSpaceUsage_Response)
  return target;
}

size_t CGameRecording_GetTotalDiskSpaceUsage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetTotalDiskSpaceUsage_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetTotalDiskSpaceUsage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetTotalDiskSpaceUsage_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetTotalDiskSpaceUsage_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_set_size(from._internal_size());
  }
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetTotalDiskSpaceUsage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetTotalDiskSpaceUsage_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetTotalDiskSpaceUsage_Response::InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetTotalDiskSpaceUsage_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetThumbnails_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_major_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  start_offset_us_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Request)
}
CGameRecording_GetThumbnails_Request::CGameRecording_GetThumbnails_Request(const CGameRecording_GetThumbnails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      start_offset_us_(from.start_offset_us_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recording_id()) {
    recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recording_id(), 
      GetArena());
  }
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&time_precision_, &from.time_precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&major_axis_) -
    reinterpret_cast<char*>(&time_precision_)) + sizeof(major_axis_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Request)
}

void CGameRecording_GetThumbnails_Request::SharedCtor() {
recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_precision_ = 0;
major_axis_ = 512u;
}

CGameRecording_GetThumbnails_Request::~CGameRecording_GetThumbnails_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recording_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetThumbnails_Request::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Request* _this = reinterpret_cast< CGameRecording_GetThumbnails_Request* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_offset_us_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      recording_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    time_precision_ = 0;
    major_axis_ = 512u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recording_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.recording_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 start_offset_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_start_offset_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_start_offset_us(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 major_axis = 5 [default = 512];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_major_axis(&has_bits);
          major_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EThumbnailTimePrecision_IsValid(val))) {
            _internal_set_time_precision(static_cast<::EThumbnailTimePrecision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_GetThumbnails_Request.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string recording_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recording_id().data(), static_cast<int>(this->_internal_recording_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.recording_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recording_id(), target);
  }

  // optional string clip_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.clip_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_id(), target);
  }

  // repeated int64 start_offset_us = 4;
  for (int i = 0, n = this->_internal_start_offset_us_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_offset_us(i), target);
  }

  // optional uint32 major_axis = 5 [default = 512];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_major_axis(), target);
  }

  // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_time_precision(), target);
  }

  // optional string timeline_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_GetThumbnails_Request.timeline_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timeline_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Request)
  return target;
}

size_t CGameRecording_GetThumbnails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 start_offset_us = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->start_offset_us_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_start_offset_us_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string recording_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recording_id());
    }

    // optional string clip_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string timeline_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_precision());
    }

    // optional uint32 major_axis = 5 [default = 512];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_major_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Request::MergeFrom(const CGameRecording_GetThumbnails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_offset_us_.MergeFrom(from.start_offset_us_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_recording_id(from._internal_recording_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000008u) {
      time_precision_ = from.time_precision_;
    }
    if (cached_has_bits & 0x00000010u) {
      major_axis_ = from.major_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetThumbnails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Request::CopyFrom(const CGameRecording_GetThumbnails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Request::InternalSwap(CGameRecording_GetThumbnails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_offset_us_.InternalSwap(&other->start_offset_us_);
  recording_id_.Swap(&other->recording_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_precision_, other->time_precision_);
  swap(major_axis_, other->major_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Response_Thumbnail::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetThumbnails_Response_Thumbnail>()._has_bits_);
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Response.Thumbnail)
}
CGameRecording_GetThumbnails_Response_Thumbnail::CGameRecording_GetThumbnails_Response_Thumbnail(const CGameRecording_GetThumbnails_Response_Thumbnail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_data()) {
    image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_data(), 
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Response.Thumbnail)
}

void CGameRecording_GetThumbnails_Response_Thumbnail::SharedCtor() {
image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

CGameRecording_GetThumbnails_Response_Thumbnail::~CGameRecording_GetThumbnails_Response_Thumbnail() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Response.Thumbnail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Response_Thumbnail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_GetThumbnails_Response_Thumbnail::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Response_Thumbnail* _this = reinterpret_cast< CGameRecording_GetThumbnails_Response_Thumbnail* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Response_Thumbnail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Response_Thumbnail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Response_Thumbnail::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Response_Thumbnail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes image_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Response_Thumbnail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes image_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image_data(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Response.Thumbnail)
  return target;
}

size_t CGameRecording_GetThumbnails_Response_Thumbnail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes image_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image_data());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Response_Thumbnail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Response_Thumbnail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Response_Thumbnail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Response.Thumbnail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Response.Thumbnail)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Response_Thumbnail::MergeFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_data(from._internal_image_data());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_GetThumbnails_Response_Thumbnail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Response_Thumbnail::CopyFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Response.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Response_Thumbnail::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Response_Thumbnail::InternalSwap(CGameRecording_GetThumbnails_Response_Thumbnail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_GetThumbnails_Response_Thumbnail, height_)
      + sizeof(CGameRecording_GetThumbnails_Response_Thumbnail::height_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_GetThumbnails_Response_Thumbnail, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Response_Thumbnail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetThumbnails_Response::_Internal {
 public:
};

CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  thumbnails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetThumbnails_Response)
}
CGameRecording_GetThumbnails_Response::CGameRecording_GetThumbnails_Response(const CGameRecording_GetThumbnails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      thumbnails_(from.thumbnails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetThumbnails_Response)
}

void CGameRecording_GetThumbnails_Response::SharedCtor() {
}

CGameRecording_GetThumbnails_Response::~CGameRecording_GetThumbnails_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetThumbnails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetThumbnails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetThumbnails_Response::ArenaDtor(void* object) {
  CGameRecording_GetThumbnails_Response* _this = reinterpret_cast< CGameRecording_GetThumbnails_Response* >(object);
  (void)_this;
}
void CGameRecording_GetThumbnails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetThumbnails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetThumbnails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetThumbnails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumbnails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetThumbnails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetThumbnails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetThumbnails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thumbnails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_thumbnails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetThumbnails_Response)
  return target;
}

size_t CGameRecording_GetThumbnails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetThumbnails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
  total_size += 1UL * this->_internal_thumbnails_size();
  for (const auto& msg : this->thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetThumbnails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetThumbnails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetThumbnails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetThumbnails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetThumbnails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetThumbnails_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetThumbnails_Response::MergeFrom(const CGameRecording_GetThumbnails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetThumbnails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumbnails_.MergeFrom(from.thumbnails_);
}

void CGameRecording_GetThumbnails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetThumbnails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetThumbnails_Response::CopyFrom(const CGameRecording_GetThumbnails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetThumbnails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetThumbnails_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetThumbnails_Response::InternalSwap(CGameRecording_GetThumbnails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  thumbnails_.InternalSwap(&other->thumbnails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetThumbnails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StartRecording_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StartRecording_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StartRecording_Request)
}
CGameRecording_StartRecording_Request::CGameRecording_StartRecording_Request(const CGameRecording_StartRecording_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StartRecording_Request)
}

void CGameRecording_StartRecording_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_StartRecording_Request::~CGameRecording_StartRecording_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_StartRecording_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StartRecording_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StartRecording_Request::ArenaDtor(void* object) {
  CGameRecording_StartRecording_Request* _this = reinterpret_cast< CGameRecording_StartRecording_Request* >(object);
  (void)_this;
}
void CGameRecording_StartRecording_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StartRecording_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StartRecording_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StartRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StartRecording_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StartRecording_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StartRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StartRecording_Request)
  return target;
}

size_t CGameRecording_StartRecording_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StartRecording_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StartRecording_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StartRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StartRecording_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StartRecording_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StartRecording_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StartRecording_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_StartRecording_Request::MergeFrom(const CGameRecording_StartRecording_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StartRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_StartRecording_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StartRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StartRecording_Request::CopyFrom(const CGameRecording_StartRecording_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StartRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StartRecording_Request::IsInitialized() const {
  return true;
}

void CGameRecording_StartRecording_Request::InternalSwap(CGameRecording_StartRecording_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StartRecording_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StartRecording_Response::_Internal {
 public:
};

CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StartRecording_Response)
}
CGameRecording_StartRecording_Response::CGameRecording_StartRecording_Response(const CGameRecording_StartRecording_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StartRecording_Response)
}

void CGameRecording_StartRecording_Response::SharedCtor() {
}

CGameRecording_StartRecording_Response::~CGameRecording_StartRecording_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_StartRecording_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StartRecording_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StartRecording_Response::ArenaDtor(void* object) {
  CGameRecording_StartRecording_Response* _this = reinterpret_cast< CGameRecording_StartRecording_Response* >(object);
  (void)_this;
}
void CGameRecording_StartRecording_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StartRecording_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StartRecording_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StartRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StartRecording_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StartRecording_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StartRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StartRecording_Response)
  return target;
}

size_t CGameRecording_StartRecording_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StartRecording_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StartRecording_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StartRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StartRecording_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StartRecording_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StartRecording_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StartRecording_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_StartRecording_Response::MergeFrom(const CGameRecording_StartRecording_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StartRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_StartRecording_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StartRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StartRecording_Response::CopyFrom(const CGameRecording_StartRecording_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StartRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StartRecording_Response::IsInitialized() const {
  return true;
}

void CGameRecording_StartRecording_Response::InternalSwap(CGameRecording_StartRecording_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StartRecording_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StopRecording_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StopRecording_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StopRecording_Request)
}
CGameRecording_StopRecording_Request::CGameRecording_StopRecording_Request(const CGameRecording_StopRecording_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StopRecording_Request)
}

void CGameRecording_StopRecording_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_StopRecording_Request::~CGameRecording_StopRecording_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_StopRecording_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StopRecording_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_StopRecording_Request::ArenaDtor(void* object) {
  CGameRecording_StopRecording_Request* _this = reinterpret_cast< CGameRecording_StopRecording_Request* >(object);
  (void)_this;
}
void CGameRecording_StopRecording_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StopRecording_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StopRecording_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StopRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StopRecording_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StopRecording_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StopRecording_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StopRecording_Request)
  return target;
}

size_t CGameRecording_StopRecording_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StopRecording_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StopRecording_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StopRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StopRecording_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StopRecording_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StopRecording_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StopRecording_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_StopRecording_Request::MergeFrom(const CGameRecording_StopRecording_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StopRecording_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_StopRecording_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StopRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StopRecording_Request::CopyFrom(const CGameRecording_StopRecording_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StopRecording_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StopRecording_Request::IsInitialized() const {
  return true;
}

void CGameRecording_StopRecording_Request::InternalSwap(CGameRecording_StopRecording_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StopRecording_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_StopRecording_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_StopRecording_Response>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_StopRecording_Response* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_StopRecording_Response::_Internal::summary(const CGameRecording_StopRecording_Response* msg) {
  return *msg->summary_;
}
CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_StopRecording_Response)
}
CGameRecording_StopRecording_Response::CGameRecording_StopRecording_Response(const CGameRecording_StopRecording_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_StopRecording_Response)
}

void CGameRecording_StopRecording_Response::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_StopRecording_Response::~CGameRecording_StopRecording_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_StopRecording_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_StopRecording_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_StopRecording_Response::ArenaDtor(void* object) {
  CGameRecording_StopRecording_Response* _this = reinterpret_cast< CGameRecording_StopRecording_Response* >(object);
  (void)_this;
}
void CGameRecording_StopRecording_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_StopRecording_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_StopRecording_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_StopRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_StopRecording_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_StopRecording_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_StopRecording_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_StopRecording_Response)
  return target;
}

size_t CGameRecording_StopRecording_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_StopRecording_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_StopRecording_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_StopRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_StopRecording_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_StopRecording_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_StopRecording_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_StopRecording_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_StopRecording_Response::MergeFrom(const CGameRecording_StopRecording_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_StopRecording_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_StopRecording_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_StopRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_StopRecording_Response::CopyFrom(const CGameRecording_StopRecording_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_StopRecording_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_StopRecording_Response::IsInitialized() const {
  return true;
}

void CGameRecording_StopRecording_Response::InternalSwap(CGameRecording_StopRecording_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_StopRecording_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetRecordingSize_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetRecordingSize_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetRecordingSize_Request)
}
CGameRecording_GetRecordingSize_Request::CGameRecording_GetRecordingSize_Request(const CGameRecording_GetRecordingSize_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetRecordingSize_Request)
}

void CGameRecording_GetRecordingSize_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetRecordingSize_Request::~CGameRecording_GetRecordingSize_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetRecordingSize_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetRecordingSize_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetRecordingSize_Request::ArenaDtor(void* object) {
  CGameRecording_GetRecordingSize_Request* _this = reinterpret_cast< CGameRecording_GetRecordingSize_Request* >(object);
  (void)_this;
}
void CGameRecording_GetRecordingSize_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetRecordingSize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetRecordingSize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetRecordingSize_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetRecordingSize_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetRecordingSize_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetRecordingSize_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetRecordingSize_Request)
  return target;
}

size_t CGameRecording_GetRecordingSize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetRecordingSize_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetRecordingSize_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetRecordingSize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetRecordingSize_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetRecordingSize_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetRecordingSize_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetRecordingSize_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetRecordingSize_Request::MergeFrom(const CGameRecording_GetRecordingSize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetRecordingSize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_GetRecordingSize_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetRecordingSize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetRecordingSize_Request::CopyFrom(const CGameRecording_GetRecordingSize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetRecordingSize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetRecordingSize_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetRecordingSize_Request::InternalSwap(CGameRecording_GetRecordingSize_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetRecordingSize_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetRecordingSize_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetRecordingSize_Response>()._has_bits_);
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetRecordingSize_Response)
}
CGameRecording_GetRecordingSize_Response::CGameRecording_GetRecordingSize_Response(const CGameRecording_GetRecordingSize_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetRecordingSize_Response)
}

void CGameRecording_GetRecordingSize_Response::SharedCtor() {
file_size_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetRecordingSize_Response::~CGameRecording_GetRecordingSize_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetRecordingSize_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetRecordingSize_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetRecordingSize_Response::ArenaDtor(void* object) {
  CGameRecording_GetRecordingSize_Response* _this = reinterpret_cast< CGameRecording_GetRecordingSize_Response* >(object);
  (void)_this;
}
void CGameRecording_GetRecordingSize_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetRecordingSize_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetRecordingSize_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetRecordingSize_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetRecordingSize_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetRecordingSize_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetRecordingSize_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetRecordingSize_Response)
  return target;
}

size_t CGameRecording_GetRecordingSize_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetRecordingSize_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 file_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetRecordingSize_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetRecordingSize_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetRecordingSize_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetRecordingSize_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetRecordingSize_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetRecordingSize_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetRecordingSize_Response::MergeFrom(const CGameRecording_GetRecordingSize_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetRecordingSize_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_size()) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void CGameRecording_GetRecordingSize_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetRecordingSize_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetRecordingSize_Response::CopyFrom(const CGameRecording_GetRecordingSize_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetRecordingSize_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetRecordingSize_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetRecordingSize_Response::InternalSwap(CGameRecording_GetRecordingSize_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_size_, other->file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetRecordingSize_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CleanupBackgroundRecordings_Request::_Internal {
 public:
};

CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CleanupBackgroundRecordings_Request)
}
CGameRecording_CleanupBackgroundRecordings_Request::CGameRecording_CleanupBackgroundRecordings_Request(const CGameRecording_CleanupBackgroundRecordings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CleanupBackgroundRecordings_Request)
}

void CGameRecording_CleanupBackgroundRecordings_Request::SharedCtor() {
}

CGameRecording_CleanupBackgroundRecordings_Request::~CGameRecording_CleanupBackgroundRecordings_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_CleanupBackgroundRecordings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CleanupBackgroundRecordings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_CleanupBackgroundRecordings_Request::ArenaDtor(void* object) {
  CGameRecording_CleanupBackgroundRecordings_Request* _this = reinterpret_cast< CGameRecording_CleanupBackgroundRecordings_Request* >(object);
  (void)_this;
}
void CGameRecording_CleanupBackgroundRecordings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CleanupBackgroundRecordings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CleanupBackgroundRecordings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CleanupBackgroundRecordings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CleanupBackgroundRecordings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CleanupBackgroundRecordings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CleanupBackgroundRecordings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CleanupBackgroundRecordings_Request)
  return target;
}

size_t CGameRecording_CleanupBackgroundRecordings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CleanupBackgroundRecordings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CleanupBackgroundRecordings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CleanupBackgroundRecordings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CleanupBackgroundRecordings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CleanupBackgroundRecordings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CleanupBackgroundRecordings_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_CleanupBackgroundRecordings_Request::MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_CleanupBackgroundRecordings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CleanupBackgroundRecordings_Request::CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CleanupBackgroundRecordings_Request::IsInitialized() const {
  return true;
}

void CGameRecording_CleanupBackgroundRecordings_Request::InternalSwap(CGameRecording_CleanupBackgroundRecordings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CleanupBackgroundRecordings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CleanupBackgroundRecordings_Response::_Internal {
 public:
};

CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CleanupBackgroundRecordings_Response)
}
CGameRecording_CleanupBackgroundRecordings_Response::CGameRecording_CleanupBackgroundRecordings_Response(const CGameRecording_CleanupBackgroundRecordings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CleanupBackgroundRecordings_Response)
}

void CGameRecording_CleanupBackgroundRecordings_Response::SharedCtor() {
}

CGameRecording_CleanupBackgroundRecordings_Response::~CGameRecording_CleanupBackgroundRecordings_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_CleanupBackgroundRecordings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CleanupBackgroundRecordings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_CleanupBackgroundRecordings_Response::ArenaDtor(void* object) {
  CGameRecording_CleanupBackgroundRecordings_Response* _this = reinterpret_cast< CGameRecording_CleanupBackgroundRecordings_Response* >(object);
  (void)_this;
}
void CGameRecording_CleanupBackgroundRecordings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CleanupBackgroundRecordings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CleanupBackgroundRecordings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CleanupBackgroundRecordings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CleanupBackgroundRecordings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CleanupBackgroundRecordings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CleanupBackgroundRecordings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CleanupBackgroundRecordings_Response)
  return target;
}

size_t CGameRecording_CleanupBackgroundRecordings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CleanupBackgroundRecordings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CleanupBackgroundRecordings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CleanupBackgroundRecordings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CleanupBackgroundRecordings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CleanupBackgroundRecordings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CleanupBackgroundRecordings_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_CleanupBackgroundRecordings_Response::MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_CleanupBackgroundRecordings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CleanupBackgroundRecordings_Response::CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CleanupBackgroundRecordings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CleanupBackgroundRecordings_Response::IsInitialized() const {
  return true;
}

void CGameRecording_CleanupBackgroundRecordings_Response::InternalSwap(CGameRecording_CleanupBackgroundRecordings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CleanupBackgroundRecordings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPlatformCapabilities_Request::_Internal {
 public:
};

CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPlatformCapabilities_Request)
}
CGameRecording_GetPlatformCapabilities_Request::CGameRecording_GetPlatformCapabilities_Request(const CGameRecording_GetPlatformCapabilities_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPlatformCapabilities_Request)
}

void CGameRecording_GetPlatformCapabilities_Request::SharedCtor() {
}

CGameRecording_GetPlatformCapabilities_Request::~CGameRecording_GetPlatformCapabilities_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPlatformCapabilities_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPlatformCapabilities_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPlatformCapabilities_Request::ArenaDtor(void* object) {
  CGameRecording_GetPlatformCapabilities_Request* _this = reinterpret_cast< CGameRecording_GetPlatformCapabilities_Request* >(object);
  (void)_this;
}
void CGameRecording_GetPlatformCapabilities_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPlatformCapabilities_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPlatformCapabilities_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPlatformCapabilities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPlatformCapabilities_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPlatformCapabilities_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPlatformCapabilities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPlatformCapabilities_Request)
  return target;
}

size_t CGameRecording_GetPlatformCapabilities_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPlatformCapabilities_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPlatformCapabilities_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPlatformCapabilities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPlatformCapabilities_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPlatformCapabilities_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPlatformCapabilities_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPlatformCapabilities_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPlatformCapabilities_Request::MergeFrom(const CGameRecording_GetPlatformCapabilities_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPlatformCapabilities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_GetPlatformCapabilities_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPlatformCapabilities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPlatformCapabilities_Request::CopyFrom(const CGameRecording_GetPlatformCapabilities_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPlatformCapabilities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPlatformCapabilities_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetPlatformCapabilities_Request::InternalSwap(CGameRecording_GetPlatformCapabilities_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPlatformCapabilities_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetPlatformCapabilities_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetPlatformCapabilities_Response>()._has_bits_);
  static void set_has_per_process_audio_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetPlatformCapabilities_Response)
}
CGameRecording_GetPlatformCapabilities_Response::CGameRecording_GetPlatformCapabilities_Response(const CGameRecording_GetPlatformCapabilities_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_process_audio_capture_ = from.per_process_audio_capture_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetPlatformCapabilities_Response)
}

void CGameRecording_GetPlatformCapabilities_Response::SharedCtor() {
per_process_audio_capture_ = false;
}

CGameRecording_GetPlatformCapabilities_Response::~CGameRecording_GetPlatformCapabilities_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetPlatformCapabilities_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetPlatformCapabilities_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetPlatformCapabilities_Response::ArenaDtor(void* object) {
  CGameRecording_GetPlatformCapabilities_Response* _this = reinterpret_cast< CGameRecording_GetPlatformCapabilities_Response* >(object);
  (void)_this;
}
void CGameRecording_GetPlatformCapabilities_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetPlatformCapabilities_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetPlatformCapabilities_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetPlatformCapabilities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_process_audio_capture_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetPlatformCapabilities_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool per_process_audio_capture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_per_process_audio_capture(&has_bits);
          per_process_audio_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetPlatformCapabilities_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetPlatformCapabilities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool per_process_audio_capture = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_per_process_audio_capture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetPlatformCapabilities_Response)
  return target;
}

size_t CGameRecording_GetPlatformCapabilities_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetPlatformCapabilities_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool per_process_audio_capture = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetPlatformCapabilities_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetPlatformCapabilities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetPlatformCapabilities_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetPlatformCapabilities_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetPlatformCapabilities_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetPlatformCapabilities_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetPlatformCapabilities_Response::MergeFrom(const CGameRecording_GetPlatformCapabilities_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetPlatformCapabilities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_per_process_audio_capture()) {
    _internal_set_per_process_audio_capture(from._internal_per_process_audio_capture());
  }
}

void CGameRecording_GetPlatformCapabilities_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetPlatformCapabilities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetPlatformCapabilities_Response::CopyFrom(const CGameRecording_GetPlatformCapabilities_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetPlatformCapabilities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetPlatformCapabilities_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetPlatformCapabilities_Response::InternalSwap(CGameRecording_GetPlatformCapabilities_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(per_process_audio_capture_, other->per_process_audio_capture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetPlatformCapabilities_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipCreated_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipCreated_Notification>()._has_bits_);
  static const ::CGameRecording_ClipSummary& summary(const CGameRecording_ClipCreated_Notification* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecording_ClipSummary&
CGameRecording_ClipCreated_Notification::_Internal::summary(const CGameRecording_ClipCreated_Notification* msg) {
  return *msg->summary_;
}
CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipCreated_Notification)
}
CGameRecording_ClipCreated_Notification::CGameRecording_ClipCreated_Notification(const CGameRecording_ClipCreated_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CGameRecording_ClipSummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipCreated_Notification)
}

void CGameRecording_ClipCreated_Notification::SharedCtor() {
summary_ = nullptr;
}

CGameRecording_ClipCreated_Notification::~CGameRecording_ClipCreated_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipCreated_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipCreated_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CGameRecording_ClipCreated_Notification::ArenaDtor(void* object) {
  CGameRecording_ClipCreated_Notification* _this = reinterpret_cast< CGameRecording_ClipCreated_Notification* >(object);
  (void)_this;
}
void CGameRecording_ClipCreated_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipCreated_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipCreated_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipCreated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipCreated_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecording_ClipSummary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipCreated_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipCreated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecording_ClipSummary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipCreated_Notification)
  return target;
}

size_t CGameRecording_ClipCreated_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipCreated_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecording_ClipSummary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipCreated_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipCreated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipCreated_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipCreated_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipCreated_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipCreated_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipCreated_Notification::MergeFrom(const CGameRecording_ClipCreated_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipCreated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CGameRecording_ClipSummary::MergeFrom(from._internal_summary());
  }
}

void CGameRecording_ClipCreated_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipCreated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipCreated_Notification::CopyFrom(const CGameRecording_ClipCreated_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipCreated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipCreated_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ClipCreated_Notification::InternalSwap(CGameRecording_ClipCreated_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipCreated_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ClipDeleted_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ClipDeleted_Notification>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ClipDeleted_Notification)
}
CGameRecording_ClipDeleted_Notification::CGameRecording_ClipDeleted_Notification(const CGameRecording_ClipDeleted_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ClipDeleted_Notification)
}

void CGameRecording_ClipDeleted_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_ClipDeleted_Notification::~CGameRecording_ClipDeleted_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ClipDeleted_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ClipDeleted_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ClipDeleted_Notification::ArenaDtor(void* object) {
  CGameRecording_ClipDeleted_Notification* _this = reinterpret_cast< CGameRecording_ClipDeleted_Notification* >(object);
  (void)_this;
}
void CGameRecording_ClipDeleted_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ClipDeleted_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ClipDeleted_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ClipDeleted_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ClipDeleted_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ClipDeleted_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ClipDeleted_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ClipDeleted_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ClipDeleted_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional uint64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ClipDeleted_Notification)
  return target;
}

size_t CGameRecording_ClipDeleted_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ClipDeleted_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional uint64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ClipDeleted_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ClipDeleted_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ClipDeleted_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ClipDeleted_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ClipDeleted_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ClipDeleted_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ClipDeleted_Notification::MergeFrom(const CGameRecording_ClipDeleted_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ClipDeleted_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ClipDeleted_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ClipDeleted_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ClipDeleted_Notification::CopyFrom(const CGameRecording_ClipDeleted_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ClipDeleted_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ClipDeleted_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ClipDeleted_Notification::InternalSwap(CGameRecording_ClipDeleted_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ClipDeleted_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_ExportProgress_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_ExportProgress_Notification>()._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_ExportProgress_Notification)
}
CGameRecording_ExportProgress_Notification::CGameRecording_ExportProgress_Notification(const CGameRecording_ExportProgress_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_ExportProgress_Notification)
}

void CGameRecording_ExportProgress_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
}

CGameRecording_ExportProgress_Notification::~CGameRecording_ExportProgress_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_ExportProgress_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_ExportProgress_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_ExportProgress_Notification::ArenaDtor(void* object) {
  CGameRecording_ExportProgress_Notification* _this = reinterpret_cast< CGameRecording_ExportProgress_Notification* >(object);
  (void)_this;
}
void CGameRecording_ExportProgress_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_ExportProgress_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_ExportProgress_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_ExportProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_ExportProgress_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_ExportProgress_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_ExportProgress_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_ExportProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float progress = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_progress(), target);
  }

  // optional string clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_ExportProgress_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clip_id(), target);
  }

  // optional int32 eresult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_ExportProgress_Notification)
  return target;
}

size_t CGameRecording_ExportProgress_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_ExportProgress_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional float progress = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 eresult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_ExportProgress_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_ExportProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_ExportProgress_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_ExportProgress_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_ExportProgress_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_ExportProgress_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_ExportProgress_Notification::MergeFrom(const CGameRecording_ExportProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_ExportProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_ExportProgress_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_ExportProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_ExportProgress_Notification::CopyFrom(const CGameRecording_ExportProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_ExportProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_ExportProgress_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_ExportProgress_Notification::InternalSwap(CGameRecording_ExportProgress_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_ExportProgress_Notification, eresult_)
      + sizeof(CGameRecording_ExportProgress_Notification::eresult_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_ExportProgress_Notification, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_ExportProgress_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_UploadProgress_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_UploadProgress_Notification>()._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_UploadProgress_Notification)
}
CGameRecording_UploadProgress_Notification::CGameRecording_UploadProgress_Notification(const CGameRecording_UploadProgress_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_UploadProgress_Notification)
}

void CGameRecording_UploadProgress_Notification::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
}

CGameRecording_UploadProgress_Notification::~CGameRecording_UploadProgress_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_UploadProgress_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_UploadProgress_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_UploadProgress_Notification::ArenaDtor(void* object) {
  CGameRecording_UploadProgress_Notification* _this = reinterpret_cast< CGameRecording_UploadProgress_Notification* >(object);
  (void)_this;
}
void CGameRecording_UploadProgress_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_UploadProgress_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_UploadProgress_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_UploadProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_UploadProgress_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_UploadProgress_Notification.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_UploadProgress_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_UploadProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float progress = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_progress(), target);
  }

  // optional string clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_UploadProgress_Notification.clip_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clip_id(), target);
  }

  // optional int32 eresult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_UploadProgress_Notification)
  return target;
}

size_t CGameRecording_UploadProgress_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_UploadProgress_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional float progress = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 eresult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_UploadProgress_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_UploadProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_UploadProgress_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_UploadProgress_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_UploadProgress_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_UploadProgress_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_UploadProgress_Notification::MergeFrom(const CGameRecording_UploadProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_UploadProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_UploadProgress_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_UploadProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_UploadProgress_Notification::CopyFrom(const CGameRecording_UploadProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_UploadProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_UploadProgress_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_UploadProgress_Notification::InternalSwap(CGameRecording_UploadProgress_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_UploadProgress_Notification, eresult_)
      + sizeof(CGameRecording_UploadProgress_Notification::eresult_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_UploadProgress_Notification, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_UploadProgress_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SwitchBackgroundRecordingGame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_SwitchBackgroundRecordingGame_Request>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
}
CGameRecording_SwitchBackgroundRecordingGame_Request::CGameRecording_SwitchBackgroundRecordingGame_Request(const CGameRecording_SwitchBackgroundRecordingGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_SwitchBackgroundRecordingGame_Request::~CGameRecording_SwitchBackgroundRecordingGame_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_SwitchBackgroundRecordingGame_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::ArenaDtor(void* object) {
  CGameRecording_SwitchBackgroundRecordingGame_Request* _this = reinterpret_cast< CGameRecording_SwitchBackgroundRecordingGame_Request* >(object);
  (void)_this;
}
void CGameRecording_SwitchBackgroundRecordingGame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SwitchBackgroundRecordingGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SwitchBackgroundRecordingGame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SwitchBackgroundRecordingGame_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SwitchBackgroundRecordingGame_Request)
  return target;
}

size_t CGameRecording_SwitchBackgroundRecordingGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SwitchBackgroundRecordingGame_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SwitchBackgroundRecordingGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SwitchBackgroundRecordingGame_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SwitchBackgroundRecordingGame_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SwitchBackgroundRecordingGame_Request::IsInitialized() const {
  return true;
}

void CGameRecording_SwitchBackgroundRecordingGame_Request::InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SwitchBackgroundRecordingGame_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_SwitchBackgroundRecordingGame_Response::_Internal {
 public:
};

CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
}
CGameRecording_SwitchBackgroundRecordingGame_Response::CGameRecording_SwitchBackgroundRecordingGame_Response(const CGameRecording_SwitchBackgroundRecordingGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::SharedCtor() {
}

CGameRecording_SwitchBackgroundRecordingGame_Response::~CGameRecording_SwitchBackgroundRecordingGame_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_SwitchBackgroundRecordingGame_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::ArenaDtor(void* object) {
  CGameRecording_SwitchBackgroundRecordingGame_Response* _this = reinterpret_cast< CGameRecording_SwitchBackgroundRecordingGame_Response* >(object);
  (void)_this;
}
void CGameRecording_SwitchBackgroundRecordingGame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_SwitchBackgroundRecordingGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_SwitchBackgroundRecordingGame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_SwitchBackgroundRecordingGame_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_SwitchBackgroundRecordingGame_Response)
  return target;
}

size_t CGameRecording_SwitchBackgroundRecordingGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_SwitchBackgroundRecordingGame_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_SwitchBackgroundRecordingGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_SwitchBackgroundRecordingGame_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_SwitchBackgroundRecordingGame_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_SwitchBackgroundRecordingGame_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_SwitchBackgroundRecordingGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_SwitchBackgroundRecordingGame_Response::IsInitialized() const {
  return true;
}

void CGameRecording_SwitchBackgroundRecordingGame_Response::InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_SwitchBackgroundRecordingGame_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineHighlightMarker_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineHighlightMarker_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
}
CGameRecordingDebug_AddTimelineHighlightMarker_Request::CGameRecordingDebug_AddTimelineHighlightMarker_Request(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SharedCtor() {
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineHighlightMarker_Request::~CGameRecordingDebug_AddTimelineHighlightMarker_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineHighlightMarker_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineHighlightMarker_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineHighlightMarker_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineHighlightMarker_Request.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineHighlightMarker_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineHighlightMarker_Request.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineHighlightMarker_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string icon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string desc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineHighlightMarker_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineHighlightMarker_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::MergeFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::CopyFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineHighlightMarker_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Request::InternalSwap(CGameRecordingDebug_AddTimelineHighlightMarker_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineHighlightMarker_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineHighlightMarker_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
}
CGameRecordingDebug_AddTimelineHighlightMarker_Response::CGameRecordingDebug_AddTimelineHighlightMarker_Response(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineHighlightMarker_Response::~CGameRecordingDebug_AddTimelineHighlightMarker_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineHighlightMarker_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineHighlightMarker_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineHighlightMarker_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineHighlightMarker_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineHighlightMarker_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineHighlightMarker_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineHighlightMarker_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineHighlightMarker_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::MergeFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::CopyFrom(const CGameRecordingDebug_AddTimelineHighlightMarker_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineHighlightMarker_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineHighlightMarker_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineHighlightMarker_Response::InternalSwap(CGameRecordingDebug_AddTimelineHighlightMarker_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineHighlightMarker_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineTimestamp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineTimestamp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
}
CGameRecordingDebug_AddTimelineTimestamp_Request::CGameRecordingDebug_AddTimelineTimestamp_Request(const CGameRecordingDebug_AddTimelineTimestamp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineTimestamp_Request::~CGameRecordingDebug_AddTimelineTimestamp_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineTimestamp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineTimestamp_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineTimestamp_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineTimestamp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineTimestamp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineTimestamp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineTimestamp_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineTimestamp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineTimestamp_Request.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineTimestamp_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineTimestamp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineTimestamp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineTimestamp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineTimestamp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineTimestamp_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::MergeFrom(const CGameRecordingDebug_AddTimelineTimestamp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::CopyFrom(const CGameRecordingDebug_AddTimelineTimestamp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineTimestamp_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineTimestamp_Request::InternalSwap(CGameRecordingDebug_AddTimelineTimestamp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineTimestamp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineTimestamp_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
}
CGameRecordingDebug_AddTimelineTimestamp_Response::CGameRecordingDebug_AddTimelineTimestamp_Response(const CGameRecordingDebug_AddTimelineTimestamp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineTimestamp_Response::~CGameRecordingDebug_AddTimelineTimestamp_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineTimestamp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineTimestamp_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineTimestamp_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineTimestamp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineTimestamp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineTimestamp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineTimestamp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineTimestamp_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineTimestamp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineTimestamp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineTimestamp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineTimestamp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineTimestamp_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::MergeFrom(const CGameRecordingDebug_AddTimelineTimestamp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineTimestamp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::CopyFrom(const CGameRecordingDebug_AddTimelineTimestamp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineTimestamp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineTimestamp_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineTimestamp_Response::InternalSwap(CGameRecordingDebug_AddTimelineTimestamp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineTimestamp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeStart_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineRangeStart_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
}
CGameRecordingDebug_AddTimelineRangeStart_Request::CGameRecordingDebug_AddTimelineRangeStart_Request(const CGameRecordingDebug_AddTimelineRangeStart_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineRangeStart_Request::~CGameRecordingDebug_AddTimelineRangeStart_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeStart_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeStart_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeStart_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeStart_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeStart_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeStart_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeStart_Request.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeStart_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeStart_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeStart_Request.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeStart_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeStart_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeStart_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeStart_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeStart_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeStart_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeStart_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::MergeFrom(const CGameRecordingDebug_AddTimelineRangeStart_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::CopyFrom(const CGameRecordingDebug_AddTimelineRangeStart_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeStart_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeStart_Request::InternalSwap(CGameRecordingDebug_AddTimelineRangeStart_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeStart_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeStart_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
}
CGameRecordingDebug_AddTimelineRangeStart_Response::CGameRecordingDebug_AddTimelineRangeStart_Response(const CGameRecordingDebug_AddTimelineRangeStart_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineRangeStart_Response::~CGameRecordingDebug_AddTimelineRangeStart_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeStart_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeStart_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeStart_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeStart_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeStart_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeStart_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeStart_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeStart_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeStart_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeStart_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeStart_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeStart_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeStart_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::MergeFrom(const CGameRecordingDebug_AddTimelineRangeStart_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineRangeStart_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::CopyFrom(const CGameRecordingDebug_AddTimelineRangeStart_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeStart_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeStart_Response::InternalSwap(CGameRecordingDebug_AddTimelineRangeStart_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeStart_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeEnd_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_AddTimelineRangeEnd_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
}
CGameRecordingDebug_AddTimelineRangeEnd_Request::CGameRecordingDebug_AddTimelineRangeEnd_Request(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0u;
}

CGameRecordingDebug_AddTimelineRangeEnd_Request::~CGameRecordingDebug_AddTimelineRangeEnd_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeEnd_Request* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeEnd_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeEnd_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeEnd_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeEnd_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingDebug_AddTimelineRangeEnd_Request.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeEnd_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingDebug_AddTimelineRangeEnd_Request.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeEnd_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeEnd_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeEnd_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeEnd_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeEnd_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::MergeFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::CopyFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeEnd_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Request::InternalSwap(CGameRecordingDebug_AddTimelineRangeEnd_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeEnd_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_AddTimelineRangeEnd_Response::_Internal {
 public:
};

CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
}
CGameRecordingDebug_AddTimelineRangeEnd_Response::CGameRecordingDebug_AddTimelineRangeEnd_Response(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::SharedCtor() {
}

CGameRecordingDebug_AddTimelineRangeEnd_Response::~CGameRecordingDebug_AddTimelineRangeEnd_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_AddTimelineRangeEnd_Response* _this = reinterpret_cast< CGameRecordingDebug_AddTimelineRangeEnd_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_AddTimelineRangeEnd_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_AddTimelineRangeEnd_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_AddTimelineRangeEnd_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_AddTimelineRangeEnd_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  return target;
}

size_t CGameRecordingDebug_AddTimelineRangeEnd_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_AddTimelineRangeEnd_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_AddTimelineRangeEnd_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_AddTimelineRangeEnd_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_AddTimelineRangeEnd_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::MergeFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::CopyFrom(const CGameRecordingDebug_AddTimelineRangeEnd_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_AddTimelineRangeEnd_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_AddTimelineRangeEnd_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_AddTimelineRangeEnd_Response::InternalSwap(CGameRecordingDebug_AddTimelineRangeEnd_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_AddTimelineRangeEnd_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_SetTimelineGameMode_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingDebug_SetTimelineGameMode_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_SetTimelineGameMode_Request)
}
CGameRecordingDebug_SetTimelineGameMode_Request::CGameRecordingDebug_SetTimelineGameMode_Request(const CGameRecordingDebug_SetTimelineGameMode_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_SetTimelineGameMode_Request)
}

void CGameRecordingDebug_SetTimelineGameMode_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
}

CGameRecordingDebug_SetTimelineGameMode_Request::~CGameRecordingDebug_SetTimelineGameMode_Request() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_SetTimelineGameMode_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_SetTimelineGameMode_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::ArenaDtor(void* object) {
  CGameRecordingDebug_SetTimelineGameMode_Request* _this = reinterpret_cast< CGameRecordingDebug_SetTimelineGameMode_Request* >(object);
  (void)_this;
}
void CGameRecordingDebug_SetTimelineGameMode_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_SetTimelineGameMode_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_SetTimelineGameMode_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_SetTimelineGameMode_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_SetTimelineGameMode_Request)
  return target;
}

size_t CGameRecordingDebug_SetTimelineGameMode_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_SetTimelineGameMode_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_SetTimelineGameMode_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_SetTimelineGameMode_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_SetTimelineGameMode_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_SetTimelineGameMode_Request)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Request::MergeFrom(const CGameRecordingDebug_SetTimelineGameMode_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_SetTimelineGameMode_Request::CopyFrom(const CGameRecordingDebug_SetTimelineGameMode_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_SetTimelineGameMode_Request::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_SetTimelineGameMode_Request::InternalSwap(CGameRecordingDebug_SetTimelineGameMode_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingDebug_SetTimelineGameMode_Request, mode_)
      + sizeof(CGameRecordingDebug_SetTimelineGameMode_Request::mode_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingDebug_SetTimelineGameMode_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_SetTimelineGameMode_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingDebug_SetTimelineGameMode_Response::_Internal {
 public:
};

CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingDebug_SetTimelineGameMode_Response)
}
CGameRecordingDebug_SetTimelineGameMode_Response::CGameRecordingDebug_SetTimelineGameMode_Response(const CGameRecordingDebug_SetTimelineGameMode_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingDebug_SetTimelineGameMode_Response)
}

void CGameRecordingDebug_SetTimelineGameMode_Response::SharedCtor() {
}

CGameRecordingDebug_SetTimelineGameMode_Response::~CGameRecordingDebug_SetTimelineGameMode_Response() {
  // @@protoc_insertion_point(destructor:CGameRecordingDebug_SetTimelineGameMode_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingDebug_SetTimelineGameMode_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::ArenaDtor(void* object) {
  CGameRecordingDebug_SetTimelineGameMode_Response* _this = reinterpret_cast< CGameRecordingDebug_SetTimelineGameMode_Response* >(object);
  (void)_this;
}
void CGameRecordingDebug_SetTimelineGameMode_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingDebug_SetTimelineGameMode_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingDebug_SetTimelineGameMode_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingDebug_SetTimelineGameMode_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingDebug_SetTimelineGameMode_Response)
  return target;
}

size_t CGameRecordingDebug_SetTimelineGameMode_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingDebug_SetTimelineGameMode_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingDebug_SetTimelineGameMode_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingDebug_SetTimelineGameMode_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingDebug_SetTimelineGameMode_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingDebug_SetTimelineGameMode_Response)
    MergeFrom(*source);
  }
}

void CGameRecordingDebug_SetTimelineGameMode_Response::MergeFrom(const CGameRecordingDebug_SetTimelineGameMode_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecordingDebug_SetTimelineGameMode_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingDebug_SetTimelineGameMode_Response::CopyFrom(const CGameRecordingDebug_SetTimelineGameMode_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingDebug_SetTimelineGameMode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingDebug_SetTimelineGameMode_Response::IsInitialized() const {
  return true;
}

void CGameRecordingDebug_SetTimelineGameMode_Response::InternalSwap(CGameRecordingDebug_SetTimelineGameMode_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingDebug_SetTimelineGameMode_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GameRecording::~GameRecording() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecording::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecording::GetDescriptor() {
  return descriptor();
}

void GameRecording::GetActiveTimelineApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetActiveTimelineApps_Request*,
                         ::CGameRecording_GetActiveTimelineApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetActiveTimelineApps() not implemented.");
  done->Run();
}

void GameRecording::GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTimelinesForApp_Request*,
                         ::CGameRecording_GetTimelinesForApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimelinesForApp() not implemented.");
  done->Run();
}

void GameRecording::GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTimelinesForClip_Request*,
                         ::CGameRecording_GetTimelinesForClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimelinesForClip() not implemented.");
  done->Run();
}

void GameRecording::GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetEnoughDiskSpace_Request*,
                         ::CGameRecording_GetEnoughDiskSpace_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEnoughDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetAvailableDiskSpace_Request*,
                         ::CGameRecording_GetAvailableDiskSpace_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAvailableDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_SaveClip_Request*,
                         ::CGameRecording_SaveClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveClip() not implemented.");
  done->Run();
}

void GameRecording::DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_DeleteClip_Request*,
                         ::CGameRecording_DeleteClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteClip() not implemented.");
  done->Run();
}

void GameRecording::GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetClips_Request*,
                         ::CGameRecording_GetClips_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClips() not implemented.");
  done->Run();
}

void GameRecording::UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UploadClipToSteam_Request*,
                         ::CGameRecording_UploadClipToSteam_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadClipToSteam() not implemented.");
  done->Run();
}

void GameRecording::ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ExportClip_Request*,
                         ::CGameRecording_ExportClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExportClip() not implemented.");
  done->Run();
}

void GameRecording::ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ZipClip_Request*,
                         ::CGameRecording_ZipClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ZipClip() not implemented.");
  done->Run();
}

void GameRecording::StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_StartRecording_Request*,
                         ::CGameRecording_StartRecording_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartRecording() not implemented.");
  done->Run();
}

void GameRecording::StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_StopRecording_Request*,
                         ::CGameRecording_StopRecording_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopRecording() not implemented.");
  done->Run();
}

void GameRecording::GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetRecordingSize_Request*,
                         ::CGameRecording_GetRecordingSize_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBackgroundRecordingFileSize() not implemented.");
  done->Run();
}

void GameRecording::CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_CleanupBackgroundRecordings_Request*,
                         ::CGameRecording_CleanupBackgroundRecordings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CleanupBackgroundRecordings() not implemented.");
  done->Run();
}

void GameRecording::GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetAndTrimPostGameHighlights_Request*,
                         ::CGameRecording_GetAndTrimPostGameHighlights_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAndTrimPostGameHighlights() not implemented.");
  done->Run();
}

void GameRecording::GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetThumbnails_Request*,
                         ::CGameRecording_GetThumbnails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetThumbnails() not implemented.");
  done->Run();
}

void GameRecording::GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetPlatformCapabilities_Request*,
                         ::CGameRecording_GetPlatformCapabilities_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPlatformCapabilities() not implemented.");
  done->Run();
}

void GameRecording::NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_TimelineChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTimelineChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_RecordingSessionChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRecordingSessionChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_TimelineEntryChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTimelineEntryChanged() not implemented.");
  done->Run();
}

void GameRecording::NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ClipCreated_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClipCreated() not implemented.");
  done->Run();
}

void GameRecording::NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ClipDeleted_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClipDeleted() not implemented.");
  done->Run();
}

void GameRecording::NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ExportProgress_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyExportProgress() not implemented.");
  done->Run();
}

void GameRecording::NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UploadProgress_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUploadProgress() not implemented.");
  done->Run();
}

void GameRecording::NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_LowDiskSpace_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLowDiskSpace() not implemented.");
  done->Run();
}

void GameRecording::NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_PostGameHighlightsChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPostGameHighlightsChanged() not implemented.");
  done->Run();
}

void GameRecording::UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserAddTimelineEntry_Request*,
                         ::CGameRecording_UserAddTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserAddTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserUpdateTimelineEntry_Request*,
                         ::CGameRecording_UserUpdateTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserUpdateTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_UserRemoveTimelineEntry_Request*,
                         ::CGameRecording_UserRemoveTimelineEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserRemoveTimelineEntry() not implemented.");
  done->Run();
}

void GameRecording::ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request*,
                         ::CGameRecording_ManuallyDeleteRecordingsForApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ManuallyDeleteRecordingsForApps() not implemented.");
  done->Run();
}

void GameRecording::GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetTotalDiskSpaceUsage_Request*,
                         ::CGameRecording_GetTotalDiskSpaceUsage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTotalDiskSpaceUsage() not implemented.");
  done->Run();
}

void GameRecording::SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_SwitchBackgroundRecordingGame_Request*,
                         ::CGameRecording_SwitchBackgroundRecordingGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SwitchBackgroundRecordingGame() not implemented.");
  done->Run();
}

void GameRecording::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetActiveTimelineApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetActiveTimelineApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetActiveTimelineApps_Response*>(
                 response),
             done);
      break;
    case 1:
      GetTimelinesForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTimelinesForApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTimelinesForApp_Response*>(
                 response),
             done);
      break;
    case 2:
      GetTimelinesForClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTimelinesForClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTimelinesForClip_Response*>(
                 response),
             done);
      break;
    case 3:
      GetEnoughDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetEnoughDiskSpace_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetEnoughDiskSpace_Response*>(
                 response),
             done);
      break;
    case 4:
      GetAvailableDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetAvailableDiskSpace_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetAvailableDiskSpace_Response*>(
                 response),
             done);
      break;
    case 5:
      SaveClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_SaveClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_SaveClip_Response*>(
                 response),
             done);
      break;
    case 6:
      DeleteClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_DeleteClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_DeleteClip_Response*>(
                 response),
             done);
      break;
    case 7:
      GetClips(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetClips_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetClips_Response*>(
                 response),
             done);
      break;
    case 8:
      UploadClipToSteam(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UploadClipToSteam_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UploadClipToSteam_Response*>(
                 response),
             done);
      break;
    case 9:
      ExportClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ExportClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ExportClip_Response*>(
                 response),
             done);
      break;
    case 10:
      ZipClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ZipClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ZipClip_Response*>(
                 response),
             done);
      break;
    case 11:
      StartRecording(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_StartRecording_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_StartRecording_Response*>(
                 response),
             done);
      break;
    case 12:
      StopRecording(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_StopRecording_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_StopRecording_Response*>(
                 response),
             done);
      break;
    case 13:
      GetBackgroundRecordingFileSize(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetRecordingSize_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetRecordingSize_Response*>(
                 response),
             done);
      break;
    case 14:
      CleanupBackgroundRecordings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_CleanupBackgroundRecordings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_CleanupBackgroundRecordings_Response*>(
                 response),
             done);
      break;
    case 15:
      GetAndTrimPostGameHighlights(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetAndTrimPostGameHighlights_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetAndTrimPostGameHighlights_Response*>(
                 response),
             done);
      break;
    case 16:
      GetThumbnails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetThumbnails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetThumbnails_Response*>(
                 response),
             done);
      break;
    case 17:
      GetPlatformCapabilities(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetPlatformCapabilities_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetPlatformCapabilities_Response*>(
                 response),
             done);
      break;
    case 18:
      NotifyTimelineChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_TimelineChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 19:
      NotifyRecordingSessionChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_RecordingSessionChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 20:
      NotifyTimelineEntryChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_TimelineEntryChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 21:
      NotifyClipCreated(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ClipCreated_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 22:
      NotifyClipDeleted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ClipDeleted_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 23:
      NotifyExportProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ExportProgress_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 24:
      NotifyUploadProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UploadProgress_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 25:
      NotifyLowDiskSpace(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_LowDiskSpace_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 26:
      NotifyPostGameHighlightsChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_PostGameHighlightsChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 27:
      UserAddTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserAddTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserAddTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 28:
      UserUpdateTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserUpdateTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserUpdateTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 29:
      UserRemoveTimelineEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_UserRemoveTimelineEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_UserRemoveTimelineEntry_Response*>(
                 response),
             done);
      break;
    case 30:
      ManuallyDeleteRecordingsForApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_ManuallyDeleteRecordingsForApps_Response*>(
                 response),
             done);
      break;
    case 31:
      GetTotalDiskSpaceUsage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetTotalDiskSpaceUsage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetTotalDiskSpaceUsage_Response*>(
                 response),
             done);
      break;
    case 32:
      SwitchBackgroundRecordingGame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_SwitchBackgroundRecordingGame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_SwitchBackgroundRecordingGame_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecording::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_GetActiveTimelineApps_Request::default_instance();
    case 1:
      return ::CGameRecording_GetTimelinesForApp_Request::default_instance();
    case 2:
      return ::CGameRecording_GetTimelinesForClip_Request::default_instance();
    case 3:
      return ::CGameRecording_GetEnoughDiskSpace_Request::default_instance();
    case 4:
      return ::CGameRecording_GetAvailableDiskSpace_Request::default_instance();
    case 5:
      return ::CGameRecording_SaveClip_Request::default_instance();
    case 6:
      return ::CGameRecording_DeleteClip_Request::default_instance();
    case 7:
      return ::CGameRecording_GetClips_Request::default_instance();
    case 8:
      return ::CGameRecording_UploadClipToSteam_Request::default_instance();
    case 9:
      return ::CGameRecording_ExportClip_Request::default_instance();
    case 10:
      return ::CGameRecording_ZipClip_Request::default_instance();
    case 11:
      return ::CGameRecording_StartRecording_Request::default_instance();
    case 12:
      return ::CGameRecording_StopRecording_Request::default_instance();
    case 13:
      return ::CGameRecording_GetRecordingSize_Request::default_instance();
    case 14:
      return ::CGameRecording_CleanupBackgroundRecordings_Request::default_instance();
    case 15:
      return ::CGameRecording_GetAndTrimPostGameHighlights_Request::default_instance();
    case 16:
      return ::CGameRecording_GetThumbnails_Request::default_instance();
    case 17:
      return ::CGameRecording_GetPlatformCapabilities_Request::default_instance();
    case 18:
      return ::CGameRecording_TimelineChanged_Notification::default_instance();
    case 19:
      return ::CGameRecording_RecordingSessionChanged_Notification::default_instance();
    case 20:
      return ::CGameRecording_TimelineEntryChanged_Notification::default_instance();
    case 21:
      return ::CGameRecording_ClipCreated_Notification::default_instance();
    case 22:
      return ::CGameRecording_ClipDeleted_Notification::default_instance();
    case 23:
      return ::CGameRecording_ExportProgress_Notification::default_instance();
    case 24:
      return ::CGameRecording_UploadProgress_Notification::default_instance();
    case 25:
      return ::CGameRecording_LowDiskSpace_Notification::default_instance();
    case 26:
      return ::CGameRecording_PostGameHighlightsChanged_Notification::default_instance();
    case 27:
      return ::CGameRecording_UserAddTimelineEntry_Request::default_instance();
    case 28:
      return ::CGameRecording_UserUpdateTimelineEntry_Request::default_instance();
    case 29:
      return ::CGameRecording_UserRemoveTimelineEntry_Request::default_instance();
    case 30:
      return ::CGameRecording_ManuallyDeleteRecordingsForApps_Request::default_instance();
    case 31:
      return ::CGameRecording_GetTotalDiskSpaceUsage_Request::default_instance();
    case 32:
      return ::CGameRecording_SwitchBackgroundRecordingGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecording::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_GetActiveTimelineApps_Response::default_instance();
    case 1:
      return ::CGameRecording_GetTimelinesForApp_Response::default_instance();
    case 2:
      return ::CGameRecording_GetTimelinesForClip_Response::default_instance();
    case 3:
      return ::CGameRecording_GetEnoughDiskSpace_Response::default_instance();
    case 4:
      return ::CGameRecording_GetAvailableDiskSpace_Response::default_instance();
    case 5:
      return ::CGameRecording_SaveClip_Response::default_instance();
    case 6:
      return ::CGameRecording_DeleteClip_Response::default_instance();
    case 7:
      return ::CGameRecording_GetClips_Response::default_instance();
    case 8:
      return ::CGameRecording_UploadClipToSteam_Response::default_instance();
    case 9:
      return ::CGameRecording_ExportClip_Response::default_instance();
    case 10:
      return ::CGameRecording_ZipClip_Response::default_instance();
    case 11:
      return ::CGameRecording_StartRecording_Response::default_instance();
    case 12:
      return ::CGameRecording_StopRecording_Response::default_instance();
    case 13:
      return ::CGameRecording_GetRecordingSize_Response::default_instance();
    case 14:
      return ::CGameRecording_CleanupBackgroundRecordings_Response::default_instance();
    case 15:
      return ::CGameRecording_GetAndTrimPostGameHighlights_Response::default_instance();
    case 16:
      return ::CGameRecording_GetThumbnails_Response::default_instance();
    case 17:
      return ::CGameRecording_GetPlatformCapabilities_Response::default_instance();
    case 18:
      return ::WebUINoResponse::default_instance();
    case 19:
      return ::WebUINoResponse::default_instance();
    case 20:
      return ::WebUINoResponse::default_instance();
    case 21:
      return ::WebUINoResponse::default_instance();
    case 22:
      return ::WebUINoResponse::default_instance();
    case 23:
      return ::WebUINoResponse::default_instance();
    case 24:
      return ::WebUINoResponse::default_instance();
    case 25:
      return ::WebUINoResponse::default_instance();
    case 26:
      return ::WebUINoResponse::default_instance();
    case 27:
      return ::CGameRecording_UserAddTimelineEntry_Response::default_instance();
    case 28:
      return ::CGameRecording_UserUpdateTimelineEntry_Response::default_instance();
    case 29:
      return ::CGameRecording_UserRemoveTimelineEntry_Response::default_instance();
    case 30:
      return ::CGameRecording_ManuallyDeleteRecordingsForApps_Response::default_instance();
    case 31:
      return ::CGameRecording_GetTotalDiskSpaceUsage_Response::default_instance();
    case 32:
      return ::CGameRecording_SwitchBackgroundRecordingGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameRecording_Stub::GameRecording_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameRecording_Stub::GameRecording_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameRecording_Stub::~GameRecording_Stub() {
  if (owns_channel_) delete channel_;
}

void GameRecording_Stub::GetActiveTimelineApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetActiveTimelineApps_Request* request,
                              ::CGameRecording_GetActiveTimelineApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTimelinesForApp_Request* request,
                              ::CGameRecording_GetTimelinesForApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTimelinesForClip_Request* request,
                              ::CGameRecording_GetTimelinesForClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameRecording_Stub::GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetEnoughDiskSpace_Request* request,
                              ::CGameRecording_GetEnoughDiskSpace_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameRecording_Stub::GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetAvailableDiskSpace_Request* request,
                              ::CGameRecording_GetAvailableDiskSpace_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GameRecording_Stub::SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_SaveClip_Request* request,
                              ::CGameRecording_SaveClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void GameRecording_Stub::DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_DeleteClip_Request* request,
                              ::CGameRecording_DeleteClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void GameRecording_Stub::GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetClips_Request* request,
                              ::CGameRecording_GetClips_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void GameRecording_Stub::UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UploadClipToSteam_Request* request,
                              ::CGameRecording_UploadClipToSteam_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void GameRecording_Stub::ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ExportClip_Request* request,
                              ::CGameRecording_ExportClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void GameRecording_Stub::ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ZipClip_Request* request,
                              ::CGameRecording_ZipClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void GameRecording_Stub::StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_StartRecording_Request* request,
                              ::CGameRecording_StartRecording_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void GameRecording_Stub::StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_StopRecording_Request* request,
                              ::CGameRecording_StopRecording_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void GameRecording_Stub::GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetRecordingSize_Request* request,
                              ::CGameRecording_GetRecordingSize_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void GameRecording_Stub::CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_CleanupBackgroundRecordings_Request* request,
                              ::CGameRecording_CleanupBackgroundRecordings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void GameRecording_Stub::GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetAndTrimPostGameHighlights_Request* request,
                              ::CGameRecording_GetAndTrimPostGameHighlights_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void GameRecording_Stub::GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetThumbnails_Request* request,
                              ::CGameRecording_GetThumbnails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void GameRecording_Stub::GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetPlatformCapabilities_Request* request,
                              ::CGameRecording_GetPlatformCapabilities_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_TimelineChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_RecordingSessionChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_TimelineEntryChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ClipCreated_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ClipDeleted_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ExportProgress_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UploadProgress_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_LowDiskSpace_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void GameRecording_Stub::NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_PostGameHighlightsChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void GameRecording_Stub::UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserAddTimelineEntry_Request* request,
                              ::CGameRecording_UserAddTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void GameRecording_Stub::UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserUpdateTimelineEntry_Request* request,
                              ::CGameRecording_UserUpdateTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void GameRecording_Stub::UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_UserRemoveTimelineEntry_Request* request,
                              ::CGameRecording_UserRemoveTimelineEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void GameRecording_Stub::ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* request,
                              ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void GameRecording_Stub::GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetTotalDiskSpaceUsage_Request* request,
                              ::CGameRecording_GetTotalDiskSpaceUsage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void GameRecording_Stub::SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_SwitchBackgroundRecordingGame_Request* request,
                              ::CGameRecording_SwitchBackgroundRecordingGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
// ===================================================================

GameRecordingDebug::~GameRecordingDebug() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingDebug::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecording_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingDebug::GetDescriptor() {
  return descriptor();
}

void GameRecordingDebug::AddTimelineHighlightMarker(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request*,
                         ::CGameRecordingDebug_AddTimelineHighlightMarker_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineHighlightMarker() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineTimestamp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineTimestamp_Request*,
                         ::CGameRecordingDebug_AddTimelineTimestamp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineTimestamp() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineRangeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineRangeStart_Request*,
                         ::CGameRecordingDebug_AddTimelineRangeStart_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineRangeStart() not implemented.");
  done->Run();
}

void GameRecordingDebug::AddTimelineRangeEnd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_AddTimelineRangeEnd_Request*,
                         ::CGameRecordingDebug_AddTimelineRangeEnd_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTimelineRangeEnd() not implemented.");
  done->Run();
}

void GameRecordingDebug::SetTimelineGameMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecordingDebug_SetTimelineGameMode_Request*,
                         ::CGameRecordingDebug_SetTimelineGameMode_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetTimelineGameMode() not implemented.");
  done->Run();
}

void GameRecordingDebug::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamerecording_2eproto[1]);
  switch(method->index()) {
    case 0:
      AddTimelineHighlightMarker(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineHighlightMarker_Response*>(
                 response),
             done);
      break;
    case 1:
      AddTimelineTimestamp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineTimestamp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineTimestamp_Response*>(
                 response),
             done);
      break;
    case 2:
      AddTimelineRangeStart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineRangeStart_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineRangeStart_Response*>(
                 response),
             done);
      break;
    case 3:
      AddTimelineRangeEnd(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_AddTimelineRangeEnd_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_AddTimelineRangeEnd_Response*>(
                 response),
             done);
      break;
    case 4:
      SetTimelineGameMode(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecordingDebug_SetTimelineGameMode_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecordingDebug_SetTimelineGameMode_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingDebug::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecordingDebug_AddTimelineHighlightMarker_Request::default_instance();
    case 1:
      return ::CGameRecordingDebug_AddTimelineTimestamp_Request::default_instance();
    case 2:
      return ::CGameRecordingDebug_AddTimelineRangeStart_Request::default_instance();
    case 3:
      return ::CGameRecordingDebug_AddTimelineRangeEnd_Request::default_instance();
    case 4:
      return ::CGameRecordingDebug_SetTimelineGameMode_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingDebug::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecordingDebug_AddTimelineHighlightMarker_Response::default_instance();
    case 1:
      return ::CGameRecordingDebug_AddTimelineTimestamp_Response::default_instance();
    case 2:
      return ::CGameRecordingDebug_AddTimelineRangeStart_Response::default_instance();
    case 3:
      return ::CGameRecordingDebug_AddTimelineRangeEnd_Response::default_instance();
    case 4:
      return ::CGameRecordingDebug_SetTimelineGameMode_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameRecordingDebug_Stub::GameRecordingDebug_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameRecordingDebug_Stub::GameRecordingDebug_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameRecordingDebug_Stub::~GameRecordingDebug_Stub() {
  if (owns_channel_) delete channel_;
}

void GameRecordingDebug_Stub::AddTimelineHighlightMarker(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineHighlightMarker_Request* request,
                              ::CGameRecordingDebug_AddTimelineHighlightMarker_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineTimestamp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineTimestamp_Request* request,
                              ::CGameRecordingDebug_AddTimelineTimestamp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineRangeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineRangeStart_Request* request,
                              ::CGameRecordingDebug_AddTimelineRangeStart_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::AddTimelineRangeEnd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_AddTimelineRangeEnd_Request* request,
                              ::CGameRecordingDebug_AddTimelineRangeEnd_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameRecordingDebug_Stub::SetTimelineGameMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecordingDebug_SetTimelineGameMode_Request* request,
                              ::CGameRecordingDebug_SetTimelineGameMode_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Response_App* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Response_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Response_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetActiveTimelineApps_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetActiveTimelineApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetActiveTimelineApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForApp_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForApp_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTimelinesForClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTimelinesForClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTimelinesForClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetEnoughDiskSpace_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetEnoughDiskSpace_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetEnoughDiskSpace_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetEnoughDiskSpace_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetEnoughDiskSpace_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetEnoughDiskSpace_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAvailableDiskSpace_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetAvailableDiskSpace_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAvailableDiskSpace_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAvailableDiskSpace_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetAvailableDiskSpace_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAvailableDiskSpace_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TimelineChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_TimelineChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TimelineChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_RecordingSessionChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_RecordingSessionChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_RecordingSessionChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimelineEntry* Arena::CreateMaybeMessage< ::CTimelineEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimelineEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_TimelineEntryChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_TimelineEntryChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_TimelineEntryChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_LowDiskSpace_Notification* Arena::CreateMaybeMessage< ::CGameRecording_LowDiskSpace_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_LowDiskSpace_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_PostGameHighlightsChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_PostGameHighlightsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_PostGameHighlightsChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipSummary* Arena::CreateMaybeMessage< ::CGameRecording_ClipSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Request_Position* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Request_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Request_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SaveClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_SaveClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SaveClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_DeleteClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_DeleteClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Settings* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_ExportClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadClipToSteam_Request* Arena::CreateMaybeMessage< ::CGameRecording_UploadClipToSteam_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadClipToSteam_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadClipToSteam_Response* Arena::CreateMaybeMessage< ::CGameRecording_UploadClipToSteam_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadClipToSteam_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ZipClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_ZipClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ZipClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ZipClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_ZipClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ZipClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetClips_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetClips_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetClips_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetClips_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetClips_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetClips_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAndTrimPostGameHighlights_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetAndTrimPostGameHighlights_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAndTrimPostGameHighlights_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetAndTrimPostGameHighlights_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetAndTrimPostGameHighlights_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetAndTrimPostGameHighlights_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserAddTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserAddTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserAddTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserAddTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserAddTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserAddTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserUpdateTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserUpdateTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserUpdateTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserUpdateTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserUpdateTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserUpdateTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserRemoveTimelineEntry_Request* Arena::CreateMaybeMessage< ::CGameRecording_UserRemoveTimelineEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserRemoveTimelineEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UserRemoveTimelineEntry_Response* Arena::CreateMaybeMessage< ::CGameRecording_UserRemoveTimelineEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UserRemoveTimelineEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* Arena::CreateMaybeMessage< ::CGameRecording_ManuallyDeleteRecordingsForApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ManuallyDeleteRecordingsForApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* Arena::CreateMaybeMessage< ::CGameRecording_ManuallyDeleteRecordingsForApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ManuallyDeleteRecordingsForApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTotalDiskSpaceUsage_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetTotalDiskSpaceUsage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTotalDiskSpaceUsage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetTotalDiskSpaceUsage_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetTotalDiskSpaceUsage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetTotalDiskSpaceUsage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Response_Thumbnail* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Response_Thumbnail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Response_Thumbnail >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetThumbnails_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetThumbnails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetThumbnails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StartRecording_Request* Arena::CreateMaybeMessage< ::CGameRecording_StartRecording_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StartRecording_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StartRecording_Response* Arena::CreateMaybeMessage< ::CGameRecording_StartRecording_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StartRecording_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StopRecording_Request* Arena::CreateMaybeMessage< ::CGameRecording_StopRecording_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StopRecording_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_StopRecording_Response* Arena::CreateMaybeMessage< ::CGameRecording_StopRecording_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_StopRecording_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetRecordingSize_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetRecordingSize_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetRecordingSize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetRecordingSize_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetRecordingSize_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetRecordingSize_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CleanupBackgroundRecordings_Request* Arena::CreateMaybeMessage< ::CGameRecording_CleanupBackgroundRecordings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CleanupBackgroundRecordings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CleanupBackgroundRecordings_Response* Arena::CreateMaybeMessage< ::CGameRecording_CleanupBackgroundRecordings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CleanupBackgroundRecordings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPlatformCapabilities_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetPlatformCapabilities_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPlatformCapabilities_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetPlatformCapabilities_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetPlatformCapabilities_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetPlatformCapabilities_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipCreated_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ClipCreated_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipCreated_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ClipDeleted_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ClipDeleted_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ClipDeleted_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_ExportProgress_Notification* Arena::CreateMaybeMessage< ::CGameRecording_ExportProgress_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_ExportProgress_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_UploadProgress_Notification* Arena::CreateMaybeMessage< ::CGameRecording_UploadProgress_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_UploadProgress_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SwitchBackgroundRecordingGame_Request* Arena::CreateMaybeMessage< ::CGameRecording_SwitchBackgroundRecordingGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SwitchBackgroundRecordingGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_SwitchBackgroundRecordingGame_Response* Arena::CreateMaybeMessage< ::CGameRecording_SwitchBackgroundRecordingGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_SwitchBackgroundRecordingGame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineHighlightMarker_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineHighlightMarker_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineHighlightMarker_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineHighlightMarker_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineHighlightMarker_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineHighlightMarker_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineTimestamp_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineTimestamp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineTimestamp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineTimestamp_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineTimestamp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineTimestamp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeStart_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeStart_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeStart_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeStart_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeStart_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeStart_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeEnd_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeEnd_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeEnd_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_AddTimelineRangeEnd_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_AddTimelineRangeEnd_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_AddTimelineRangeEnd_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_SetTimelineGameMode_Request* Arena::CreateMaybeMessage< ::CGameRecordingDebug_SetTimelineGameMode_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_SetTimelineGameMode_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingDebug_SetTimelineGameMode_Response* Arena::CreateMaybeMessage< ::CGameRecordingDebug_SetTimelineGameMode_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingDebug_SetTimelineGameMode_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
