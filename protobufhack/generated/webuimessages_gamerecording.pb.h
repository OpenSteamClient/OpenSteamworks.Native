// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamerecording.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecording_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecording_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
#include "webuimessages_gamerecordingfiles.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fgamerecording_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fgamerecording_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[85]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamerecording_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(int index);
class CGameRecording_CleanupBackgroundRecordings_Request;
struct CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal;
extern CGameRecording_CleanupBackgroundRecordings_RequestDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Request_default_instance_;
class CGameRecording_CleanupBackgroundRecordings_Response;
struct CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal;
extern CGameRecording_CleanupBackgroundRecordings_ResponseDefaultTypeInternal _CGameRecording_CleanupBackgroundRecordings_Response_default_instance_;
class CGameRecording_ClipCreated_Notification;
struct CGameRecording_ClipCreated_NotificationDefaultTypeInternal;
extern CGameRecording_ClipCreated_NotificationDefaultTypeInternal _CGameRecording_ClipCreated_Notification_default_instance_;
class CGameRecording_ClipDeleted_Notification;
struct CGameRecording_ClipDeleted_NotificationDefaultTypeInternal;
extern CGameRecording_ClipDeleted_NotificationDefaultTypeInternal _CGameRecording_ClipDeleted_Notification_default_instance_;
class CGameRecording_ClipSummary;
struct CGameRecording_ClipSummaryDefaultTypeInternal;
extern CGameRecording_ClipSummaryDefaultTypeInternal _CGameRecording_ClipSummary_default_instance_;
class CGameRecording_DeleteClip_Request;
struct CGameRecording_DeleteClip_RequestDefaultTypeInternal;
extern CGameRecording_DeleteClip_RequestDefaultTypeInternal _CGameRecording_DeleteClip_Request_default_instance_;
class CGameRecording_DeleteClip_Response;
struct CGameRecording_DeleteClip_ResponseDefaultTypeInternal;
extern CGameRecording_DeleteClip_ResponseDefaultTypeInternal _CGameRecording_DeleteClip_Response_default_instance_;
class CGameRecording_DeletePerGameSettings_Request;
struct CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal;
extern CGameRecording_DeletePerGameSettings_RequestDefaultTypeInternal _CGameRecording_DeletePerGameSettings_Request_default_instance_;
class CGameRecording_DeletePerGameSettings_Response;
struct CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal;
extern CGameRecording_DeletePerGameSettings_ResponseDefaultTypeInternal _CGameRecording_DeletePerGameSettings_Response_default_instance_;
class CGameRecording_ExportClipPreview_Request;
struct CGameRecording_ExportClipPreview_RequestDefaultTypeInternal;
extern CGameRecording_ExportClipPreview_RequestDefaultTypeInternal _CGameRecording_ExportClipPreview_Request_default_instance_;
class CGameRecording_ExportClipPreview_Response;
struct CGameRecording_ExportClipPreview_ResponseDefaultTypeInternal;
extern CGameRecording_ExportClipPreview_ResponseDefaultTypeInternal _CGameRecording_ExportClipPreview_Response_default_instance_;
class CGameRecording_ExportClip_Request;
struct CGameRecording_ExportClip_RequestDefaultTypeInternal;
extern CGameRecording_ExportClip_RequestDefaultTypeInternal _CGameRecording_ExportClip_Request_default_instance_;
class CGameRecording_ExportClip_Response;
struct CGameRecording_ExportClip_ResponseDefaultTypeInternal;
extern CGameRecording_ExportClip_ResponseDefaultTypeInternal _CGameRecording_ExportClip_Response_default_instance_;
class CGameRecording_ExportClip_Settings;
struct CGameRecording_ExportClip_SettingsDefaultTypeInternal;
extern CGameRecording_ExportClip_SettingsDefaultTypeInternal _CGameRecording_ExportClip_Settings_default_instance_;
class CGameRecording_ExportProgress_Notification;
struct CGameRecording_ExportProgress_NotificationDefaultTypeInternal;
extern CGameRecording_ExportProgress_NotificationDefaultTypeInternal _CGameRecording_ExportProgress_Notification_default_instance_;
class CGameRecording_GetAndTrimPostGameHighlights_Request;
struct CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal;
extern CGameRecording_GetAndTrimPostGameHighlights_RequestDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_;
class CGameRecording_GetAndTrimPostGameHighlights_Response;
struct CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal;
extern CGameRecording_GetAndTrimPostGameHighlights_ResponseDefaultTypeInternal _CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_;
class CGameRecording_GetAppsWithBackgroundVideo_Request;
struct CGameRecording_GetAppsWithBackgroundVideo_RequestDefaultTypeInternal;
extern CGameRecording_GetAppsWithBackgroundVideo_RequestDefaultTypeInternal _CGameRecording_GetAppsWithBackgroundVideo_Request_default_instance_;
class CGameRecording_GetAppsWithBackgroundVideo_Response;
struct CGameRecording_GetAppsWithBackgroundVideo_ResponseDefaultTypeInternal;
extern CGameRecording_GetAppsWithBackgroundVideo_ResponseDefaultTypeInternal _CGameRecording_GetAppsWithBackgroundVideo_Response_default_instance_;
class CGameRecording_GetAppsWithBackgroundVideo_Response_App;
struct CGameRecording_GetAppsWithBackgroundVideo_Response_AppDefaultTypeInternal;
extern CGameRecording_GetAppsWithBackgroundVideo_Response_AppDefaultTypeInternal _CGameRecording_GetAppsWithBackgroundVideo_Response_App_default_instance_;
class CGameRecording_GetAvailableDiskSpace_Request;
struct CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal;
extern CGameRecording_GetAvailableDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Request_default_instance_;
class CGameRecording_GetAvailableDiskSpace_Response;
struct CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal;
extern CGameRecording_GetAvailableDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetAvailableDiskSpace_Response_default_instance_;
class CGameRecording_GetClips_Request;
struct CGameRecording_GetClips_RequestDefaultTypeInternal;
extern CGameRecording_GetClips_RequestDefaultTypeInternal _CGameRecording_GetClips_Request_default_instance_;
class CGameRecording_GetClips_Response;
struct CGameRecording_GetClips_ResponseDefaultTypeInternal;
extern CGameRecording_GetClips_ResponseDefaultTypeInternal _CGameRecording_GetClips_Response_default_instance_;
class CGameRecording_GetEnoughDiskSpace_Request;
struct CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal;
extern CGameRecording_GetEnoughDiskSpace_RequestDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Request_default_instance_;
class CGameRecording_GetEnoughDiskSpace_Response;
struct CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal;
extern CGameRecording_GetEnoughDiskSpace_ResponseDefaultTypeInternal _CGameRecording_GetEnoughDiskSpace_Response_default_instance_;
class CGameRecording_GetPerGameSettings_Request;
struct CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal;
extern CGameRecording_GetPerGameSettings_RequestDefaultTypeInternal _CGameRecording_GetPerGameSettings_Request_default_instance_;
class CGameRecording_GetPerGameSettings_Response;
struct CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal;
extern CGameRecording_GetPerGameSettings_ResponseDefaultTypeInternal _CGameRecording_GetPerGameSettings_Response_default_instance_;
class CGameRecording_GetPlatformCapabilities_Request;
struct CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal;
extern CGameRecording_GetPlatformCapabilities_RequestDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Request_default_instance_;
class CGameRecording_GetPlatformCapabilities_Response;
struct CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal;
extern CGameRecording_GetPlatformCapabilities_ResponseDefaultTypeInternal _CGameRecording_GetPlatformCapabilities_Response_default_instance_;
class CGameRecording_GetRecordingSize_Request;
struct CGameRecording_GetRecordingSize_RequestDefaultTypeInternal;
extern CGameRecording_GetRecordingSize_RequestDefaultTypeInternal _CGameRecording_GetRecordingSize_Request_default_instance_;
class CGameRecording_GetRecordingSize_Response;
struct CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal;
extern CGameRecording_GetRecordingSize_ResponseDefaultTypeInternal _CGameRecording_GetRecordingSize_Response_default_instance_;
class CGameRecording_GetTags_Request;
struct CGameRecording_GetTags_RequestDefaultTypeInternal;
extern CGameRecording_GetTags_RequestDefaultTypeInternal _CGameRecording_GetTags_Request_default_instance_;
class CGameRecording_GetTags_Response;
struct CGameRecording_GetTags_ResponseDefaultTypeInternal;
extern CGameRecording_GetTags_ResponseDefaultTypeInternal _CGameRecording_GetTags_Response_default_instance_;
class CGameRecording_GetThumbnails_Request;
struct CGameRecording_GetThumbnails_RequestDefaultTypeInternal;
extern CGameRecording_GetThumbnails_RequestDefaultTypeInternal _CGameRecording_GetThumbnails_Request_default_instance_;
class CGameRecording_GetThumbnails_Response;
struct CGameRecording_GetThumbnails_ResponseDefaultTypeInternal;
extern CGameRecording_GetThumbnails_ResponseDefaultTypeInternal _CGameRecording_GetThumbnails_Response_default_instance_;
class CGameRecording_GetThumbnails_Response_Thumbnail;
struct CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal;
extern CGameRecording_GetThumbnails_Response_ThumbnailDefaultTypeInternal _CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_;
class CGameRecording_GetTimelinesForApp_Request;
struct CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal;
extern CGameRecording_GetTimelinesForApp_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Request_default_instance_;
class CGameRecording_GetTimelinesForApp_Response;
struct CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal;
extern CGameRecording_GetTimelinesForApp_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForApp_Response_default_instance_;
class CGameRecording_GetTimelinesForClip_Request;
struct CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal;
extern CGameRecording_GetTimelinesForClip_RequestDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Request_default_instance_;
class CGameRecording_GetTimelinesForClip_Response;
struct CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal;
extern CGameRecording_GetTimelinesForClip_ResponseDefaultTypeInternal _CGameRecording_GetTimelinesForClip_Response_default_instance_;
class CGameRecording_GetTotalDiskSpaceUsage_Request;
struct CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal;
extern CGameRecording_GetTotalDiskSpaceUsage_RequestDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_;
class CGameRecording_GetTotalDiskSpaceUsage_Response;
struct CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal;
extern CGameRecording_GetTotalDiskSpaceUsage_ResponseDefaultTypeInternal _CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_;
class CGameRecording_LowDiskSpace_Notification;
struct CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal;
extern CGameRecording_LowDiskSpace_NotificationDefaultTypeInternal _CGameRecording_LowDiskSpace_Notification_default_instance_;
class CGameRecording_ManuallyDeleteRecordingsForApps_Request;
struct CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal;
extern CGameRecording_ManuallyDeleteRecordingsForApps_RequestDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_;
class CGameRecording_ManuallyDeleteRecordingsForApps_Response;
struct CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal;
extern CGameRecording_ManuallyDeleteRecordingsForApps_ResponseDefaultTypeInternal _CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_;
class CGameRecording_OpenOverlayToGamePhase_Notification;
struct CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal;
extern CGameRecording_OpenOverlayToGamePhase_NotificationDefaultTypeInternal _CGameRecording_OpenOverlayToGamePhase_Notification_default_instance_;
class CGameRecording_OpenOverlayToTimelineEvent_Notification;
struct CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal;
extern CGameRecording_OpenOverlayToTimelineEvent_NotificationDefaultTypeInternal _CGameRecording_OpenOverlayToTimelineEvent_Notification_default_instance_;
class CGameRecording_PerGameSettings;
struct CGameRecording_PerGameSettingsDefaultTypeInternal;
extern CGameRecording_PerGameSettingsDefaultTypeInternal _CGameRecording_PerGameSettings_default_instance_;
class CGameRecording_PhaseListChanged_Notification;
struct CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal;
extern CGameRecording_PhaseListChanged_NotificationDefaultTypeInternal _CGameRecording_PhaseListChanged_Notification_default_instance_;
class CGameRecording_PostGameHighlightsChanged_Notification;
struct CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal;
extern CGameRecording_PostGameHighlightsChanged_NotificationDefaultTypeInternal _CGameRecording_PostGameHighlightsChanged_Notification_default_instance_;
class CGameRecording_QueryPhases_Request;
struct CGameRecording_QueryPhases_RequestDefaultTypeInternal;
extern CGameRecording_QueryPhases_RequestDefaultTypeInternal _CGameRecording_QueryPhases_Request_default_instance_;
class CGameRecording_QueryPhases_Request_Tag;
struct CGameRecording_QueryPhases_Request_TagDefaultTypeInternal;
extern CGameRecording_QueryPhases_Request_TagDefaultTypeInternal _CGameRecording_QueryPhases_Request_Tag_default_instance_;
class CGameRecording_QueryPhases_Response;
struct CGameRecording_QueryPhases_ResponseDefaultTypeInternal;
extern CGameRecording_QueryPhases_ResponseDefaultTypeInternal _CGameRecording_QueryPhases_Response_default_instance_;
class CGameRecording_QueryPhases_Response_Phase;
struct CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal;
extern CGameRecording_QueryPhases_Response_PhaseDefaultTypeInternal _CGameRecording_QueryPhases_Response_Phase_default_instance_;
class CGameRecording_QueryPhases_Response_Phase_BackgroundRecording;
struct CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal;
extern CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingDefaultTypeInternal _CGameRecording_QueryPhases_Response_Phase_BackgroundRecording_default_instance_;
class CGameRecording_RecordingSessionChanged_Notification;
struct CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal;
extern CGameRecording_RecordingSessionChanged_NotificationDefaultTypeInternal _CGameRecording_RecordingSessionChanged_Notification_default_instance_;
class CGameRecording_SaveClip_Request;
struct CGameRecording_SaveClip_RequestDefaultTypeInternal;
extern CGameRecording_SaveClip_RequestDefaultTypeInternal _CGameRecording_SaveClip_Request_default_instance_;
class CGameRecording_SaveClip_Request_Position;
struct CGameRecording_SaveClip_Request_PositionDefaultTypeInternal;
extern CGameRecording_SaveClip_Request_PositionDefaultTypeInternal _CGameRecording_SaveClip_Request_Position_default_instance_;
class CGameRecording_SaveClip_Response;
struct CGameRecording_SaveClip_ResponseDefaultTypeInternal;
extern CGameRecording_SaveClip_ResponseDefaultTypeInternal _CGameRecording_SaveClip_Response_default_instance_;
class CGameRecording_SetPerGameSettings_Request;
struct CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal;
extern CGameRecording_SetPerGameSettings_RequestDefaultTypeInternal _CGameRecording_SetPerGameSettings_Request_default_instance_;
class CGameRecording_SetPerGameSettings_Response;
struct CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal;
extern CGameRecording_SetPerGameSettings_ResponseDefaultTypeInternal _CGameRecording_SetPerGameSettings_Response_default_instance_;
class CGameRecording_StartRecording_Request;
struct CGameRecording_StartRecording_RequestDefaultTypeInternal;
extern CGameRecording_StartRecording_RequestDefaultTypeInternal _CGameRecording_StartRecording_Request_default_instance_;
class CGameRecording_StartRecording_Response;
struct CGameRecording_StartRecording_ResponseDefaultTypeInternal;
extern CGameRecording_StartRecording_ResponseDefaultTypeInternal _CGameRecording_StartRecording_Response_default_instance_;
class CGameRecording_StopRecording_Request;
struct CGameRecording_StopRecording_RequestDefaultTypeInternal;
extern CGameRecording_StopRecording_RequestDefaultTypeInternal _CGameRecording_StopRecording_Request_default_instance_;
class CGameRecording_StopRecording_Response;
struct CGameRecording_StopRecording_ResponseDefaultTypeInternal;
extern CGameRecording_StopRecording_ResponseDefaultTypeInternal _CGameRecording_StopRecording_Response_default_instance_;
class CGameRecording_SwitchBackgroundRecordingGame_Request;
struct CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal;
extern CGameRecording_SwitchBackgroundRecordingGame_RequestDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_;
class CGameRecording_SwitchBackgroundRecordingGame_Response;
struct CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal;
extern CGameRecording_SwitchBackgroundRecordingGame_ResponseDefaultTypeInternal _CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_;
class CGameRecording_TakeScreenshot_Request;
struct CGameRecording_TakeScreenshot_RequestDefaultTypeInternal;
extern CGameRecording_TakeScreenshot_RequestDefaultTypeInternal _CGameRecording_TakeScreenshot_Request_default_instance_;
class CGameRecording_TakeScreenshot_Response;
struct CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal;
extern CGameRecording_TakeScreenshot_ResponseDefaultTypeInternal _CGameRecording_TakeScreenshot_Response_default_instance_;
class CGameRecording_TimelineChanged_Notification;
struct CGameRecording_TimelineChanged_NotificationDefaultTypeInternal;
extern CGameRecording_TimelineChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineChanged_Notification_default_instance_;
class CGameRecording_TimelineEntryChanged_Notification;
struct CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal;
extern CGameRecording_TimelineEntryChanged_NotificationDefaultTypeInternal _CGameRecording_TimelineEntryChanged_Notification_default_instance_;
class CGameRecording_TimelineEntryRemoved_Notification;
struct CGameRecording_TimelineEntryRemoved_NotificationDefaultTypeInternal;
extern CGameRecording_TimelineEntryRemoved_NotificationDefaultTypeInternal _CGameRecording_TimelineEntryRemoved_Notification_default_instance_;
class CGameRecording_UploadClipToSteam_Request;
struct CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal;
extern CGameRecording_UploadClipToSteam_RequestDefaultTypeInternal _CGameRecording_UploadClipToSteam_Request_default_instance_;
class CGameRecording_UploadClipToSteam_Response;
struct CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal;
extern CGameRecording_UploadClipToSteam_ResponseDefaultTypeInternal _CGameRecording_UploadClipToSteam_Response_default_instance_;
class CGameRecording_UploadProgress_Notification;
struct CGameRecording_UploadProgress_NotificationDefaultTypeInternal;
extern CGameRecording_UploadProgress_NotificationDefaultTypeInternal _CGameRecording_UploadProgress_Notification_default_instance_;
class CGameRecording_UserAddTimelineEntry_Request;
struct CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal;
extern CGameRecording_UserAddTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Request_default_instance_;
class CGameRecording_UserAddTimelineEntry_Response;
struct CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal;
extern CGameRecording_UserAddTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserAddTimelineEntry_Response_default_instance_;
class CGameRecording_UserRemoveTimelineEntry_Request;
struct CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal;
extern CGameRecording_UserRemoveTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Request_default_instance_;
class CGameRecording_UserRemoveTimelineEntry_Response;
struct CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal;
extern CGameRecording_UserRemoveTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserRemoveTimelineEntry_Response_default_instance_;
class CGameRecording_UserUpdateTimelineEntry_Request;
struct CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal;
extern CGameRecording_UserUpdateTimelineEntry_RequestDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Request_default_instance_;
class CGameRecording_UserUpdateTimelineEntry_Response;
struct CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal;
extern CGameRecording_UserUpdateTimelineEntry_ResponseDefaultTypeInternal _CGameRecording_UserUpdateTimelineEntry_Response_default_instance_;
class CGameRecording_ZipClip_Request;
struct CGameRecording_ZipClip_RequestDefaultTypeInternal;
extern CGameRecording_ZipClip_RequestDefaultTypeInternal _CGameRecording_ZipClip_Request_default_instance_;
class CGameRecording_ZipClip_Response;
struct CGameRecording_ZipClip_ResponseDefaultTypeInternal;
extern CGameRecording_ZipClip_ResponseDefaultTypeInternal _CGameRecording_ZipClip_Response_default_instance_;
class CTimelineEntry;
struct CTimelineEntryDefaultTypeInternal;
extern CTimelineEntryDefaultTypeInternal _CTimelineEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameRecording_CleanupBackgroundRecordings_Request* Arena::CreateMaybeMessage<::CGameRecording_CleanupBackgroundRecordings_Request>(Arena*);
template<> ::CGameRecording_CleanupBackgroundRecordings_Response* Arena::CreateMaybeMessage<::CGameRecording_CleanupBackgroundRecordings_Response>(Arena*);
template<> ::CGameRecording_ClipCreated_Notification* Arena::CreateMaybeMessage<::CGameRecording_ClipCreated_Notification>(Arena*);
template<> ::CGameRecording_ClipDeleted_Notification* Arena::CreateMaybeMessage<::CGameRecording_ClipDeleted_Notification>(Arena*);
template<> ::CGameRecording_ClipSummary* Arena::CreateMaybeMessage<::CGameRecording_ClipSummary>(Arena*);
template<> ::CGameRecording_DeleteClip_Request* Arena::CreateMaybeMessage<::CGameRecording_DeleteClip_Request>(Arena*);
template<> ::CGameRecording_DeleteClip_Response* Arena::CreateMaybeMessage<::CGameRecording_DeleteClip_Response>(Arena*);
template<> ::CGameRecording_DeletePerGameSettings_Request* Arena::CreateMaybeMessage<::CGameRecording_DeletePerGameSettings_Request>(Arena*);
template<> ::CGameRecording_DeletePerGameSettings_Response* Arena::CreateMaybeMessage<::CGameRecording_DeletePerGameSettings_Response>(Arena*);
template<> ::CGameRecording_ExportClipPreview_Request* Arena::CreateMaybeMessage<::CGameRecording_ExportClipPreview_Request>(Arena*);
template<> ::CGameRecording_ExportClipPreview_Response* Arena::CreateMaybeMessage<::CGameRecording_ExportClipPreview_Response>(Arena*);
template<> ::CGameRecording_ExportClip_Request* Arena::CreateMaybeMessage<::CGameRecording_ExportClip_Request>(Arena*);
template<> ::CGameRecording_ExportClip_Response* Arena::CreateMaybeMessage<::CGameRecording_ExportClip_Response>(Arena*);
template<> ::CGameRecording_ExportClip_Settings* Arena::CreateMaybeMessage<::CGameRecording_ExportClip_Settings>(Arena*);
template<> ::CGameRecording_ExportProgress_Notification* Arena::CreateMaybeMessage<::CGameRecording_ExportProgress_Notification>(Arena*);
template<> ::CGameRecording_GetAndTrimPostGameHighlights_Request* Arena::CreateMaybeMessage<::CGameRecording_GetAndTrimPostGameHighlights_Request>(Arena*);
template<> ::CGameRecording_GetAndTrimPostGameHighlights_Response* Arena::CreateMaybeMessage<::CGameRecording_GetAndTrimPostGameHighlights_Response>(Arena*);
template<> ::CGameRecording_GetAppsWithBackgroundVideo_Request* Arena::CreateMaybeMessage<::CGameRecording_GetAppsWithBackgroundVideo_Request>(Arena*);
template<> ::CGameRecording_GetAppsWithBackgroundVideo_Response* Arena::CreateMaybeMessage<::CGameRecording_GetAppsWithBackgroundVideo_Response>(Arena*);
template<> ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* Arena::CreateMaybeMessage<::CGameRecording_GetAppsWithBackgroundVideo_Response_App>(Arena*);
template<> ::CGameRecording_GetAvailableDiskSpace_Request* Arena::CreateMaybeMessage<::CGameRecording_GetAvailableDiskSpace_Request>(Arena*);
template<> ::CGameRecording_GetAvailableDiskSpace_Response* Arena::CreateMaybeMessage<::CGameRecording_GetAvailableDiskSpace_Response>(Arena*);
template<> ::CGameRecording_GetClips_Request* Arena::CreateMaybeMessage<::CGameRecording_GetClips_Request>(Arena*);
template<> ::CGameRecording_GetClips_Response* Arena::CreateMaybeMessage<::CGameRecording_GetClips_Response>(Arena*);
template<> ::CGameRecording_GetEnoughDiskSpace_Request* Arena::CreateMaybeMessage<::CGameRecording_GetEnoughDiskSpace_Request>(Arena*);
template<> ::CGameRecording_GetEnoughDiskSpace_Response* Arena::CreateMaybeMessage<::CGameRecording_GetEnoughDiskSpace_Response>(Arena*);
template<> ::CGameRecording_GetPerGameSettings_Request* Arena::CreateMaybeMessage<::CGameRecording_GetPerGameSettings_Request>(Arena*);
template<> ::CGameRecording_GetPerGameSettings_Response* Arena::CreateMaybeMessage<::CGameRecording_GetPerGameSettings_Response>(Arena*);
template<> ::CGameRecording_GetPlatformCapabilities_Request* Arena::CreateMaybeMessage<::CGameRecording_GetPlatformCapabilities_Request>(Arena*);
template<> ::CGameRecording_GetPlatformCapabilities_Response* Arena::CreateMaybeMessage<::CGameRecording_GetPlatformCapabilities_Response>(Arena*);
template<> ::CGameRecording_GetRecordingSize_Request* Arena::CreateMaybeMessage<::CGameRecording_GetRecordingSize_Request>(Arena*);
template<> ::CGameRecording_GetRecordingSize_Response* Arena::CreateMaybeMessage<::CGameRecording_GetRecordingSize_Response>(Arena*);
template<> ::CGameRecording_GetTags_Request* Arena::CreateMaybeMessage<::CGameRecording_GetTags_Request>(Arena*);
template<> ::CGameRecording_GetTags_Response* Arena::CreateMaybeMessage<::CGameRecording_GetTags_Response>(Arena*);
template<> ::CGameRecording_GetThumbnails_Request* Arena::CreateMaybeMessage<::CGameRecording_GetThumbnails_Request>(Arena*);
template<> ::CGameRecording_GetThumbnails_Response* Arena::CreateMaybeMessage<::CGameRecording_GetThumbnails_Response>(Arena*);
template<> ::CGameRecording_GetThumbnails_Response_Thumbnail* Arena::CreateMaybeMessage<::CGameRecording_GetThumbnails_Response_Thumbnail>(Arena*);
template<> ::CGameRecording_GetTimelinesForApp_Request* Arena::CreateMaybeMessage<::CGameRecording_GetTimelinesForApp_Request>(Arena*);
template<> ::CGameRecording_GetTimelinesForApp_Response* Arena::CreateMaybeMessage<::CGameRecording_GetTimelinesForApp_Response>(Arena*);
template<> ::CGameRecording_GetTimelinesForClip_Request* Arena::CreateMaybeMessage<::CGameRecording_GetTimelinesForClip_Request>(Arena*);
template<> ::CGameRecording_GetTimelinesForClip_Response* Arena::CreateMaybeMessage<::CGameRecording_GetTimelinesForClip_Response>(Arena*);
template<> ::CGameRecording_GetTotalDiskSpaceUsage_Request* Arena::CreateMaybeMessage<::CGameRecording_GetTotalDiskSpaceUsage_Request>(Arena*);
template<> ::CGameRecording_GetTotalDiskSpaceUsage_Response* Arena::CreateMaybeMessage<::CGameRecording_GetTotalDiskSpaceUsage_Response>(Arena*);
template<> ::CGameRecording_LowDiskSpace_Notification* Arena::CreateMaybeMessage<::CGameRecording_LowDiskSpace_Notification>(Arena*);
template<> ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* Arena::CreateMaybeMessage<::CGameRecording_ManuallyDeleteRecordingsForApps_Request>(Arena*);
template<> ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* Arena::CreateMaybeMessage<::CGameRecording_ManuallyDeleteRecordingsForApps_Response>(Arena*);
template<> ::CGameRecording_OpenOverlayToGamePhase_Notification* Arena::CreateMaybeMessage<::CGameRecording_OpenOverlayToGamePhase_Notification>(Arena*);
template<> ::CGameRecording_OpenOverlayToTimelineEvent_Notification* Arena::CreateMaybeMessage<::CGameRecording_OpenOverlayToTimelineEvent_Notification>(Arena*);
template<> ::CGameRecording_PerGameSettings* Arena::CreateMaybeMessage<::CGameRecording_PerGameSettings>(Arena*);
template<> ::CGameRecording_PhaseListChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_PhaseListChanged_Notification>(Arena*);
template<> ::CGameRecording_PostGameHighlightsChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_PostGameHighlightsChanged_Notification>(Arena*);
template<> ::CGameRecording_QueryPhases_Request* Arena::CreateMaybeMessage<::CGameRecording_QueryPhases_Request>(Arena*);
template<> ::CGameRecording_QueryPhases_Request_Tag* Arena::CreateMaybeMessage<::CGameRecording_QueryPhases_Request_Tag>(Arena*);
template<> ::CGameRecording_QueryPhases_Response* Arena::CreateMaybeMessage<::CGameRecording_QueryPhases_Response>(Arena*);
template<> ::CGameRecording_QueryPhases_Response_Phase* Arena::CreateMaybeMessage<::CGameRecording_QueryPhases_Response_Phase>(Arena*);
template<> ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* Arena::CreateMaybeMessage<::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>(Arena*);
template<> ::CGameRecording_RecordingSessionChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_RecordingSessionChanged_Notification>(Arena*);
template<> ::CGameRecording_SaveClip_Request* Arena::CreateMaybeMessage<::CGameRecording_SaveClip_Request>(Arena*);
template<> ::CGameRecording_SaveClip_Request_Position* Arena::CreateMaybeMessage<::CGameRecording_SaveClip_Request_Position>(Arena*);
template<> ::CGameRecording_SaveClip_Response* Arena::CreateMaybeMessage<::CGameRecording_SaveClip_Response>(Arena*);
template<> ::CGameRecording_SetPerGameSettings_Request* Arena::CreateMaybeMessage<::CGameRecording_SetPerGameSettings_Request>(Arena*);
template<> ::CGameRecording_SetPerGameSettings_Response* Arena::CreateMaybeMessage<::CGameRecording_SetPerGameSettings_Response>(Arena*);
template<> ::CGameRecording_StartRecording_Request* Arena::CreateMaybeMessage<::CGameRecording_StartRecording_Request>(Arena*);
template<> ::CGameRecording_StartRecording_Response* Arena::CreateMaybeMessage<::CGameRecording_StartRecording_Response>(Arena*);
template<> ::CGameRecording_StopRecording_Request* Arena::CreateMaybeMessage<::CGameRecording_StopRecording_Request>(Arena*);
template<> ::CGameRecording_StopRecording_Response* Arena::CreateMaybeMessage<::CGameRecording_StopRecording_Response>(Arena*);
template<> ::CGameRecording_SwitchBackgroundRecordingGame_Request* Arena::CreateMaybeMessage<::CGameRecording_SwitchBackgroundRecordingGame_Request>(Arena*);
template<> ::CGameRecording_SwitchBackgroundRecordingGame_Response* Arena::CreateMaybeMessage<::CGameRecording_SwitchBackgroundRecordingGame_Response>(Arena*);
template<> ::CGameRecording_TakeScreenshot_Request* Arena::CreateMaybeMessage<::CGameRecording_TakeScreenshot_Request>(Arena*);
template<> ::CGameRecording_TakeScreenshot_Response* Arena::CreateMaybeMessage<::CGameRecording_TakeScreenshot_Response>(Arena*);
template<> ::CGameRecording_TimelineChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_TimelineChanged_Notification>(Arena*);
template<> ::CGameRecording_TimelineEntryChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_TimelineEntryChanged_Notification>(Arena*);
template<> ::CGameRecording_TimelineEntryRemoved_Notification* Arena::CreateMaybeMessage<::CGameRecording_TimelineEntryRemoved_Notification>(Arena*);
template<> ::CGameRecording_UploadClipToSteam_Request* Arena::CreateMaybeMessage<::CGameRecording_UploadClipToSteam_Request>(Arena*);
template<> ::CGameRecording_UploadClipToSteam_Response* Arena::CreateMaybeMessage<::CGameRecording_UploadClipToSteam_Response>(Arena*);
template<> ::CGameRecording_UploadProgress_Notification* Arena::CreateMaybeMessage<::CGameRecording_UploadProgress_Notification>(Arena*);
template<> ::CGameRecording_UserAddTimelineEntry_Request* Arena::CreateMaybeMessage<::CGameRecording_UserAddTimelineEntry_Request>(Arena*);
template<> ::CGameRecording_UserAddTimelineEntry_Response* Arena::CreateMaybeMessage<::CGameRecording_UserAddTimelineEntry_Response>(Arena*);
template<> ::CGameRecording_UserRemoveTimelineEntry_Request* Arena::CreateMaybeMessage<::CGameRecording_UserRemoveTimelineEntry_Request>(Arena*);
template<> ::CGameRecording_UserRemoveTimelineEntry_Response* Arena::CreateMaybeMessage<::CGameRecording_UserRemoveTimelineEntry_Response>(Arena*);
template<> ::CGameRecording_UserUpdateTimelineEntry_Request* Arena::CreateMaybeMessage<::CGameRecording_UserUpdateTimelineEntry_Request>(Arena*);
template<> ::CGameRecording_UserUpdateTimelineEntry_Response* Arena::CreateMaybeMessage<::CGameRecording_UserUpdateTimelineEntry_Response>(Arena*);
template<> ::CGameRecording_ZipClip_Request* Arena::CreateMaybeMessage<::CGameRecording_ZipClip_Request>(Arena*);
template<> ::CGameRecording_ZipClip_Response* Arena::CreateMaybeMessage<::CGameRecording_ZipClip_Response>(Arena*);
template<> ::CTimelineEntry* Arena::CreateMaybeMessage<::CTimelineEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ETimelineEntryType : int {
  ETimelineEntryType_Invalid = 0,
  ETimelineEntryType_GameMode = 1,
  ETimelineEntryType_Event = 2,
  ETimelineEntryType_StateDescription = 3,
  ETimelineEntryType_Achievement = 4,
  ETimelineEntryType_UserMarker = 5,
  ETimelineEntryType_Screenshot = 6,
  ETimelineEntryType_Error = 7,
  ETimelineEntryType_Tag = 8,
  ETimelineEntryType_GamePhase = 9
};
bool ETimelineEntryType_IsValid(int value);
constexpr ETimelineEntryType ETimelineEntryType_MIN = ETimelineEntryType_Invalid;
constexpr ETimelineEntryType ETimelineEntryType_MAX = ETimelineEntryType_GamePhase;
constexpr int ETimelineEntryType_ARRAYSIZE = ETimelineEntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineEntryType_descriptor();
template<typename T>
inline const std::string& ETimelineEntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETimelineEntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETimelineEntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETimelineEntryType_descriptor(), enum_t_value);
}
inline bool ETimelineEntryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETimelineEntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETimelineEntryType>(
    ETimelineEntryType_descriptor(), name, value);
}
enum EPhaseResultType : int {
  EPhaseResultType_Automatic = 1,
  EPhaseResultType_Blank = 2,
  EPhaseResultType_API = 3
};
bool EPhaseResultType_IsValid(int value);
constexpr EPhaseResultType EPhaseResultType_MIN = EPhaseResultType_Automatic;
constexpr EPhaseResultType EPhaseResultType_MAX = EPhaseResultType_API;
constexpr int EPhaseResultType_ARRAYSIZE = EPhaseResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPhaseResultType_descriptor();
template<typename T>
inline const std::string& EPhaseResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPhaseResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPhaseResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPhaseResultType_descriptor(), enum_t_value);
}
inline bool EPhaseResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPhaseResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPhaseResultType>(
    EPhaseResultType_descriptor(), name, value);
}
enum ETimelineChangeNotificationType : int {
  ETimelineChangeNotificationType_Started = 1,
  ETimelineChangeNotificationType_Stopped = 2,
  ETimelineChangeNotificationType_Deleted = 3,
  ETimelineChangeNotificationType_RecordingStarted = 4,
  ETimelineChangeNotificationType_RecordingStopped = 5,
  ETimelineChangeNotificationType_RecordingUpdated = 6
};
bool ETimelineChangeNotificationType_IsValid(int value);
constexpr ETimelineChangeNotificationType ETimelineChangeNotificationType_MIN = ETimelineChangeNotificationType_Started;
constexpr ETimelineChangeNotificationType ETimelineChangeNotificationType_MAX = ETimelineChangeNotificationType_RecordingUpdated;
constexpr int ETimelineChangeNotificationType_ARRAYSIZE = ETimelineChangeNotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimelineChangeNotificationType_descriptor();
template<typename T>
inline const std::string& ETimelineChangeNotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETimelineChangeNotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETimelineChangeNotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETimelineChangeNotificationType_descriptor(), enum_t_value);
}
inline bool ETimelineChangeNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETimelineChangeNotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETimelineChangeNotificationType>(
    ETimelineChangeNotificationType_descriptor(), name, value);
}
enum ERecordingSessionChangeNotificationType : int {
  ERecordingSessionChangeNotificationType_Started = 1,
  ERecordingSessionChangeNotificationType_Stopped = 2,
  ERecordingSessionChangeNotificationType_Deleted = 3,
  ERecordingSessionChangeNotificationType_Updated = 4
};
bool ERecordingSessionChangeNotificationType_IsValid(int value);
constexpr ERecordingSessionChangeNotificationType ERecordingSessionChangeNotificationType_MIN = ERecordingSessionChangeNotificationType_Started;
constexpr ERecordingSessionChangeNotificationType ERecordingSessionChangeNotificationType_MAX = ERecordingSessionChangeNotificationType_Updated;
constexpr int ERecordingSessionChangeNotificationType_ARRAYSIZE = ERecordingSessionChangeNotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERecordingSessionChangeNotificationType_descriptor();
template<typename T>
inline const std::string& ERecordingSessionChangeNotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERecordingSessionChangeNotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERecordingSessionChangeNotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERecordingSessionChangeNotificationType_descriptor(), enum_t_value);
}
inline bool ERecordingSessionChangeNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERecordingSessionChangeNotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERecordingSessionChangeNotificationType>(
    ERecordingSessionChangeNotificationType_descriptor(), name, value);
}
enum EDiskSpaceType : int {
  eDiskSpaceType_Recording = 0,
  eDiskSpaceType_Clip = 1
};
bool EDiskSpaceType_IsValid(int value);
constexpr EDiskSpaceType EDiskSpaceType_MIN = eDiskSpaceType_Recording;
constexpr EDiskSpaceType EDiskSpaceType_MAX = eDiskSpaceType_Clip;
constexpr int EDiskSpaceType_ARRAYSIZE = EDiskSpaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDiskSpaceType_descriptor();
template<typename T>
inline const std::string& EDiskSpaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDiskSpaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDiskSpaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDiskSpaceType_descriptor(), enum_t_value);
}
inline bool EDiskSpaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDiskSpaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDiskSpaceType>(
    EDiskSpaceType_descriptor(), name, value);
}
enum EThumbnailTimePrecision : int {
  ePrecise = 0,
  eLoose = 1
};
bool EThumbnailTimePrecision_IsValid(int value);
constexpr EThumbnailTimePrecision EThumbnailTimePrecision_MIN = ePrecise;
constexpr EThumbnailTimePrecision EThumbnailTimePrecision_MAX = eLoose;
constexpr int EThumbnailTimePrecision_ARRAYSIZE = EThumbnailTimePrecision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EThumbnailTimePrecision_descriptor();
template<typename T>
inline const std::string& EThumbnailTimePrecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EThumbnailTimePrecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EThumbnailTimePrecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EThumbnailTimePrecision_descriptor(), enum_t_value);
}
inline bool EThumbnailTimePrecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EThumbnailTimePrecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EThumbnailTimePrecision>(
    EThumbnailTimePrecision_descriptor(), name, value);
}
enum EThumbnailFormat : int {
  eJPEG = 1,
  eRGB = 2
};
bool EThumbnailFormat_IsValid(int value);
constexpr EThumbnailFormat EThumbnailFormat_MIN = eJPEG;
constexpr EThumbnailFormat EThumbnailFormat_MAX = eRGB;
constexpr int EThumbnailFormat_ARRAYSIZE = EThumbnailFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EThumbnailFormat_descriptor();
template<typename T>
inline const std::string& EThumbnailFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EThumbnailFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EThumbnailFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EThumbnailFormat_descriptor(), enum_t_value);
}
inline bool EThumbnailFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EThumbnailFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EThumbnailFormat>(
    EThumbnailFormat_descriptor(), name, value);
}
// ===================================================================

class CGameRecording_GetAppsWithBackgroundVideo_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAppsWithBackgroundVideo_Request) */ {
 public:
  inline CGameRecording_GetAppsWithBackgroundVideo_Request() : CGameRecording_GetAppsWithBackgroundVideo_Request(nullptr) {}
  virtual ~CGameRecording_GetAppsWithBackgroundVideo_Request();
  explicit constexpr CGameRecording_GetAppsWithBackgroundVideo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAppsWithBackgroundVideo_Request(const CGameRecording_GetAppsWithBackgroundVideo_Request& from);
  CGameRecording_GetAppsWithBackgroundVideo_Request(CGameRecording_GetAppsWithBackgroundVideo_Request&& from) noexcept
    : CGameRecording_GetAppsWithBackgroundVideo_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAppsWithBackgroundVideo_Request& operator=(const CGameRecording_GetAppsWithBackgroundVideo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAppsWithBackgroundVideo_Request& operator=(CGameRecording_GetAppsWithBackgroundVideo_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAppsWithBackgroundVideo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAppsWithBackgroundVideo_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAppsWithBackgroundVideo_Request*>(
               &_CGameRecording_GetAppsWithBackgroundVideo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameRecording_GetAppsWithBackgroundVideo_Request& a, CGameRecording_GetAppsWithBackgroundVideo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAppsWithBackgroundVideo_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAppsWithBackgroundVideo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAppsWithBackgroundVideo_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Request>(nullptr);
  }

  CGameRecording_GetAppsWithBackgroundVideo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAppsWithBackgroundVideo_Request& from);
  void MergeFrom(const CGameRecording_GetAppsWithBackgroundVideo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAppsWithBackgroundVideo_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAppsWithBackgroundVideo_Request";
  }
  protected:
  explicit CGameRecording_GetAppsWithBackgroundVideo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAppsWithBackgroundVideo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAppsWithBackgroundVideo_Response_App PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAppsWithBackgroundVideo_Response.App) */ {
 public:
  inline CGameRecording_GetAppsWithBackgroundVideo_Response_App() : CGameRecording_GetAppsWithBackgroundVideo_Response_App(nullptr) {}
  virtual ~CGameRecording_GetAppsWithBackgroundVideo_Response_App();
  explicit constexpr CGameRecording_GetAppsWithBackgroundVideo_Response_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAppsWithBackgroundVideo_Response_App(const CGameRecording_GetAppsWithBackgroundVideo_Response_App& from);
  CGameRecording_GetAppsWithBackgroundVideo_Response_App(CGameRecording_GetAppsWithBackgroundVideo_Response_App&& from) noexcept
    : CGameRecording_GetAppsWithBackgroundVideo_Response_App() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAppsWithBackgroundVideo_Response_App& operator=(const CGameRecording_GetAppsWithBackgroundVideo_Response_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAppsWithBackgroundVideo_Response_App& operator=(CGameRecording_GetAppsWithBackgroundVideo_Response_App&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAppsWithBackgroundVideo_Response_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAppsWithBackgroundVideo_Response_App* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAppsWithBackgroundVideo_Response_App*>(
               &_CGameRecording_GetAppsWithBackgroundVideo_Response_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameRecording_GetAppsWithBackgroundVideo_Response_App& a, CGameRecording_GetAppsWithBackgroundVideo_Response_App& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAppsWithBackgroundVideo_Response_App* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAppsWithBackgroundVideo_Response_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAppsWithBackgroundVideo_Response_App* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Response_App>(nullptr);
  }

  CGameRecording_GetAppsWithBackgroundVideo_Response_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Response_App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAppsWithBackgroundVideo_Response_App& from);
  void MergeFrom(const CGameRecording_GetAppsWithBackgroundVideo_Response_App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAppsWithBackgroundVideo_Response_App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAppsWithBackgroundVideo_Response.App";
  }
  protected:
  explicit CGameRecording_GetAppsWithBackgroundVideo_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kMostRecentStartTimeFieldNumber = 2,
    kRecordingTypeFieldNumber = 3,
    kVideoDurationSecondsFieldNumber = 4,
    kTimelineDurationSecondsFieldNumber = 5,
    kFileSizeFieldNumber = 7,
    kIsActiveFieldNumber = 6,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 most_recent_start_time = 2;
  bool has_most_recent_start_time() const;
  private:
  bool _internal_has_most_recent_start_time() const;
  public:
  void clear_most_recent_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 most_recent_start_time() const;
  void set_most_recent_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_most_recent_start_time() const;
  void _internal_set_most_recent_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
  bool has_recording_type() const;
  private:
  bool _internal_has_recording_type() const;
  public:
  void clear_recording_type();
  ::EGameRecordingType recording_type() const;
  void set_recording_type(::EGameRecordingType value);
  private:
  ::EGameRecordingType _internal_recording_type() const;
  void _internal_set_recording_type(::EGameRecordingType value);
  public:

  // optional double video_duration_seconds = 4;
  bool has_video_duration_seconds() const;
  private:
  bool _internal_has_video_duration_seconds() const;
  public:
  void clear_video_duration_seconds();
  double video_duration_seconds() const;
  void set_video_duration_seconds(double value);
  private:
  double _internal_video_duration_seconds() const;
  void _internal_set_video_duration_seconds(double value);
  public:

  // optional double timeline_duration_seconds = 5;
  bool has_timeline_duration_seconds() const;
  private:
  bool _internal_has_timeline_duration_seconds() const;
  public:
  void clear_timeline_duration_seconds();
  double timeline_duration_seconds() const;
  void set_timeline_duration_seconds(double value);
  private:
  double _internal_timeline_duration_seconds() const;
  void _internal_set_timeline_duration_seconds(double value);
  public:

  // optional uint64 file_size = 7;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_active = 6;
  bool has_is_active() const;
  private:
  bool _internal_has_is_active() const;
  public:
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAppsWithBackgroundVideo_Response.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 most_recent_start_time_;
  int recording_type_;
  double video_duration_seconds_;
  double timeline_duration_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  bool is_active_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAppsWithBackgroundVideo_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAppsWithBackgroundVideo_Response) */ {
 public:
  inline CGameRecording_GetAppsWithBackgroundVideo_Response() : CGameRecording_GetAppsWithBackgroundVideo_Response(nullptr) {}
  virtual ~CGameRecording_GetAppsWithBackgroundVideo_Response();
  explicit constexpr CGameRecording_GetAppsWithBackgroundVideo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAppsWithBackgroundVideo_Response(const CGameRecording_GetAppsWithBackgroundVideo_Response& from);
  CGameRecording_GetAppsWithBackgroundVideo_Response(CGameRecording_GetAppsWithBackgroundVideo_Response&& from) noexcept
    : CGameRecording_GetAppsWithBackgroundVideo_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAppsWithBackgroundVideo_Response& operator=(const CGameRecording_GetAppsWithBackgroundVideo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAppsWithBackgroundVideo_Response& operator=(CGameRecording_GetAppsWithBackgroundVideo_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAppsWithBackgroundVideo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAppsWithBackgroundVideo_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAppsWithBackgroundVideo_Response*>(
               &_CGameRecording_GetAppsWithBackgroundVideo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameRecording_GetAppsWithBackgroundVideo_Response& a, CGameRecording_GetAppsWithBackgroundVideo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAppsWithBackgroundVideo_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAppsWithBackgroundVideo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAppsWithBackgroundVideo_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Response>(nullptr);
  }

  CGameRecording_GetAppsWithBackgroundVideo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAppsWithBackgroundVideo_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAppsWithBackgroundVideo_Response& from);
  void MergeFrom(const CGameRecording_GetAppsWithBackgroundVideo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAppsWithBackgroundVideo_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAppsWithBackgroundVideo_Response";
  }
  protected:
  explicit CGameRecording_GetAppsWithBackgroundVideo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_GetAppsWithBackgroundVideo_Response_App App;

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .CGameRecording_GetAppsWithBackgroundVideo_Response.App apps = 1;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetAppsWithBackgroundVideo_Response_App >*
      mutable_apps();
  private:
  const ::CGameRecording_GetAppsWithBackgroundVideo_Response_App& _internal_apps(int index) const;
  ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* _internal_add_apps();
  public:
  const ::CGameRecording_GetAppsWithBackgroundVideo_Response_App& apps(int index) const;
  ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetAppsWithBackgroundVideo_Response_App >&
      apps() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAppsWithBackgroundVideo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetAppsWithBackgroundVideo_Response_App > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTimelinesForApp_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTimelinesForApp_Request) */ {
 public:
  inline CGameRecording_GetTimelinesForApp_Request() : CGameRecording_GetTimelinesForApp_Request(nullptr) {}
  virtual ~CGameRecording_GetTimelinesForApp_Request();
  explicit constexpr CGameRecording_GetTimelinesForApp_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTimelinesForApp_Request(const CGameRecording_GetTimelinesForApp_Request& from);
  CGameRecording_GetTimelinesForApp_Request(CGameRecording_GetTimelinesForApp_Request&& from) noexcept
    : CGameRecording_GetTimelinesForApp_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTimelinesForApp_Request& operator=(const CGameRecording_GetTimelinesForApp_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTimelinesForApp_Request& operator=(CGameRecording_GetTimelinesForApp_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTimelinesForApp_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTimelinesForApp_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTimelinesForApp_Request*>(
               &_CGameRecording_GetTimelinesForApp_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGameRecording_GetTimelinesForApp_Request& a, CGameRecording_GetTimelinesForApp_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTimelinesForApp_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTimelinesForApp_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTimelinesForApp_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForApp_Request>(nullptr);
  }

  CGameRecording_GetTimelinesForApp_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForApp_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTimelinesForApp_Request& from);
  void MergeFrom(const CGameRecording_GetTimelinesForApp_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTimelinesForApp_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTimelinesForApp_Request";
  }
  protected:
  explicit CGameRecording_GetTimelinesForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTimelinesForApp_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTimelinesForApp_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTimelinesForApp_Response) */ {
 public:
  inline CGameRecording_GetTimelinesForApp_Response() : CGameRecording_GetTimelinesForApp_Response(nullptr) {}
  virtual ~CGameRecording_GetTimelinesForApp_Response();
  explicit constexpr CGameRecording_GetTimelinesForApp_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTimelinesForApp_Response(const CGameRecording_GetTimelinesForApp_Response& from);
  CGameRecording_GetTimelinesForApp_Response(CGameRecording_GetTimelinesForApp_Response&& from) noexcept
    : CGameRecording_GetTimelinesForApp_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTimelinesForApp_Response& operator=(const CGameRecording_GetTimelinesForApp_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTimelinesForApp_Response& operator=(CGameRecording_GetTimelinesForApp_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTimelinesForApp_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTimelinesForApp_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTimelinesForApp_Response*>(
               &_CGameRecording_GetTimelinesForApp_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameRecording_GetTimelinesForApp_Response& a, CGameRecording_GetTimelinesForApp_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTimelinesForApp_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTimelinesForApp_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTimelinesForApp_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForApp_Response>(nullptr);
  }

  CGameRecording_GetTimelinesForApp_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForApp_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTimelinesForApp_Response& from);
  void MergeFrom(const CGameRecording_GetTimelinesForApp_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTimelinesForApp_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTimelinesForApp_Response";
  }
  protected:
  explicit CGameRecording_GetTimelinesForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelinesFieldNumber = 1,
  };
  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  int timelines_size() const;
  private:
  int _internal_timelines_size() const;
  public:
  void clear_timelines();
  ::CGameRecordingTimelineMetadata* mutable_timelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
      mutable_timelines();
  private:
  const ::CGameRecordingTimelineMetadata& _internal_timelines(int index) const;
  ::CGameRecordingTimelineMetadata* _internal_add_timelines();
  public:
  const ::CGameRecordingTimelineMetadata& timelines(int index) const;
  ::CGameRecordingTimelineMetadata* add_timelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
      timelines() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTimelinesForApp_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata > timelines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTimelinesForClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTimelinesForClip_Request) */ {
 public:
  inline CGameRecording_GetTimelinesForClip_Request() : CGameRecording_GetTimelinesForClip_Request(nullptr) {}
  virtual ~CGameRecording_GetTimelinesForClip_Request();
  explicit constexpr CGameRecording_GetTimelinesForClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTimelinesForClip_Request(const CGameRecording_GetTimelinesForClip_Request& from);
  CGameRecording_GetTimelinesForClip_Request(CGameRecording_GetTimelinesForClip_Request&& from) noexcept
    : CGameRecording_GetTimelinesForClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTimelinesForClip_Request& operator=(const CGameRecording_GetTimelinesForClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTimelinesForClip_Request& operator=(CGameRecording_GetTimelinesForClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTimelinesForClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTimelinesForClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTimelinesForClip_Request*>(
               &_CGameRecording_GetTimelinesForClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGameRecording_GetTimelinesForClip_Request& a, CGameRecording_GetTimelinesForClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTimelinesForClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTimelinesForClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTimelinesForClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForClip_Request>(nullptr);
  }

  CGameRecording_GetTimelinesForClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTimelinesForClip_Request& from);
  void MergeFrom(const CGameRecording_GetTimelinesForClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTimelinesForClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTimelinesForClip_Request";
  }
  protected:
  explicit CGameRecording_GetTimelinesForClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTimelinesForClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTimelinesForClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTimelinesForClip_Response) */ {
 public:
  inline CGameRecording_GetTimelinesForClip_Response() : CGameRecording_GetTimelinesForClip_Response(nullptr) {}
  virtual ~CGameRecording_GetTimelinesForClip_Response();
  explicit constexpr CGameRecording_GetTimelinesForClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTimelinesForClip_Response(const CGameRecording_GetTimelinesForClip_Response& from);
  CGameRecording_GetTimelinesForClip_Response(CGameRecording_GetTimelinesForClip_Response&& from) noexcept
    : CGameRecording_GetTimelinesForClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTimelinesForClip_Response& operator=(const CGameRecording_GetTimelinesForClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTimelinesForClip_Response& operator=(CGameRecording_GetTimelinesForClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTimelinesForClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTimelinesForClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTimelinesForClip_Response*>(
               &_CGameRecording_GetTimelinesForClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGameRecording_GetTimelinesForClip_Response& a, CGameRecording_GetTimelinesForClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTimelinesForClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTimelinesForClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTimelinesForClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForClip_Response>(nullptr);
  }

  CGameRecording_GetTimelinesForClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTimelinesForClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTimelinesForClip_Response& from);
  void MergeFrom(const CGameRecording_GetTimelinesForClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTimelinesForClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTimelinesForClip_Response";
  }
  protected:
  explicit CGameRecording_GetTimelinesForClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelinesFieldNumber = 2,
    kGameIdFieldNumber = 1,
    kFirstTimelineStartOffsetMsFieldNumber = 3,
  };
  // repeated .CGameRecordingTimelineMetadata timelines = 2;
  int timelines_size() const;
  private:
  int _internal_timelines_size() const;
  public:
  void clear_timelines();
  ::CGameRecordingTimelineMetadata* mutable_timelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
      mutable_timelines();
  private:
  const ::CGameRecordingTimelineMetadata& _internal_timelines(int index) const;
  ::CGameRecordingTimelineMetadata* _internal_add_timelines();
  public:
  const ::CGameRecordingTimelineMetadata& timelines(int index) const;
  ::CGameRecordingTimelineMetadata* add_timelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
      timelines() const;

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 first_timeline_start_offset_ms = 3;
  bool has_first_timeline_start_offset_ms() const;
  private:
  bool _internal_has_first_timeline_start_offset_ms() const;
  public:
  void clear_first_timeline_start_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_timeline_start_offset_ms() const;
  void set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_timeline_start_offset_ms() const;
  void _internal_set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTimelinesForClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata > timelines_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_timeline_start_offset_ms_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_QueryPhases_Request_Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_QueryPhases_Request.Tag) */ {
 public:
  inline CGameRecording_QueryPhases_Request_Tag() : CGameRecording_QueryPhases_Request_Tag(nullptr) {}
  virtual ~CGameRecording_QueryPhases_Request_Tag();
  explicit constexpr CGameRecording_QueryPhases_Request_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_QueryPhases_Request_Tag(const CGameRecording_QueryPhases_Request_Tag& from);
  CGameRecording_QueryPhases_Request_Tag(CGameRecording_QueryPhases_Request_Tag&& from) noexcept
    : CGameRecording_QueryPhases_Request_Tag() {
    *this = ::std::move(from);
  }

  inline CGameRecording_QueryPhases_Request_Tag& operator=(const CGameRecording_QueryPhases_Request_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_QueryPhases_Request_Tag& operator=(CGameRecording_QueryPhases_Request_Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_QueryPhases_Request_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_QueryPhases_Request_Tag* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_QueryPhases_Request_Tag*>(
               &_CGameRecording_QueryPhases_Request_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CGameRecording_QueryPhases_Request_Tag& a, CGameRecording_QueryPhases_Request_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_QueryPhases_Request_Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_QueryPhases_Request_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_QueryPhases_Request_Tag* New() const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Request_Tag>(nullptr);
  }

  CGameRecording_QueryPhases_Request_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Request_Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_QueryPhases_Request_Tag& from);
  void MergeFrom(const CGameRecording_QueryPhases_Request_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_QueryPhases_Request_Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_QueryPhases_Request.Tag";
  }
  protected:
  explicit CGameRecording_QueryPhases_Request_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // optional string group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_QueryPhases_Request.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_QueryPhases_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_QueryPhases_Request) */ {
 public:
  inline CGameRecording_QueryPhases_Request() : CGameRecording_QueryPhases_Request(nullptr) {}
  virtual ~CGameRecording_QueryPhases_Request();
  explicit constexpr CGameRecording_QueryPhases_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_QueryPhases_Request(const CGameRecording_QueryPhases_Request& from);
  CGameRecording_QueryPhases_Request(CGameRecording_QueryPhases_Request&& from) noexcept
    : CGameRecording_QueryPhases_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_QueryPhases_Request& operator=(const CGameRecording_QueryPhases_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_QueryPhases_Request& operator=(CGameRecording_QueryPhases_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_QueryPhases_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_QueryPhases_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_QueryPhases_Request*>(
               &_CGameRecording_QueryPhases_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CGameRecording_QueryPhases_Request& a, CGameRecording_QueryPhases_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_QueryPhases_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_QueryPhases_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_QueryPhases_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Request>(nullptr);
  }

  CGameRecording_QueryPhases_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_QueryPhases_Request& from);
  void MergeFrom(const CGameRecording_QueryPhases_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_QueryPhases_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_QueryPhases_Request";
  }
  protected:
  explicit CGameRecording_QueryPhases_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_QueryPhases_Request_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kFilterTagsFieldNumber = 12,
    kFilterSearchStringFieldNumber = 11,
    kFilterPhaseIdFieldNumber = 13,
    kPageFieldNumber = 1,
    kCountFieldNumber = 2,
    kFilterGameidFieldNumber = 10,
  };
  // repeated .CGameRecording_QueryPhases_Request.Tag filter_tags = 12;
  int filter_tags_size() const;
  private:
  int _internal_filter_tags_size() const;
  public:
  void clear_filter_tags();
  ::CGameRecording_QueryPhases_Request_Tag* mutable_filter_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Request_Tag >*
      mutable_filter_tags();
  private:
  const ::CGameRecording_QueryPhases_Request_Tag& _internal_filter_tags(int index) const;
  ::CGameRecording_QueryPhases_Request_Tag* _internal_add_filter_tags();
  public:
  const ::CGameRecording_QueryPhases_Request_Tag& filter_tags(int index) const;
  ::CGameRecording_QueryPhases_Request_Tag* add_filter_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Request_Tag >&
      filter_tags() const;

  // optional string filter_search_string = 11;
  bool has_filter_search_string() const;
  private:
  bool _internal_has_filter_search_string() const;
  public:
  void clear_filter_search_string();
  const std::string& filter_search_string() const;
  void set_filter_search_string(const std::string& value);
  void set_filter_search_string(std::string&& value);
  void set_filter_search_string(const char* value);
  void set_filter_search_string(const char* value, size_t size);
  std::string* mutable_filter_search_string();
  std::string* release_filter_search_string();
  void set_allocated_filter_search_string(std::string* filter_search_string);
  private:
  const std::string& _internal_filter_search_string() const;
  void _internal_set_filter_search_string(const std::string& value);
  std::string* _internal_mutable_filter_search_string();
  public:

  // optional string filter_phase_id = 13;
  bool has_filter_phase_id() const;
  private:
  bool _internal_has_filter_phase_id() const;
  public:
  void clear_filter_phase_id();
  const std::string& filter_phase_id() const;
  void set_filter_phase_id(const std::string& value);
  void set_filter_phase_id(std::string&& value);
  void set_filter_phase_id(const char* value);
  void set_filter_phase_id(const char* value, size_t size);
  std::string* mutable_filter_phase_id();
  std::string* release_filter_phase_id();
  void set_allocated_filter_phase_id(std::string* filter_phase_id);
  private:
  const std::string& _internal_filter_phase_id() const;
  void _internal_set_filter_phase_id(const std::string& value);
  std::string* _internal_mutable_filter_phase_id();
  public:

  // optional uint32 page = 1;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 filter_gameid = 10;
  bool has_filter_gameid() const;
  private:
  bool _internal_has_filter_gameid() const;
  public:
  void clear_filter_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_gameid() const;
  void set_filter_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filter_gameid() const;
  void _internal_set_filter_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_QueryPhases_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Request_Tag > filter_tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_search_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_phase_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_gameid_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_QueryPhases_Response_Phase_BackgroundRecording PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording) */ {
 public:
  inline CGameRecording_QueryPhases_Response_Phase_BackgroundRecording() : CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(nullptr) {}
  virtual ~CGameRecording_QueryPhases_Response_Phase_BackgroundRecording();
  explicit constexpr CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from);
  CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording&& from) noexcept
    : CGameRecording_QueryPhases_Response_Phase_BackgroundRecording() {
    *this = ::std::move(from);
  }

  inline CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& operator=(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& operator=(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording*>(
               &_CGameRecording_QueryPhases_Response_Phase_BackgroundRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& a, CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* New() const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>(nullptr);
  }

  CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from);
  void MergeFrom(const CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_QueryPhases_Response.Phase.BackgroundRecording";
  }
  protected:
  explicit CGameRecording_QueryPhases_Response_Phase_BackgroundRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  // optional string timeline_id = 1;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional uint64 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 3;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_QueryPhases_Response_Phase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_QueryPhases_Response.Phase) */ {
 public:
  inline CGameRecording_QueryPhases_Response_Phase() : CGameRecording_QueryPhases_Response_Phase(nullptr) {}
  virtual ~CGameRecording_QueryPhases_Response_Phase();
  explicit constexpr CGameRecording_QueryPhases_Response_Phase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_QueryPhases_Response_Phase(const CGameRecording_QueryPhases_Response_Phase& from);
  CGameRecording_QueryPhases_Response_Phase(CGameRecording_QueryPhases_Response_Phase&& from) noexcept
    : CGameRecording_QueryPhases_Response_Phase() {
    *this = ::std::move(from);
  }

  inline CGameRecording_QueryPhases_Response_Phase& operator=(const CGameRecording_QueryPhases_Response_Phase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_QueryPhases_Response_Phase& operator=(CGameRecording_QueryPhases_Response_Phase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_QueryPhases_Response_Phase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_QueryPhases_Response_Phase* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_QueryPhases_Response_Phase*>(
               &_CGameRecording_QueryPhases_Response_Phase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CGameRecording_QueryPhases_Response_Phase& a, CGameRecording_QueryPhases_Response_Phase& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_QueryPhases_Response_Phase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_QueryPhases_Response_Phase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_QueryPhases_Response_Phase* New() const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response_Phase>(nullptr);
  }

  CGameRecording_QueryPhases_Response_Phase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response_Phase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_QueryPhases_Response_Phase& from);
  void MergeFrom(const CGameRecording_QueryPhases_Response_Phase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_QueryPhases_Response_Phase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_QueryPhases_Response.Phase";
  }
  protected:
  explicit CGameRecording_QueryPhases_Response_Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_QueryPhases_Response_Phase_BackgroundRecording BackgroundRecording;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 7,
    kContainedTagsFieldNumber = 8,
    kClipIdsFieldNumber = 10,
    kScreenshotsFieldNumber = 13,
    kSignificantEventsFieldNumber = 16,
    kAttributesFieldNumber = 17,
    kPhaseIdFieldNumber = 15,
    kBackgroundRecordingFieldNumber = 9,
    kGameIdFieldNumber = 1,
    kDurationMsFieldNumber = 6,
    kDateRecordedFieldNumber = 5,
    kActiveFieldNumber = 14,
    kStartMsFieldNumber = 12,
    kTypeFieldNumber = 11,
  };
  // repeated .CTimelineTag tags = 7;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CTimelineTag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
      mutable_tags();
  private:
  const ::CTimelineTag& _internal_tags(int index) const;
  ::CTimelineTag* _internal_add_tags();
  public:
  const ::CTimelineTag& tags(int index) const;
  ::CTimelineTag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
      tags() const;

  // repeated .CTimelineTag contained_tags = 8;
  int contained_tags_size() const;
  private:
  int _internal_contained_tags_size() const;
  public:
  void clear_contained_tags();
  ::CTimelineTag* mutable_contained_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
      mutable_contained_tags();
  private:
  const ::CTimelineTag& _internal_contained_tags(int index) const;
  ::CTimelineTag* _internal_add_contained_tags();
  public:
  const ::CTimelineTag& contained_tags(int index) const;
  ::CTimelineTag* add_contained_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
      contained_tags() const;

  // repeated string clip_ids = 10;
  int clip_ids_size() const;
  private:
  int _internal_clip_ids_size() const;
  public:
  void clear_clip_ids();
  const std::string& clip_ids(int index) const;
  std::string* mutable_clip_ids(int index);
  void set_clip_ids(int index, const std::string& value);
  void set_clip_ids(int index, std::string&& value);
  void set_clip_ids(int index, const char* value);
  void set_clip_ids(int index, const char* value, size_t size);
  std::string* add_clip_ids();
  void add_clip_ids(const std::string& value);
  void add_clip_ids(std::string&& value);
  void add_clip_ids(const char* value);
  void add_clip_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clip_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clip_ids();
  private:
  const std::string& _internal_clip_ids(int index) const;
  std::string* _internal_add_clip_ids();
  public:

  // repeated uint32 screenshots = 13;
  int screenshots_size() const;
  private:
  int _internal_screenshots_size() const;
  public:
  void clear_screenshots();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_screenshots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_screenshots() const;
  void _internal_add_screenshots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_screenshots();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 screenshots(int index) const;
  void set_screenshots(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_screenshots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      screenshots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_screenshots();

  // repeated .CTimelineEntry significant_events = 16;
  int significant_events_size() const;
  private:
  int _internal_significant_events_size() const;
  public:
  void clear_significant_events();
  ::CTimelineEntry* mutable_significant_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineEntry >*
      mutable_significant_events();
  private:
  const ::CTimelineEntry& _internal_significant_events(int index) const;
  ::CTimelineEntry* _internal_add_significant_events();
  public:
  const ::CTimelineEntry& significant_events(int index) const;
  ::CTimelineEntry* add_significant_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineEntry >&
      significant_events() const;

  // repeated .CPhaseAttribute attributes = 17;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::CPhaseAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >*
      mutable_attributes();
  private:
  const ::CPhaseAttribute& _internal_attributes(int index) const;
  ::CPhaseAttribute* _internal_add_attributes();
  public:
  const ::CPhaseAttribute& attributes(int index) const;
  ::CPhaseAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >&
      attributes() const;

  // optional string phase_id = 15;
  bool has_phase_id() const;
  private:
  bool _internal_has_phase_id() const;
  public:
  void clear_phase_id();
  const std::string& phase_id() const;
  void set_phase_id(const std::string& value);
  void set_phase_id(std::string&& value);
  void set_phase_id(const char* value);
  void set_phase_id(const char* value, size_t size);
  std::string* mutable_phase_id();
  std::string* release_phase_id();
  void set_allocated_phase_id(std::string* phase_id);
  private:
  const std::string& _internal_phase_id() const;
  void _internal_set_phase_id(const std::string& value);
  std::string* _internal_mutable_phase_id();
  public:

  // optional .CGameRecording_QueryPhases_Response.Phase.BackgroundRecording background_recording = 9;
  bool has_background_recording() const;
  private:
  bool _internal_has_background_recording() const;
  public:
  void clear_background_recording();
  const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& background_recording() const;
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* release_background_recording();
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* mutable_background_recording();
  void set_allocated_background_recording(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* background_recording);
  private:
  const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& _internal_background_recording() const;
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* _internal_mutable_background_recording();
  public:
  void unsafe_arena_set_allocated_background_recording(
      ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* background_recording);
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* unsafe_arena_release_background_recording();

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 6;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 date_recorded = 5;
  bool has_date_recorded() const;
  private:
  bool _internal_has_date_recorded() const;
  public:
  void clear_date_recorded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded() const;
  void set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_recorded() const;
  void _internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool active = 14;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional uint64 start_ms = 12;
  bool has_start_ms() const;
  private:
  bool _internal_has_start_ms() const;
  public:
  void clear_start_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ms() const;
  void set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_ms() const;
  void _internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .EPhaseResultType type = 11 [default = EPhaseResultType_Automatic];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EPhaseResultType type() const;
  void set_type(::EPhaseResultType value);
  private:
  ::EPhaseResultType _internal_type() const;
  void _internal_set_type(::EPhaseResultType value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_QueryPhases_Response.Phase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag > contained_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clip_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > screenshots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineEntry > significant_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phase_id_;
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* background_recording_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ms_;
  int type_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_QueryPhases_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_QueryPhases_Response) */ {
 public:
  inline CGameRecording_QueryPhases_Response() : CGameRecording_QueryPhases_Response(nullptr) {}
  virtual ~CGameRecording_QueryPhases_Response();
  explicit constexpr CGameRecording_QueryPhases_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_QueryPhases_Response(const CGameRecording_QueryPhases_Response& from);
  CGameRecording_QueryPhases_Response(CGameRecording_QueryPhases_Response&& from) noexcept
    : CGameRecording_QueryPhases_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_QueryPhases_Response& operator=(const CGameRecording_QueryPhases_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_QueryPhases_Response& operator=(CGameRecording_QueryPhases_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_QueryPhases_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_QueryPhases_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_QueryPhases_Response*>(
               &_CGameRecording_QueryPhases_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CGameRecording_QueryPhases_Response& a, CGameRecording_QueryPhases_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_QueryPhases_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_QueryPhases_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_QueryPhases_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response>(nullptr);
  }

  CGameRecording_QueryPhases_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_QueryPhases_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_QueryPhases_Response& from);
  void MergeFrom(const CGameRecording_QueryPhases_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_QueryPhases_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_QueryPhases_Response";
  }
  protected:
  explicit CGameRecording_QueryPhases_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_QueryPhases_Response_Phase Phase;

  // accessors -------------------------------------------------------

  enum : int {
    kPhasesFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .CGameRecording_QueryPhases_Response.Phase phases = 1;
  int phases_size() const;
  private:
  int _internal_phases_size() const;
  public:
  void clear_phases();
  ::CGameRecording_QueryPhases_Response_Phase* mutable_phases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Response_Phase >*
      mutable_phases();
  private:
  const ::CGameRecording_QueryPhases_Response_Phase& _internal_phases(int index) const;
  ::CGameRecording_QueryPhases_Response_Phase* _internal_add_phases();
  public:
  const ::CGameRecording_QueryPhases_Response_Phase& phases(int index) const;
  ::CGameRecording_QueryPhases_Response_Phase* add_phases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Response_Phase >&
      phases() const;

  // optional uint32 total_count = 2;
  bool has_total_count() const;
  private:
  bool _internal_has_total_count() const;
  public:
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_QueryPhases_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Response_Phase > phases_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTags_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTags_Request) */ {
 public:
  inline CGameRecording_GetTags_Request() : CGameRecording_GetTags_Request(nullptr) {}
  virtual ~CGameRecording_GetTags_Request();
  explicit constexpr CGameRecording_GetTags_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTags_Request(const CGameRecording_GetTags_Request& from);
  CGameRecording_GetTags_Request(CGameRecording_GetTags_Request&& from) noexcept
    : CGameRecording_GetTags_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTags_Request& operator=(const CGameRecording_GetTags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTags_Request& operator=(CGameRecording_GetTags_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTags_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTags_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTags_Request*>(
               &_CGameRecording_GetTags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CGameRecording_GetTags_Request& a, CGameRecording_GetTags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTags_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTags_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTags_Request>(nullptr);
  }

  CGameRecording_GetTags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTags_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTags_Request& from);
  void MergeFrom(const CGameRecording_GetTags_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTags_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTags_Request";
  }
  protected:
  explicit CGameRecording_GetTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTags_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTags_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTags_Response) */ {
 public:
  inline CGameRecording_GetTags_Response() : CGameRecording_GetTags_Response(nullptr) {}
  virtual ~CGameRecording_GetTags_Response();
  explicit constexpr CGameRecording_GetTags_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTags_Response(const CGameRecording_GetTags_Response& from);
  CGameRecording_GetTags_Response(CGameRecording_GetTags_Response&& from) noexcept
    : CGameRecording_GetTags_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTags_Response& operator=(const CGameRecording_GetTags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTags_Response& operator=(CGameRecording_GetTags_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTags_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTags_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTags_Response*>(
               &_CGameRecording_GetTags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CGameRecording_GetTags_Response& a, CGameRecording_GetTags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTags_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTags_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTags_Response>(nullptr);
  }

  CGameRecording_GetTags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTags_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTags_Response& from);
  void MergeFrom(const CGameRecording_GetTags_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTags_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTags_Response";
  }
  protected:
  explicit CGameRecording_GetTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated .CTimelineTag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CTimelineTag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
      mutable_tags();
  private:
  const ::CTimelineTag& _internal_tags(int index) const;
  ::CTimelineTag* _internal_add_tags();
  public:
  const ::CTimelineTag& tags(int index) const;
  ::CTimelineTag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
      tags() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTags_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag > tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetEnoughDiskSpace_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetEnoughDiskSpace_Request) */ {
 public:
  inline CGameRecording_GetEnoughDiskSpace_Request() : CGameRecording_GetEnoughDiskSpace_Request(nullptr) {}
  virtual ~CGameRecording_GetEnoughDiskSpace_Request();
  explicit constexpr CGameRecording_GetEnoughDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetEnoughDiskSpace_Request(const CGameRecording_GetEnoughDiskSpace_Request& from);
  CGameRecording_GetEnoughDiskSpace_Request(CGameRecording_GetEnoughDiskSpace_Request&& from) noexcept
    : CGameRecording_GetEnoughDiskSpace_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetEnoughDiskSpace_Request& operator=(const CGameRecording_GetEnoughDiskSpace_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetEnoughDiskSpace_Request& operator=(CGameRecording_GetEnoughDiskSpace_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetEnoughDiskSpace_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetEnoughDiskSpace_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetEnoughDiskSpace_Request*>(
               &_CGameRecording_GetEnoughDiskSpace_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CGameRecording_GetEnoughDiskSpace_Request& a, CGameRecording_GetEnoughDiskSpace_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetEnoughDiskSpace_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetEnoughDiskSpace_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetEnoughDiskSpace_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetEnoughDiskSpace_Request>(nullptr);
  }

  CGameRecording_GetEnoughDiskSpace_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetEnoughDiskSpace_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetEnoughDiskSpace_Request& from);
  void MergeFrom(const CGameRecording_GetEnoughDiskSpace_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetEnoughDiskSpace_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetEnoughDiskSpace_Request";
  }
  protected:
  explicit CGameRecording_GetEnoughDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_GetEnoughDiskSpace_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetEnoughDiskSpace_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetEnoughDiskSpace_Response) */ {
 public:
  inline CGameRecording_GetEnoughDiskSpace_Response() : CGameRecording_GetEnoughDiskSpace_Response(nullptr) {}
  virtual ~CGameRecording_GetEnoughDiskSpace_Response();
  explicit constexpr CGameRecording_GetEnoughDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetEnoughDiskSpace_Response(const CGameRecording_GetEnoughDiskSpace_Response& from);
  CGameRecording_GetEnoughDiskSpace_Response(CGameRecording_GetEnoughDiskSpace_Response&& from) noexcept
    : CGameRecording_GetEnoughDiskSpace_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetEnoughDiskSpace_Response& operator=(const CGameRecording_GetEnoughDiskSpace_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetEnoughDiskSpace_Response& operator=(CGameRecording_GetEnoughDiskSpace_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetEnoughDiskSpace_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetEnoughDiskSpace_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetEnoughDiskSpace_Response*>(
               &_CGameRecording_GetEnoughDiskSpace_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CGameRecording_GetEnoughDiskSpace_Response& a, CGameRecording_GetEnoughDiskSpace_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetEnoughDiskSpace_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetEnoughDiskSpace_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetEnoughDiskSpace_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetEnoughDiskSpace_Response>(nullptr);
  }

  CGameRecording_GetEnoughDiskSpace_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetEnoughDiskSpace_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetEnoughDiskSpace_Response& from);
  void MergeFrom(const CGameRecording_GetEnoughDiskSpace_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetEnoughDiskSpace_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetEnoughDiskSpace_Response";
  }
  protected:
  explicit CGameRecording_GetEnoughDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnoughSpaceFieldNumber = 1,
  };
  // optional bool enough_space = 1;
  bool has_enough_space() const;
  private:
  bool _internal_has_enough_space() const;
  public:
  void clear_enough_space();
  bool enough_space() const;
  void set_enough_space(bool value);
  private:
  bool _internal_enough_space() const;
  void _internal_set_enough_space(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetEnoughDiskSpace_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enough_space_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAvailableDiskSpace_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAvailableDiskSpace_Request) */ {
 public:
  inline CGameRecording_GetAvailableDiskSpace_Request() : CGameRecording_GetAvailableDiskSpace_Request(nullptr) {}
  virtual ~CGameRecording_GetAvailableDiskSpace_Request();
  explicit constexpr CGameRecording_GetAvailableDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAvailableDiskSpace_Request(const CGameRecording_GetAvailableDiskSpace_Request& from);
  CGameRecording_GetAvailableDiskSpace_Request(CGameRecording_GetAvailableDiskSpace_Request&& from) noexcept
    : CGameRecording_GetAvailableDiskSpace_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAvailableDiskSpace_Request& operator=(const CGameRecording_GetAvailableDiskSpace_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAvailableDiskSpace_Request& operator=(CGameRecording_GetAvailableDiskSpace_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAvailableDiskSpace_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAvailableDiskSpace_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAvailableDiskSpace_Request*>(
               &_CGameRecording_GetAvailableDiskSpace_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CGameRecording_GetAvailableDiskSpace_Request& a, CGameRecording_GetAvailableDiskSpace_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAvailableDiskSpace_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAvailableDiskSpace_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAvailableDiskSpace_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAvailableDiskSpace_Request>(nullptr);
  }

  CGameRecording_GetAvailableDiskSpace_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAvailableDiskSpace_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAvailableDiskSpace_Request& from);
  void MergeFrom(const CGameRecording_GetAvailableDiskSpace_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAvailableDiskSpace_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAvailableDiskSpace_Request";
  }
  protected:
  explicit CGameRecording_GetAvailableDiskSpace_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAvailableDiskSpace_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAvailableDiskSpace_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAvailableDiskSpace_Response) */ {
 public:
  inline CGameRecording_GetAvailableDiskSpace_Response() : CGameRecording_GetAvailableDiskSpace_Response(nullptr) {}
  virtual ~CGameRecording_GetAvailableDiskSpace_Response();
  explicit constexpr CGameRecording_GetAvailableDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAvailableDiskSpace_Response(const CGameRecording_GetAvailableDiskSpace_Response& from);
  CGameRecording_GetAvailableDiskSpace_Response(CGameRecording_GetAvailableDiskSpace_Response&& from) noexcept
    : CGameRecording_GetAvailableDiskSpace_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAvailableDiskSpace_Response& operator=(const CGameRecording_GetAvailableDiskSpace_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAvailableDiskSpace_Response& operator=(CGameRecording_GetAvailableDiskSpace_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAvailableDiskSpace_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAvailableDiskSpace_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAvailableDiskSpace_Response*>(
               &_CGameRecording_GetAvailableDiskSpace_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CGameRecording_GetAvailableDiskSpace_Response& a, CGameRecording_GetAvailableDiskSpace_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAvailableDiskSpace_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAvailableDiskSpace_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAvailableDiskSpace_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAvailableDiskSpace_Response>(nullptr);
  }

  CGameRecording_GetAvailableDiskSpace_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAvailableDiskSpace_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAvailableDiskSpace_Response& from);
  void MergeFrom(const CGameRecording_GetAvailableDiskSpace_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAvailableDiskSpace_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAvailableDiskSpace_Response";
  }
  protected:
  explicit CGameRecording_GetAvailableDiskSpace_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // optional double size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAvailableDiskSpace_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_TimelineChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_TimelineChanged_Notification) */ {
 public:
  inline CGameRecording_TimelineChanged_Notification() : CGameRecording_TimelineChanged_Notification(nullptr) {}
  virtual ~CGameRecording_TimelineChanged_Notification();
  explicit constexpr CGameRecording_TimelineChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_TimelineChanged_Notification(const CGameRecording_TimelineChanged_Notification& from);
  CGameRecording_TimelineChanged_Notification(CGameRecording_TimelineChanged_Notification&& from) noexcept
    : CGameRecording_TimelineChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_TimelineChanged_Notification& operator=(const CGameRecording_TimelineChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_TimelineChanged_Notification& operator=(CGameRecording_TimelineChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_TimelineChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_TimelineChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_TimelineChanged_Notification*>(
               &_CGameRecording_TimelineChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CGameRecording_TimelineChanged_Notification& a, CGameRecording_TimelineChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_TimelineChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_TimelineChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_TimelineChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_TimelineChanged_Notification>(nullptr);
  }

  CGameRecording_TimelineChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_TimelineChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_TimelineChanged_Notification& from);
  void MergeFrom(const CGameRecording_TimelineChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_TimelineChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_TimelineChanged_Notification";
  }
  protected:
  explicit CGameRecording_TimelineChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 2,
    kGameIdFieldNumber = 3,
    kDurationMsFieldNumber = 5,
    kStartTimeFieldNumber = 4,
    kNotificationTypeFieldNumber = 1,
  };
  // optional string timeline_id = 2;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional uint64 game_id = 3;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 5;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
  bool has_notification_type() const;
  private:
  bool _internal_has_notification_type() const;
  public:
  void clear_notification_type();
  ::ETimelineChangeNotificationType notification_type() const;
  void set_notification_type(::ETimelineChangeNotificationType value);
  private:
  ::ETimelineChangeNotificationType _internal_notification_type() const;
  void _internal_set_notification_type(::ETimelineChangeNotificationType value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_TimelineChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  int notification_type_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_RecordingSessionChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_RecordingSessionChanged_Notification) */ {
 public:
  inline CGameRecording_RecordingSessionChanged_Notification() : CGameRecording_RecordingSessionChanged_Notification(nullptr) {}
  virtual ~CGameRecording_RecordingSessionChanged_Notification();
  explicit constexpr CGameRecording_RecordingSessionChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_RecordingSessionChanged_Notification(const CGameRecording_RecordingSessionChanged_Notification& from);
  CGameRecording_RecordingSessionChanged_Notification(CGameRecording_RecordingSessionChanged_Notification&& from) noexcept
    : CGameRecording_RecordingSessionChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_RecordingSessionChanged_Notification& operator=(const CGameRecording_RecordingSessionChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_RecordingSessionChanged_Notification& operator=(CGameRecording_RecordingSessionChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_RecordingSessionChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_RecordingSessionChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_RecordingSessionChanged_Notification*>(
               &_CGameRecording_RecordingSessionChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CGameRecording_RecordingSessionChanged_Notification& a, CGameRecording_RecordingSessionChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_RecordingSessionChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_RecordingSessionChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_RecordingSessionChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_RecordingSessionChanged_Notification>(nullptr);
  }

  CGameRecording_RecordingSessionChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_RecordingSessionChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_RecordingSessionChanged_Notification& from);
  void MergeFrom(const CGameRecording_RecordingSessionChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_RecordingSessionChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_RecordingSessionChanged_Notification";
  }
  protected:
  explicit CGameRecording_RecordingSessionChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 2,
    kSessionIdFieldNumber = 5,
    kGameIdFieldNumber = 4,
    kStartOffsetFieldNumber = 6,
    kDurationMsFieldNumber = 7,
    kRecordingTypeFieldNumber = 8,
    kNotificationTypeFieldNumber = 1,
  };
  // optional string timeline_id = 2;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional string session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional uint64 game_id = 4;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_offset = 6;
  bool has_start_offset() const;
  private:
  bool _internal_has_start_offset() const;
  public:
  void clear_start_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset() const;
  void set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset() const;
  void _internal_set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 7;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
  bool has_recording_type() const;
  private:
  bool _internal_has_recording_type() const;
  public:
  void clear_recording_type();
  ::EGameRecordingType recording_type() const;
  void set_recording_type(::EGameRecordingType value);
  private:
  ::EGameRecordingType _internal_recording_type() const;
  void _internal_set_recording_type(::EGameRecordingType value);
  public:

  // optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
  bool has_notification_type() const;
  private:
  bool _internal_has_notification_type() const;
  public:
  void clear_notification_type();
  ::ERecordingSessionChangeNotificationType notification_type() const;
  void set_notification_type(::ERecordingSessionChangeNotificationType value);
  private:
  ::ERecordingSessionChangeNotificationType _internal_notification_type() const;
  void _internal_set_notification_type(::ERecordingSessionChangeNotificationType value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_RecordingSessionChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  int recording_type_;
  int notification_type_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CTimelineEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimelineEntry) */ {
 public:
  inline CTimelineEntry() : CTimelineEntry(nullptr) {}
  virtual ~CTimelineEntry();
  explicit constexpr CTimelineEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimelineEntry(const CTimelineEntry& from);
  CTimelineEntry(CTimelineEntry&& from) noexcept
    : CTimelineEntry() {
    *this = ::std::move(from);
  }

  inline CTimelineEntry& operator=(const CTimelineEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimelineEntry& operator=(CTimelineEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTimelineEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimelineEntry* internal_default_instance() {
    return reinterpret_cast<const CTimelineEntry*>(
               &_CTimelineEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CTimelineEntry& a, CTimelineEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimelineEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimelineEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTimelineEntry* New() const final {
    return CreateMaybeMessage<CTimelineEntry>(nullptr);
  }

  CTimelineEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTimelineEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTimelineEntry& from);
  void MergeFrom(const CTimelineEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimelineEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimelineEntry";
  }
  protected:
  explicit CTimelineEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 17,
    kAttributesFieldNumber = 19,
    kTimelineIdFieldNumber = 1,
    kRangeTitleFieldNumber = 7,
    kTimestampTitleFieldNumber = 10,
    kMarkerIconFieldNumber = 11,
    kMarkerDescriptionFieldNumber = 13,
    kAchievementNameFieldNumber = 16,
    kPhaseIdFieldNumber = 18,
    kEntryIdFieldNumber = 2,
    kTimeFieldNumber = 3,
    kTypeFieldNumber = 4,
    kGameModeFieldNumber = 5,
    kRangeDurationFieldNumber = 8,
    kRangePossibleClipFieldNumber = 9,
    kMarkerPriorityFieldNumber = 14,
    kScreenshotHandleFieldNumber = 15,
  };
  // repeated .CTimelineTag tag = 17;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::CTimelineTag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
      mutable_tag();
  private:
  const ::CTimelineTag& _internal_tag(int index) const;
  ::CTimelineTag* _internal_add_tag();
  public:
  const ::CTimelineTag& tag(int index) const;
  ::CTimelineTag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
      tag() const;

  // repeated .CPhaseAttribute attributes = 19;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::CPhaseAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >*
      mutable_attributes();
  private:
  const ::CPhaseAttribute& _internal_attributes(int index) const;
  ::CPhaseAttribute* _internal_add_attributes();
  public:
  const ::CPhaseAttribute& attributes(int index) const;
  ::CPhaseAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >&
      attributes() const;

  // optional string timeline_id = 1;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional string range_title = 7;
  bool has_range_title() const;
  private:
  bool _internal_has_range_title() const;
  public:
  void clear_range_title();
  const std::string& range_title() const;
  void set_range_title(const std::string& value);
  void set_range_title(std::string&& value);
  void set_range_title(const char* value);
  void set_range_title(const char* value, size_t size);
  std::string* mutable_range_title();
  std::string* release_range_title();
  void set_allocated_range_title(std::string* range_title);
  private:
  const std::string& _internal_range_title() const;
  void _internal_set_range_title(const std::string& value);
  std::string* _internal_mutable_range_title();
  public:

  // optional string timestamp_title = 10;
  bool has_timestamp_title() const;
  private:
  bool _internal_has_timestamp_title() const;
  public:
  void clear_timestamp_title();
  const std::string& timestamp_title() const;
  void set_timestamp_title(const std::string& value);
  void set_timestamp_title(std::string&& value);
  void set_timestamp_title(const char* value);
  void set_timestamp_title(const char* value, size_t size);
  std::string* mutable_timestamp_title();
  std::string* release_timestamp_title();
  void set_allocated_timestamp_title(std::string* timestamp_title);
  private:
  const std::string& _internal_timestamp_title() const;
  void _internal_set_timestamp_title(const std::string& value);
  std::string* _internal_mutable_timestamp_title();
  public:

  // optional string marker_icon = 11;
  bool has_marker_icon() const;
  private:
  bool _internal_has_marker_icon() const;
  public:
  void clear_marker_icon();
  const std::string& marker_icon() const;
  void set_marker_icon(const std::string& value);
  void set_marker_icon(std::string&& value);
  void set_marker_icon(const char* value);
  void set_marker_icon(const char* value, size_t size);
  std::string* mutable_marker_icon();
  std::string* release_marker_icon();
  void set_allocated_marker_icon(std::string* marker_icon);
  private:
  const std::string& _internal_marker_icon() const;
  void _internal_set_marker_icon(const std::string& value);
  std::string* _internal_mutable_marker_icon();
  public:

  // optional string marker_description = 13;
  bool has_marker_description() const;
  private:
  bool _internal_has_marker_description() const;
  public:
  void clear_marker_description();
  const std::string& marker_description() const;
  void set_marker_description(const std::string& value);
  void set_marker_description(std::string&& value);
  void set_marker_description(const char* value);
  void set_marker_description(const char* value, size_t size);
  std::string* mutable_marker_description();
  std::string* release_marker_description();
  void set_allocated_marker_description(std::string* marker_description);
  private:
  const std::string& _internal_marker_description() const;
  void _internal_set_marker_description(const std::string& value);
  std::string* _internal_mutable_marker_description();
  public:

  // optional string achievement_name = 16;
  bool has_achievement_name() const;
  private:
  bool _internal_has_achievement_name() const;
  public:
  void clear_achievement_name();
  const std::string& achievement_name() const;
  void set_achievement_name(const std::string& value);
  void set_achievement_name(std::string&& value);
  void set_achievement_name(const char* value);
  void set_achievement_name(const char* value, size_t size);
  std::string* mutable_achievement_name();
  std::string* release_achievement_name();
  void set_allocated_achievement_name(std::string* achievement_name);
  private:
  const std::string& _internal_achievement_name() const;
  void _internal_set_achievement_name(const std::string& value);
  std::string* _internal_mutable_achievement_name();
  public:

  // optional string phase_id = 18;
  bool has_phase_id() const;
  private:
  bool _internal_has_phase_id() const;
  public:
  void clear_phase_id();
  const std::string& phase_id() const;
  void set_phase_id(const std::string& value);
  void set_phase_id(std::string&& value);
  void set_phase_id(const char* value);
  void set_phase_id(const char* value, size_t size);
  std::string* mutable_phase_id();
  std::string* release_phase_id();
  void set_allocated_phase_id(std::string* phase_id);
  private:
  const std::string& _internal_phase_id() const;
  void _internal_set_phase_id(const std::string& value);
  std::string* _internal_mutable_phase_id();
  public:

  // optional uint64 entry_id = 2;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ETimelineEntryType type() const;
  void set_type(::ETimelineEntryType value);
  private:
  ::ETimelineEntryType _internal_type() const;
  void _internal_set_type(::ETimelineEntryType value);
  public:

  // optional int32 game_mode = 5;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 range_duration = 8;
  bool has_range_duration() const;
  private:
  bool _internal_has_range_duration() const;
  public:
  void clear_range_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 range_duration() const;
  void set_range_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_range_duration() const;
  void _internal_set_range_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 range_possible_clip = 9;
  bool has_range_possible_clip() const;
  private:
  bool _internal_has_range_possible_clip() const;
  public:
  void clear_range_possible_clip();
  ::PROTOBUF_NAMESPACE_ID::int32 range_possible_clip() const;
  void set_range_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_possible_clip() const;
  void _internal_set_range_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 marker_priority = 14;
  bool has_marker_priority() const;
  private:
  bool _internal_has_marker_priority() const;
  public:
  void clear_marker_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 marker_priority() const;
  void set_marker_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marker_priority() const;
  void _internal_set_marker_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 screenshot_handle = 15;
  bool has_screenshot_handle() const;
  private:
  bool _internal_has_screenshot_handle() const;
  public:
  void clear_screenshot_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 screenshot_handle() const;
  void set_screenshot_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_screenshot_handle() const;
  void _internal_set_screenshot_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CTimelineEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag > tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr achievement_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phase_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 range_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_possible_clip_;
  ::PROTOBUF_NAMESPACE_ID::int32 marker_priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 screenshot_handle_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_TimelineEntryChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_TimelineEntryChanged_Notification) */ {
 public:
  inline CGameRecording_TimelineEntryChanged_Notification() : CGameRecording_TimelineEntryChanged_Notification(nullptr) {}
  virtual ~CGameRecording_TimelineEntryChanged_Notification();
  explicit constexpr CGameRecording_TimelineEntryChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_TimelineEntryChanged_Notification(const CGameRecording_TimelineEntryChanged_Notification& from);
  CGameRecording_TimelineEntryChanged_Notification(CGameRecording_TimelineEntryChanged_Notification&& from) noexcept
    : CGameRecording_TimelineEntryChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_TimelineEntryChanged_Notification& operator=(const CGameRecording_TimelineEntryChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_TimelineEntryChanged_Notification& operator=(CGameRecording_TimelineEntryChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_TimelineEntryChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_TimelineEntryChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_TimelineEntryChanged_Notification*>(
               &_CGameRecording_TimelineEntryChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CGameRecording_TimelineEntryChanged_Notification& a, CGameRecording_TimelineEntryChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_TimelineEntryChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_TimelineEntryChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_TimelineEntryChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_TimelineEntryChanged_Notification>(nullptr);
  }

  CGameRecording_TimelineEntryChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_TimelineEntryChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_TimelineEntryChanged_Notification& from);
  void MergeFrom(const CGameRecording_TimelineEntryChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_TimelineEntryChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_TimelineEntryChanged_Notification";
  }
  protected:
  explicit CGameRecording_TimelineEntryChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // optional .CTimelineEntry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::CTimelineEntry& entry() const;
  ::CTimelineEntry* release_entry();
  ::CTimelineEntry* mutable_entry();
  void set_allocated_entry(::CTimelineEntry* entry);
  private:
  const ::CTimelineEntry& _internal_entry() const;
  ::CTimelineEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::CTimelineEntry* entry);
  ::CTimelineEntry* unsafe_arena_release_entry();

  // optional fixed64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_TimelineEntryChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CTimelineEntry* entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_TimelineEntryRemoved_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_TimelineEntryRemoved_Notification) */ {
 public:
  inline CGameRecording_TimelineEntryRemoved_Notification() : CGameRecording_TimelineEntryRemoved_Notification(nullptr) {}
  virtual ~CGameRecording_TimelineEntryRemoved_Notification();
  explicit constexpr CGameRecording_TimelineEntryRemoved_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_TimelineEntryRemoved_Notification(const CGameRecording_TimelineEntryRemoved_Notification& from);
  CGameRecording_TimelineEntryRemoved_Notification(CGameRecording_TimelineEntryRemoved_Notification&& from) noexcept
    : CGameRecording_TimelineEntryRemoved_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_TimelineEntryRemoved_Notification& operator=(const CGameRecording_TimelineEntryRemoved_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_TimelineEntryRemoved_Notification& operator=(CGameRecording_TimelineEntryRemoved_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_TimelineEntryRemoved_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_TimelineEntryRemoved_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_TimelineEntryRemoved_Notification*>(
               &_CGameRecording_TimelineEntryRemoved_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CGameRecording_TimelineEntryRemoved_Notification& a, CGameRecording_TimelineEntryRemoved_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_TimelineEntryRemoved_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_TimelineEntryRemoved_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_TimelineEntryRemoved_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_TimelineEntryRemoved_Notification>(nullptr);
  }

  CGameRecording_TimelineEntryRemoved_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_TimelineEntryRemoved_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_TimelineEntryRemoved_Notification& from);
  void MergeFrom(const CGameRecording_TimelineEntryRemoved_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_TimelineEntryRemoved_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_TimelineEntryRemoved_Notification";
  }
  protected:
  explicit CGameRecording_TimelineEntryRemoved_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 2,
    kGameIdFieldNumber = 1,
    kEntryIdFieldNumber = 3,
  };
  // optional string timeline_id = 2;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 entry_id = 3;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_TimelineEntryRemoved_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_LowDiskSpace_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_LowDiskSpace_Notification) */ {
 public:
  inline CGameRecording_LowDiskSpace_Notification() : CGameRecording_LowDiskSpace_Notification(nullptr) {}
  virtual ~CGameRecording_LowDiskSpace_Notification();
  explicit constexpr CGameRecording_LowDiskSpace_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_LowDiskSpace_Notification(const CGameRecording_LowDiskSpace_Notification& from);
  CGameRecording_LowDiskSpace_Notification(CGameRecording_LowDiskSpace_Notification&& from) noexcept
    : CGameRecording_LowDiskSpace_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_LowDiskSpace_Notification& operator=(const CGameRecording_LowDiskSpace_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_LowDiskSpace_Notification& operator=(CGameRecording_LowDiskSpace_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_LowDiskSpace_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_LowDiskSpace_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_LowDiskSpace_Notification*>(
               &_CGameRecording_LowDiskSpace_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CGameRecording_LowDiskSpace_Notification& a, CGameRecording_LowDiskSpace_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_LowDiskSpace_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_LowDiskSpace_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_LowDiskSpace_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_LowDiskSpace_Notification>(nullptr);
  }

  CGameRecording_LowDiskSpace_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_LowDiskSpace_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_LowDiskSpace_Notification& from);
  void MergeFrom(const CGameRecording_LowDiskSpace_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_LowDiskSpace_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_LowDiskSpace_Notification";
  }
  protected:
  explicit CGameRecording_LowDiskSpace_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_LowDiskSpace_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_PostGameHighlightsChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_PostGameHighlightsChanged_Notification) */ {
 public:
  inline CGameRecording_PostGameHighlightsChanged_Notification() : CGameRecording_PostGameHighlightsChanged_Notification(nullptr) {}
  virtual ~CGameRecording_PostGameHighlightsChanged_Notification();
  explicit constexpr CGameRecording_PostGameHighlightsChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_PostGameHighlightsChanged_Notification(const CGameRecording_PostGameHighlightsChanged_Notification& from);
  CGameRecording_PostGameHighlightsChanged_Notification(CGameRecording_PostGameHighlightsChanged_Notification&& from) noexcept
    : CGameRecording_PostGameHighlightsChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_PostGameHighlightsChanged_Notification& operator=(const CGameRecording_PostGameHighlightsChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_PostGameHighlightsChanged_Notification& operator=(CGameRecording_PostGameHighlightsChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_PostGameHighlightsChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_PostGameHighlightsChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_PostGameHighlightsChanged_Notification*>(
               &_CGameRecording_PostGameHighlightsChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CGameRecording_PostGameHighlightsChanged_Notification& a, CGameRecording_PostGameHighlightsChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_PostGameHighlightsChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_PostGameHighlightsChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_PostGameHighlightsChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_PostGameHighlightsChanged_Notification>(nullptr);
  }

  CGameRecording_PostGameHighlightsChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_PostGameHighlightsChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from);
  void MergeFrom(const CGameRecording_PostGameHighlightsChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_PostGameHighlightsChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_PostGameHighlightsChanged_Notification";
  }
  protected:
  explicit CGameRecording_PostGameHighlightsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_PostGameHighlightsChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_OpenOverlayToGamePhase_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_OpenOverlayToGamePhase_Notification) */ {
 public:
  inline CGameRecording_OpenOverlayToGamePhase_Notification() : CGameRecording_OpenOverlayToGamePhase_Notification(nullptr) {}
  virtual ~CGameRecording_OpenOverlayToGamePhase_Notification();
  explicit constexpr CGameRecording_OpenOverlayToGamePhase_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_OpenOverlayToGamePhase_Notification(const CGameRecording_OpenOverlayToGamePhase_Notification& from);
  CGameRecording_OpenOverlayToGamePhase_Notification(CGameRecording_OpenOverlayToGamePhase_Notification&& from) noexcept
    : CGameRecording_OpenOverlayToGamePhase_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_OpenOverlayToGamePhase_Notification& operator=(const CGameRecording_OpenOverlayToGamePhase_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_OpenOverlayToGamePhase_Notification& operator=(CGameRecording_OpenOverlayToGamePhase_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_OpenOverlayToGamePhase_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_OpenOverlayToGamePhase_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_OpenOverlayToGamePhase_Notification*>(
               &_CGameRecording_OpenOverlayToGamePhase_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CGameRecording_OpenOverlayToGamePhase_Notification& a, CGameRecording_OpenOverlayToGamePhase_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_OpenOverlayToGamePhase_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_OpenOverlayToGamePhase_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_OpenOverlayToGamePhase_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_OpenOverlayToGamePhase_Notification>(nullptr);
  }

  CGameRecording_OpenOverlayToGamePhase_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_OpenOverlayToGamePhase_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_OpenOverlayToGamePhase_Notification& from);
  void MergeFrom(const CGameRecording_OpenOverlayToGamePhase_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_OpenOverlayToGamePhase_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_OpenOverlayToGamePhase_Notification";
  }
  protected:
  explicit CGameRecording_OpenOverlayToGamePhase_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseIdFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // optional string phase_id = 2;
  bool has_phase_id() const;
  private:
  bool _internal_has_phase_id() const;
  public:
  void clear_phase_id();
  const std::string& phase_id() const;
  void set_phase_id(const std::string& value);
  void set_phase_id(std::string&& value);
  void set_phase_id(const char* value);
  void set_phase_id(const char* value, size_t size);
  std::string* mutable_phase_id();
  std::string* release_phase_id();
  void set_allocated_phase_id(std::string* phase_id);
  private:
  const std::string& _internal_phase_id() const;
  void _internal_set_phase_id(const std::string& value);
  std::string* _internal_mutable_phase_id();
  public:

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_OpenOverlayToGamePhase_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phase_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_OpenOverlayToTimelineEvent_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_OpenOverlayToTimelineEvent_Notification) */ {
 public:
  inline CGameRecording_OpenOverlayToTimelineEvent_Notification() : CGameRecording_OpenOverlayToTimelineEvent_Notification(nullptr) {}
  virtual ~CGameRecording_OpenOverlayToTimelineEvent_Notification();
  explicit constexpr CGameRecording_OpenOverlayToTimelineEvent_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_OpenOverlayToTimelineEvent_Notification(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from);
  CGameRecording_OpenOverlayToTimelineEvent_Notification(CGameRecording_OpenOverlayToTimelineEvent_Notification&& from) noexcept
    : CGameRecording_OpenOverlayToTimelineEvent_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_OpenOverlayToTimelineEvent_Notification& operator=(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_OpenOverlayToTimelineEvent_Notification& operator=(CGameRecording_OpenOverlayToTimelineEvent_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_OpenOverlayToTimelineEvent_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_OpenOverlayToTimelineEvent_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_OpenOverlayToTimelineEvent_Notification*>(
               &_CGameRecording_OpenOverlayToTimelineEvent_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CGameRecording_OpenOverlayToTimelineEvent_Notification& a, CGameRecording_OpenOverlayToTimelineEvent_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_OpenOverlayToTimelineEvent_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_OpenOverlayToTimelineEvent_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_OpenOverlayToTimelineEvent_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_OpenOverlayToTimelineEvent_Notification>(nullptr);
  }

  CGameRecording_OpenOverlayToTimelineEvent_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_OpenOverlayToTimelineEvent_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from);
  void MergeFrom(const CGameRecording_OpenOverlayToTimelineEvent_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_OpenOverlayToTimelineEvent_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_OpenOverlayToTimelineEvent_Notification";
  }
  protected:
  explicit CGameRecording_OpenOverlayToTimelineEvent_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kEntryIdFieldNumber = 2,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 entry_id = 2;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_OpenOverlayToTimelineEvent_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_PhaseListChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_PhaseListChanged_Notification) */ {
 public:
  inline CGameRecording_PhaseListChanged_Notification() : CGameRecording_PhaseListChanged_Notification(nullptr) {}
  virtual ~CGameRecording_PhaseListChanged_Notification();
  explicit constexpr CGameRecording_PhaseListChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_PhaseListChanged_Notification(const CGameRecording_PhaseListChanged_Notification& from);
  CGameRecording_PhaseListChanged_Notification(CGameRecording_PhaseListChanged_Notification&& from) noexcept
    : CGameRecording_PhaseListChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_PhaseListChanged_Notification& operator=(const CGameRecording_PhaseListChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_PhaseListChanged_Notification& operator=(CGameRecording_PhaseListChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_PhaseListChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_PhaseListChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_PhaseListChanged_Notification*>(
               &_CGameRecording_PhaseListChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CGameRecording_PhaseListChanged_Notification& a, CGameRecording_PhaseListChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_PhaseListChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_PhaseListChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_PhaseListChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_PhaseListChanged_Notification>(nullptr);
  }

  CGameRecording_PhaseListChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_PhaseListChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_PhaseListChanged_Notification& from);
  void MergeFrom(const CGameRecording_PhaseListChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_PhaseListChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_PhaseListChanged_Notification";
  }
  protected:
  explicit CGameRecording_PhaseListChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_PhaseListChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ClipSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ClipSummary) */ {
 public:
  inline CGameRecording_ClipSummary() : CGameRecording_ClipSummary(nullptr) {}
  virtual ~CGameRecording_ClipSummary();
  explicit constexpr CGameRecording_ClipSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ClipSummary(const CGameRecording_ClipSummary& from);
  CGameRecording_ClipSummary(CGameRecording_ClipSummary&& from) noexcept
    : CGameRecording_ClipSummary() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ClipSummary& operator=(const CGameRecording_ClipSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ClipSummary& operator=(CGameRecording_ClipSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ClipSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ClipSummary* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ClipSummary*>(
               &_CGameRecording_ClipSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CGameRecording_ClipSummary& a, CGameRecording_ClipSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ClipSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ClipSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ClipSummary* New() const final {
    return CreateMaybeMessage<CGameRecording_ClipSummary>(nullptr);
  }

  CGameRecording_ClipSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ClipSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ClipSummary& from);
  void MergeFrom(const CGameRecording_ClipSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ClipSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ClipSummary";
  }
  protected:
  explicit CGameRecording_ClipSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
    kStartTimelineIdFieldNumber = 5,
    kNameFieldNumber = 9,
    kOriginalDeviceFieldNumber = 12,
    kThumbnailUrlFieldNumber = 15,
    kGameIdFieldNumber = 2,
    kDurationMsFieldNumber = 3,
    kStartOffsetMsFieldNumber = 6,
    kPublishedFileIdFieldNumber = 7,
    kDateRecordedFieldNumber = 4,
    kDateClippedFieldNumber = 10,
    kFileSizeFieldNumber = 8,
    kTemporaryFieldNumber = 11,
    kOriginalGamingDeviceTypeFieldNumber = 13,
    kDateDownloadedFieldNumber = 14,
    kThumbnailWidthFieldNumber = 16,
    kThumbnailHeightFieldNumber = 17,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional string start_timeline_id = 5;
  bool has_start_timeline_id() const;
  private:
  bool _internal_has_start_timeline_id() const;
  public:
  void clear_start_timeline_id();
  const std::string& start_timeline_id() const;
  void set_start_timeline_id(const std::string& value);
  void set_start_timeline_id(std::string&& value);
  void set_start_timeline_id(const char* value);
  void set_start_timeline_id(const char* value, size_t size);
  std::string* mutable_start_timeline_id();
  std::string* release_start_timeline_id();
  void set_allocated_start_timeline_id(std::string* start_timeline_id);
  private:
  const std::string& _internal_start_timeline_id() const;
  void _internal_set_start_timeline_id(const std::string& value);
  std::string* _internal_mutable_start_timeline_id();
  public:

  // optional string name = 9;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string original_device = 12;
  bool has_original_device() const;
  private:
  bool _internal_has_original_device() const;
  public:
  void clear_original_device();
  const std::string& original_device() const;
  void set_original_device(const std::string& value);
  void set_original_device(std::string&& value);
  void set_original_device(const char* value);
  void set_original_device(const char* value, size_t size);
  std::string* mutable_original_device();
  std::string* release_original_device();
  void set_allocated_original_device(std::string* original_device);
  private:
  const std::string& _internal_original_device() const;
  void _internal_set_original_device(const std::string& value);
  std::string* _internal_mutable_original_device();
  public:

  // optional string thumbnail_url = 15;
  bool has_thumbnail_url() const;
  private:
  bool _internal_has_thumbnail_url() const;
  public:
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  void set_thumbnail_url(const std::string& value);
  void set_thumbnail_url(std::string&& value);
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  std::string* mutable_thumbnail_url();
  std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // optional uint64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 3;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_offset_ms = 6;
  bool has_start_offset_ms() const;
  private:
  bool _internal_has_start_offset_ms() const;
  public:
  void clear_start_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ms() const;
  void set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset_ms() const;
  void _internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 published_file_id = 7;
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 published_file_id() const;
  void set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_published_file_id() const;
  void _internal_set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 date_recorded = 4;
  bool has_date_recorded() const;
  private:
  bool _internal_has_date_recorded() const;
  public:
  void clear_date_recorded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded() const;
  void set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_recorded() const;
  void _internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 date_clipped = 10;
  bool has_date_clipped() const;
  private:
  bool _internal_has_date_clipped() const;
  public:
  void clear_date_clipped();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_clipped() const;
  void set_date_clipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_clipped() const;
  void _internal_set_date_clipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 8;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool temporary = 11;
  bool has_temporary() const;
  private:
  bool _internal_has_temporary() const;
  public:
  void clear_temporary();
  bool temporary() const;
  void set_temporary(bool value);
  private:
  bool _internal_temporary() const;
  void _internal_set_temporary(bool value);
  public:

  // optional uint32 original_gaming_device_type = 13;
  bool has_original_gaming_device_type() const;
  private:
  bool _internal_has_original_gaming_device_type() const;
  public:
  void clear_original_gaming_device_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 original_gaming_device_type() const;
  void set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_gaming_device_type() const;
  void _internal_set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 date_downloaded = 14;
  bool has_date_downloaded() const;
  private:
  bool _internal_has_date_downloaded() const;
  public:
  void clear_date_downloaded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_downloaded() const;
  void set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_downloaded() const;
  void _internal_set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thumbnail_width = 16;
  bool has_thumbnail_width() const;
  private:
  bool _internal_has_thumbnail_width() const;
  public:
  void clear_thumbnail_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_width() const;
  void set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thumbnail_width() const;
  void _internal_set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thumbnail_height = 17;
  bool has_thumbnail_height() const;
  private:
  bool _internal_has_thumbnail_height() const;
  public:
  void clear_thumbnail_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_height() const;
  void set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thumbnail_height() const;
  void _internal_set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ClipSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 published_file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_clipped_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  bool temporary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 original_gaming_device_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_downloaded_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_height_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SaveClip_Request_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SaveClip_Request.Position) */ {
 public:
  inline CGameRecording_SaveClip_Request_Position() : CGameRecording_SaveClip_Request_Position(nullptr) {}
  virtual ~CGameRecording_SaveClip_Request_Position();
  explicit constexpr CGameRecording_SaveClip_Request_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SaveClip_Request_Position(const CGameRecording_SaveClip_Request_Position& from);
  CGameRecording_SaveClip_Request_Position(CGameRecording_SaveClip_Request_Position&& from) noexcept
    : CGameRecording_SaveClip_Request_Position() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SaveClip_Request_Position& operator=(const CGameRecording_SaveClip_Request_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SaveClip_Request_Position& operator=(CGameRecording_SaveClip_Request_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SaveClip_Request_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SaveClip_Request_Position* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SaveClip_Request_Position*>(
               &_CGameRecording_SaveClip_Request_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CGameRecording_SaveClip_Request_Position& a, CGameRecording_SaveClip_Request_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SaveClip_Request_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SaveClip_Request_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SaveClip_Request_Position* New() const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Request_Position>(nullptr);
  }

  CGameRecording_SaveClip_Request_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Request_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SaveClip_Request_Position& from);
  void MergeFrom(const CGameRecording_SaveClip_Request_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SaveClip_Request_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SaveClip_Request.Position";
  }
  protected:
  explicit CGameRecording_SaveClip_Request_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 1,
    kOffsetMsFieldNumber = 2,
  };
  // optional string timeline_id = 1;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional uint64 offset_ms = 2;
  bool has_offset_ms() const;
  private:
  bool _internal_has_offset_ms() const;
  public:
  void clear_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_ms() const;
  void set_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset_ms() const;
  void _internal_set_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_SaveClip_Request.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_ms_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SaveClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SaveClip_Request) */ {
 public:
  inline CGameRecording_SaveClip_Request() : CGameRecording_SaveClip_Request(nullptr) {}
  virtual ~CGameRecording_SaveClip_Request();
  explicit constexpr CGameRecording_SaveClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SaveClip_Request(const CGameRecording_SaveClip_Request& from);
  CGameRecording_SaveClip_Request(CGameRecording_SaveClip_Request&& from) noexcept
    : CGameRecording_SaveClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SaveClip_Request& operator=(const CGameRecording_SaveClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SaveClip_Request& operator=(CGameRecording_SaveClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SaveClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SaveClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SaveClip_Request*>(
               &_CGameRecording_SaveClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CGameRecording_SaveClip_Request& a, CGameRecording_SaveClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SaveClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SaveClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SaveClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Request>(nullptr);
  }

  CGameRecording_SaveClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SaveClip_Request& from);
  void MergeFrom(const CGameRecording_SaveClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SaveClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SaveClip_Request";
  }
  protected:
  explicit CGameRecording_SaveClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_SaveClip_Request_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kSrcClipIdFieldNumber = 5,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kGameIdFieldNumber = 1,
    kTemporaryFieldNumber = 6,
    kForceThumbnailFieldNumber = 7,
  };
  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string src_clip_id = 5;
  bool has_src_clip_id() const;
  private:
  bool _internal_has_src_clip_id() const;
  public:
  void clear_src_clip_id();
  const std::string& src_clip_id() const;
  void set_src_clip_id(const std::string& value);
  void set_src_clip_id(std::string&& value);
  void set_src_clip_id(const char* value);
  void set_src_clip_id(const char* value, size_t size);
  std::string* mutable_src_clip_id();
  std::string* release_src_clip_id();
  void set_allocated_src_clip_id(std::string* src_clip_id);
  private:
  const std::string& _internal_src_clip_id() const;
  void _internal_set_src_clip_id(const std::string& value);
  std::string* _internal_mutable_src_clip_id();
  public:

  // optional .CGameRecording_SaveClip_Request.Position start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::CGameRecording_SaveClip_Request_Position& start() const;
  ::CGameRecording_SaveClip_Request_Position* release_start();
  ::CGameRecording_SaveClip_Request_Position* mutable_start();
  void set_allocated_start(::CGameRecording_SaveClip_Request_Position* start);
  private:
  const ::CGameRecording_SaveClip_Request_Position& _internal_start() const;
  ::CGameRecording_SaveClip_Request_Position* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::CGameRecording_SaveClip_Request_Position* start);
  ::CGameRecording_SaveClip_Request_Position* unsafe_arena_release_start();

  // optional .CGameRecording_SaveClip_Request.Position end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::CGameRecording_SaveClip_Request_Position& end() const;
  ::CGameRecording_SaveClip_Request_Position* release_end();
  ::CGameRecording_SaveClip_Request_Position* mutable_end();
  void set_allocated_end(::CGameRecording_SaveClip_Request_Position* end);
  private:
  const ::CGameRecording_SaveClip_Request_Position& _internal_end() const;
  ::CGameRecording_SaveClip_Request_Position* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::CGameRecording_SaveClip_Request_Position* end);
  ::CGameRecording_SaveClip_Request_Position* unsafe_arena_release_end();

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool temporary = 6;
  bool has_temporary() const;
  private:
  bool _internal_has_temporary() const;
  public:
  void clear_temporary();
  bool temporary() const;
  void set_temporary(bool value);
  private:
  bool _internal_temporary() const;
  void _internal_set_temporary(bool value);
  public:

  // optional bool force_thumbnail = 7;
  bool has_force_thumbnail() const;
  private:
  bool _internal_has_force_thumbnail() const;
  public:
  void clear_force_thumbnail();
  bool force_thumbnail() const;
  void set_force_thumbnail(bool value);
  private:
  bool _internal_force_thumbnail() const;
  void _internal_set_force_thumbnail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_SaveClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_clip_id_;
  ::CGameRecording_SaveClip_Request_Position* start_;
  ::CGameRecording_SaveClip_Request_Position* end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  bool temporary_;
  bool force_thumbnail_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SaveClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SaveClip_Response) */ {
 public:
  inline CGameRecording_SaveClip_Response() : CGameRecording_SaveClip_Response(nullptr) {}
  virtual ~CGameRecording_SaveClip_Response();
  explicit constexpr CGameRecording_SaveClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SaveClip_Response(const CGameRecording_SaveClip_Response& from);
  CGameRecording_SaveClip_Response(CGameRecording_SaveClip_Response&& from) noexcept
    : CGameRecording_SaveClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SaveClip_Response& operator=(const CGameRecording_SaveClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SaveClip_Response& operator=(CGameRecording_SaveClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SaveClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SaveClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SaveClip_Response*>(
               &_CGameRecording_SaveClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CGameRecording_SaveClip_Response& a, CGameRecording_SaveClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SaveClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SaveClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SaveClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Response>(nullptr);
  }

  CGameRecording_SaveClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SaveClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SaveClip_Response& from);
  void MergeFrom(const CGameRecording_SaveClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SaveClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SaveClip_Response";
  }
  protected:
  explicit CGameRecording_SaveClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // optional .CGameRecording_ClipSummary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::CGameRecording_ClipSummary& summary() const;
  ::CGameRecording_ClipSummary* release_summary();
  ::CGameRecording_ClipSummary* mutable_summary();
  void set_allocated_summary(::CGameRecording_ClipSummary* summary);
  private:
  const ::CGameRecording_ClipSummary& _internal_summary() const;
  ::CGameRecording_ClipSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::CGameRecording_ClipSummary* summary);
  ::CGameRecording_ClipSummary* unsafe_arena_release_summary();

  // @@protoc_insertion_point(class_scope:CGameRecording_SaveClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_ClipSummary* summary_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeleteClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeleteClip_Request) */ {
 public:
  inline CGameRecording_DeleteClip_Request() : CGameRecording_DeleteClip_Request(nullptr) {}
  virtual ~CGameRecording_DeleteClip_Request();
  explicit constexpr CGameRecording_DeleteClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeleteClip_Request(const CGameRecording_DeleteClip_Request& from);
  CGameRecording_DeleteClip_Request(CGameRecording_DeleteClip_Request&& from) noexcept
    : CGameRecording_DeleteClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeleteClip_Request& operator=(const CGameRecording_DeleteClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeleteClip_Request& operator=(CGameRecording_DeleteClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeleteClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeleteClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeleteClip_Request*>(
               &_CGameRecording_DeleteClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CGameRecording_DeleteClip_Request& a, CGameRecording_DeleteClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeleteClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeleteClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeleteClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_DeleteClip_Request>(nullptr);
  }

  CGameRecording_DeleteClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeleteClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeleteClip_Request& from);
  void MergeFrom(const CGameRecording_DeleteClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeleteClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeleteClip_Request";
  }
  protected:
  explicit CGameRecording_DeleteClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_DeleteClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeleteClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeleteClip_Response) */ {
 public:
  inline CGameRecording_DeleteClip_Response() : CGameRecording_DeleteClip_Response(nullptr) {}
  virtual ~CGameRecording_DeleteClip_Response();
  explicit constexpr CGameRecording_DeleteClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeleteClip_Response(const CGameRecording_DeleteClip_Response& from);
  CGameRecording_DeleteClip_Response(CGameRecording_DeleteClip_Response&& from) noexcept
    : CGameRecording_DeleteClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeleteClip_Response& operator=(const CGameRecording_DeleteClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeleteClip_Response& operator=(CGameRecording_DeleteClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeleteClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeleteClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeleteClip_Response*>(
               &_CGameRecording_DeleteClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CGameRecording_DeleteClip_Response& a, CGameRecording_DeleteClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeleteClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeleteClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeleteClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_DeleteClip_Response>(nullptr);
  }

  CGameRecording_DeleteClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeleteClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeleteClip_Response& from);
  void MergeFrom(const CGameRecording_DeleteClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeleteClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeleteClip_Response";
  }
  protected:
  explicit CGameRecording_DeleteClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_DeleteClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportClip_Settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportClip_Settings) */ {
 public:
  inline CGameRecording_ExportClip_Settings() : CGameRecording_ExportClip_Settings(nullptr) {}
  virtual ~CGameRecording_ExportClip_Settings();
  explicit constexpr CGameRecording_ExportClip_Settings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportClip_Settings(const CGameRecording_ExportClip_Settings& from);
  CGameRecording_ExportClip_Settings(CGameRecording_ExportClip_Settings&& from) noexcept
    : CGameRecording_ExportClip_Settings() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportClip_Settings& operator=(const CGameRecording_ExportClip_Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportClip_Settings& operator=(CGameRecording_ExportClip_Settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportClip_Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportClip_Settings* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportClip_Settings*>(
               &_CGameRecording_ExportClip_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CGameRecording_ExportClip_Settings& a, CGameRecording_ExportClip_Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportClip_Settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportClip_Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportClip_Settings* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Settings>(nullptr);
  }

  CGameRecording_ExportClip_Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportClip_Settings& from);
  void MergeFrom(const CGameRecording_ExportClip_Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportClip_Settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportClip_Settings";
  }
  protected:
  explicit CGameRecording_ExportClip_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitrateKbpsFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFramesPerSecondFieldNumber = 4,
    kCodecFieldNumber = 5,
  };
  // optional int32 bitrate_kbps = 1;
  bool has_bitrate_kbps() const;
  private:
  bool _internal_has_bitrate_kbps() const;
  public:
  void clear_bitrate_kbps();
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate_kbps() const;
  void set_bitrate_kbps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bitrate_kbps() const;
  void _internal_set_bitrate_kbps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 frames_per_second = 4;
  bool has_frames_per_second() const;
  private:
  bool _internal_has_frames_per_second() const;
  public:
  void clear_frames_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 frames_per_second() const;
  void set_frames_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frames_per_second() const;
  void _internal_set_frames_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EExportCodec codec = 5 [default = EExportCodec_Default];
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  ::EExportCodec codec() const;
  void set_codec(::EExportCodec value);
  private:
  ::EExportCodec _internal_codec() const;
  void _internal_set_codec(::EExportCodec value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportClip_Settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate_kbps_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 frames_per_second_;
  int codec_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportClip_Request) */ {
 public:
  inline CGameRecording_ExportClip_Request() : CGameRecording_ExportClip_Request(nullptr) {}
  virtual ~CGameRecording_ExportClip_Request();
  explicit constexpr CGameRecording_ExportClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportClip_Request(const CGameRecording_ExportClip_Request& from);
  CGameRecording_ExportClip_Request(CGameRecording_ExportClip_Request&& from) noexcept
    : CGameRecording_ExportClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportClip_Request& operator=(const CGameRecording_ExportClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportClip_Request& operator=(CGameRecording_ExportClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportClip_Request*>(
               &_CGameRecording_ExportClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CGameRecording_ExportClip_Request& a, CGameRecording_ExportClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Request>(nullptr);
  }

  CGameRecording_ExportClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportClip_Request& from);
  void MergeFrom(const CGameRecording_ExportClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportClip_Request";
  }
  protected:
  explicit CGameRecording_ExportClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
    kExportMp4PathFieldNumber = 2,
    kSettingsFieldNumber = 3,
    kUseUniqueFilenameFieldNumber = 4,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional string export_mp4_path = 2;
  bool has_export_mp4_path() const;
  private:
  bool _internal_has_export_mp4_path() const;
  public:
  void clear_export_mp4_path();
  const std::string& export_mp4_path() const;
  void set_export_mp4_path(const std::string& value);
  void set_export_mp4_path(std::string&& value);
  void set_export_mp4_path(const char* value);
  void set_export_mp4_path(const char* value, size_t size);
  std::string* mutable_export_mp4_path();
  std::string* release_export_mp4_path();
  void set_allocated_export_mp4_path(std::string* export_mp4_path);
  private:
  const std::string& _internal_export_mp4_path() const;
  void _internal_set_export_mp4_path(const std::string& value);
  std::string* _internal_mutable_export_mp4_path();
  public:

  // optional .CGameRecording_ExportClip_Settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CGameRecording_ExportClip_Settings& settings() const;
  ::CGameRecording_ExportClip_Settings* release_settings();
  ::CGameRecording_ExportClip_Settings* mutable_settings();
  void set_allocated_settings(::CGameRecording_ExportClip_Settings* settings);
  private:
  const ::CGameRecording_ExportClip_Settings& _internal_settings() const;
  ::CGameRecording_ExportClip_Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CGameRecording_ExportClip_Settings* settings);
  ::CGameRecording_ExportClip_Settings* unsafe_arena_release_settings();

  // optional bool use_unique_filename = 4;
  bool has_use_unique_filename() const;
  private:
  bool _internal_has_use_unique_filename() const;
  public:
  void clear_use_unique_filename();
  bool use_unique_filename() const;
  void set_use_unique_filename(bool value);
  private:
  bool _internal_use_unique_filename() const;
  void _internal_set_use_unique_filename(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr export_mp4_path_;
  ::CGameRecording_ExportClip_Settings* settings_;
  bool use_unique_filename_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportClip_Response) */ {
 public:
  inline CGameRecording_ExportClip_Response() : CGameRecording_ExportClip_Response(nullptr) {}
  virtual ~CGameRecording_ExportClip_Response();
  explicit constexpr CGameRecording_ExportClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportClip_Response(const CGameRecording_ExportClip_Response& from);
  CGameRecording_ExportClip_Response(CGameRecording_ExportClip_Response&& from) noexcept
    : CGameRecording_ExportClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportClip_Response& operator=(const CGameRecording_ExportClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportClip_Response& operator=(CGameRecording_ExportClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportClip_Response*>(
               &_CGameRecording_ExportClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CGameRecording_ExportClip_Response& a, CGameRecording_ExportClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Response>(nullptr);
  }

  CGameRecording_ExportClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportClip_Response& from);
  void MergeFrom(const CGameRecording_ExportClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportClip_Response";
  }
  protected:
  explicit CGameRecording_ExportClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportClipPreview_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportClipPreview_Request) */ {
 public:
  inline CGameRecording_ExportClipPreview_Request() : CGameRecording_ExportClipPreview_Request(nullptr) {}
  virtual ~CGameRecording_ExportClipPreview_Request();
  explicit constexpr CGameRecording_ExportClipPreview_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportClipPreview_Request(const CGameRecording_ExportClipPreview_Request& from);
  CGameRecording_ExportClipPreview_Request(CGameRecording_ExportClipPreview_Request&& from) noexcept
    : CGameRecording_ExportClipPreview_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportClipPreview_Request& operator=(const CGameRecording_ExportClipPreview_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportClipPreview_Request& operator=(CGameRecording_ExportClipPreview_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportClipPreview_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportClipPreview_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportClipPreview_Request*>(
               &_CGameRecording_ExportClipPreview_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CGameRecording_ExportClipPreview_Request& a, CGameRecording_ExportClipPreview_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportClipPreview_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportClipPreview_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportClipPreview_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportClipPreview_Request>(nullptr);
  }

  CGameRecording_ExportClipPreview_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportClipPreview_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportClipPreview_Request& from);
  void MergeFrom(const CGameRecording_ExportClipPreview_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportClipPreview_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportClipPreview_Request";
  }
  protected:
  explicit CGameRecording_ExportClipPreview_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
    kSettingsFieldNumber = 2,
    kRunPolicyChecksFieldNumber = 3,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional .CGameRecording_ExportClip_Settings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CGameRecording_ExportClip_Settings& settings() const;
  ::CGameRecording_ExportClip_Settings* release_settings();
  ::CGameRecording_ExportClip_Settings* mutable_settings();
  void set_allocated_settings(::CGameRecording_ExportClip_Settings* settings);
  private:
  const ::CGameRecording_ExportClip_Settings& _internal_settings() const;
  ::CGameRecording_ExportClip_Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CGameRecording_ExportClip_Settings* settings);
  ::CGameRecording_ExportClip_Settings* unsafe_arena_release_settings();

  // optional bool run_policy_checks = 3;
  bool has_run_policy_checks() const;
  private:
  bool _internal_has_run_policy_checks() const;
  public:
  void clear_run_policy_checks();
  bool run_policy_checks() const;
  void set_run_policy_checks(bool value);
  private:
  bool _internal_run_policy_checks() const;
  void _internal_set_run_policy_checks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportClipPreview_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::CGameRecording_ExportClip_Settings* settings_;
  bool run_policy_checks_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportClipPreview_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportClipPreview_Response) */ {
 public:
  inline CGameRecording_ExportClipPreview_Response() : CGameRecording_ExportClipPreview_Response(nullptr) {}
  virtual ~CGameRecording_ExportClipPreview_Response();
  explicit constexpr CGameRecording_ExportClipPreview_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportClipPreview_Response(const CGameRecording_ExportClipPreview_Response& from);
  CGameRecording_ExportClipPreview_Response(CGameRecording_ExportClipPreview_Response&& from) noexcept
    : CGameRecording_ExportClipPreview_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportClipPreview_Response& operator=(const CGameRecording_ExportClipPreview_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportClipPreview_Response& operator=(CGameRecording_ExportClipPreview_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportClipPreview_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportClipPreview_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportClipPreview_Response*>(
               &_CGameRecording_ExportClipPreview_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CGameRecording_ExportClipPreview_Response& a, CGameRecording_ExportClipPreview_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportClipPreview_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportClipPreview_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportClipPreview_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportClipPreview_Response>(nullptr);
  }

  CGameRecording_ExportClipPreview_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportClipPreview_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportClipPreview_Response& from);
  void MergeFrom(const CGameRecording_ExportClipPreview_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportClipPreview_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportClipPreview_Response";
  }
  protected:
  explicit CGameRecording_ExportClipPreview_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 2,
    kEstimatedSizeFieldNumber = 1,
  };
  // optional .CGameRecording_ExportClip_Settings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CGameRecording_ExportClip_Settings& settings() const;
  ::CGameRecording_ExportClip_Settings* release_settings();
  ::CGameRecording_ExportClip_Settings* mutable_settings();
  void set_allocated_settings(::CGameRecording_ExportClip_Settings* settings);
  private:
  const ::CGameRecording_ExportClip_Settings& _internal_settings() const;
  ::CGameRecording_ExportClip_Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CGameRecording_ExportClip_Settings* settings);
  ::CGameRecording_ExportClip_Settings* unsafe_arena_release_settings();

  // optional uint64 estimated_size = 1;
  bool has_estimated_size() const;
  private:
  bool _internal_has_estimated_size() const;
  public:
  void clear_estimated_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_size() const;
  void set_estimated_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_estimated_size() const;
  void _internal_set_estimated_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportClipPreview_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_ExportClip_Settings* settings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_TakeScreenshot_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_TakeScreenshot_Request) */ {
 public:
  inline CGameRecording_TakeScreenshot_Request() : CGameRecording_TakeScreenshot_Request(nullptr) {}
  virtual ~CGameRecording_TakeScreenshot_Request();
  explicit constexpr CGameRecording_TakeScreenshot_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_TakeScreenshot_Request(const CGameRecording_TakeScreenshot_Request& from);
  CGameRecording_TakeScreenshot_Request(CGameRecording_TakeScreenshot_Request&& from) noexcept
    : CGameRecording_TakeScreenshot_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_TakeScreenshot_Request& operator=(const CGameRecording_TakeScreenshot_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_TakeScreenshot_Request& operator=(CGameRecording_TakeScreenshot_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_TakeScreenshot_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_TakeScreenshot_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_TakeScreenshot_Request*>(
               &_CGameRecording_TakeScreenshot_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CGameRecording_TakeScreenshot_Request& a, CGameRecording_TakeScreenshot_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_TakeScreenshot_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_TakeScreenshot_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_TakeScreenshot_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_TakeScreenshot_Request>(nullptr);
  }

  CGameRecording_TakeScreenshot_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_TakeScreenshot_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_TakeScreenshot_Request& from);
  void MergeFrom(const CGameRecording_TakeScreenshot_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_TakeScreenshot_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_TakeScreenshot_Request";
  }
  protected:
  explicit CGameRecording_TakeScreenshot_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 2,
    kGameIdFieldNumber = 1,
    kTimelineOffsetMsFieldNumber = 3,
  };
  // optional string timeline_id = 2;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional fixed64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 timeline_offset_ms = 3;
  bool has_timeline_offset_ms() const;
  private:
  bool _internal_has_timeline_offset_ms() const;
  public:
  void clear_timeline_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeline_offset_ms() const;
  void set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeline_offset_ms() const;
  void _internal_set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_TakeScreenshot_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeline_offset_ms_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_TakeScreenshot_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_TakeScreenshot_Response) */ {
 public:
  inline CGameRecording_TakeScreenshot_Response() : CGameRecording_TakeScreenshot_Response(nullptr) {}
  virtual ~CGameRecording_TakeScreenshot_Response();
  explicit constexpr CGameRecording_TakeScreenshot_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_TakeScreenshot_Response(const CGameRecording_TakeScreenshot_Response& from);
  CGameRecording_TakeScreenshot_Response(CGameRecording_TakeScreenshot_Response&& from) noexcept
    : CGameRecording_TakeScreenshot_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_TakeScreenshot_Response& operator=(const CGameRecording_TakeScreenshot_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_TakeScreenshot_Response& operator=(CGameRecording_TakeScreenshot_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_TakeScreenshot_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_TakeScreenshot_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_TakeScreenshot_Response*>(
               &_CGameRecording_TakeScreenshot_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CGameRecording_TakeScreenshot_Response& a, CGameRecording_TakeScreenshot_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_TakeScreenshot_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_TakeScreenshot_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_TakeScreenshot_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_TakeScreenshot_Response>(nullptr);
  }

  CGameRecording_TakeScreenshot_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_TakeScreenshot_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_TakeScreenshot_Response& from);
  void MergeFrom(const CGameRecording_TakeScreenshot_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_TakeScreenshot_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_TakeScreenshot_Response";
  }
  protected:
  explicit CGameRecording_TakeScreenshot_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenshotIdFieldNumber = 1,
  };
  // optional fixed64 screenshot_id = 1;
  bool has_screenshot_id() const;
  private:
  bool _internal_has_screenshot_id() const;
  public:
  void clear_screenshot_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 screenshot_id() const;
  void set_screenshot_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_screenshot_id() const;
  void _internal_set_screenshot_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_TakeScreenshot_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 screenshot_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UploadClipToSteam_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UploadClipToSteam_Request) */ {
 public:
  inline CGameRecording_UploadClipToSteam_Request() : CGameRecording_UploadClipToSteam_Request(nullptr) {}
  virtual ~CGameRecording_UploadClipToSteam_Request();
  explicit constexpr CGameRecording_UploadClipToSteam_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UploadClipToSteam_Request(const CGameRecording_UploadClipToSteam_Request& from);
  CGameRecording_UploadClipToSteam_Request(CGameRecording_UploadClipToSteam_Request&& from) noexcept
    : CGameRecording_UploadClipToSteam_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UploadClipToSteam_Request& operator=(const CGameRecording_UploadClipToSteam_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UploadClipToSteam_Request& operator=(CGameRecording_UploadClipToSteam_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UploadClipToSteam_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UploadClipToSteam_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UploadClipToSteam_Request*>(
               &_CGameRecording_UploadClipToSteam_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CGameRecording_UploadClipToSteam_Request& a, CGameRecording_UploadClipToSteam_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UploadClipToSteam_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UploadClipToSteam_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UploadClipToSteam_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_UploadClipToSteam_Request>(nullptr);
  }

  CGameRecording_UploadClipToSteam_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UploadClipToSteam_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UploadClipToSteam_Request& from);
  void MergeFrom(const CGameRecording_UploadClipToSteam_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UploadClipToSteam_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UploadClipToSteam_Request";
  }
  protected:
  explicit CGameRecording_UploadClipToSteam_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescFieldNumber = 3,
    kVisibilityFieldNumber = 4,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional int32 visibility = 4;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 visibility() const;
  void set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visibility() const;
  void _internal_set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UploadClipToSteam_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 visibility_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UploadClipToSteam_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UploadClipToSteam_Response) */ {
 public:
  inline CGameRecording_UploadClipToSteam_Response() : CGameRecording_UploadClipToSteam_Response(nullptr) {}
  virtual ~CGameRecording_UploadClipToSteam_Response();
  explicit constexpr CGameRecording_UploadClipToSteam_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UploadClipToSteam_Response(const CGameRecording_UploadClipToSteam_Response& from);
  CGameRecording_UploadClipToSteam_Response(CGameRecording_UploadClipToSteam_Response&& from) noexcept
    : CGameRecording_UploadClipToSteam_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UploadClipToSteam_Response& operator=(const CGameRecording_UploadClipToSteam_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UploadClipToSteam_Response& operator=(CGameRecording_UploadClipToSteam_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UploadClipToSteam_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UploadClipToSteam_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UploadClipToSteam_Response*>(
               &_CGameRecording_UploadClipToSteam_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CGameRecording_UploadClipToSteam_Response& a, CGameRecording_UploadClipToSteam_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UploadClipToSteam_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UploadClipToSteam_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UploadClipToSteam_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_UploadClipToSteam_Response>(nullptr);
  }

  CGameRecording_UploadClipToSteam_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UploadClipToSteam_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UploadClipToSteam_Response& from);
  void MergeFrom(const CGameRecording_UploadClipToSteam_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UploadClipToSteam_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UploadClipToSteam_Response";
  }
  protected:
  explicit CGameRecording_UploadClipToSteam_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // optional .CGameRecording_ClipSummary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::CGameRecording_ClipSummary& summary() const;
  ::CGameRecording_ClipSummary* release_summary();
  ::CGameRecording_ClipSummary* mutable_summary();
  void set_allocated_summary(::CGameRecording_ClipSummary* summary);
  private:
  const ::CGameRecording_ClipSummary& _internal_summary() const;
  ::CGameRecording_ClipSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::CGameRecording_ClipSummary* summary);
  ::CGameRecording_ClipSummary* unsafe_arena_release_summary();

  // @@protoc_insertion_point(class_scope:CGameRecording_UploadClipToSteam_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_ClipSummary* summary_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ZipClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ZipClip_Request) */ {
 public:
  inline CGameRecording_ZipClip_Request() : CGameRecording_ZipClip_Request(nullptr) {}
  virtual ~CGameRecording_ZipClip_Request();
  explicit constexpr CGameRecording_ZipClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ZipClip_Request(const CGameRecording_ZipClip_Request& from);
  CGameRecording_ZipClip_Request(CGameRecording_ZipClip_Request&& from) noexcept
    : CGameRecording_ZipClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ZipClip_Request& operator=(const CGameRecording_ZipClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ZipClip_Request& operator=(CGameRecording_ZipClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ZipClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ZipClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ZipClip_Request*>(
               &_CGameRecording_ZipClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CGameRecording_ZipClip_Request& a, CGameRecording_ZipClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ZipClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ZipClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ZipClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_ZipClip_Request>(nullptr);
  }

  CGameRecording_ZipClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ZipClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ZipClip_Request& from);
  void MergeFrom(const CGameRecording_ZipClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ZipClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ZipClip_Request";
  }
  protected:
  explicit CGameRecording_ZipClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ZipClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ZipClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ZipClip_Response) */ {
 public:
  inline CGameRecording_ZipClip_Response() : CGameRecording_ZipClip_Response(nullptr) {}
  virtual ~CGameRecording_ZipClip_Response();
  explicit constexpr CGameRecording_ZipClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ZipClip_Response(const CGameRecording_ZipClip_Response& from);
  CGameRecording_ZipClip_Response(CGameRecording_ZipClip_Response&& from) noexcept
    : CGameRecording_ZipClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ZipClip_Response& operator=(const CGameRecording_ZipClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ZipClip_Response& operator=(CGameRecording_ZipClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ZipClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ZipClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ZipClip_Response*>(
               &_CGameRecording_ZipClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CGameRecording_ZipClip_Response& a, CGameRecording_ZipClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ZipClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ZipClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ZipClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_ZipClip_Response>(nullptr);
  }

  CGameRecording_ZipClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ZipClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ZipClip_Response& from);
  void MergeFrom(const CGameRecording_ZipClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ZipClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ZipClip_Response";
  }
  protected:
  explicit CGameRecording_ZipClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZipPathFieldNumber = 1,
  };
  // optional string zip_path = 1;
  bool has_zip_path() const;
  private:
  bool _internal_has_zip_path() const;
  public:
  void clear_zip_path();
  const std::string& zip_path() const;
  void set_zip_path(const std::string& value);
  void set_zip_path(std::string&& value);
  void set_zip_path(const char* value);
  void set_zip_path(const char* value, size_t size);
  std::string* mutable_zip_path();
  std::string* release_zip_path();
  void set_allocated_zip_path(std::string* zip_path);
  private:
  const std::string& _internal_zip_path() const;
  void _internal_set_zip_path(const std::string& value);
  std::string* _internal_mutable_zip_path();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ZipClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_path_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetClips_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetClips_Request) */ {
 public:
  inline CGameRecording_GetClips_Request() : CGameRecording_GetClips_Request(nullptr) {}
  virtual ~CGameRecording_GetClips_Request();
  explicit constexpr CGameRecording_GetClips_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetClips_Request(const CGameRecording_GetClips_Request& from);
  CGameRecording_GetClips_Request(CGameRecording_GetClips_Request&& from) noexcept
    : CGameRecording_GetClips_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetClips_Request& operator=(const CGameRecording_GetClips_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetClips_Request& operator=(CGameRecording_GetClips_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetClips_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetClips_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetClips_Request*>(
               &_CGameRecording_GetClips_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CGameRecording_GetClips_Request& a, CGameRecording_GetClips_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetClips_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetClips_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetClips_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetClips_Request>(nullptr);
  }

  CGameRecording_GetClips_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetClips_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetClips_Request& from);
  void MergeFrom(const CGameRecording_GetClips_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetClips_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetClips_Request";
  }
  protected:
  explicit CGameRecording_GetClips_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kCreatedAfterFieldNumber = 2,
    kIncludeTemporaryFieldNumber = 3,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 created_after = 2;
  bool has_created_after() const;
  private:
  bool _internal_has_created_after() const;
  public:
  void clear_created_after();
  ::PROTOBUF_NAMESPACE_ID::uint32 created_after() const;
  void set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_created_after() const;
  void _internal_set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool include_temporary = 3;
  bool has_include_temporary() const;
  private:
  bool _internal_has_include_temporary() const;
  public:
  void clear_include_temporary();
  bool include_temporary() const;
  void set_include_temporary(bool value);
  private:
  bool _internal_include_temporary() const;
  void _internal_set_include_temporary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetClips_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 created_after_;
  bool include_temporary_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetClips_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetClips_Response) */ {
 public:
  inline CGameRecording_GetClips_Response() : CGameRecording_GetClips_Response(nullptr) {}
  virtual ~CGameRecording_GetClips_Response();
  explicit constexpr CGameRecording_GetClips_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetClips_Response(const CGameRecording_GetClips_Response& from);
  CGameRecording_GetClips_Response(CGameRecording_GetClips_Response&& from) noexcept
    : CGameRecording_GetClips_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetClips_Response& operator=(const CGameRecording_GetClips_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetClips_Response& operator=(CGameRecording_GetClips_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetClips_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetClips_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetClips_Response*>(
               &_CGameRecording_GetClips_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CGameRecording_GetClips_Response& a, CGameRecording_GetClips_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetClips_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetClips_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetClips_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetClips_Response>(nullptr);
  }

  CGameRecording_GetClips_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetClips_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetClips_Response& from);
  void MergeFrom(const CGameRecording_GetClips_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetClips_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetClips_Response";
  }
  protected:
  explicit CGameRecording_GetClips_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipFieldNumber = 1,
  };
  // repeated .CGameRecording_ClipSummary clip = 1;
  int clip_size() const;
  private:
  int _internal_clip_size() const;
  public:
  void clear_clip();
  ::CGameRecording_ClipSummary* mutable_clip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_ClipSummary >*
      mutable_clip();
  private:
  const ::CGameRecording_ClipSummary& _internal_clip(int index) const;
  ::CGameRecording_ClipSummary* _internal_add_clip();
  public:
  const ::CGameRecording_ClipSummary& clip(int index) const;
  ::CGameRecording_ClipSummary* add_clip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_ClipSummary >&
      clip() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetClips_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_ClipSummary > clip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAndTrimPostGameHighlights_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAndTrimPostGameHighlights_Request) */ {
 public:
  inline CGameRecording_GetAndTrimPostGameHighlights_Request() : CGameRecording_GetAndTrimPostGameHighlights_Request(nullptr) {}
  virtual ~CGameRecording_GetAndTrimPostGameHighlights_Request();
  explicit constexpr CGameRecording_GetAndTrimPostGameHighlights_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAndTrimPostGameHighlights_Request(const CGameRecording_GetAndTrimPostGameHighlights_Request& from);
  CGameRecording_GetAndTrimPostGameHighlights_Request(CGameRecording_GetAndTrimPostGameHighlights_Request&& from) noexcept
    : CGameRecording_GetAndTrimPostGameHighlights_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAndTrimPostGameHighlights_Request& operator=(const CGameRecording_GetAndTrimPostGameHighlights_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAndTrimPostGameHighlights_Request& operator=(CGameRecording_GetAndTrimPostGameHighlights_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAndTrimPostGameHighlights_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAndTrimPostGameHighlights_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAndTrimPostGameHighlights_Request*>(
               &_CGameRecording_GetAndTrimPostGameHighlights_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CGameRecording_GetAndTrimPostGameHighlights_Request& a, CGameRecording_GetAndTrimPostGameHighlights_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAndTrimPostGameHighlights_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAndTrimPostGameHighlights_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAndTrimPostGameHighlights_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAndTrimPostGameHighlights_Request>(nullptr);
  }

  CGameRecording_GetAndTrimPostGameHighlights_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAndTrimPostGameHighlights_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from);
  void MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAndTrimPostGameHighlights_Request";
  }
  protected:
  explicit CGameRecording_GetAndTrimPostGameHighlights_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kCreatedAfterFieldNumber = 2,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 created_after = 2;
  bool has_created_after() const;
  private:
  bool _internal_has_created_after() const;
  public:
  void clear_created_after();
  ::PROTOBUF_NAMESPACE_ID::uint32 created_after() const;
  void set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_created_after() const;
  void _internal_set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAndTrimPostGameHighlights_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 created_after_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetAndTrimPostGameHighlights_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetAndTrimPostGameHighlights_Response) */ {
 public:
  inline CGameRecording_GetAndTrimPostGameHighlights_Response() : CGameRecording_GetAndTrimPostGameHighlights_Response(nullptr) {}
  virtual ~CGameRecording_GetAndTrimPostGameHighlights_Response();
  explicit constexpr CGameRecording_GetAndTrimPostGameHighlights_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetAndTrimPostGameHighlights_Response(const CGameRecording_GetAndTrimPostGameHighlights_Response& from);
  CGameRecording_GetAndTrimPostGameHighlights_Response(CGameRecording_GetAndTrimPostGameHighlights_Response&& from) noexcept
    : CGameRecording_GetAndTrimPostGameHighlights_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetAndTrimPostGameHighlights_Response& operator=(const CGameRecording_GetAndTrimPostGameHighlights_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetAndTrimPostGameHighlights_Response& operator=(CGameRecording_GetAndTrimPostGameHighlights_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetAndTrimPostGameHighlights_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetAndTrimPostGameHighlights_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetAndTrimPostGameHighlights_Response*>(
               &_CGameRecording_GetAndTrimPostGameHighlights_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CGameRecording_GetAndTrimPostGameHighlights_Response& a, CGameRecording_GetAndTrimPostGameHighlights_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetAndTrimPostGameHighlights_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetAndTrimPostGameHighlights_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetAndTrimPostGameHighlights_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetAndTrimPostGameHighlights_Response>(nullptr);
  }

  CGameRecording_GetAndTrimPostGameHighlights_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetAndTrimPostGameHighlights_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from);
  void MergeFrom(const CGameRecording_GetAndTrimPostGameHighlights_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetAndTrimPostGameHighlights_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetAndTrimPostGameHighlights_Response";
  }
  protected:
  explicit CGameRecording_GetAndTrimPostGameHighlights_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .CGameRecordingTimelineEvent events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CGameRecordingTimelineEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >*
      mutable_events();
  private:
  const ::CGameRecordingTimelineEvent& _internal_events(int index) const;
  ::CGameRecordingTimelineEvent* _internal_add_events();
  public:
  const ::CGameRecordingTimelineEvent& events(int index) const;
  ::CGameRecordingTimelineEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetAndTrimPostGameHighlights_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserAddTimelineEntry_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserAddTimelineEntry_Request) */ {
 public:
  inline CGameRecording_UserAddTimelineEntry_Request() : CGameRecording_UserAddTimelineEntry_Request(nullptr) {}
  virtual ~CGameRecording_UserAddTimelineEntry_Request();
  explicit constexpr CGameRecording_UserAddTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserAddTimelineEntry_Request(const CGameRecording_UserAddTimelineEntry_Request& from);
  CGameRecording_UserAddTimelineEntry_Request(CGameRecording_UserAddTimelineEntry_Request&& from) noexcept
    : CGameRecording_UserAddTimelineEntry_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserAddTimelineEntry_Request& operator=(const CGameRecording_UserAddTimelineEntry_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserAddTimelineEntry_Request& operator=(CGameRecording_UserAddTimelineEntry_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserAddTimelineEntry_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserAddTimelineEntry_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserAddTimelineEntry_Request*>(
               &_CGameRecording_UserAddTimelineEntry_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CGameRecording_UserAddTimelineEntry_Request& a, CGameRecording_UserAddTimelineEntry_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserAddTimelineEntry_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserAddTimelineEntry_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserAddTimelineEntry_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_UserAddTimelineEntry_Request>(nullptr);
  }

  CGameRecording_UserAddTimelineEntry_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserAddTimelineEntry_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserAddTimelineEntry_Request& from);
  void MergeFrom(const CGameRecording_UserAddTimelineEntry_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserAddTimelineEntry_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserAddTimelineEntry_Request";
  }
  protected:
  explicit CGameRecording_UserAddTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 3,
    kEntryFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // optional string clip_id = 3;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional .CTimelineEntry entry = 2;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::CTimelineEntry& entry() const;
  ::CTimelineEntry* release_entry();
  ::CTimelineEntry* mutable_entry();
  void set_allocated_entry(::CTimelineEntry* entry);
  private:
  const ::CTimelineEntry& _internal_entry() const;
  ::CTimelineEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::CTimelineEntry* entry);
  ::CTimelineEntry* unsafe_arena_release_entry();

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UserAddTimelineEntry_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::CTimelineEntry* entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserAddTimelineEntry_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserAddTimelineEntry_Response) */ {
 public:
  inline CGameRecording_UserAddTimelineEntry_Response() : CGameRecording_UserAddTimelineEntry_Response(nullptr) {}
  virtual ~CGameRecording_UserAddTimelineEntry_Response();
  explicit constexpr CGameRecording_UserAddTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserAddTimelineEntry_Response(const CGameRecording_UserAddTimelineEntry_Response& from);
  CGameRecording_UserAddTimelineEntry_Response(CGameRecording_UserAddTimelineEntry_Response&& from) noexcept
    : CGameRecording_UserAddTimelineEntry_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserAddTimelineEntry_Response& operator=(const CGameRecording_UserAddTimelineEntry_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserAddTimelineEntry_Response& operator=(CGameRecording_UserAddTimelineEntry_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserAddTimelineEntry_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserAddTimelineEntry_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserAddTimelineEntry_Response*>(
               &_CGameRecording_UserAddTimelineEntry_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CGameRecording_UserAddTimelineEntry_Response& a, CGameRecording_UserAddTimelineEntry_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserAddTimelineEntry_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserAddTimelineEntry_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserAddTimelineEntry_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_UserAddTimelineEntry_Response>(nullptr);
  }

  CGameRecording_UserAddTimelineEntry_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserAddTimelineEntry_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserAddTimelineEntry_Response& from);
  void MergeFrom(const CGameRecording_UserAddTimelineEntry_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserAddTimelineEntry_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserAddTimelineEntry_Response";
  }
  protected:
  explicit CGameRecording_UserAddTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIdFieldNumber = 1,
  };
  // optional uint64 entry_id = 1;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UserAddTimelineEntry_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserUpdateTimelineEntry_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserUpdateTimelineEntry_Request) */ {
 public:
  inline CGameRecording_UserUpdateTimelineEntry_Request() : CGameRecording_UserUpdateTimelineEntry_Request(nullptr) {}
  virtual ~CGameRecording_UserUpdateTimelineEntry_Request();
  explicit constexpr CGameRecording_UserUpdateTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserUpdateTimelineEntry_Request(const CGameRecording_UserUpdateTimelineEntry_Request& from);
  CGameRecording_UserUpdateTimelineEntry_Request(CGameRecording_UserUpdateTimelineEntry_Request&& from) noexcept
    : CGameRecording_UserUpdateTimelineEntry_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserUpdateTimelineEntry_Request& operator=(const CGameRecording_UserUpdateTimelineEntry_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserUpdateTimelineEntry_Request& operator=(CGameRecording_UserUpdateTimelineEntry_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserUpdateTimelineEntry_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserUpdateTimelineEntry_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserUpdateTimelineEntry_Request*>(
               &_CGameRecording_UserUpdateTimelineEntry_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CGameRecording_UserUpdateTimelineEntry_Request& a, CGameRecording_UserUpdateTimelineEntry_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserUpdateTimelineEntry_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserUpdateTimelineEntry_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserUpdateTimelineEntry_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_UserUpdateTimelineEntry_Request>(nullptr);
  }

  CGameRecording_UserUpdateTimelineEntry_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserUpdateTimelineEntry_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from);
  void MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserUpdateTimelineEntry_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserUpdateTimelineEntry_Request";
  }
  protected:
  explicit CGameRecording_UserUpdateTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 3,
    kEntryFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // optional string clip_id = 3;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional .CTimelineEntry entry = 2;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::CTimelineEntry& entry() const;
  ::CTimelineEntry* release_entry();
  ::CTimelineEntry* mutable_entry();
  void set_allocated_entry(::CTimelineEntry* entry);
  private:
  const ::CTimelineEntry& _internal_entry() const;
  ::CTimelineEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::CTimelineEntry* entry);
  ::CTimelineEntry* unsafe_arena_release_entry();

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UserUpdateTimelineEntry_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::CTimelineEntry* entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserUpdateTimelineEntry_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserUpdateTimelineEntry_Response) */ {
 public:
  inline CGameRecording_UserUpdateTimelineEntry_Response() : CGameRecording_UserUpdateTimelineEntry_Response(nullptr) {}
  virtual ~CGameRecording_UserUpdateTimelineEntry_Response();
  explicit constexpr CGameRecording_UserUpdateTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserUpdateTimelineEntry_Response(const CGameRecording_UserUpdateTimelineEntry_Response& from);
  CGameRecording_UserUpdateTimelineEntry_Response(CGameRecording_UserUpdateTimelineEntry_Response&& from) noexcept
    : CGameRecording_UserUpdateTimelineEntry_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserUpdateTimelineEntry_Response& operator=(const CGameRecording_UserUpdateTimelineEntry_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserUpdateTimelineEntry_Response& operator=(CGameRecording_UserUpdateTimelineEntry_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserUpdateTimelineEntry_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserUpdateTimelineEntry_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserUpdateTimelineEntry_Response*>(
               &_CGameRecording_UserUpdateTimelineEntry_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CGameRecording_UserUpdateTimelineEntry_Response& a, CGameRecording_UserUpdateTimelineEntry_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserUpdateTimelineEntry_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserUpdateTimelineEntry_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserUpdateTimelineEntry_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_UserUpdateTimelineEntry_Response>(nullptr);
  }

  CGameRecording_UserUpdateTimelineEntry_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserUpdateTimelineEntry_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from);
  void MergeFrom(const CGameRecording_UserUpdateTimelineEntry_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserUpdateTimelineEntry_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserUpdateTimelineEntry_Response";
  }
  protected:
  explicit CGameRecording_UserUpdateTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_UserUpdateTimelineEntry_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserRemoveTimelineEntry_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserRemoveTimelineEntry_Request) */ {
 public:
  inline CGameRecording_UserRemoveTimelineEntry_Request() : CGameRecording_UserRemoveTimelineEntry_Request(nullptr) {}
  virtual ~CGameRecording_UserRemoveTimelineEntry_Request();
  explicit constexpr CGameRecording_UserRemoveTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserRemoveTimelineEntry_Request(const CGameRecording_UserRemoveTimelineEntry_Request& from);
  CGameRecording_UserRemoveTimelineEntry_Request(CGameRecording_UserRemoveTimelineEntry_Request&& from) noexcept
    : CGameRecording_UserRemoveTimelineEntry_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserRemoveTimelineEntry_Request& operator=(const CGameRecording_UserRemoveTimelineEntry_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserRemoveTimelineEntry_Request& operator=(CGameRecording_UserRemoveTimelineEntry_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserRemoveTimelineEntry_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserRemoveTimelineEntry_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserRemoveTimelineEntry_Request*>(
               &_CGameRecording_UserRemoveTimelineEntry_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CGameRecording_UserRemoveTimelineEntry_Request& a, CGameRecording_UserRemoveTimelineEntry_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserRemoveTimelineEntry_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserRemoveTimelineEntry_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserRemoveTimelineEntry_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_UserRemoveTimelineEntry_Request>(nullptr);
  }

  CGameRecording_UserRemoveTimelineEntry_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserRemoveTimelineEntry_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from);
  void MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserRemoveTimelineEntry_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserRemoveTimelineEntry_Request";
  }
  protected:
  explicit CGameRecording_UserRemoveTimelineEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 2,
    kClipIdFieldNumber = 4,
    kGameIdFieldNumber = 1,
    kEntryIdFieldNumber = 3,
  };
  // optional string timeline_id = 2;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional string clip_id = 4;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 entry_id = 3;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UserRemoveTimelineEntry_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UserRemoveTimelineEntry_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UserRemoveTimelineEntry_Response) */ {
 public:
  inline CGameRecording_UserRemoveTimelineEntry_Response() : CGameRecording_UserRemoveTimelineEntry_Response(nullptr) {}
  virtual ~CGameRecording_UserRemoveTimelineEntry_Response();
  explicit constexpr CGameRecording_UserRemoveTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UserRemoveTimelineEntry_Response(const CGameRecording_UserRemoveTimelineEntry_Response& from);
  CGameRecording_UserRemoveTimelineEntry_Response(CGameRecording_UserRemoveTimelineEntry_Response&& from) noexcept
    : CGameRecording_UserRemoveTimelineEntry_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UserRemoveTimelineEntry_Response& operator=(const CGameRecording_UserRemoveTimelineEntry_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UserRemoveTimelineEntry_Response& operator=(CGameRecording_UserRemoveTimelineEntry_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UserRemoveTimelineEntry_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UserRemoveTimelineEntry_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UserRemoveTimelineEntry_Response*>(
               &_CGameRecording_UserRemoveTimelineEntry_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CGameRecording_UserRemoveTimelineEntry_Response& a, CGameRecording_UserRemoveTimelineEntry_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UserRemoveTimelineEntry_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UserRemoveTimelineEntry_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UserRemoveTimelineEntry_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_UserRemoveTimelineEntry_Response>(nullptr);
  }

  CGameRecording_UserRemoveTimelineEntry_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UserRemoveTimelineEntry_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from);
  void MergeFrom(const CGameRecording_UserRemoveTimelineEntry_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UserRemoveTimelineEntry_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UserRemoveTimelineEntry_Response";
  }
  protected:
  explicit CGameRecording_UserRemoveTimelineEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_UserRemoveTimelineEntry_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ManuallyDeleteRecordingsForApps_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ManuallyDeleteRecordingsForApps_Request) */ {
 public:
  inline CGameRecording_ManuallyDeleteRecordingsForApps_Request() : CGameRecording_ManuallyDeleteRecordingsForApps_Request(nullptr) {}
  virtual ~CGameRecording_ManuallyDeleteRecordingsForApps_Request();
  explicit constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ManuallyDeleteRecordingsForApps_Request(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from);
  CGameRecording_ManuallyDeleteRecordingsForApps_Request(CGameRecording_ManuallyDeleteRecordingsForApps_Request&& from) noexcept
    : CGameRecording_ManuallyDeleteRecordingsForApps_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ManuallyDeleteRecordingsForApps_Request& operator=(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ManuallyDeleteRecordingsForApps_Request& operator=(CGameRecording_ManuallyDeleteRecordingsForApps_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ManuallyDeleteRecordingsForApps_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ManuallyDeleteRecordingsForApps_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ManuallyDeleteRecordingsForApps_Request*>(
               &_CGameRecording_ManuallyDeleteRecordingsForApps_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CGameRecording_ManuallyDeleteRecordingsForApps_Request& a, CGameRecording_ManuallyDeleteRecordingsForApps_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ManuallyDeleteRecordingsForApps_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ManuallyDeleteRecordingsForApps_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_ManuallyDeleteRecordingsForApps_Request>(nullptr);
  }

  CGameRecording_ManuallyDeleteRecordingsForApps_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ManuallyDeleteRecordingsForApps_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from);
  void MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ManuallyDeleteRecordingsForApps_Request";
  }
  protected:
  explicit CGameRecording_ManuallyDeleteRecordingsForApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdsFieldNumber = 1,
  };
  // repeated uint64 game_ids = 1;
  int game_ids_size() const;
  private:
  int _internal_game_ids_size() const;
  public:
  void clear_game_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_game_ids() const;
  void _internal_add_game_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_game_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 game_ids(int index) const;
  void set_game_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_game_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      game_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_game_ids();

  // @@protoc_insertion_point(class_scope:CGameRecording_ManuallyDeleteRecordingsForApps_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > game_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ManuallyDeleteRecordingsForApps_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ManuallyDeleteRecordingsForApps_Response) */ {
 public:
  inline CGameRecording_ManuallyDeleteRecordingsForApps_Response() : CGameRecording_ManuallyDeleteRecordingsForApps_Response(nullptr) {}
  virtual ~CGameRecording_ManuallyDeleteRecordingsForApps_Response();
  explicit constexpr CGameRecording_ManuallyDeleteRecordingsForApps_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ManuallyDeleteRecordingsForApps_Response(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from);
  CGameRecording_ManuallyDeleteRecordingsForApps_Response(CGameRecording_ManuallyDeleteRecordingsForApps_Response&& from) noexcept
    : CGameRecording_ManuallyDeleteRecordingsForApps_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ManuallyDeleteRecordingsForApps_Response& operator=(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ManuallyDeleteRecordingsForApps_Response& operator=(CGameRecording_ManuallyDeleteRecordingsForApps_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ManuallyDeleteRecordingsForApps_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ManuallyDeleteRecordingsForApps_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ManuallyDeleteRecordingsForApps_Response*>(
               &_CGameRecording_ManuallyDeleteRecordingsForApps_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CGameRecording_ManuallyDeleteRecordingsForApps_Response& a, CGameRecording_ManuallyDeleteRecordingsForApps_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ManuallyDeleteRecordingsForApps_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ManuallyDeleteRecordingsForApps_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_ManuallyDeleteRecordingsForApps_Response>(nullptr);
  }

  CGameRecording_ManuallyDeleteRecordingsForApps_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ManuallyDeleteRecordingsForApps_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from);
  void MergeFrom(const CGameRecording_ManuallyDeleteRecordingsForApps_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ManuallyDeleteRecordingsForApps_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ManuallyDeleteRecordingsForApps_Response";
  }
  protected:
  explicit CGameRecording_ManuallyDeleteRecordingsForApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_ManuallyDeleteRecordingsForApps_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTotalDiskSpaceUsage_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTotalDiskSpaceUsage_Request) */ {
 public:
  inline CGameRecording_GetTotalDiskSpaceUsage_Request() : CGameRecording_GetTotalDiskSpaceUsage_Request(nullptr) {}
  virtual ~CGameRecording_GetTotalDiskSpaceUsage_Request();
  explicit constexpr CGameRecording_GetTotalDiskSpaceUsage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTotalDiskSpaceUsage_Request(const CGameRecording_GetTotalDiskSpaceUsage_Request& from);
  CGameRecording_GetTotalDiskSpaceUsage_Request(CGameRecording_GetTotalDiskSpaceUsage_Request&& from) noexcept
    : CGameRecording_GetTotalDiskSpaceUsage_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTotalDiskSpaceUsage_Request& operator=(const CGameRecording_GetTotalDiskSpaceUsage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTotalDiskSpaceUsage_Request& operator=(CGameRecording_GetTotalDiskSpaceUsage_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTotalDiskSpaceUsage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTotalDiskSpaceUsage_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTotalDiskSpaceUsage_Request*>(
               &_CGameRecording_GetTotalDiskSpaceUsage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CGameRecording_GetTotalDiskSpaceUsage_Request& a, CGameRecording_GetTotalDiskSpaceUsage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTotalDiskSpaceUsage_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTotalDiskSpaceUsage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTotalDiskSpaceUsage_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTotalDiskSpaceUsage_Request>(nullptr);
  }

  CGameRecording_GetTotalDiskSpaceUsage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTotalDiskSpaceUsage_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from);
  void MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTotalDiskSpaceUsage_Request";
  }
  protected:
  explicit CGameRecording_GetTotalDiskSpaceUsage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderPathFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string folder_path = 1;
  bool has_folder_path() const;
  private:
  bool _internal_has_folder_path() const;
  public:
  void clear_folder_path();
  const std::string& folder_path() const;
  void set_folder_path(const std::string& value);
  void set_folder_path(std::string&& value);
  void set_folder_path(const char* value);
  void set_folder_path(const char* value, size_t size);
  std::string* mutable_folder_path();
  std::string* release_folder_path();
  void set_allocated_folder_path(std::string* folder_path);
  private:
  const std::string& _internal_folder_path() const;
  void _internal_set_folder_path(const std::string& value);
  std::string* _internal_mutable_folder_path();
  public:

  // optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EDiskSpaceType type() const;
  void set_type(::EDiskSpaceType value);
  private:
  ::EDiskSpaceType _internal_type() const;
  void _internal_set_type(::EDiskSpaceType value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTotalDiskSpaceUsage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_path_;
  int type_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetTotalDiskSpaceUsage_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetTotalDiskSpaceUsage_Response) */ {
 public:
  inline CGameRecording_GetTotalDiskSpaceUsage_Response() : CGameRecording_GetTotalDiskSpaceUsage_Response(nullptr) {}
  virtual ~CGameRecording_GetTotalDiskSpaceUsage_Response();
  explicit constexpr CGameRecording_GetTotalDiskSpaceUsage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetTotalDiskSpaceUsage_Response(const CGameRecording_GetTotalDiskSpaceUsage_Response& from);
  CGameRecording_GetTotalDiskSpaceUsage_Response(CGameRecording_GetTotalDiskSpaceUsage_Response&& from) noexcept
    : CGameRecording_GetTotalDiskSpaceUsage_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetTotalDiskSpaceUsage_Response& operator=(const CGameRecording_GetTotalDiskSpaceUsage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetTotalDiskSpaceUsage_Response& operator=(CGameRecording_GetTotalDiskSpaceUsage_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetTotalDiskSpaceUsage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetTotalDiskSpaceUsage_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetTotalDiskSpaceUsage_Response*>(
               &_CGameRecording_GetTotalDiskSpaceUsage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CGameRecording_GetTotalDiskSpaceUsage_Response& a, CGameRecording_GetTotalDiskSpaceUsage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetTotalDiskSpaceUsage_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetTotalDiskSpaceUsage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetTotalDiskSpaceUsage_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetTotalDiskSpaceUsage_Response>(nullptr);
  }

  CGameRecording_GetTotalDiskSpaceUsage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetTotalDiskSpaceUsage_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from);
  void MergeFrom(const CGameRecording_GetTotalDiskSpaceUsage_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetTotalDiskSpaceUsage_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetTotalDiskSpaceUsage_Response";
  }
  protected:
  explicit CGameRecording_GetTotalDiskSpaceUsage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // optional uint64 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetTotalDiskSpaceUsage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetThumbnails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetThumbnails_Request) */ {
 public:
  inline CGameRecording_GetThumbnails_Request() : CGameRecording_GetThumbnails_Request(nullptr) {}
  virtual ~CGameRecording_GetThumbnails_Request();
  explicit constexpr CGameRecording_GetThumbnails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetThumbnails_Request(const CGameRecording_GetThumbnails_Request& from);
  CGameRecording_GetThumbnails_Request(CGameRecording_GetThumbnails_Request&& from) noexcept
    : CGameRecording_GetThumbnails_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetThumbnails_Request& operator=(const CGameRecording_GetThumbnails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetThumbnails_Request& operator=(CGameRecording_GetThumbnails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetThumbnails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetThumbnails_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetThumbnails_Request*>(
               &_CGameRecording_GetThumbnails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CGameRecording_GetThumbnails_Request& a, CGameRecording_GetThumbnails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetThumbnails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetThumbnails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetThumbnails_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Request>(nullptr);
  }

  CGameRecording_GetThumbnails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetThumbnails_Request& from);
  void MergeFrom(const CGameRecording_GetThumbnails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetThumbnails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetThumbnails_Request";
  }
  protected:
  explicit CGameRecording_GetThumbnails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOffsetUsFieldNumber = 4,
    kRecordingIdFieldNumber = 1,
    kClipIdFieldNumber = 3,
    kTimelineIdFieldNumber = 7,
    kTimePrecisionFieldNumber = 6,
    kMajorAxisFieldNumber = 5,
    kFormatFieldNumber = 8,
  };
  // repeated int64 start_offset_us = 4;
  int start_offset_us_size() const;
  private:
  int _internal_start_offset_us_size() const;
  public:
  void clear_start_offset_us();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_offset_us(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_start_offset_us() const;
  void _internal_add_start_offset_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_start_offset_us();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 start_offset_us(int index) const;
  void set_start_offset_us(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_start_offset_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      start_offset_us() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_start_offset_us();

  // optional string recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  const std::string& recording_id() const;
  void set_recording_id(const std::string& value);
  void set_recording_id(std::string&& value);
  void set_recording_id(const char* value);
  void set_recording_id(const char* value, size_t size);
  std::string* mutable_recording_id();
  std::string* release_recording_id();
  void set_allocated_recording_id(std::string* recording_id);
  private:
  const std::string& _internal_recording_id() const;
  void _internal_set_recording_id(const std::string& value);
  std::string* _internal_mutable_recording_id();
  public:

  // optional string clip_id = 3;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional string timeline_id = 7;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
  bool has_time_precision() const;
  private:
  bool _internal_has_time_precision() const;
  public:
  void clear_time_precision();
  ::EThumbnailTimePrecision time_precision() const;
  void set_time_precision(::EThumbnailTimePrecision value);
  private:
  ::EThumbnailTimePrecision _internal_time_precision() const;
  void _internal_set_time_precision(::EThumbnailTimePrecision value);
  public:

  // optional uint32 major_axis = 5 [default = 512];
  bool has_major_axis() const;
  private:
  bool _internal_has_major_axis() const;
  public:
  void clear_major_axis();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_axis() const;
  void set_major_axis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_axis() const;
  void _internal_set_major_axis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EThumbnailFormat format = 8 [default = eJPEG];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::EThumbnailFormat format() const;
  void set_format(::EThumbnailFormat value);
  private:
  ::EThumbnailFormat _internal_format() const;
  void _internal_set_format(::EThumbnailFormat value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetThumbnails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > start_offset_us_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recording_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  int time_precision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_axis_;
  int format_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetThumbnails_Response_Thumbnail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetThumbnails_Response.Thumbnail) */ {
 public:
  inline CGameRecording_GetThumbnails_Response_Thumbnail() : CGameRecording_GetThumbnails_Response_Thumbnail(nullptr) {}
  virtual ~CGameRecording_GetThumbnails_Response_Thumbnail();
  explicit constexpr CGameRecording_GetThumbnails_Response_Thumbnail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetThumbnails_Response_Thumbnail(const CGameRecording_GetThumbnails_Response_Thumbnail& from);
  CGameRecording_GetThumbnails_Response_Thumbnail(CGameRecording_GetThumbnails_Response_Thumbnail&& from) noexcept
    : CGameRecording_GetThumbnails_Response_Thumbnail() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetThumbnails_Response_Thumbnail& operator=(const CGameRecording_GetThumbnails_Response_Thumbnail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetThumbnails_Response_Thumbnail& operator=(CGameRecording_GetThumbnails_Response_Thumbnail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetThumbnails_Response_Thumbnail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetThumbnails_Response_Thumbnail* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetThumbnails_Response_Thumbnail*>(
               &_CGameRecording_GetThumbnails_Response_Thumbnail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CGameRecording_GetThumbnails_Response_Thumbnail& a, CGameRecording_GetThumbnails_Response_Thumbnail& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetThumbnails_Response_Thumbnail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetThumbnails_Response_Thumbnail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetThumbnails_Response_Thumbnail* New() const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Response_Thumbnail>(nullptr);
  }

  CGameRecording_GetThumbnails_Response_Thumbnail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Response_Thumbnail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from);
  void MergeFrom(const CGameRecording_GetThumbnails_Response_Thumbnail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetThumbnails_Response_Thumbnail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetThumbnails_Response.Thumbnail";
  }
  protected:
  explicit CGameRecording_GetThumbnails_Response_Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional bytes image_data = 1;
  bool has_image_data() const;
  private:
  bool _internal_has_image_data() const;
  public:
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);
  private:
  const std::string& _internal_image_data() const;
  void _internal_set_image_data(const std::string& value);
  std::string* _internal_mutable_image_data();
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetThumbnails_Response.Thumbnail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetThumbnails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetThumbnails_Response) */ {
 public:
  inline CGameRecording_GetThumbnails_Response() : CGameRecording_GetThumbnails_Response(nullptr) {}
  virtual ~CGameRecording_GetThumbnails_Response();
  explicit constexpr CGameRecording_GetThumbnails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetThumbnails_Response(const CGameRecording_GetThumbnails_Response& from);
  CGameRecording_GetThumbnails_Response(CGameRecording_GetThumbnails_Response&& from) noexcept
    : CGameRecording_GetThumbnails_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetThumbnails_Response& operator=(const CGameRecording_GetThumbnails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetThumbnails_Response& operator=(CGameRecording_GetThumbnails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetThumbnails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetThumbnails_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetThumbnails_Response*>(
               &_CGameRecording_GetThumbnails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CGameRecording_GetThumbnails_Response& a, CGameRecording_GetThumbnails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetThumbnails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetThumbnails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetThumbnails_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Response>(nullptr);
  }

  CGameRecording_GetThumbnails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetThumbnails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetThumbnails_Response& from);
  void MergeFrom(const CGameRecording_GetThumbnails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetThumbnails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetThumbnails_Response";
  }
  protected:
  explicit CGameRecording_GetThumbnails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_GetThumbnails_Response_Thumbnail Thumbnail;

  // accessors -------------------------------------------------------

  enum : int {
    kThumbnailsFieldNumber = 1,
  };
  // repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
  int thumbnails_size() const;
  private:
  int _internal_thumbnails_size() const;
  public:
  void clear_thumbnails();
  ::CGameRecording_GetThumbnails_Response_Thumbnail* mutable_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetThumbnails_Response_Thumbnail >*
      mutable_thumbnails();
  private:
  const ::CGameRecording_GetThumbnails_Response_Thumbnail& _internal_thumbnails(int index) const;
  ::CGameRecording_GetThumbnails_Response_Thumbnail* _internal_add_thumbnails();
  public:
  const ::CGameRecording_GetThumbnails_Response_Thumbnail& thumbnails(int index) const;
  ::CGameRecording_GetThumbnails_Response_Thumbnail* add_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetThumbnails_Response_Thumbnail >&
      thumbnails() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetThumbnails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetThumbnails_Response_Thumbnail > thumbnails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_StartRecording_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_StartRecording_Request) */ {
 public:
  inline CGameRecording_StartRecording_Request() : CGameRecording_StartRecording_Request(nullptr) {}
  virtual ~CGameRecording_StartRecording_Request();
  explicit constexpr CGameRecording_StartRecording_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_StartRecording_Request(const CGameRecording_StartRecording_Request& from);
  CGameRecording_StartRecording_Request(CGameRecording_StartRecording_Request&& from) noexcept
    : CGameRecording_StartRecording_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_StartRecording_Request& operator=(const CGameRecording_StartRecording_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_StartRecording_Request& operator=(CGameRecording_StartRecording_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_StartRecording_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_StartRecording_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_StartRecording_Request*>(
               &_CGameRecording_StartRecording_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CGameRecording_StartRecording_Request& a, CGameRecording_StartRecording_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_StartRecording_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_StartRecording_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_StartRecording_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_StartRecording_Request>(nullptr);
  }

  CGameRecording_StartRecording_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_StartRecording_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_StartRecording_Request& from);
  void MergeFrom(const CGameRecording_StartRecording_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_StartRecording_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_StartRecording_Request";
  }
  protected:
  explicit CGameRecording_StartRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_StartRecording_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_StartRecording_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_StartRecording_Response) */ {
 public:
  inline CGameRecording_StartRecording_Response() : CGameRecording_StartRecording_Response(nullptr) {}
  virtual ~CGameRecording_StartRecording_Response();
  explicit constexpr CGameRecording_StartRecording_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_StartRecording_Response(const CGameRecording_StartRecording_Response& from);
  CGameRecording_StartRecording_Response(CGameRecording_StartRecording_Response&& from) noexcept
    : CGameRecording_StartRecording_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_StartRecording_Response& operator=(const CGameRecording_StartRecording_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_StartRecording_Response& operator=(CGameRecording_StartRecording_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_StartRecording_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_StartRecording_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_StartRecording_Response*>(
               &_CGameRecording_StartRecording_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CGameRecording_StartRecording_Response& a, CGameRecording_StartRecording_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_StartRecording_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_StartRecording_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_StartRecording_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_StartRecording_Response>(nullptr);
  }

  CGameRecording_StartRecording_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_StartRecording_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_StartRecording_Response& from);
  void MergeFrom(const CGameRecording_StartRecording_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_StartRecording_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_StartRecording_Response";
  }
  protected:
  explicit CGameRecording_StartRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_StartRecording_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_StopRecording_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_StopRecording_Request) */ {
 public:
  inline CGameRecording_StopRecording_Request() : CGameRecording_StopRecording_Request(nullptr) {}
  virtual ~CGameRecording_StopRecording_Request();
  explicit constexpr CGameRecording_StopRecording_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_StopRecording_Request(const CGameRecording_StopRecording_Request& from);
  CGameRecording_StopRecording_Request(CGameRecording_StopRecording_Request&& from) noexcept
    : CGameRecording_StopRecording_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_StopRecording_Request& operator=(const CGameRecording_StopRecording_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_StopRecording_Request& operator=(CGameRecording_StopRecording_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_StopRecording_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_StopRecording_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_StopRecording_Request*>(
               &_CGameRecording_StopRecording_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CGameRecording_StopRecording_Request& a, CGameRecording_StopRecording_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_StopRecording_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_StopRecording_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_StopRecording_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_StopRecording_Request>(nullptr);
  }

  CGameRecording_StopRecording_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_StopRecording_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_StopRecording_Request& from);
  void MergeFrom(const CGameRecording_StopRecording_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_StopRecording_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_StopRecording_Request";
  }
  protected:
  explicit CGameRecording_StopRecording_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_StopRecording_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_StopRecording_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_StopRecording_Response) */ {
 public:
  inline CGameRecording_StopRecording_Response() : CGameRecording_StopRecording_Response(nullptr) {}
  virtual ~CGameRecording_StopRecording_Response();
  explicit constexpr CGameRecording_StopRecording_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_StopRecording_Response(const CGameRecording_StopRecording_Response& from);
  CGameRecording_StopRecording_Response(CGameRecording_StopRecording_Response&& from) noexcept
    : CGameRecording_StopRecording_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_StopRecording_Response& operator=(const CGameRecording_StopRecording_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_StopRecording_Response& operator=(CGameRecording_StopRecording_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_StopRecording_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_StopRecording_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_StopRecording_Response*>(
               &_CGameRecording_StopRecording_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CGameRecording_StopRecording_Response& a, CGameRecording_StopRecording_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_StopRecording_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_StopRecording_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_StopRecording_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_StopRecording_Response>(nullptr);
  }

  CGameRecording_StopRecording_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_StopRecording_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_StopRecording_Response& from);
  void MergeFrom(const CGameRecording_StopRecording_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_StopRecording_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_StopRecording_Response";
  }
  protected:
  explicit CGameRecording_StopRecording_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // optional .CGameRecording_ClipSummary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::CGameRecording_ClipSummary& summary() const;
  ::CGameRecording_ClipSummary* release_summary();
  ::CGameRecording_ClipSummary* mutable_summary();
  void set_allocated_summary(::CGameRecording_ClipSummary* summary);
  private:
  const ::CGameRecording_ClipSummary& _internal_summary() const;
  ::CGameRecording_ClipSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::CGameRecording_ClipSummary* summary);
  ::CGameRecording_ClipSummary* unsafe_arena_release_summary();

  // @@protoc_insertion_point(class_scope:CGameRecording_StopRecording_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_ClipSummary* summary_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetRecordingSize_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetRecordingSize_Request) */ {
 public:
  inline CGameRecording_GetRecordingSize_Request() : CGameRecording_GetRecordingSize_Request(nullptr) {}
  virtual ~CGameRecording_GetRecordingSize_Request();
  explicit constexpr CGameRecording_GetRecordingSize_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetRecordingSize_Request(const CGameRecording_GetRecordingSize_Request& from);
  CGameRecording_GetRecordingSize_Request(CGameRecording_GetRecordingSize_Request&& from) noexcept
    : CGameRecording_GetRecordingSize_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetRecordingSize_Request& operator=(const CGameRecording_GetRecordingSize_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetRecordingSize_Request& operator=(CGameRecording_GetRecordingSize_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetRecordingSize_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetRecordingSize_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetRecordingSize_Request*>(
               &_CGameRecording_GetRecordingSize_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CGameRecording_GetRecordingSize_Request& a, CGameRecording_GetRecordingSize_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetRecordingSize_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetRecordingSize_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetRecordingSize_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetRecordingSize_Request>(nullptr);
  }

  CGameRecording_GetRecordingSize_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetRecordingSize_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetRecordingSize_Request& from);
  void MergeFrom(const CGameRecording_GetRecordingSize_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetRecordingSize_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetRecordingSize_Request";
  }
  protected:
  explicit CGameRecording_GetRecordingSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetRecordingSize_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetRecordingSize_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetRecordingSize_Response) */ {
 public:
  inline CGameRecording_GetRecordingSize_Response() : CGameRecording_GetRecordingSize_Response(nullptr) {}
  virtual ~CGameRecording_GetRecordingSize_Response();
  explicit constexpr CGameRecording_GetRecordingSize_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetRecordingSize_Response(const CGameRecording_GetRecordingSize_Response& from);
  CGameRecording_GetRecordingSize_Response(CGameRecording_GetRecordingSize_Response&& from) noexcept
    : CGameRecording_GetRecordingSize_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetRecordingSize_Response& operator=(const CGameRecording_GetRecordingSize_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetRecordingSize_Response& operator=(CGameRecording_GetRecordingSize_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetRecordingSize_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetRecordingSize_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetRecordingSize_Response*>(
               &_CGameRecording_GetRecordingSize_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CGameRecording_GetRecordingSize_Response& a, CGameRecording_GetRecordingSize_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetRecordingSize_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetRecordingSize_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetRecordingSize_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetRecordingSize_Response>(nullptr);
  }

  CGameRecording_GetRecordingSize_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetRecordingSize_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetRecordingSize_Response& from);
  void MergeFrom(const CGameRecording_GetRecordingSize_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetRecordingSize_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetRecordingSize_Response";
  }
  protected:
  explicit CGameRecording_GetRecordingSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileSizeFieldNumber = 1,
  };
  // optional uint64 file_size = 1;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetRecordingSize_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_CleanupBackgroundRecordings_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_CleanupBackgroundRecordings_Request) */ {
 public:
  inline CGameRecording_CleanupBackgroundRecordings_Request() : CGameRecording_CleanupBackgroundRecordings_Request(nullptr) {}
  virtual ~CGameRecording_CleanupBackgroundRecordings_Request();
  explicit constexpr CGameRecording_CleanupBackgroundRecordings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_CleanupBackgroundRecordings_Request(const CGameRecording_CleanupBackgroundRecordings_Request& from);
  CGameRecording_CleanupBackgroundRecordings_Request(CGameRecording_CleanupBackgroundRecordings_Request&& from) noexcept
    : CGameRecording_CleanupBackgroundRecordings_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_CleanupBackgroundRecordings_Request& operator=(const CGameRecording_CleanupBackgroundRecordings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_CleanupBackgroundRecordings_Request& operator=(CGameRecording_CleanupBackgroundRecordings_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_CleanupBackgroundRecordings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_CleanupBackgroundRecordings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_CleanupBackgroundRecordings_Request*>(
               &_CGameRecording_CleanupBackgroundRecordings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CGameRecording_CleanupBackgroundRecordings_Request& a, CGameRecording_CleanupBackgroundRecordings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_CleanupBackgroundRecordings_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_CleanupBackgroundRecordings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_CleanupBackgroundRecordings_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_CleanupBackgroundRecordings_Request>(nullptr);
  }

  CGameRecording_CleanupBackgroundRecordings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_CleanupBackgroundRecordings_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from);
  void MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_CleanupBackgroundRecordings_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_CleanupBackgroundRecordings_Request";
  }
  protected:
  explicit CGameRecording_CleanupBackgroundRecordings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_CleanupBackgroundRecordings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_CleanupBackgroundRecordings_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_CleanupBackgroundRecordings_Response) */ {
 public:
  inline CGameRecording_CleanupBackgroundRecordings_Response() : CGameRecording_CleanupBackgroundRecordings_Response(nullptr) {}
  virtual ~CGameRecording_CleanupBackgroundRecordings_Response();
  explicit constexpr CGameRecording_CleanupBackgroundRecordings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_CleanupBackgroundRecordings_Response(const CGameRecording_CleanupBackgroundRecordings_Response& from);
  CGameRecording_CleanupBackgroundRecordings_Response(CGameRecording_CleanupBackgroundRecordings_Response&& from) noexcept
    : CGameRecording_CleanupBackgroundRecordings_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_CleanupBackgroundRecordings_Response& operator=(const CGameRecording_CleanupBackgroundRecordings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_CleanupBackgroundRecordings_Response& operator=(CGameRecording_CleanupBackgroundRecordings_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_CleanupBackgroundRecordings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_CleanupBackgroundRecordings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_CleanupBackgroundRecordings_Response*>(
               &_CGameRecording_CleanupBackgroundRecordings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CGameRecording_CleanupBackgroundRecordings_Response& a, CGameRecording_CleanupBackgroundRecordings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_CleanupBackgroundRecordings_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_CleanupBackgroundRecordings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_CleanupBackgroundRecordings_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_CleanupBackgroundRecordings_Response>(nullptr);
  }

  CGameRecording_CleanupBackgroundRecordings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_CleanupBackgroundRecordings_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from);
  void MergeFrom(const CGameRecording_CleanupBackgroundRecordings_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_CleanupBackgroundRecordings_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_CleanupBackgroundRecordings_Response";
  }
  protected:
  explicit CGameRecording_CleanupBackgroundRecordings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_CleanupBackgroundRecordings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetPlatformCapabilities_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetPlatformCapabilities_Request) */ {
 public:
  inline CGameRecording_GetPlatformCapabilities_Request() : CGameRecording_GetPlatformCapabilities_Request(nullptr) {}
  virtual ~CGameRecording_GetPlatformCapabilities_Request();
  explicit constexpr CGameRecording_GetPlatformCapabilities_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetPlatformCapabilities_Request(const CGameRecording_GetPlatformCapabilities_Request& from);
  CGameRecording_GetPlatformCapabilities_Request(CGameRecording_GetPlatformCapabilities_Request&& from) noexcept
    : CGameRecording_GetPlatformCapabilities_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetPlatformCapabilities_Request& operator=(const CGameRecording_GetPlatformCapabilities_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetPlatformCapabilities_Request& operator=(CGameRecording_GetPlatformCapabilities_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetPlatformCapabilities_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetPlatformCapabilities_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetPlatformCapabilities_Request*>(
               &_CGameRecording_GetPlatformCapabilities_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CGameRecording_GetPlatformCapabilities_Request& a, CGameRecording_GetPlatformCapabilities_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetPlatformCapabilities_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetPlatformCapabilities_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetPlatformCapabilities_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetPlatformCapabilities_Request>(nullptr);
  }

  CGameRecording_GetPlatformCapabilities_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetPlatformCapabilities_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetPlatformCapabilities_Request& from);
  void MergeFrom(const CGameRecording_GetPlatformCapabilities_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetPlatformCapabilities_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetPlatformCapabilities_Request";
  }
  protected:
  explicit CGameRecording_GetPlatformCapabilities_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_GetPlatformCapabilities_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetPlatformCapabilities_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetPlatformCapabilities_Response) */ {
 public:
  inline CGameRecording_GetPlatformCapabilities_Response() : CGameRecording_GetPlatformCapabilities_Response(nullptr) {}
  virtual ~CGameRecording_GetPlatformCapabilities_Response();
  explicit constexpr CGameRecording_GetPlatformCapabilities_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetPlatformCapabilities_Response(const CGameRecording_GetPlatformCapabilities_Response& from);
  CGameRecording_GetPlatformCapabilities_Response(CGameRecording_GetPlatformCapabilities_Response&& from) noexcept
    : CGameRecording_GetPlatformCapabilities_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetPlatformCapabilities_Response& operator=(const CGameRecording_GetPlatformCapabilities_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetPlatformCapabilities_Response& operator=(CGameRecording_GetPlatformCapabilities_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetPlatformCapabilities_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetPlatformCapabilities_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetPlatformCapabilities_Response*>(
               &_CGameRecording_GetPlatformCapabilities_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CGameRecording_GetPlatformCapabilities_Response& a, CGameRecording_GetPlatformCapabilities_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetPlatformCapabilities_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetPlatformCapabilities_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetPlatformCapabilities_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetPlatformCapabilities_Response>(nullptr);
  }

  CGameRecording_GetPlatformCapabilities_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetPlatformCapabilities_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetPlatformCapabilities_Response& from);
  void MergeFrom(const CGameRecording_GetPlatformCapabilities_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetPlatformCapabilities_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetPlatformCapabilities_Response";
  }
  protected:
  explicit CGameRecording_GetPlatformCapabilities_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerProcessAudioCaptureFieldNumber = 1,
  };
  // optional bool per_process_audio_capture = 1;
  bool has_per_process_audio_capture() const;
  private:
  bool _internal_has_per_process_audio_capture() const;
  public:
  void clear_per_process_audio_capture();
  bool per_process_audio_capture() const;
  void set_per_process_audio_capture(bool value);
  private:
  bool _internal_per_process_audio_capture() const;
  void _internal_set_per_process_audio_capture(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetPlatformCapabilities_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool per_process_audio_capture_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ClipCreated_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ClipCreated_Notification) */ {
 public:
  inline CGameRecording_ClipCreated_Notification() : CGameRecording_ClipCreated_Notification(nullptr) {}
  virtual ~CGameRecording_ClipCreated_Notification();
  explicit constexpr CGameRecording_ClipCreated_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ClipCreated_Notification(const CGameRecording_ClipCreated_Notification& from);
  CGameRecording_ClipCreated_Notification(CGameRecording_ClipCreated_Notification&& from) noexcept
    : CGameRecording_ClipCreated_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ClipCreated_Notification& operator=(const CGameRecording_ClipCreated_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ClipCreated_Notification& operator=(CGameRecording_ClipCreated_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ClipCreated_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ClipCreated_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ClipCreated_Notification*>(
               &_CGameRecording_ClipCreated_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CGameRecording_ClipCreated_Notification& a, CGameRecording_ClipCreated_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ClipCreated_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ClipCreated_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ClipCreated_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_ClipCreated_Notification>(nullptr);
  }

  CGameRecording_ClipCreated_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ClipCreated_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ClipCreated_Notification& from);
  void MergeFrom(const CGameRecording_ClipCreated_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ClipCreated_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ClipCreated_Notification";
  }
  protected:
  explicit CGameRecording_ClipCreated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // optional .CGameRecording_ClipSummary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::CGameRecording_ClipSummary& summary() const;
  ::CGameRecording_ClipSummary* release_summary();
  ::CGameRecording_ClipSummary* mutable_summary();
  void set_allocated_summary(::CGameRecording_ClipSummary* summary);
  private:
  const ::CGameRecording_ClipSummary& _internal_summary() const;
  ::CGameRecording_ClipSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::CGameRecording_ClipSummary* summary);
  ::CGameRecording_ClipSummary* unsafe_arena_release_summary();

  // @@protoc_insertion_point(class_scope:CGameRecording_ClipCreated_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_ClipSummary* summary_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ClipDeleted_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ClipDeleted_Notification) */ {
 public:
  inline CGameRecording_ClipDeleted_Notification() : CGameRecording_ClipDeleted_Notification(nullptr) {}
  virtual ~CGameRecording_ClipDeleted_Notification();
  explicit constexpr CGameRecording_ClipDeleted_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ClipDeleted_Notification(const CGameRecording_ClipDeleted_Notification& from);
  CGameRecording_ClipDeleted_Notification(CGameRecording_ClipDeleted_Notification&& from) noexcept
    : CGameRecording_ClipDeleted_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ClipDeleted_Notification& operator=(const CGameRecording_ClipDeleted_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ClipDeleted_Notification& operator=(CGameRecording_ClipDeleted_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ClipDeleted_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ClipDeleted_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ClipDeleted_Notification*>(
               &_CGameRecording_ClipDeleted_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CGameRecording_ClipDeleted_Notification& a, CGameRecording_ClipDeleted_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ClipDeleted_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ClipDeleted_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ClipDeleted_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_ClipDeleted_Notification>(nullptr);
  }

  CGameRecording_ClipDeleted_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ClipDeleted_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ClipDeleted_Notification& from);
  void MergeFrom(const CGameRecording_ClipDeleted_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ClipDeleted_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ClipDeleted_Notification";
  }
  protected:
  explicit CGameRecording_ClipDeleted_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // optional string clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional uint64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ClipDeleted_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_ExportProgress_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_ExportProgress_Notification) */ {
 public:
  inline CGameRecording_ExportProgress_Notification() : CGameRecording_ExportProgress_Notification(nullptr) {}
  virtual ~CGameRecording_ExportProgress_Notification();
  explicit constexpr CGameRecording_ExportProgress_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_ExportProgress_Notification(const CGameRecording_ExportProgress_Notification& from);
  CGameRecording_ExportProgress_Notification(CGameRecording_ExportProgress_Notification&& from) noexcept
    : CGameRecording_ExportProgress_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_ExportProgress_Notification& operator=(const CGameRecording_ExportProgress_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_ExportProgress_Notification& operator=(CGameRecording_ExportProgress_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_ExportProgress_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_ExportProgress_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_ExportProgress_Notification*>(
               &_CGameRecording_ExportProgress_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CGameRecording_ExportProgress_Notification& a, CGameRecording_ExportProgress_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_ExportProgress_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_ExportProgress_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_ExportProgress_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_ExportProgress_Notification>(nullptr);
  }

  CGameRecording_ExportProgress_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_ExportProgress_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_ExportProgress_Notification& from);
  void MergeFrom(const CGameRecording_ExportProgress_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_ExportProgress_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_ExportProgress_Notification";
  }
  protected:
  explicit CGameRecording_ExportProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 2,
    kProgressFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional string clip_id = 2;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional float progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // optional int32 eresult = 3;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_ExportProgress_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  float progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_PerGameSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_PerGameSettings) */ {
 public:
  inline CGameRecording_PerGameSettings() : CGameRecording_PerGameSettings(nullptr) {}
  virtual ~CGameRecording_PerGameSettings();
  explicit constexpr CGameRecording_PerGameSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_PerGameSettings(const CGameRecording_PerGameSettings& from);
  CGameRecording_PerGameSettings(CGameRecording_PerGameSettings&& from) noexcept
    : CGameRecording_PerGameSettings() {
    *this = ::std::move(from);
  }

  inline CGameRecording_PerGameSettings& operator=(const CGameRecording_PerGameSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_PerGameSettings& operator=(CGameRecording_PerGameSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_PerGameSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_PerGameSettings* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_PerGameSettings*>(
               &_CGameRecording_PerGameSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CGameRecording_PerGameSettings& a, CGameRecording_PerGameSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_PerGameSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_PerGameSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_PerGameSettings* New() const final {
    return CreateMaybeMessage<CGameRecording_PerGameSettings>(nullptr);
  }

  CGameRecording_PerGameSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_PerGameSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_PerGameSettings& from);
  void MergeFrom(const CGameRecording_PerGameSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_PerGameSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_PerGameSettings";
  }
  protected:
  explicit CGameRecording_PerGameSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitrateFieldNumber = 4,
    kGameidFieldNumber = 1,
    kMinutesFieldNumber = 3,
    kEnabledFieldNumber = 2,
    kInfiniteFieldNumber = 5,
  };
  // optional string bitrate = 4;
  bool has_bitrate() const;
  private:
  bool _internal_has_bitrate() const;
  public:
  void clear_bitrate();
  const std::string& bitrate() const;
  void set_bitrate(const std::string& value);
  void set_bitrate(std::string&& value);
  void set_bitrate(const char* value);
  void set_bitrate(const char* value, size_t size);
  std::string* mutable_bitrate();
  std::string* release_bitrate();
  void set_allocated_bitrate(std::string* bitrate);
  private:
  const std::string& _internal_bitrate() const;
  void _internal_set_bitrate(const std::string& value);
  std::string* _internal_mutable_bitrate();
  public:

  // optional fixed64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 minutes = 3;
  bool has_minutes() const;
  private:
  bool _internal_has_minutes() const;
  public:
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool infinite = 5;
  bool has_infinite() const;
  private:
  bool _internal_has_infinite() const;
  public:
  void clear_infinite();
  bool infinite() const;
  void set_infinite(bool value);
  private:
  bool _internal_infinite() const;
  void _internal_set_infinite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_PerGameSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_;
  bool enabled_;
  bool infinite_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetPerGameSettings_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetPerGameSettings_Request) */ {
 public:
  inline CGameRecording_GetPerGameSettings_Request() : CGameRecording_GetPerGameSettings_Request(nullptr) {}
  virtual ~CGameRecording_GetPerGameSettings_Request();
  explicit constexpr CGameRecording_GetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetPerGameSettings_Request(const CGameRecording_GetPerGameSettings_Request& from);
  CGameRecording_GetPerGameSettings_Request(CGameRecording_GetPerGameSettings_Request&& from) noexcept
    : CGameRecording_GetPerGameSettings_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetPerGameSettings_Request& operator=(const CGameRecording_GetPerGameSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetPerGameSettings_Request& operator=(CGameRecording_GetPerGameSettings_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetPerGameSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetPerGameSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetPerGameSettings_Request*>(
               &_CGameRecording_GetPerGameSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CGameRecording_GetPerGameSettings_Request& a, CGameRecording_GetPerGameSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetPerGameSettings_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetPerGameSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetPerGameSettings_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetPerGameSettings_Request>(nullptr);
  }

  CGameRecording_GetPerGameSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetPerGameSettings_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetPerGameSettings_Request& from);
  void MergeFrom(const CGameRecording_GetPerGameSettings_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetPerGameSettings_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetPerGameSettings_Request";
  }
  protected:
  explicit CGameRecording_GetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_GetPerGameSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetPerGameSettings_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetPerGameSettings_Response) */ {
 public:
  inline CGameRecording_GetPerGameSettings_Response() : CGameRecording_GetPerGameSettings_Response(nullptr) {}
  virtual ~CGameRecording_GetPerGameSettings_Response();
  explicit constexpr CGameRecording_GetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetPerGameSettings_Response(const CGameRecording_GetPerGameSettings_Response& from);
  CGameRecording_GetPerGameSettings_Response(CGameRecording_GetPerGameSettings_Response&& from) noexcept
    : CGameRecording_GetPerGameSettings_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetPerGameSettings_Response& operator=(const CGameRecording_GetPerGameSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetPerGameSettings_Response& operator=(CGameRecording_GetPerGameSettings_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetPerGameSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetPerGameSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetPerGameSettings_Response*>(
               &_CGameRecording_GetPerGameSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CGameRecording_GetPerGameSettings_Response& a, CGameRecording_GetPerGameSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetPerGameSettings_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetPerGameSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetPerGameSettings_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetPerGameSettings_Response>(nullptr);
  }

  CGameRecording_GetPerGameSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetPerGameSettings_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetPerGameSettings_Response& from);
  void MergeFrom(const CGameRecording_GetPerGameSettings_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetPerGameSettings_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetPerGameSettings_Response";
  }
  protected:
  explicit CGameRecording_GetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // repeated .CGameRecording_PerGameSettings settings = 1;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::CGameRecording_PerGameSettings* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_PerGameSettings >*
      mutable_settings();
  private:
  const ::CGameRecording_PerGameSettings& _internal_settings(int index) const;
  ::CGameRecording_PerGameSettings* _internal_add_settings();
  public:
  const ::CGameRecording_PerGameSettings& settings(int index) const;
  ::CGameRecording_PerGameSettings* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_PerGameSettings >&
      settings() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_GetPerGameSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_PerGameSettings > settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SetPerGameSettings_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SetPerGameSettings_Request) */ {
 public:
  inline CGameRecording_SetPerGameSettings_Request() : CGameRecording_SetPerGameSettings_Request(nullptr) {}
  virtual ~CGameRecording_SetPerGameSettings_Request();
  explicit constexpr CGameRecording_SetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SetPerGameSettings_Request(const CGameRecording_SetPerGameSettings_Request& from);
  CGameRecording_SetPerGameSettings_Request(CGameRecording_SetPerGameSettings_Request&& from) noexcept
    : CGameRecording_SetPerGameSettings_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SetPerGameSettings_Request& operator=(const CGameRecording_SetPerGameSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SetPerGameSettings_Request& operator=(CGameRecording_SetPerGameSettings_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SetPerGameSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SetPerGameSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SetPerGameSettings_Request*>(
               &_CGameRecording_SetPerGameSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CGameRecording_SetPerGameSettings_Request& a, CGameRecording_SetPerGameSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SetPerGameSettings_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SetPerGameSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SetPerGameSettings_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_SetPerGameSettings_Request>(nullptr);
  }

  CGameRecording_SetPerGameSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SetPerGameSettings_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SetPerGameSettings_Request& from);
  void MergeFrom(const CGameRecording_SetPerGameSettings_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SetPerGameSettings_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SetPerGameSettings_Request";
  }
  protected:
  explicit CGameRecording_SetPerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameSettingsFieldNumber = 1,
  };
  // optional .CGameRecording_PerGameSettings game_settings = 1;
  bool has_game_settings() const;
  private:
  bool _internal_has_game_settings() const;
  public:
  void clear_game_settings();
  const ::CGameRecording_PerGameSettings& game_settings() const;
  ::CGameRecording_PerGameSettings* release_game_settings();
  ::CGameRecording_PerGameSettings* mutable_game_settings();
  void set_allocated_game_settings(::CGameRecording_PerGameSettings* game_settings);
  private:
  const ::CGameRecording_PerGameSettings& _internal_game_settings() const;
  ::CGameRecording_PerGameSettings* _internal_mutable_game_settings();
  public:
  void unsafe_arena_set_allocated_game_settings(
      ::CGameRecording_PerGameSettings* game_settings);
  ::CGameRecording_PerGameSettings* unsafe_arena_release_game_settings();

  // @@protoc_insertion_point(class_scope:CGameRecording_SetPerGameSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecording_PerGameSettings* game_settings_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SetPerGameSettings_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SetPerGameSettings_Response) */ {
 public:
  inline CGameRecording_SetPerGameSettings_Response() : CGameRecording_SetPerGameSettings_Response(nullptr) {}
  virtual ~CGameRecording_SetPerGameSettings_Response();
  explicit constexpr CGameRecording_SetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SetPerGameSettings_Response(const CGameRecording_SetPerGameSettings_Response& from);
  CGameRecording_SetPerGameSettings_Response(CGameRecording_SetPerGameSettings_Response&& from) noexcept
    : CGameRecording_SetPerGameSettings_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SetPerGameSettings_Response& operator=(const CGameRecording_SetPerGameSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SetPerGameSettings_Response& operator=(CGameRecording_SetPerGameSettings_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SetPerGameSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SetPerGameSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SetPerGameSettings_Response*>(
               &_CGameRecording_SetPerGameSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CGameRecording_SetPerGameSettings_Response& a, CGameRecording_SetPerGameSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SetPerGameSettings_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SetPerGameSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SetPerGameSettings_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_SetPerGameSettings_Response>(nullptr);
  }

  CGameRecording_SetPerGameSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SetPerGameSettings_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SetPerGameSettings_Response& from);
  void MergeFrom(const CGameRecording_SetPerGameSettings_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SetPerGameSettings_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SetPerGameSettings_Response";
  }
  protected:
  explicit CGameRecording_SetPerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_SetPerGameSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeletePerGameSettings_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeletePerGameSettings_Request) */ {
 public:
  inline CGameRecording_DeletePerGameSettings_Request() : CGameRecording_DeletePerGameSettings_Request(nullptr) {}
  virtual ~CGameRecording_DeletePerGameSettings_Request();
  explicit constexpr CGameRecording_DeletePerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeletePerGameSettings_Request(const CGameRecording_DeletePerGameSettings_Request& from);
  CGameRecording_DeletePerGameSettings_Request(CGameRecording_DeletePerGameSettings_Request&& from) noexcept
    : CGameRecording_DeletePerGameSettings_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeletePerGameSettings_Request& operator=(const CGameRecording_DeletePerGameSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeletePerGameSettings_Request& operator=(CGameRecording_DeletePerGameSettings_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeletePerGameSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeletePerGameSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeletePerGameSettings_Request*>(
               &_CGameRecording_DeletePerGameSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CGameRecording_DeletePerGameSettings_Request& a, CGameRecording_DeletePerGameSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeletePerGameSettings_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeletePerGameSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeletePerGameSettings_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_DeletePerGameSettings_Request>(nullptr);
  }

  CGameRecording_DeletePerGameSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeletePerGameSettings_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeletePerGameSettings_Request& from);
  void MergeFrom(const CGameRecording_DeletePerGameSettings_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeletePerGameSettings_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeletePerGameSettings_Request";
  }
  protected:
  explicit CGameRecording_DeletePerGameSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 1,
  };
  // optional fixed64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_DeletePerGameSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeletePerGameSettings_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeletePerGameSettings_Response) */ {
 public:
  inline CGameRecording_DeletePerGameSettings_Response() : CGameRecording_DeletePerGameSettings_Response(nullptr) {}
  virtual ~CGameRecording_DeletePerGameSettings_Response();
  explicit constexpr CGameRecording_DeletePerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeletePerGameSettings_Response(const CGameRecording_DeletePerGameSettings_Response& from);
  CGameRecording_DeletePerGameSettings_Response(CGameRecording_DeletePerGameSettings_Response&& from) noexcept
    : CGameRecording_DeletePerGameSettings_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeletePerGameSettings_Response& operator=(const CGameRecording_DeletePerGameSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeletePerGameSettings_Response& operator=(CGameRecording_DeletePerGameSettings_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeletePerGameSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeletePerGameSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeletePerGameSettings_Response*>(
               &_CGameRecording_DeletePerGameSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CGameRecording_DeletePerGameSettings_Response& a, CGameRecording_DeletePerGameSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeletePerGameSettings_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeletePerGameSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeletePerGameSettings_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_DeletePerGameSettings_Response>(nullptr);
  }

  CGameRecording_DeletePerGameSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeletePerGameSettings_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeletePerGameSettings_Response& from);
  void MergeFrom(const CGameRecording_DeletePerGameSettings_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeletePerGameSettings_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeletePerGameSettings_Response";
  }
  protected:
  explicit CGameRecording_DeletePerGameSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_DeletePerGameSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_UploadProgress_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_UploadProgress_Notification) */ {
 public:
  inline CGameRecording_UploadProgress_Notification() : CGameRecording_UploadProgress_Notification(nullptr) {}
  virtual ~CGameRecording_UploadProgress_Notification();
  explicit constexpr CGameRecording_UploadProgress_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_UploadProgress_Notification(const CGameRecording_UploadProgress_Notification& from);
  CGameRecording_UploadProgress_Notification(CGameRecording_UploadProgress_Notification&& from) noexcept
    : CGameRecording_UploadProgress_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_UploadProgress_Notification& operator=(const CGameRecording_UploadProgress_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_UploadProgress_Notification& operator=(CGameRecording_UploadProgress_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_UploadProgress_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_UploadProgress_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_UploadProgress_Notification*>(
               &_CGameRecording_UploadProgress_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CGameRecording_UploadProgress_Notification& a, CGameRecording_UploadProgress_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_UploadProgress_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_UploadProgress_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_UploadProgress_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_UploadProgress_Notification>(nullptr);
  }

  CGameRecording_UploadProgress_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_UploadProgress_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_UploadProgress_Notification& from);
  void MergeFrom(const CGameRecording_UploadProgress_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_UploadProgress_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_UploadProgress_Notification";
  }
  protected:
  explicit CGameRecording_UploadProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 2,
    kProgressFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional string clip_id = 2;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  const std::string& clip_id() const;
  void set_clip_id(const std::string& value);
  void set_clip_id(std::string&& value);
  void set_clip_id(const char* value);
  void set_clip_id(const char* value, size_t size);
  std::string* mutable_clip_id();
  std::string* release_clip_id();
  void set_allocated_clip_id(std::string* clip_id);
  private:
  const std::string& _internal_clip_id() const;
  void _internal_set_clip_id(const std::string& value);
  std::string* _internal_mutable_clip_id();
  public:

  // optional float progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // optional int32 eresult = 3;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_UploadProgress_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_id_;
  float progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SwitchBackgroundRecordingGame_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SwitchBackgroundRecordingGame_Request) */ {
 public:
  inline CGameRecording_SwitchBackgroundRecordingGame_Request() : CGameRecording_SwitchBackgroundRecordingGame_Request(nullptr) {}
  virtual ~CGameRecording_SwitchBackgroundRecordingGame_Request();
  explicit constexpr CGameRecording_SwitchBackgroundRecordingGame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SwitchBackgroundRecordingGame_Request(const CGameRecording_SwitchBackgroundRecordingGame_Request& from);
  CGameRecording_SwitchBackgroundRecordingGame_Request(CGameRecording_SwitchBackgroundRecordingGame_Request&& from) noexcept
    : CGameRecording_SwitchBackgroundRecordingGame_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SwitchBackgroundRecordingGame_Request& operator=(const CGameRecording_SwitchBackgroundRecordingGame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SwitchBackgroundRecordingGame_Request& operator=(CGameRecording_SwitchBackgroundRecordingGame_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SwitchBackgroundRecordingGame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SwitchBackgroundRecordingGame_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SwitchBackgroundRecordingGame_Request*>(
               &_CGameRecording_SwitchBackgroundRecordingGame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CGameRecording_SwitchBackgroundRecordingGame_Request& a, CGameRecording_SwitchBackgroundRecordingGame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SwitchBackgroundRecordingGame_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SwitchBackgroundRecordingGame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SwitchBackgroundRecordingGame_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_SwitchBackgroundRecordingGame_Request>(nullptr);
  }

  CGameRecording_SwitchBackgroundRecordingGame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SwitchBackgroundRecordingGame_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from);
  void MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SwitchBackgroundRecordingGame_Request";
  }
  protected:
  explicit CGameRecording_SwitchBackgroundRecordingGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_SwitchBackgroundRecordingGame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_SwitchBackgroundRecordingGame_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_SwitchBackgroundRecordingGame_Response) */ {
 public:
  inline CGameRecording_SwitchBackgroundRecordingGame_Response() : CGameRecording_SwitchBackgroundRecordingGame_Response(nullptr) {}
  virtual ~CGameRecording_SwitchBackgroundRecordingGame_Response();
  explicit constexpr CGameRecording_SwitchBackgroundRecordingGame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_SwitchBackgroundRecordingGame_Response(const CGameRecording_SwitchBackgroundRecordingGame_Response& from);
  CGameRecording_SwitchBackgroundRecordingGame_Response(CGameRecording_SwitchBackgroundRecordingGame_Response&& from) noexcept
    : CGameRecording_SwitchBackgroundRecordingGame_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_SwitchBackgroundRecordingGame_Response& operator=(const CGameRecording_SwitchBackgroundRecordingGame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_SwitchBackgroundRecordingGame_Response& operator=(CGameRecording_SwitchBackgroundRecordingGame_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_SwitchBackgroundRecordingGame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_SwitchBackgroundRecordingGame_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_SwitchBackgroundRecordingGame_Response*>(
               &_CGameRecording_SwitchBackgroundRecordingGame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CGameRecording_SwitchBackgroundRecordingGame_Response& a, CGameRecording_SwitchBackgroundRecordingGame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_SwitchBackgroundRecordingGame_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_SwitchBackgroundRecordingGame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_SwitchBackgroundRecordingGame_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_SwitchBackgroundRecordingGame_Response>(nullptr);
  }

  CGameRecording_SwitchBackgroundRecordingGame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_SwitchBackgroundRecordingGame_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from);
  void MergeFrom(const CGameRecording_SwitchBackgroundRecordingGame_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_SwitchBackgroundRecordingGame_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_SwitchBackgroundRecordingGame_Response";
  }
  protected:
  explicit CGameRecording_SwitchBackgroundRecordingGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecording_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_SwitchBackgroundRecordingGame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecording_2eproto;
};
// ===================================================================

class GameRecording_Stub;

class GameRecording : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameRecording() {};
 public:
  virtual ~GameRecording();

  typedef GameRecording_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetAppsWithBackgroundVideo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAppsWithBackgroundVideo_Request* request,
                       ::CGameRecording_GetAppsWithBackgroundVideo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTimelinesForApp_Request* request,
                       ::CGameRecording_GetTimelinesForApp_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTimelinesForClip_Request* request,
                       ::CGameRecording_GetTimelinesForClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryPhases(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_QueryPhases_Request* request,
                       ::CGameRecording_QueryPhases_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTags_Request* request,
                       ::CGameRecording_GetTags_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetEnoughDiskSpace_Request* request,
                       ::CGameRecording_GetEnoughDiskSpace_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAvailableDiskSpace_Request* request,
                       ::CGameRecording_GetAvailableDiskSpace_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SaveClip_Request* request,
                       ::CGameRecording_SaveClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeleteClip_Request* request,
                       ::CGameRecording_DeleteClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetClips_Request* request,
                       ::CGameRecording_GetClips_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UploadClipToSteam_Request* request,
                       ::CGameRecording_UploadClipToSteam_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportClip_Request* request,
                       ::CGameRecording_ExportClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ExportClipPreview(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportClipPreview_Request* request,
                       ::CGameRecording_ExportClipPreview_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void TakeScreenshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TakeScreenshot_Request* request,
                       ::CGameRecording_TakeScreenshot_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ZipClip_Request* request,
                       ::CGameRecording_ZipClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_StartRecording_Request* request,
                       ::CGameRecording_StartRecording_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_StopRecording_Request* request,
                       ::CGameRecording_StopRecording_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetRecordingSize_Request* request,
                       ::CGameRecording_GetRecordingSize_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_CleanupBackgroundRecordings_Request* request,
                       ::CGameRecording_CleanupBackgroundRecordings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAndTrimPostGameHighlights_Request* request,
                       ::CGameRecording_GetAndTrimPostGameHighlights_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetThumbnails_Request* request,
                       ::CGameRecording_GetThumbnails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetPlatformCapabilities_Request* request,
                       ::CGameRecording_GetPlatformCapabilities_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_RecordingSessionChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineEntryChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyTimelineEntryRemoved(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineEntryRemoved_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ClipCreated_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ClipDeleted_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UploadProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_LowDiskSpace_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_PostGameHighlightsChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyOpenOverlayToGamePhase(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_OpenOverlayToGamePhase_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyOpenOverlayToTimelineEvent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_OpenOverlayToTimelineEvent_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyPhaseListChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_PhaseListChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetPerGameSettings_Request* request,
                       ::CGameRecording_GetPerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SetPerGameSettings_Request* request,
                       ::CGameRecording_SetPerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeletePerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeletePerGameSettings_Request* request,
                       ::CGameRecording_DeletePerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserAddTimelineEntry_Request* request,
                       ::CGameRecording_UserAddTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserUpdateTimelineEntry_Request* request,
                       ::CGameRecording_UserUpdateTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserRemoveTimelineEntry_Request* request,
                       ::CGameRecording_UserRemoveTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* request,
                       ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTotalDiskSpaceUsage_Request* request,
                       ::CGameRecording_GetTotalDiskSpaceUsage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SwitchBackgroundRecordingGame_Request* request,
                       ::CGameRecording_SwitchBackgroundRecordingGame_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameRecording);
};

class GameRecording_Stub : public GameRecording {
 public:
  GameRecording_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameRecording_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameRecording_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameRecording ------------------------------------------

  void GetAppsWithBackgroundVideo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAppsWithBackgroundVideo_Request* request,
                       ::CGameRecording_GetAppsWithBackgroundVideo_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTimelinesForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTimelinesForApp_Request* request,
                       ::CGameRecording_GetTimelinesForApp_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTimelinesForClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTimelinesForClip_Request* request,
                       ::CGameRecording_GetTimelinesForClip_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryPhases(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_QueryPhases_Request* request,
                       ::CGameRecording_QueryPhases_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTags_Request* request,
                       ::CGameRecording_GetTags_Response* response,
                       ::google::protobuf::Closure* done);
  void GetEnoughDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetEnoughDiskSpace_Request* request,
                       ::CGameRecording_GetEnoughDiskSpace_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAvailableDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAvailableDiskSpace_Request* request,
                       ::CGameRecording_GetAvailableDiskSpace_Response* response,
                       ::google::protobuf::Closure* done);
  void SaveClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SaveClip_Request* request,
                       ::CGameRecording_SaveClip_Response* response,
                       ::google::protobuf::Closure* done);
  void DeleteClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeleteClip_Request* request,
                       ::CGameRecording_DeleteClip_Response* response,
                       ::google::protobuf::Closure* done);
  void GetClips(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetClips_Request* request,
                       ::CGameRecording_GetClips_Response* response,
                       ::google::protobuf::Closure* done);
  void UploadClipToSteam(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UploadClipToSteam_Request* request,
                       ::CGameRecording_UploadClipToSteam_Response* response,
                       ::google::protobuf::Closure* done);
  void ExportClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportClip_Request* request,
                       ::CGameRecording_ExportClip_Response* response,
                       ::google::protobuf::Closure* done);
  void ExportClipPreview(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportClipPreview_Request* request,
                       ::CGameRecording_ExportClipPreview_Response* response,
                       ::google::protobuf::Closure* done);
  void TakeScreenshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TakeScreenshot_Request* request,
                       ::CGameRecording_TakeScreenshot_Response* response,
                       ::google::protobuf::Closure* done);
  void ZipClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ZipClip_Request* request,
                       ::CGameRecording_ZipClip_Response* response,
                       ::google::protobuf::Closure* done);
  void StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_StartRecording_Request* request,
                       ::CGameRecording_StartRecording_Response* response,
                       ::google::protobuf::Closure* done);
  void StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_StopRecording_Request* request,
                       ::CGameRecording_StopRecording_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBackgroundRecordingFileSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetRecordingSize_Request* request,
                       ::CGameRecording_GetRecordingSize_Response* response,
                       ::google::protobuf::Closure* done);
  void CleanupBackgroundRecordings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_CleanupBackgroundRecordings_Request* request,
                       ::CGameRecording_CleanupBackgroundRecordings_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAndTrimPostGameHighlights(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetAndTrimPostGameHighlights_Request* request,
                       ::CGameRecording_GetAndTrimPostGameHighlights_Response* response,
                       ::google::protobuf::Closure* done);
  void GetThumbnails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetThumbnails_Request* request,
                       ::CGameRecording_GetThumbnails_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPlatformCapabilities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetPlatformCapabilities_Request* request,
                       ::CGameRecording_GetPlatformCapabilities_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyTimelineChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyRecordingSessionChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_RecordingSessionChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyTimelineEntryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineEntryChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyTimelineEntryRemoved(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_TimelineEntryRemoved_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyClipCreated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ClipCreated_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyClipDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ClipDeleted_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyExportProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ExportProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyUploadProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UploadProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyLowDiskSpace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_LowDiskSpace_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyPostGameHighlightsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_PostGameHighlightsChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyOpenOverlayToGamePhase(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_OpenOverlayToGamePhase_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyOpenOverlayToTimelineEvent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_OpenOverlayToTimelineEvent_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyPhaseListChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_PhaseListChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetPerGameSettings_Request* request,
                       ::CGameRecording_GetPerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void SetPerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SetPerGameSettings_Request* request,
                       ::CGameRecording_SetPerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void DeletePerGameSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeletePerGameSettings_Request* request,
                       ::CGameRecording_DeletePerGameSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void UserAddTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserAddTimelineEntry_Request* request,
                       ::CGameRecording_UserAddTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  void UserUpdateTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserUpdateTimelineEntry_Request* request,
                       ::CGameRecording_UserUpdateTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  void UserRemoveTimelineEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_UserRemoveTimelineEntry_Request* request,
                       ::CGameRecording_UserRemoveTimelineEntry_Response* response,
                       ::google::protobuf::Closure* done);
  void ManuallyDeleteRecordingsForApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_ManuallyDeleteRecordingsForApps_Request* request,
                       ::CGameRecording_ManuallyDeleteRecordingsForApps_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTotalDiskSpaceUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetTotalDiskSpaceUsage_Request* request,
                       ::CGameRecording_GetTotalDiskSpaceUsage_Response* response,
                       ::google::protobuf::Closure* done);
  void SwitchBackgroundRecordingGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_SwitchBackgroundRecordingGame_Request* request,
                       ::CGameRecording_SwitchBackgroundRecordingGame_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameRecording_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameRecording_GetAppsWithBackgroundVideo_Request

// -------------------------------------------------------------------

// CGameRecording_GetAppsWithBackgroundVideo_Response_App

// optional uint64 game_id = 1;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAppsWithBackgroundVideo_Response_App::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.game_id)
}

// optional uint32 most_recent_start_time = 2;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_most_recent_start_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_most_recent_start_time() const {
  return _internal_has_most_recent_start_time();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_most_recent_start_time() {
  most_recent_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_most_recent_start_time() const {
  return most_recent_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetAppsWithBackgroundVideo_Response_App::most_recent_start_time() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.most_recent_start_time)
  return _internal_most_recent_start_time();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_most_recent_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  most_recent_start_time_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_most_recent_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_most_recent_start_time(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.most_recent_start_time)
}

// optional .EGameRecordingType recording_type = 3 [default = EGameRecordingType_Unknown];
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_recording_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_recording_type() const {
  return _internal_has_recording_type();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_recording_type() {
  recording_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EGameRecordingType CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_recording_type() const {
  return static_cast< ::EGameRecordingType >(recording_type_);
}
inline ::EGameRecordingType CGameRecording_GetAppsWithBackgroundVideo_Response_App::recording_type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.recording_type)
  return _internal_recording_type();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_recording_type(::EGameRecordingType value) {
  assert(::EGameRecordingType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  recording_type_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_recording_type(::EGameRecordingType value) {
  _internal_set_recording_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.recording_type)
}

// optional double video_duration_seconds = 4;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_video_duration_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_video_duration_seconds() const {
  return _internal_has_video_duration_seconds();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_video_duration_seconds() {
  video_duration_seconds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_video_duration_seconds() const {
  return video_duration_seconds_;
}
inline double CGameRecording_GetAppsWithBackgroundVideo_Response_App::video_duration_seconds() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.video_duration_seconds)
  return _internal_video_duration_seconds();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_video_duration_seconds(double value) {
  _has_bits_[0] |= 0x00000008u;
  video_duration_seconds_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_video_duration_seconds(double value) {
  _internal_set_video_duration_seconds(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.video_duration_seconds)
}

// optional double timeline_duration_seconds = 5;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_timeline_duration_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_timeline_duration_seconds() const {
  return _internal_has_timeline_duration_seconds();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_timeline_duration_seconds() {
  timeline_duration_seconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_timeline_duration_seconds() const {
  return timeline_duration_seconds_;
}
inline double CGameRecording_GetAppsWithBackgroundVideo_Response_App::timeline_duration_seconds() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.timeline_duration_seconds)
  return _internal_timeline_duration_seconds();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_timeline_duration_seconds(double value) {
  _has_bits_[0] |= 0x00000010u;
  timeline_duration_seconds_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_timeline_duration_seconds(double value) {
  _internal_set_timeline_duration_seconds(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.timeline_duration_seconds)
}

// optional bool is_active = 6;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_is_active() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_is_active() const {
  return _internal_has_is_active();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_is_active() const {
  return is_active_;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::is_active() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.is_active)
  return _internal_is_active();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_is_active(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_active_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.is_active)
}

// optional uint64 file_size = 7;
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_GetAppsWithBackgroundVideo_Response_App::has_file_size() const {
  return _internal_has_file_size();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAppsWithBackgroundVideo_Response_App::file_size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.App.file_size)
  return _internal_file_size();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  file_size_ = value;
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response_App::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAppsWithBackgroundVideo_Response.App.file_size)
}

// -------------------------------------------------------------------

// CGameRecording_GetAppsWithBackgroundVideo_Response

// repeated .CGameRecording_GetAppsWithBackgroundVideo_Response.App apps = 1;
inline int CGameRecording_GetAppsWithBackgroundVideo_Response::_internal_apps_size() const {
  return apps_.size();
}
inline int CGameRecording_GetAppsWithBackgroundVideo_Response::apps_size() const {
  return _internal_apps_size();
}
inline void CGameRecording_GetAppsWithBackgroundVideo_Response::clear_apps() {
  apps_.Clear();
}
inline ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* CGameRecording_GetAppsWithBackgroundVideo_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetAppsWithBackgroundVideo_Response.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetAppsWithBackgroundVideo_Response_App >*
CGameRecording_GetAppsWithBackgroundVideo_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetAppsWithBackgroundVideo_Response.apps)
  return &apps_;
}
inline const ::CGameRecording_GetAppsWithBackgroundVideo_Response_App& CGameRecording_GetAppsWithBackgroundVideo_Response::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::CGameRecording_GetAppsWithBackgroundVideo_Response_App& CGameRecording_GetAppsWithBackgroundVideo_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAppsWithBackgroundVideo_Response.apps)
  return _internal_apps(index);
}
inline ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* CGameRecording_GetAppsWithBackgroundVideo_Response::_internal_add_apps() {
  return apps_.Add();
}
inline ::CGameRecording_GetAppsWithBackgroundVideo_Response_App* CGameRecording_GetAppsWithBackgroundVideo_Response::add_apps() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetAppsWithBackgroundVideo_Response.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetAppsWithBackgroundVideo_Response_App >&
CGameRecording_GetAppsWithBackgroundVideo_Response::apps() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetAppsWithBackgroundVideo_Response.apps)
  return apps_;
}

// -------------------------------------------------------------------

// CGameRecording_GetTimelinesForApp_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_GetTimelinesForApp_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTimelinesForApp_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetTimelinesForApp_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForApp_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForApp_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForApp_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetTimelinesForApp_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetTimelinesForApp_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTimelinesForApp_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_GetTimelinesForApp_Response

// repeated .CGameRecordingTimelineMetadata timelines = 1;
inline int CGameRecording_GetTimelinesForApp_Response::_internal_timelines_size() const {
  return timelines_.size();
}
inline int CGameRecording_GetTimelinesForApp_Response::timelines_size() const {
  return _internal_timelines_size();
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForApp_Response::mutable_timelines(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetTimelinesForApp_Response.timelines)
  return timelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
CGameRecording_GetTimelinesForApp_Response::mutable_timelines() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetTimelinesForApp_Response.timelines)
  return &timelines_;
}
inline const ::CGameRecordingTimelineMetadata& CGameRecording_GetTimelinesForApp_Response::_internal_timelines(int index) const {
  return timelines_.Get(index);
}
inline const ::CGameRecordingTimelineMetadata& CGameRecording_GetTimelinesForApp_Response::timelines(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForApp_Response.timelines)
  return _internal_timelines(index);
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForApp_Response::_internal_add_timelines() {
  return timelines_.Add();
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForApp_Response::add_timelines() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetTimelinesForApp_Response.timelines)
  return _internal_add_timelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
CGameRecording_GetTimelinesForApp_Response::timelines() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetTimelinesForApp_Response.timelines)
  return timelines_;
}

// -------------------------------------------------------------------

// CGameRecording_GetTimelinesForClip_Request

// optional string clip_id = 1;
inline bool CGameRecording_GetTimelinesForClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTimelinesForClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_GetTimelinesForClip_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_GetTimelinesForClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_GetTimelinesForClip_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTimelinesForClip_Request.clip_id)
}
inline std::string* CGameRecording_GetTimelinesForClip_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetTimelinesForClip_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_GetTimelinesForClip_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_GetTimelinesForClip_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetTimelinesForClip_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetTimelinesForClip_Request.clip_id)
}
inline void CGameRecording_GetTimelinesForClip_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetTimelinesForClip_Request.clip_id)
}
inline void CGameRecording_GetTimelinesForClip_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetTimelinesForClip_Request.clip_id)
}
inline std::string* CGameRecording_GetTimelinesForClip_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetTimelinesForClip_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetTimelinesForClip_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetTimelinesForClip_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetTimelinesForClip_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_GetTimelinesForClip_Response

// optional uint64 game_id = 1;
inline bool CGameRecording_GetTimelinesForClip_Response::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTimelinesForClip_Response::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetTimelinesForClip_Response::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForClip_Response::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForClip_Response::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForClip_Response.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetTimelinesForClip_Response::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetTimelinesForClip_Response::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTimelinesForClip_Response.game_id)
}

// repeated .CGameRecordingTimelineMetadata timelines = 2;
inline int CGameRecording_GetTimelinesForClip_Response::_internal_timelines_size() const {
  return timelines_.size();
}
inline int CGameRecording_GetTimelinesForClip_Response::timelines_size() const {
  return _internal_timelines_size();
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForClip_Response::mutable_timelines(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetTimelinesForClip_Response.timelines)
  return timelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
CGameRecording_GetTimelinesForClip_Response::mutable_timelines() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetTimelinesForClip_Response.timelines)
  return &timelines_;
}
inline const ::CGameRecordingTimelineMetadata& CGameRecording_GetTimelinesForClip_Response::_internal_timelines(int index) const {
  return timelines_.Get(index);
}
inline const ::CGameRecordingTimelineMetadata& CGameRecording_GetTimelinesForClip_Response::timelines(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForClip_Response.timelines)
  return _internal_timelines(index);
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForClip_Response::_internal_add_timelines() {
  return timelines_.Add();
}
inline ::CGameRecordingTimelineMetadata* CGameRecording_GetTimelinesForClip_Response::add_timelines() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetTimelinesForClip_Response.timelines)
  return _internal_add_timelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
CGameRecording_GetTimelinesForClip_Response::timelines() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetTimelinesForClip_Response.timelines)
  return timelines_;
}

// optional uint64 first_timeline_start_offset_ms = 3;
inline bool CGameRecording_GetTimelinesForClip_Response::_internal_has_first_timeline_start_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetTimelinesForClip_Response::has_first_timeline_start_offset_ms() const {
  return _internal_has_first_timeline_start_offset_ms();
}
inline void CGameRecording_GetTimelinesForClip_Response::clear_first_timeline_start_offset_ms() {
  first_timeline_start_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForClip_Response::_internal_first_timeline_start_offset_ms() const {
  return first_timeline_start_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTimelinesForClip_Response::first_timeline_start_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTimelinesForClip_Response.first_timeline_start_offset_ms)
  return _internal_first_timeline_start_offset_ms();
}
inline void CGameRecording_GetTimelinesForClip_Response::_internal_set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  first_timeline_start_offset_ms_ = value;
}
inline void CGameRecording_GetTimelinesForClip_Response::set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_timeline_start_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTimelinesForClip_Response.first_timeline_start_offset_ms)
}

// -------------------------------------------------------------------

// CGameRecording_QueryPhases_Request_Tag

// optional string group = 1;
inline bool CGameRecording_QueryPhases_Request_Tag::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request_Tag::has_group() const {
  return _internal_has_group();
}
inline void CGameRecording_QueryPhases_Request_Tag::clear_group() {
  group_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_QueryPhases_Request_Tag::group() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.Tag.group)
  return _internal_group();
}
inline void CGameRecording_QueryPhases_Request_Tag::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.Tag.group)
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::mutable_group() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Request.Tag.group)
  return _internal_mutable_group();
}
inline const std::string& CGameRecording_QueryPhases_Request_Tag::_internal_group() const {
  return group_.Get();
}
inline void CGameRecording_QueryPhases_Request_Tag::_internal_set_group(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Request_Tag::set_group(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  group_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Request.Tag.group)
}
inline void CGameRecording_QueryPhases_Request_Tag::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Request.Tag.group)
}
inline void CGameRecording_QueryPhases_Request_Tag::set_group(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Request.Tag.group)
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000001u;
  return group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::release_group() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Request.Tag.group)
  if (!_internal_has_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return group_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Request_Tag::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Request.Tag.group)
}

// optional string name = 2;
inline bool CGameRecording_QueryPhases_Request_Tag::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request_Tag::has_name() const {
  return _internal_has_name();
}
inline void CGameRecording_QueryPhases_Request_Tag::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_QueryPhases_Request_Tag::name() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.Tag.name)
  return _internal_name();
}
inline void CGameRecording_QueryPhases_Request_Tag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.Tag.name)
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Request.Tag.name)
  return _internal_mutable_name();
}
inline const std::string& CGameRecording_QueryPhases_Request_Tag::_internal_name() const {
  return name_.Get();
}
inline void CGameRecording_QueryPhases_Request_Tag::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Request_Tag::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Request.Tag.name)
}
inline void CGameRecording_QueryPhases_Request_Tag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Request.Tag.name)
}
inline void CGameRecording_QueryPhases_Request_Tag::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Request.Tag.name)
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Request_Tag::release_name() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Request.Tag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Request_Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Request.Tag.name)
}

// -------------------------------------------------------------------

// CGameRecording_QueryPhases_Request

// optional uint32 page = 1;
inline bool CGameRecording_QueryPhases_Request::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request::has_page() const {
  return _internal_has_page();
}
inline void CGameRecording_QueryPhases_Request::clear_page() {
  page_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Request::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Request::page() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.page)
  return _internal_page();
}
inline void CGameRecording_QueryPhases_Request::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  page_ = value;
}
inline void CGameRecording_QueryPhases_Request::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.page)
}

// optional uint32 count = 2;
inline bool CGameRecording_QueryPhases_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request::has_count() const {
  return _internal_has_count();
}
inline void CGameRecording_QueryPhases_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Request::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Request::count() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.count)
  return _internal_count();
}
inline void CGameRecording_QueryPhases_Request::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
}
inline void CGameRecording_QueryPhases_Request::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.count)
}

// optional uint64 filter_gameid = 10;
inline bool CGameRecording_QueryPhases_Request::_internal_has_filter_gameid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request::has_filter_gameid() const {
  return _internal_has_filter_gameid();
}
inline void CGameRecording_QueryPhases_Request::clear_filter_gameid() {
  filter_gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Request::_internal_filter_gameid() const {
  return filter_gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Request::filter_gameid() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.filter_gameid)
  return _internal_filter_gameid();
}
inline void CGameRecording_QueryPhases_Request::_internal_set_filter_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_gameid_ = value;
}
inline void CGameRecording_QueryPhases_Request::set_filter_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filter_gameid(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.filter_gameid)
}

// optional string filter_search_string = 11;
inline bool CGameRecording_QueryPhases_Request::_internal_has_filter_search_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request::has_filter_search_string() const {
  return _internal_has_filter_search_string();
}
inline void CGameRecording_QueryPhases_Request::clear_filter_search_string() {
  filter_search_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_QueryPhases_Request::filter_search_string() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.filter_search_string)
  return _internal_filter_search_string();
}
inline void CGameRecording_QueryPhases_Request::set_filter_search_string(const std::string& value) {
  _internal_set_filter_search_string(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.filter_search_string)
}
inline std::string* CGameRecording_QueryPhases_Request::mutable_filter_search_string() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Request.filter_search_string)
  return _internal_mutable_filter_search_string();
}
inline const std::string& CGameRecording_QueryPhases_Request::_internal_filter_search_string() const {
  return filter_search_string_.Get();
}
inline void CGameRecording_QueryPhases_Request::_internal_set_filter_search_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Request::set_filter_search_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_search_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Request.filter_search_string)
}
inline void CGameRecording_QueryPhases_Request::set_filter_search_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filter_search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Request.filter_search_string)
}
inline void CGameRecording_QueryPhases_Request::set_filter_search_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filter_search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Request.filter_search_string)
}
inline std::string* CGameRecording_QueryPhases_Request::_internal_mutable_filter_search_string() {
  _has_bits_[0] |= 0x00000001u;
  return filter_search_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Request::release_filter_search_string() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Request.filter_search_string)
  if (!_internal_has_filter_search_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filter_search_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Request::set_allocated_filter_search_string(std::string* filter_search_string) {
  if (filter_search_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_search_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_search_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Request.filter_search_string)
}

// repeated .CGameRecording_QueryPhases_Request.Tag filter_tags = 12;
inline int CGameRecording_QueryPhases_Request::_internal_filter_tags_size() const {
  return filter_tags_.size();
}
inline int CGameRecording_QueryPhases_Request::filter_tags_size() const {
  return _internal_filter_tags_size();
}
inline void CGameRecording_QueryPhases_Request::clear_filter_tags() {
  filter_tags_.Clear();
}
inline ::CGameRecording_QueryPhases_Request_Tag* CGameRecording_QueryPhases_Request::mutable_filter_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Request.filter_tags)
  return filter_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Request_Tag >*
CGameRecording_QueryPhases_Request::mutable_filter_tags() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Request.filter_tags)
  return &filter_tags_;
}
inline const ::CGameRecording_QueryPhases_Request_Tag& CGameRecording_QueryPhases_Request::_internal_filter_tags(int index) const {
  return filter_tags_.Get(index);
}
inline const ::CGameRecording_QueryPhases_Request_Tag& CGameRecording_QueryPhases_Request::filter_tags(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.filter_tags)
  return _internal_filter_tags(index);
}
inline ::CGameRecording_QueryPhases_Request_Tag* CGameRecording_QueryPhases_Request::_internal_add_filter_tags() {
  return filter_tags_.Add();
}
inline ::CGameRecording_QueryPhases_Request_Tag* CGameRecording_QueryPhases_Request::add_filter_tags() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Request.filter_tags)
  return _internal_add_filter_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Request_Tag >&
CGameRecording_QueryPhases_Request::filter_tags() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Request.filter_tags)
  return filter_tags_;
}

// optional string filter_phase_id = 13;
inline bool CGameRecording_QueryPhases_Request::_internal_has_filter_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Request::has_filter_phase_id() const {
  return _internal_has_filter_phase_id();
}
inline void CGameRecording_QueryPhases_Request::clear_filter_phase_id() {
  filter_phase_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_QueryPhases_Request::filter_phase_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Request.filter_phase_id)
  return _internal_filter_phase_id();
}
inline void CGameRecording_QueryPhases_Request::set_filter_phase_id(const std::string& value) {
  _internal_set_filter_phase_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Request.filter_phase_id)
}
inline std::string* CGameRecording_QueryPhases_Request::mutable_filter_phase_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Request.filter_phase_id)
  return _internal_mutable_filter_phase_id();
}
inline const std::string& CGameRecording_QueryPhases_Request::_internal_filter_phase_id() const {
  return filter_phase_id_.Get();
}
inline void CGameRecording_QueryPhases_Request::_internal_set_filter_phase_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Request::set_filter_phase_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_phase_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Request.filter_phase_id)
}
inline void CGameRecording_QueryPhases_Request::set_filter_phase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filter_phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Request.filter_phase_id)
}
inline void CGameRecording_QueryPhases_Request::set_filter_phase_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filter_phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Request.filter_phase_id)
}
inline std::string* CGameRecording_QueryPhases_Request::_internal_mutable_filter_phase_id() {
  _has_bits_[0] |= 0x00000002u;
  return filter_phase_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Request::release_filter_phase_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Request.filter_phase_id)
  if (!_internal_has_filter_phase_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filter_phase_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Request::set_allocated_filter_phase_id(std::string* filter_phase_id) {
  if (filter_phase_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filter_phase_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_phase_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Request.filter_phase_id)
}

// -------------------------------------------------------------------

// CGameRecording_QueryPhases_Response_Phase_BackgroundRecording

// optional string timeline_id = 1;
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
}
inline std::string* CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
}
inline std::string* CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.timeline_id)
}

// optional uint64 offset = 2;
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::has_offset() const {
  return _internal_has_offset();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::offset() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.offset)
  return _internal_offset();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.offset)
}

// optional uint64 duration_ms = 3;
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase_BackgroundRecording::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.BackgroundRecording.duration_ms)
}

// -------------------------------------------------------------------

// CGameRecording_QueryPhases_Response_Phase

// optional uint64 game_id = 1;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.game_id)
  return _internal_game_id();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.game_id)
}

// optional uint32 date_recorded = 5;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_date_recorded() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_date_recorded() const {
  return _internal_has_date_recorded();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_date_recorded() {
  date_recorded_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response_Phase::_internal_date_recorded() const {
  return date_recorded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response_Phase::date_recorded() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.date_recorded)
  return _internal_date_recorded();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  date_recorded_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_recorded(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.date_recorded)
}

// optional uint64 duration_ms = 6;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ms_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.duration_ms)
}

// repeated .CTimelineTag tags = 7;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_tags_size() const {
  return tags_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::tags_size() const {
  return _internal_tags_size();
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
CGameRecording_QueryPhases_Response_Phase::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.tags)
  return &tags_;
}
inline const ::CTimelineTag& CGameRecording_QueryPhases_Response_Phase::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CTimelineTag& CGameRecording_QueryPhases_Response_Phase::tags(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.tags)
  return _internal_tags(index);
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::_internal_add_tags() {
  return tags_.Add();
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::add_tags() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
CGameRecording_QueryPhases_Response_Phase::tags() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.tags)
  return tags_;
}

// repeated .CTimelineTag contained_tags = 8;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_contained_tags_size() const {
  return contained_tags_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::contained_tags_size() const {
  return _internal_contained_tags_size();
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::mutable_contained_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.contained_tags)
  return contained_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
CGameRecording_QueryPhases_Response_Phase::mutable_contained_tags() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.contained_tags)
  return &contained_tags_;
}
inline const ::CTimelineTag& CGameRecording_QueryPhases_Response_Phase::_internal_contained_tags(int index) const {
  return contained_tags_.Get(index);
}
inline const ::CTimelineTag& CGameRecording_QueryPhases_Response_Phase::contained_tags(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.contained_tags)
  return _internal_contained_tags(index);
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::_internal_add_contained_tags() {
  return contained_tags_.Add();
}
inline ::CTimelineTag* CGameRecording_QueryPhases_Response_Phase::add_contained_tags() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.contained_tags)
  return _internal_add_contained_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
CGameRecording_QueryPhases_Response_Phase::contained_tags() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.contained_tags)
  return contained_tags_;
}

// optional .CGameRecording_QueryPhases_Response.Phase.BackgroundRecording background_recording = 9;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_background_recording() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_recording_ != nullptr);
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_background_recording() const {
  return _internal_has_background_recording();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_background_recording() {
  if (background_recording_ != nullptr) background_recording_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& CGameRecording_QueryPhases_Response_Phase::_internal_background_recording() const {
  const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* p = background_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording&>(
      ::_CGameRecording_QueryPhases_Response_Phase_BackgroundRecording_default_instance_);
}
inline const ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording& CGameRecording_QueryPhases_Response_Phase::background_recording() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.background_recording)
  return _internal_background_recording();
}
inline void CGameRecording_QueryPhases_Response_Phase::unsafe_arena_set_allocated_background_recording(
    ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* background_recording) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_recording_);
  }
  background_recording_ = background_recording;
  if (background_recording) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_QueryPhases_Response.Phase.background_recording)
}
inline ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* CGameRecording_QueryPhases_Response_Phase::release_background_recording() {
  _has_bits_[0] &= ~0x00000002u;
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* temp = background_recording_;
  background_recording_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* CGameRecording_QueryPhases_Response_Phase::unsafe_arena_release_background_recording() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Response.Phase.background_recording)
  _has_bits_[0] &= ~0x00000002u;
  ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* temp = background_recording_;
  background_recording_ = nullptr;
  return temp;
}
inline ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* CGameRecording_QueryPhases_Response_Phase::_internal_mutable_background_recording() {
  _has_bits_[0] |= 0x00000002u;
  if (background_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording>(GetArena());
    background_recording_ = p;
  }
  return background_recording_;
}
inline ::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* CGameRecording_QueryPhases_Response_Phase::mutable_background_recording() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.background_recording)
  return _internal_mutable_background_recording();
}
inline void CGameRecording_QueryPhases_Response_Phase::set_allocated_background_recording(::CGameRecording_QueryPhases_Response_Phase_BackgroundRecording* background_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete background_recording_;
  }
  if (background_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(background_recording);
    if (message_arena != submessage_arena) {
      background_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_recording_ = background_recording;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Response.Phase.background_recording)
}

// repeated string clip_ids = 10;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_clip_ids_size() const {
  return clip_ids_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::clip_ids_size() const {
  return _internal_clip_ids_size();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_clip_ids() {
  clip_ids_.Clear();
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::add_clip_ids() {
  // @@protoc_insertion_point(field_add_mutable:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  return _internal_add_clip_ids();
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase::_internal_clip_ids(int index) const {
  return clip_ids_.Get(index);
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase::clip_ids(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  return _internal_clip_ids(index);
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::mutable_clip_ids(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  return clip_ids_.Mutable(index);
}
inline void CGameRecording_QueryPhases_Response_Phase::set_clip_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  clip_ids_.Mutable(index)->assign(value);
}
inline void CGameRecording_QueryPhases_Response_Phase::set_clip_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  clip_ids_.Mutable(index)->assign(std::move(value));
}
inline void CGameRecording_QueryPhases_Response_Phase::set_clip_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clip_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline void CGameRecording_QueryPhases_Response_Phase::set_clip_ids(int index, const char* value, size_t size) {
  clip_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::_internal_add_clip_ids() {
  return clip_ids_.Add();
}
inline void CGameRecording_QueryPhases_Response_Phase::add_clip_ids(const std::string& value) {
  clip_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline void CGameRecording_QueryPhases_Response_Phase::add_clip_ids(std::string&& value) {
  clip_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline void CGameRecording_QueryPhases_Response_Phase::add_clip_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clip_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline void CGameRecording_QueryPhases_Response_Phase::add_clip_ids(const char* value, size_t size) {
  clip_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGameRecording_QueryPhases_Response.Phase.clip_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGameRecording_QueryPhases_Response_Phase::clip_ids() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  return clip_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGameRecording_QueryPhases_Response_Phase::mutable_clip_ids() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.clip_ids)
  return &clip_ids_;
}

// optional .EPhaseResultType type = 11 [default = EPhaseResultType_Automatic];
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_type() const {
  return _internal_has_type();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EPhaseResultType CGameRecording_QueryPhases_Response_Phase::_internal_type() const {
  return static_cast< ::EPhaseResultType >(type_);
}
inline ::EPhaseResultType CGameRecording_QueryPhases_Response_Phase::type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.type)
  return _internal_type();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_type(::EPhaseResultType value) {
  assert(::EPhaseResultType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_type(::EPhaseResultType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.type)
}

// optional uint64 start_ms = 12;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_start_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_start_ms() const {
  return _internal_has_start_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_start_ms() {
  start_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::_internal_start_ms() const {
  return start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_QueryPhases_Response_Phase::start_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.start_ms)
  return _internal_start_ms();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  start_ms_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.start_ms)
}

// repeated uint32 screenshots = 13;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_screenshots_size() const {
  return screenshots_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::screenshots_size() const {
  return _internal_screenshots_size();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_screenshots() {
  screenshots_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response_Phase::_internal_screenshots(int index) const {
  return screenshots_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response_Phase::screenshots(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.screenshots)
  return _internal_screenshots(index);
}
inline void CGameRecording_QueryPhases_Response_Phase::set_screenshots(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  screenshots_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.screenshots)
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_add_screenshots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  screenshots_.Add(value);
}
inline void CGameRecording_QueryPhases_Response_Phase::add_screenshots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_screenshots(value);
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.screenshots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CGameRecording_QueryPhases_Response_Phase::_internal_screenshots() const {
  return screenshots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CGameRecording_QueryPhases_Response_Phase::screenshots() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.screenshots)
  return _internal_screenshots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CGameRecording_QueryPhases_Response_Phase::_internal_mutable_screenshots() {
  return &screenshots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CGameRecording_QueryPhases_Response_Phase::mutable_screenshots() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.screenshots)
  return _internal_mutable_screenshots();
}

// optional bool active = 14;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_active() const {
  return _internal_has_active();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_active() const {
  return active_;
}
inline bool CGameRecording_QueryPhases_Response_Phase::active() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.active)
  return _internal_active();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  active_ = value;
}
inline void CGameRecording_QueryPhases_Response_Phase::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.active)
}

// optional string phase_id = 15;
inline bool CGameRecording_QueryPhases_Response_Phase::_internal_has_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response_Phase::has_phase_id() const {
  return _internal_has_phase_id();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_phase_id() {
  phase_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase::phase_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.phase_id)
  return _internal_phase_id();
}
inline void CGameRecording_QueryPhases_Response_Phase::set_phase_id(const std::string& value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.Phase.phase_id)
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::mutable_phase_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.phase_id)
  return _internal_mutable_phase_id();
}
inline const std::string& CGameRecording_QueryPhases_Response_Phase::_internal_phase_id() const {
  return phase_id_.Get();
}
inline void CGameRecording_QueryPhases_Response_Phase::_internal_set_phase_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_QueryPhases_Response_Phase::set_phase_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_QueryPhases_Response.Phase.phase_id)
}
inline void CGameRecording_QueryPhases_Response_Phase::set_phase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_QueryPhases_Response.Phase.phase_id)
}
inline void CGameRecording_QueryPhases_Response_Phase::set_phase_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_QueryPhases_Response.Phase.phase_id)
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::_internal_mutable_phase_id() {
  _has_bits_[0] |= 0x00000001u;
  return phase_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_QueryPhases_Response_Phase::release_phase_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_QueryPhases_Response.Phase.phase_id)
  if (!_internal_has_phase_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phase_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_QueryPhases_Response_Phase::set_allocated_phase_id(std::string* phase_id) {
  if (phase_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phase_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phase_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_QueryPhases_Response.Phase.phase_id)
}

// repeated .CTimelineEntry significant_events = 16;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_significant_events_size() const {
  return significant_events_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::significant_events_size() const {
  return _internal_significant_events_size();
}
inline void CGameRecording_QueryPhases_Response_Phase::clear_significant_events() {
  significant_events_.Clear();
}
inline ::CTimelineEntry* CGameRecording_QueryPhases_Response_Phase::mutable_significant_events(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.significant_events)
  return significant_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineEntry >*
CGameRecording_QueryPhases_Response_Phase::mutable_significant_events() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.significant_events)
  return &significant_events_;
}
inline const ::CTimelineEntry& CGameRecording_QueryPhases_Response_Phase::_internal_significant_events(int index) const {
  return significant_events_.Get(index);
}
inline const ::CTimelineEntry& CGameRecording_QueryPhases_Response_Phase::significant_events(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.significant_events)
  return _internal_significant_events(index);
}
inline ::CTimelineEntry* CGameRecording_QueryPhases_Response_Phase::_internal_add_significant_events() {
  return significant_events_.Add();
}
inline ::CTimelineEntry* CGameRecording_QueryPhases_Response_Phase::add_significant_events() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.significant_events)
  return _internal_add_significant_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineEntry >&
CGameRecording_QueryPhases_Response_Phase::significant_events() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.significant_events)
  return significant_events_;
}

// repeated .CPhaseAttribute attributes = 17;
inline int CGameRecording_QueryPhases_Response_Phase::_internal_attributes_size() const {
  return attributes_.size();
}
inline int CGameRecording_QueryPhases_Response_Phase::attributes_size() const {
  return _internal_attributes_size();
}
inline ::CPhaseAttribute* CGameRecording_QueryPhases_Response_Phase::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.Phase.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >*
CGameRecording_QueryPhases_Response_Phase::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.Phase.attributes)
  return &attributes_;
}
inline const ::CPhaseAttribute& CGameRecording_QueryPhases_Response_Phase::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::CPhaseAttribute& CGameRecording_QueryPhases_Response_Phase::attributes(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.Phase.attributes)
  return _internal_attributes(index);
}
inline ::CPhaseAttribute* CGameRecording_QueryPhases_Response_Phase::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::CPhaseAttribute* CGameRecording_QueryPhases_Response_Phase::add_attributes() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.Phase.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >&
CGameRecording_QueryPhases_Response_Phase::attributes() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.Phase.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// CGameRecording_QueryPhases_Response

// repeated .CGameRecording_QueryPhases_Response.Phase phases = 1;
inline int CGameRecording_QueryPhases_Response::_internal_phases_size() const {
  return phases_.size();
}
inline int CGameRecording_QueryPhases_Response::phases_size() const {
  return _internal_phases_size();
}
inline void CGameRecording_QueryPhases_Response::clear_phases() {
  phases_.Clear();
}
inline ::CGameRecording_QueryPhases_Response_Phase* CGameRecording_QueryPhases_Response::mutable_phases(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_QueryPhases_Response.phases)
  return phases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Response_Phase >*
CGameRecording_QueryPhases_Response::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_QueryPhases_Response.phases)
  return &phases_;
}
inline const ::CGameRecording_QueryPhases_Response_Phase& CGameRecording_QueryPhases_Response::_internal_phases(int index) const {
  return phases_.Get(index);
}
inline const ::CGameRecording_QueryPhases_Response_Phase& CGameRecording_QueryPhases_Response::phases(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.phases)
  return _internal_phases(index);
}
inline ::CGameRecording_QueryPhases_Response_Phase* CGameRecording_QueryPhases_Response::_internal_add_phases() {
  return phases_.Add();
}
inline ::CGameRecording_QueryPhases_Response_Phase* CGameRecording_QueryPhases_Response::add_phases() {
  // @@protoc_insertion_point(field_add:CGameRecording_QueryPhases_Response.phases)
  return _internal_add_phases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_QueryPhases_Response_Phase >&
CGameRecording_QueryPhases_Response::phases() const {
  // @@protoc_insertion_point(field_list:CGameRecording_QueryPhases_Response.phases)
  return phases_;
}

// optional uint32 total_count = 2;
inline bool CGameRecording_QueryPhases_Response::_internal_has_total_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_QueryPhases_Response::has_total_count() const {
  return _internal_has_total_count();
}
inline void CGameRecording_QueryPhases_Response::clear_total_count() {
  total_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_QueryPhases_Response::total_count() const {
  // @@protoc_insertion_point(field_get:CGameRecording_QueryPhases_Response.total_count)
  return _internal_total_count();
}
inline void CGameRecording_QueryPhases_Response::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_count_ = value;
}
inline void CGameRecording_QueryPhases_Response::set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:CGameRecording_QueryPhases_Response.total_count)
}

// -------------------------------------------------------------------

// CGameRecording_GetTags_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_GetTags_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTags_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetTags_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTags_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTags_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTags_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetTags_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetTags_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTags_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_GetTags_Response

// repeated .CTimelineTag tags = 1;
inline int CGameRecording_GetTags_Response::_internal_tags_size() const {
  return tags_.size();
}
inline int CGameRecording_GetTags_Response::tags_size() const {
  return _internal_tags_size();
}
inline ::CTimelineTag* CGameRecording_GetTags_Response::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetTags_Response.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
CGameRecording_GetTags_Response::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetTags_Response.tags)
  return &tags_;
}
inline const ::CTimelineTag& CGameRecording_GetTags_Response::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CTimelineTag& CGameRecording_GetTags_Response::tags(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTags_Response.tags)
  return _internal_tags(index);
}
inline ::CTimelineTag* CGameRecording_GetTags_Response::_internal_add_tags() {
  return tags_.Add();
}
inline ::CTimelineTag* CGameRecording_GetTags_Response::add_tags() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetTags_Response.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
CGameRecording_GetTags_Response::tags() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetTags_Response.tags)
  return tags_;
}

// -------------------------------------------------------------------

// CGameRecording_GetEnoughDiskSpace_Request

// -------------------------------------------------------------------

// CGameRecording_GetEnoughDiskSpace_Response

// optional bool enough_space = 1;
inline bool CGameRecording_GetEnoughDiskSpace_Response::_internal_has_enough_space() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetEnoughDiskSpace_Response::has_enough_space() const {
  return _internal_has_enough_space();
}
inline void CGameRecording_GetEnoughDiskSpace_Response::clear_enough_space() {
  enough_space_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CGameRecording_GetEnoughDiskSpace_Response::_internal_enough_space() const {
  return enough_space_;
}
inline bool CGameRecording_GetEnoughDiskSpace_Response::enough_space() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetEnoughDiskSpace_Response.enough_space)
  return _internal_enough_space();
}
inline void CGameRecording_GetEnoughDiskSpace_Response::_internal_set_enough_space(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enough_space_ = value;
}
inline void CGameRecording_GetEnoughDiskSpace_Response::set_enough_space(bool value) {
  _internal_set_enough_space(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetEnoughDiskSpace_Response.enough_space)
}

// -------------------------------------------------------------------

// CGameRecording_GetAvailableDiskSpace_Request

// -------------------------------------------------------------------

// CGameRecording_GetAvailableDiskSpace_Response

// optional double size = 1;
inline bool CGameRecording_GetAvailableDiskSpace_Response::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetAvailableDiskSpace_Response::has_size() const {
  return _internal_has_size();
}
inline void CGameRecording_GetAvailableDiskSpace_Response::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CGameRecording_GetAvailableDiskSpace_Response::_internal_size() const {
  return size_;
}
inline double CGameRecording_GetAvailableDiskSpace_Response::size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAvailableDiskSpace_Response.size)
  return _internal_size();
}
inline void CGameRecording_GetAvailableDiskSpace_Response::_internal_set_size(double value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void CGameRecording_GetAvailableDiskSpace_Response::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAvailableDiskSpace_Response.size)
}

// -------------------------------------------------------------------

// CGameRecording_TimelineChanged_Notification

// optional .ETimelineChangeNotificationType notification_type = 1 [default = ETimelineChangeNotificationType_Started];
inline bool CGameRecording_TimelineChanged_Notification::_internal_has_notification_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_TimelineChanged_Notification::has_notification_type() const {
  return _internal_has_notification_type();
}
inline void CGameRecording_TimelineChanged_Notification::clear_notification_type() {
  notification_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ETimelineChangeNotificationType CGameRecording_TimelineChanged_Notification::_internal_notification_type() const {
  return static_cast< ::ETimelineChangeNotificationType >(notification_type_);
}
inline ::ETimelineChangeNotificationType CGameRecording_TimelineChanged_Notification::notification_type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineChanged_Notification.notification_type)
  return _internal_notification_type();
}
inline void CGameRecording_TimelineChanged_Notification::_internal_set_notification_type(::ETimelineChangeNotificationType value) {
  assert(::ETimelineChangeNotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  notification_type_ = value;
}
inline void CGameRecording_TimelineChanged_Notification::set_notification_type(::ETimelineChangeNotificationType value) {
  _internal_set_notification_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineChanged_Notification.notification_type)
}

// optional string timeline_id = 2;
inline bool CGameRecording_TimelineChanged_Notification::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_TimelineChanged_Notification::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_TimelineChanged_Notification::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_TimelineChanged_Notification::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineChanged_Notification.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_TimelineChanged_Notification::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineChanged_Notification.timeline_id)
}
inline std::string* CGameRecording_TimelineChanged_Notification::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_TimelineChanged_Notification.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_TimelineChanged_Notification::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_TimelineChanged_Notification::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_TimelineChanged_Notification::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_TimelineChanged_Notification.timeline_id)
}
inline void CGameRecording_TimelineChanged_Notification::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_TimelineChanged_Notification.timeline_id)
}
inline void CGameRecording_TimelineChanged_Notification::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_TimelineChanged_Notification.timeline_id)
}
inline std::string* CGameRecording_TimelineChanged_Notification::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_TimelineChanged_Notification::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_TimelineChanged_Notification.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_TimelineChanged_Notification::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_TimelineChanged_Notification.timeline_id)
}

// optional uint64 game_id = 3;
inline bool CGameRecording_TimelineChanged_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_TimelineChanged_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_TimelineChanged_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineChanged_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineChanged_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineChanged_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_TimelineChanged_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_TimelineChanged_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineChanged_Notification.game_id)
}

// optional uint32 start_time = 4;
inline bool CGameRecording_TimelineChanged_Notification::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_TimelineChanged_Notification::has_start_time() const {
  return _internal_has_start_time();
}
inline void CGameRecording_TimelineChanged_Notification::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_TimelineChanged_Notification::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_TimelineChanged_Notification::start_time() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineChanged_Notification.start_time)
  return _internal_start_time();
}
inline void CGameRecording_TimelineChanged_Notification::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
}
inline void CGameRecording_TimelineChanged_Notification::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineChanged_Notification.start_time)
}

// optional uint64 duration_ms = 5;
inline bool CGameRecording_TimelineChanged_Notification::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_TimelineChanged_Notification::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecording_TimelineChanged_Notification::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineChanged_Notification::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineChanged_Notification::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineChanged_Notification.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecording_TimelineChanged_Notification::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
}
inline void CGameRecording_TimelineChanged_Notification::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineChanged_Notification.duration_ms)
}

// -------------------------------------------------------------------

// CGameRecording_RecordingSessionChanged_Notification

// optional .ERecordingSessionChangeNotificationType notification_type = 1 [default = ERecordingSessionChangeNotificationType_Started];
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_notification_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_notification_type() const {
  return _internal_has_notification_type();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_notification_type() {
  notification_type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ERecordingSessionChangeNotificationType CGameRecording_RecordingSessionChanged_Notification::_internal_notification_type() const {
  return static_cast< ::ERecordingSessionChangeNotificationType >(notification_type_);
}
inline ::ERecordingSessionChangeNotificationType CGameRecording_RecordingSessionChanged_Notification::notification_type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.notification_type)
  return _internal_notification_type();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_notification_type(::ERecordingSessionChangeNotificationType value) {
  assert(::ERecordingSessionChangeNotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  notification_type_ = value;
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_notification_type(::ERecordingSessionChangeNotificationType value) {
  _internal_set_notification_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.notification_type)
}

// optional string timeline_id = 2;
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_RecordingSessionChanged_Notification::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_RecordingSessionChanged_Notification::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_RecordingSessionChanged_Notification.timeline_id)
}

// optional uint64 game_id = 4;
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.game_id)
}

// optional string session_id = 5;
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_session_id() const {
  return _internal_has_session_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_RecordingSessionChanged_Notification::session_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.session_id)
  return _internal_session_id();
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.session_id)
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_RecordingSessionChanged_Notification.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& CGameRecording_RecordingSessionChanged_Notification::_internal_session_id() const {
  return session_id_.Get();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_RecordingSessionChanged_Notification.session_id)
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_RecordingSessionChanged_Notification.session_id)
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_RecordingSessionChanged_Notification.session_id)
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_RecordingSessionChanged_Notification::release_session_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_RecordingSessionChanged_Notification.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_RecordingSessionChanged_Notification.session_id)
}

// optional uint64 start_offset = 6;
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_start_offset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_start_offset() const {
  return _internal_has_start_offset();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_start_offset() {
  start_offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::_internal_start_offset() const {
  return start_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::start_offset() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.start_offset)
  return _internal_start_offset();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_offset_ = value;
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_start_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.start_offset)
}

// optional uint64 duration_ms = 7;
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_RecordingSessionChanged_Notification::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ms_ = value;
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.duration_ms)
}

// optional .EGameRecordingType recording_type = 8 [default = EGameRecordingType_Unknown];
inline bool CGameRecording_RecordingSessionChanged_Notification::_internal_has_recording_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_RecordingSessionChanged_Notification::has_recording_type() const {
  return _internal_has_recording_type();
}
inline void CGameRecording_RecordingSessionChanged_Notification::clear_recording_type() {
  recording_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EGameRecordingType CGameRecording_RecordingSessionChanged_Notification::_internal_recording_type() const {
  return static_cast< ::EGameRecordingType >(recording_type_);
}
inline ::EGameRecordingType CGameRecording_RecordingSessionChanged_Notification::recording_type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_RecordingSessionChanged_Notification.recording_type)
  return _internal_recording_type();
}
inline void CGameRecording_RecordingSessionChanged_Notification::_internal_set_recording_type(::EGameRecordingType value) {
  assert(::EGameRecordingType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  recording_type_ = value;
}
inline void CGameRecording_RecordingSessionChanged_Notification::set_recording_type(::EGameRecordingType value) {
  _internal_set_recording_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_RecordingSessionChanged_Notification.recording_type)
}

// -------------------------------------------------------------------

// CTimelineEntry

// optional string timeline_id = 1;
inline bool CTimelineEntry::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimelineEntry::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CTimelineEntry::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTimelineEntry::timeline_id() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.timeline_id)
  return _internal_timeline_id();
}
inline void CTimelineEntry::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.timeline_id)
}
inline std::string* CTimelineEntry::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CTimelineEntry::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CTimelineEntry::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.timeline_id)
}
inline void CTimelineEntry::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.timeline_id)
}
inline void CTimelineEntry::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.timeline_id)
}
inline std::string* CTimelineEntry::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.timeline_id)
}

// optional uint64 entry_id = 2;
inline bool CTimelineEntry::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CTimelineEntry::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CTimelineEntry::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::entry_id() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.entry_id)
  return _internal_entry_id();
}
inline void CTimelineEntry::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  entry_id_ = value;
}
inline void CTimelineEntry::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.entry_id)
}

// optional uint64 time = 3;
inline bool CTimelineEntry::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CTimelineEntry::has_time() const {
  return _internal_has_time();
}
inline void CTimelineEntry::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::time() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.time)
  return _internal_time();
}
inline void CTimelineEntry::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  time_ = value;
}
inline void CTimelineEntry::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.time)
}

// optional .ETimelineEntryType type = 4 [default = ETimelineEntryType_Invalid];
inline bool CTimelineEntry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CTimelineEntry::has_type() const {
  return _internal_has_type();
}
inline void CTimelineEntry::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::ETimelineEntryType CTimelineEntry::_internal_type() const {
  return static_cast< ::ETimelineEntryType >(type_);
}
inline ::ETimelineEntryType CTimelineEntry::type() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.type)
  return _internal_type();
}
inline void CTimelineEntry::_internal_set_type(::ETimelineEntryType value) {
  assert(::ETimelineEntryType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void CTimelineEntry::set_type(::ETimelineEntryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.type)
}

// optional int32 game_mode = 5;
inline bool CTimelineEntry::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CTimelineEntry::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CTimelineEntry::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::game_mode() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.game_mode)
  return _internal_game_mode();
}
inline void CTimelineEntry::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  game_mode_ = value;
}
inline void CTimelineEntry::set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.game_mode)
}

// optional string range_title = 7;
inline bool CTimelineEntry::_internal_has_range_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTimelineEntry::has_range_title() const {
  return _internal_has_range_title();
}
inline void CTimelineEntry::clear_range_title() {
  range_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CTimelineEntry::range_title() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.range_title)
  return _internal_range_title();
}
inline void CTimelineEntry::set_range_title(const std::string& value) {
  _internal_set_range_title(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.range_title)
}
inline std::string* CTimelineEntry::mutable_range_title() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.range_title)
  return _internal_mutable_range_title();
}
inline const std::string& CTimelineEntry::_internal_range_title() const {
  return range_title_.Get();
}
inline void CTimelineEntry::_internal_set_range_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  range_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_range_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  range_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.range_title)
}
inline void CTimelineEntry::set_range_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  range_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.range_title)
}
inline void CTimelineEntry::set_range_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  range_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.range_title)
}
inline std::string* CTimelineEntry::_internal_mutable_range_title() {
  _has_bits_[0] |= 0x00000002u;
  return range_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_range_title() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.range_title)
  if (!_internal_has_range_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return range_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_range_title(std::string* range_title) {
  if (range_title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.range_title)
}

// optional uint64 range_duration = 8;
inline bool CTimelineEntry::_internal_has_range_duration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CTimelineEntry::has_range_duration() const {
  return _internal_has_range_duration();
}
inline void CTimelineEntry::clear_range_duration() {
  range_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::_internal_range_duration() const {
  return range_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTimelineEntry::range_duration() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.range_duration)
  return _internal_range_duration();
}
inline void CTimelineEntry::_internal_set_range_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  range_duration_ = value;
}
inline void CTimelineEntry::set_range_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_range_duration(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.range_duration)
}

// optional int32 range_possible_clip = 9;
inline bool CTimelineEntry::_internal_has_range_possible_clip() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CTimelineEntry::has_range_possible_clip() const {
  return _internal_has_range_possible_clip();
}
inline void CTimelineEntry::clear_range_possible_clip() {
  range_possible_clip_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::_internal_range_possible_clip() const {
  return range_possible_clip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::range_possible_clip() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.range_possible_clip)
  return _internal_range_possible_clip();
}
inline void CTimelineEntry::_internal_set_range_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  range_possible_clip_ = value;
}
inline void CTimelineEntry::set_range_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_possible_clip(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.range_possible_clip)
}

// optional string timestamp_title = 10;
inline bool CTimelineEntry::_internal_has_timestamp_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTimelineEntry::has_timestamp_title() const {
  return _internal_has_timestamp_title();
}
inline void CTimelineEntry::clear_timestamp_title() {
  timestamp_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CTimelineEntry::timestamp_title() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.timestamp_title)
  return _internal_timestamp_title();
}
inline void CTimelineEntry::set_timestamp_title(const std::string& value) {
  _internal_set_timestamp_title(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.timestamp_title)
}
inline std::string* CTimelineEntry::mutable_timestamp_title() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.timestamp_title)
  return _internal_mutable_timestamp_title();
}
inline const std::string& CTimelineEntry::_internal_timestamp_title() const {
  return timestamp_title_.Get();
}
inline void CTimelineEntry::_internal_set_timestamp_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_timestamp_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.timestamp_title)
}
inline void CTimelineEntry::set_timestamp_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  timestamp_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.timestamp_title)
}
inline void CTimelineEntry::set_timestamp_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.timestamp_title)
}
inline std::string* CTimelineEntry::_internal_mutable_timestamp_title() {
  _has_bits_[0] |= 0x00000004u;
  return timestamp_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_timestamp_title() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.timestamp_title)
  if (!_internal_has_timestamp_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return timestamp_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_timestamp_title(std::string* timestamp_title) {
  if (timestamp_title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timestamp_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.timestamp_title)
}

// optional string marker_icon = 11;
inline bool CTimelineEntry::_internal_has_marker_icon() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTimelineEntry::has_marker_icon() const {
  return _internal_has_marker_icon();
}
inline void CTimelineEntry::clear_marker_icon() {
  marker_icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CTimelineEntry::marker_icon() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.marker_icon)
  return _internal_marker_icon();
}
inline void CTimelineEntry::set_marker_icon(const std::string& value) {
  _internal_set_marker_icon(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.marker_icon)
}
inline std::string* CTimelineEntry::mutable_marker_icon() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.marker_icon)
  return _internal_mutable_marker_icon();
}
inline const std::string& CTimelineEntry::_internal_marker_icon() const {
  return marker_icon_.Get();
}
inline void CTimelineEntry::_internal_set_marker_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_marker_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  marker_icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.marker_icon)
}
inline void CTimelineEntry::set_marker_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.marker_icon)
}
inline void CTimelineEntry::set_marker_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.marker_icon)
}
inline std::string* CTimelineEntry::_internal_mutable_marker_icon() {
  _has_bits_[0] |= 0x00000008u;
  return marker_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_marker_icon() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.marker_icon)
  if (!_internal_has_marker_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return marker_icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_marker_icon(std::string* marker_icon) {
  if (marker_icon != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  marker_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.marker_icon)
}

// optional string marker_description = 13;
inline bool CTimelineEntry::_internal_has_marker_description() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTimelineEntry::has_marker_description() const {
  return _internal_has_marker_description();
}
inline void CTimelineEntry::clear_marker_description() {
  marker_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CTimelineEntry::marker_description() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.marker_description)
  return _internal_marker_description();
}
inline void CTimelineEntry::set_marker_description(const std::string& value) {
  _internal_set_marker_description(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.marker_description)
}
inline std::string* CTimelineEntry::mutable_marker_description() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.marker_description)
  return _internal_mutable_marker_description();
}
inline const std::string& CTimelineEntry::_internal_marker_description() const {
  return marker_description_.Get();
}
inline void CTimelineEntry::_internal_set_marker_description(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  marker_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_marker_description(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  marker_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.marker_description)
}
inline void CTimelineEntry::set_marker_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  marker_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.marker_description)
}
inline void CTimelineEntry::set_marker_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  marker_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.marker_description)
}
inline std::string* CTimelineEntry::_internal_mutable_marker_description() {
  _has_bits_[0] |= 0x00000010u;
  return marker_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_marker_description() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.marker_description)
  if (!_internal_has_marker_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return marker_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_marker_description(std::string* marker_description) {
  if (marker_description != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  marker_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.marker_description)
}

// optional int32 marker_priority = 14;
inline bool CTimelineEntry::_internal_has_marker_priority() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CTimelineEntry::has_marker_priority() const {
  return _internal_has_marker_priority();
}
inline void CTimelineEntry::clear_marker_priority() {
  marker_priority_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::_internal_marker_priority() const {
  return marker_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CTimelineEntry::marker_priority() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.marker_priority)
  return _internal_marker_priority();
}
inline void CTimelineEntry::_internal_set_marker_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  marker_priority_ = value;
}
inline void CTimelineEntry::set_marker_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marker_priority(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.marker_priority)
}

// optional uint32 screenshot_handle = 15;
inline bool CTimelineEntry::_internal_has_screenshot_handle() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CTimelineEntry::has_screenshot_handle() const {
  return _internal_has_screenshot_handle();
}
inline void CTimelineEntry::clear_screenshot_handle() {
  screenshot_handle_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTimelineEntry::_internal_screenshot_handle() const {
  return screenshot_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTimelineEntry::screenshot_handle() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.screenshot_handle)
  return _internal_screenshot_handle();
}
inline void CTimelineEntry::_internal_set_screenshot_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  screenshot_handle_ = value;
}
inline void CTimelineEntry::set_screenshot_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_screenshot_handle(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.screenshot_handle)
}

// optional string achievement_name = 16;
inline bool CTimelineEntry::_internal_has_achievement_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTimelineEntry::has_achievement_name() const {
  return _internal_has_achievement_name();
}
inline void CTimelineEntry::clear_achievement_name() {
  achievement_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CTimelineEntry::achievement_name() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.achievement_name)
  return _internal_achievement_name();
}
inline void CTimelineEntry::set_achievement_name(const std::string& value) {
  _internal_set_achievement_name(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.achievement_name)
}
inline std::string* CTimelineEntry::mutable_achievement_name() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.achievement_name)
  return _internal_mutable_achievement_name();
}
inline const std::string& CTimelineEntry::_internal_achievement_name() const {
  return achievement_name_.Get();
}
inline void CTimelineEntry::_internal_set_achievement_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  achievement_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_achievement_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  achievement_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.achievement_name)
}
inline void CTimelineEntry::set_achievement_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  achievement_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.achievement_name)
}
inline void CTimelineEntry::set_achievement_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  achievement_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.achievement_name)
}
inline std::string* CTimelineEntry::_internal_mutable_achievement_name() {
  _has_bits_[0] |= 0x00000020u;
  return achievement_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_achievement_name() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.achievement_name)
  if (!_internal_has_achievement_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return achievement_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_achievement_name(std::string* achievement_name) {
  if (achievement_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  achievement_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), achievement_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.achievement_name)
}

// repeated .CTimelineTag tag = 17;
inline int CTimelineEntry::_internal_tag_size() const {
  return tag_.size();
}
inline int CTimelineEntry::tag_size() const {
  return _internal_tag_size();
}
inline ::CTimelineTag* CTimelineEntry::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >*
CTimelineEntry::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:CTimelineEntry.tag)
  return &tag_;
}
inline const ::CTimelineTag& CTimelineEntry::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::CTimelineTag& CTimelineEntry::tag(int index) const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.tag)
  return _internal_tag(index);
}
inline ::CTimelineTag* CTimelineEntry::_internal_add_tag() {
  return tag_.Add();
}
inline ::CTimelineTag* CTimelineEntry::add_tag() {
  // @@protoc_insertion_point(field_add:CTimelineEntry.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTimelineTag >&
CTimelineEntry::tag() const {
  // @@protoc_insertion_point(field_list:CTimelineEntry.tag)
  return tag_;
}

// optional string phase_id = 18;
inline bool CTimelineEntry::_internal_has_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTimelineEntry::has_phase_id() const {
  return _internal_has_phase_id();
}
inline void CTimelineEntry::clear_phase_id() {
  phase_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CTimelineEntry::phase_id() const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.phase_id)
  return _internal_phase_id();
}
inline void CTimelineEntry::set_phase_id(const std::string& value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:CTimelineEntry.phase_id)
}
inline std::string* CTimelineEntry::mutable_phase_id() {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.phase_id)
  return _internal_mutable_phase_id();
}
inline const std::string& CTimelineEntry::_internal_phase_id() const {
  return phase_id_.Get();
}
inline void CTimelineEntry::_internal_set_phase_id(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CTimelineEntry::set_phase_id(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  phase_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CTimelineEntry.phase_id)
}
inline void CTimelineEntry::set_phase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CTimelineEntry.phase_id)
}
inline void CTimelineEntry::set_phase_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CTimelineEntry.phase_id)
}
inline std::string* CTimelineEntry::_internal_mutable_phase_id() {
  _has_bits_[0] |= 0x00000040u;
  return phase_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CTimelineEntry::release_phase_id() {
  // @@protoc_insertion_point(field_release:CTimelineEntry.phase_id)
  if (!_internal_has_phase_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return phase_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CTimelineEntry::set_allocated_phase_id(std::string* phase_id) {
  if (phase_id != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  phase_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phase_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CTimelineEntry.phase_id)
}

// repeated .CPhaseAttribute attributes = 19;
inline int CTimelineEntry::_internal_attributes_size() const {
  return attributes_.size();
}
inline int CTimelineEntry::attributes_size() const {
  return _internal_attributes_size();
}
inline ::CPhaseAttribute* CTimelineEntry::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:CTimelineEntry.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >*
CTimelineEntry::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:CTimelineEntry.attributes)
  return &attributes_;
}
inline const ::CPhaseAttribute& CTimelineEntry::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::CPhaseAttribute& CTimelineEntry::attributes(int index) const {
  // @@protoc_insertion_point(field_get:CTimelineEntry.attributes)
  return _internal_attributes(index);
}
inline ::CPhaseAttribute* CTimelineEntry::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::CPhaseAttribute* CTimelineEntry::add_attributes() {
  // @@protoc_insertion_point(field_add:CTimelineEntry.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPhaseAttribute >&
CTimelineEntry::attributes() const {
  // @@protoc_insertion_point(field_list:CTimelineEntry.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// CGameRecording_TimelineEntryChanged_Notification

// optional .CTimelineEntry entry = 1;
inline bool CGameRecording_TimelineEntryChanged_Notification::_internal_has_entry() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entry_ != nullptr);
  return value;
}
inline bool CGameRecording_TimelineEntryChanged_Notification::has_entry() const {
  return _internal_has_entry();
}
inline void CGameRecording_TimelineEntryChanged_Notification::clear_entry() {
  if (entry_ != nullptr) entry_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTimelineEntry& CGameRecording_TimelineEntryChanged_Notification::_internal_entry() const {
  const ::CTimelineEntry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTimelineEntry&>(
      ::_CTimelineEntry_default_instance_);
}
inline const ::CTimelineEntry& CGameRecording_TimelineEntryChanged_Notification::entry() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineEntryChanged_Notification.entry)
  return _internal_entry();
}
inline void CGameRecording_TimelineEntryChanged_Notification::unsafe_arena_set_allocated_entry(
    ::CTimelineEntry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_TimelineEntryChanged_Notification.entry)
}
inline ::CTimelineEntry* CGameRecording_TimelineEntryChanged_Notification::release_entry() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTimelineEntry* CGameRecording_TimelineEntryChanged_Notification::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:CGameRecording_TimelineEntryChanged_Notification.entry)
  _has_bits_[0] &= ~0x00000001u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::CTimelineEntry* CGameRecording_TimelineEntryChanged_Notification::_internal_mutable_entry() {
  _has_bits_[0] |= 0x00000001u;
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTimelineEntry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::CTimelineEntry* CGameRecording_TimelineEntryChanged_Notification::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_TimelineEntryChanged_Notification.entry)
  return _internal_mutable_entry();
}
inline void CGameRecording_TimelineEntryChanged_Notification::set_allocated_entry(::CTimelineEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_TimelineEntryChanged_Notification.entry)
}

// optional fixed64 game_id = 2;
inline bool CGameRecording_TimelineEntryChanged_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_TimelineEntryChanged_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_TimelineEntryChanged_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryChanged_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryChanged_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineEntryChanged_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_TimelineEntryChanged_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_TimelineEntryChanged_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineEntryChanged_Notification.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_TimelineEntryRemoved_Notification

// optional uint64 game_id = 1;
inline bool CGameRecording_TimelineEntryRemoved_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_TimelineEntryRemoved_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryRemoved_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryRemoved_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineEntryRemoved_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineEntryRemoved_Notification.game_id)
}

// optional string timeline_id = 2;
inline bool CGameRecording_TimelineEntryRemoved_Notification::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_TimelineEntryRemoved_Notification::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_TimelineEntryRemoved_Notification::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
}
inline std::string* CGameRecording_TimelineEntryRemoved_Notification::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_TimelineEntryRemoved_Notification::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
}
inline std::string* CGameRecording_TimelineEntryRemoved_Notification::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_TimelineEntryRemoved_Notification::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_TimelineEntryRemoved_Notification.timeline_id)
}

// optional uint64 entry_id = 3;
inline bool CGameRecording_TimelineEntryRemoved_Notification::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_TimelineEntryRemoved_Notification::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryRemoved_Notification::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TimelineEntryRemoved_Notification::entry_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TimelineEntryRemoved_Notification.entry_id)
  return _internal_entry_id();
}
inline void CGameRecording_TimelineEntryRemoved_Notification::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  entry_id_ = value;
}
inline void CGameRecording_TimelineEntryRemoved_Notification::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TimelineEntryRemoved_Notification.entry_id)
}

// -------------------------------------------------------------------

// CGameRecording_LowDiskSpace_Notification

// -------------------------------------------------------------------

// CGameRecording_PostGameHighlightsChanged_Notification

// optional uint64 game_id = 1;
inline bool CGameRecording_PostGameHighlightsChanged_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_PostGameHighlightsChanged_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_PostGameHighlightsChanged_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_PostGameHighlightsChanged_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_PostGameHighlightsChanged_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PostGameHighlightsChanged_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_PostGameHighlightsChanged_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_PostGameHighlightsChanged_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PostGameHighlightsChanged_Notification.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_OpenOverlayToGamePhase_Notification

// optional uint64 game_id = 1;
inline bool CGameRecording_OpenOverlayToGamePhase_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_OpenOverlayToGamePhase_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToGamePhase_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToGamePhase_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_OpenOverlayToGamePhase_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_OpenOverlayToGamePhase_Notification.game_id)
}

// optional string phase_id = 2;
inline bool CGameRecording_OpenOverlayToGamePhase_Notification::_internal_has_phase_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_OpenOverlayToGamePhase_Notification::has_phase_id() const {
  return _internal_has_phase_id();
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::clear_phase_id() {
  phase_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_OpenOverlayToGamePhase_Notification::phase_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
  return _internal_phase_id();
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_phase_id(const std::string& value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
}
inline std::string* CGameRecording_OpenOverlayToGamePhase_Notification::mutable_phase_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
  return _internal_mutable_phase_id();
}
inline const std::string& CGameRecording_OpenOverlayToGamePhase_Notification::_internal_phase_id() const {
  return phase_id_.Get();
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::_internal_set_phase_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_phase_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_phase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_phase_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
}
inline std::string* CGameRecording_OpenOverlayToGamePhase_Notification::_internal_mutable_phase_id() {
  _has_bits_[0] |= 0x00000001u;
  return phase_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_OpenOverlayToGamePhase_Notification::release_phase_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
  if (!_internal_has_phase_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phase_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_OpenOverlayToGamePhase_Notification::set_allocated_phase_id(std::string* phase_id) {
  if (phase_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phase_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phase_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_OpenOverlayToGamePhase_Notification.phase_id)
}

// -------------------------------------------------------------------

// CGameRecording_OpenOverlayToTimelineEvent_Notification

// optional uint64 game_id = 1;
inline bool CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_OpenOverlayToTimelineEvent_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToTimelineEvent_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_OpenOverlayToTimelineEvent_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_OpenOverlayToTimelineEvent_Notification.game_id)
}

// optional uint64 entry_id = 2;
inline bool CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_OpenOverlayToTimelineEvent_Notification::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_OpenOverlayToTimelineEvent_Notification::entry_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_OpenOverlayToTimelineEvent_Notification.entry_id)
  return _internal_entry_id();
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  entry_id_ = value;
}
inline void CGameRecording_OpenOverlayToTimelineEvent_Notification::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_OpenOverlayToTimelineEvent_Notification.entry_id)
}

// -------------------------------------------------------------------

// CGameRecording_PhaseListChanged_Notification

// -------------------------------------------------------------------

// CGameRecording_ClipSummary

// optional string clip_id = 1;
inline bool CGameRecording_ClipSummary::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ClipSummary::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ClipSummary::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ClipSummary::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.clip_id)
}
inline std::string* CGameRecording_ClipSummary::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipSummary.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ClipSummary::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ClipSummary::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipSummary::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipSummary.clip_id)
}
inline void CGameRecording_ClipSummary::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipSummary.clip_id)
}
inline void CGameRecording_ClipSummary::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipSummary.clip_id)
}
inline std::string* CGameRecording_ClipSummary::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipSummary::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipSummary.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipSummary::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipSummary.clip_id)
}

// optional uint64 game_id = 2;
inline bool CGameRecording_ClipSummary::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_ClipSummary::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.game_id)
  return _internal_game_id();
}
inline void CGameRecording_ClipSummary::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  game_id_ = value;
}
inline void CGameRecording_ClipSummary::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.game_id)
}

// optional uint64 duration_ms = 3;
inline bool CGameRecording_ClipSummary::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecording_ClipSummary::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecording_ClipSummary::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  duration_ms_ = value;
}
inline void CGameRecording_ClipSummary::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.duration_ms)
}

// optional uint32 date_recorded = 4;
inline bool CGameRecording_ClipSummary::_internal_has_date_recorded() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_date_recorded() const {
  return _internal_has_date_recorded();
}
inline void CGameRecording_ClipSummary::clear_date_recorded() {
  date_recorded_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_date_recorded() const {
  return date_recorded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::date_recorded() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.date_recorded)
  return _internal_date_recorded();
}
inline void CGameRecording_ClipSummary::_internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  date_recorded_ = value;
}
inline void CGameRecording_ClipSummary::set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_recorded(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.date_recorded)
}

// optional string start_timeline_id = 5;
inline bool CGameRecording_ClipSummary::_internal_has_start_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_start_timeline_id() const {
  return _internal_has_start_timeline_id();
}
inline void CGameRecording_ClipSummary::clear_start_timeline_id() {
  start_timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_ClipSummary::start_timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.start_timeline_id)
  return _internal_start_timeline_id();
}
inline void CGameRecording_ClipSummary::set_start_timeline_id(const std::string& value) {
  _internal_set_start_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.start_timeline_id)
}
inline std::string* CGameRecording_ClipSummary::mutable_start_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipSummary.start_timeline_id)
  return _internal_mutable_start_timeline_id();
}
inline const std::string& CGameRecording_ClipSummary::_internal_start_timeline_id() const {
  return start_timeline_id_.Get();
}
inline void CGameRecording_ClipSummary::_internal_set_start_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  start_timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipSummary::set_start_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  start_timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipSummary.start_timeline_id)
}
inline void CGameRecording_ClipSummary::set_start_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  start_timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipSummary.start_timeline_id)
}
inline void CGameRecording_ClipSummary::set_start_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  start_timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipSummary.start_timeline_id)
}
inline std::string* CGameRecording_ClipSummary::_internal_mutable_start_timeline_id() {
  _has_bits_[0] |= 0x00000002u;
  return start_timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipSummary::release_start_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipSummary.start_timeline_id)
  if (!_internal_has_start_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return start_timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipSummary::set_allocated_start_timeline_id(std::string* start_timeline_id) {
  if (start_timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipSummary.start_timeline_id)
}

// optional uint64 start_offset_ms = 6;
inline bool CGameRecording_ClipSummary::_internal_has_start_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_start_offset_ms() const {
  return _internal_has_start_offset_ms();
}
inline void CGameRecording_ClipSummary::clear_start_offset_ms() {
  start_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::_internal_start_offset_ms() const {
  return start_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::start_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.start_offset_ms)
  return _internal_start_offset_ms();
}
inline void CGameRecording_ClipSummary::_internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  start_offset_ms_ = value;
}
inline void CGameRecording_ClipSummary::set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.start_offset_ms)
}

// optional uint64 published_file_id = 7;
inline bool CGameRecording_ClipSummary::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CGameRecording_ClipSummary::clear_published_file_id() {
  published_file_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::_internal_published_file_id() const {
  return published_file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::published_file_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.published_file_id)
  return _internal_published_file_id();
}
inline void CGameRecording_ClipSummary::_internal_set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  published_file_id_ = value;
}
inline void CGameRecording_ClipSummary::set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.published_file_id)
}

// optional uint64 file_size = 8;
inline bool CGameRecording_ClipSummary::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_file_size() const {
  return _internal_has_file_size();
}
inline void CGameRecording_ClipSummary::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipSummary::file_size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.file_size)
  return _internal_file_size();
}
inline void CGameRecording_ClipSummary::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  file_size_ = value;
}
inline void CGameRecording_ClipSummary::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.file_size)
}

// optional string name = 9;
inline bool CGameRecording_ClipSummary::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_name() const {
  return _internal_has_name();
}
inline void CGameRecording_ClipSummary::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameRecording_ClipSummary::name() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.name)
  return _internal_name();
}
inline void CGameRecording_ClipSummary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.name)
}
inline std::string* CGameRecording_ClipSummary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipSummary.name)
  return _internal_mutable_name();
}
inline const std::string& CGameRecording_ClipSummary::_internal_name() const {
  return name_.Get();
}
inline void CGameRecording_ClipSummary::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipSummary::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipSummary.name)
}
inline void CGameRecording_ClipSummary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipSummary.name)
}
inline void CGameRecording_ClipSummary::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipSummary.name)
}
inline std::string* CGameRecording_ClipSummary::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipSummary::release_name() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipSummary.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipSummary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipSummary.name)
}

// optional uint32 date_clipped = 10;
inline bool CGameRecording_ClipSummary::_internal_has_date_clipped() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_date_clipped() const {
  return _internal_has_date_clipped();
}
inline void CGameRecording_ClipSummary::clear_date_clipped() {
  date_clipped_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_date_clipped() const {
  return date_clipped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::date_clipped() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.date_clipped)
  return _internal_date_clipped();
}
inline void CGameRecording_ClipSummary::_internal_set_date_clipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  date_clipped_ = value;
}
inline void CGameRecording_ClipSummary::set_date_clipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_clipped(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.date_clipped)
}

// optional bool temporary = 11;
inline bool CGameRecording_ClipSummary::_internal_has_temporary() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_temporary() const {
  return _internal_has_temporary();
}
inline void CGameRecording_ClipSummary::clear_temporary() {
  temporary_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CGameRecording_ClipSummary::_internal_temporary() const {
  return temporary_;
}
inline bool CGameRecording_ClipSummary::temporary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.temporary)
  return _internal_temporary();
}
inline void CGameRecording_ClipSummary::_internal_set_temporary(bool value) {
  _has_bits_[0] |= 0x00001000u;
  temporary_ = value;
}
inline void CGameRecording_ClipSummary::set_temporary(bool value) {
  _internal_set_temporary(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.temporary)
}

// optional string original_device = 12;
inline bool CGameRecording_ClipSummary::_internal_has_original_device() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_original_device() const {
  return _internal_has_original_device();
}
inline void CGameRecording_ClipSummary::clear_original_device() {
  original_device_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGameRecording_ClipSummary::original_device() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.original_device)
  return _internal_original_device();
}
inline void CGameRecording_ClipSummary::set_original_device(const std::string& value) {
  _internal_set_original_device(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.original_device)
}
inline std::string* CGameRecording_ClipSummary::mutable_original_device() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipSummary.original_device)
  return _internal_mutable_original_device();
}
inline const std::string& CGameRecording_ClipSummary::_internal_original_device() const {
  return original_device_.Get();
}
inline void CGameRecording_ClipSummary::_internal_set_original_device(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipSummary::set_original_device(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  original_device_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipSummary.original_device)
}
inline void CGameRecording_ClipSummary::set_original_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipSummary.original_device)
}
inline void CGameRecording_ClipSummary::set_original_device(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipSummary.original_device)
}
inline std::string* CGameRecording_ClipSummary::_internal_mutable_original_device() {
  _has_bits_[0] |= 0x00000008u;
  return original_device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipSummary::release_original_device() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipSummary.original_device)
  if (!_internal_has_original_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return original_device_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipSummary::set_allocated_original_device(std::string* original_device) {
  if (original_device != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  original_device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipSummary.original_device)
}

// optional uint32 original_gaming_device_type = 13;
inline bool CGameRecording_ClipSummary::_internal_has_original_gaming_device_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_original_gaming_device_type() const {
  return _internal_has_original_gaming_device_type();
}
inline void CGameRecording_ClipSummary::clear_original_gaming_device_type() {
  original_gaming_device_type_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_original_gaming_device_type() const {
  return original_gaming_device_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::original_gaming_device_type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.original_gaming_device_type)
  return _internal_original_gaming_device_type();
}
inline void CGameRecording_ClipSummary::_internal_set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  original_gaming_device_type_ = value;
}
inline void CGameRecording_ClipSummary::set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_original_gaming_device_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.original_gaming_device_type)
}

// optional uint32 date_downloaded = 14;
inline bool CGameRecording_ClipSummary::_internal_has_date_downloaded() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_date_downloaded() const {
  return _internal_has_date_downloaded();
}
inline void CGameRecording_ClipSummary::clear_date_downloaded() {
  date_downloaded_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_date_downloaded() const {
  return date_downloaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::date_downloaded() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.date_downloaded)
  return _internal_date_downloaded();
}
inline void CGameRecording_ClipSummary::_internal_set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  date_downloaded_ = value;
}
inline void CGameRecording_ClipSummary::set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_downloaded(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.date_downloaded)
}

// optional string thumbnail_url = 15;
inline bool CGameRecording_ClipSummary::_internal_has_thumbnail_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_thumbnail_url() const {
  return _internal_has_thumbnail_url();
}
inline void CGameRecording_ClipSummary::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CGameRecording_ClipSummary::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.thumbnail_url)
  return _internal_thumbnail_url();
}
inline void CGameRecording_ClipSummary::set_thumbnail_url(const std::string& value) {
  _internal_set_thumbnail_url(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.thumbnail_url)
}
inline std::string* CGameRecording_ClipSummary::mutable_thumbnail_url() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipSummary.thumbnail_url)
  return _internal_mutable_thumbnail_url();
}
inline const std::string& CGameRecording_ClipSummary::_internal_thumbnail_url() const {
  return thumbnail_url_.Get();
}
inline void CGameRecording_ClipSummary::_internal_set_thumbnail_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipSummary::set_thumbnail_url(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipSummary.thumbnail_url)
}
inline void CGameRecording_ClipSummary::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipSummary.thumbnail_url)
}
inline void CGameRecording_ClipSummary::set_thumbnail_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipSummary.thumbnail_url)
}
inline std::string* CGameRecording_ClipSummary::_internal_mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000010u;
  return thumbnail_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipSummary::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipSummary.thumbnail_url)
  if (!_internal_has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return thumbnail_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipSummary::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  thumbnail_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipSummary.thumbnail_url)
}

// optional uint32 thumbnail_width = 16;
inline bool CGameRecording_ClipSummary::_internal_has_thumbnail_width() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_thumbnail_width() const {
  return _internal_has_thumbnail_width();
}
inline void CGameRecording_ClipSummary::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_thumbnail_width() const {
  return thumbnail_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.thumbnail_width)
  return _internal_thumbnail_width();
}
inline void CGameRecording_ClipSummary::_internal_set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  thumbnail_width_ = value;
}
inline void CGameRecording_ClipSummary::set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thumbnail_width(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.thumbnail_width)
}

// optional uint32 thumbnail_height = 17;
inline bool CGameRecording_ClipSummary::_internal_has_thumbnail_height() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CGameRecording_ClipSummary::has_thumbnail_height() const {
  return _internal_has_thumbnail_height();
}
inline void CGameRecording_ClipSummary::clear_thumbnail_height() {
  thumbnail_height_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::_internal_thumbnail_height() const {
  return thumbnail_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_ClipSummary::thumbnail_height() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipSummary.thumbnail_height)
  return _internal_thumbnail_height();
}
inline void CGameRecording_ClipSummary::_internal_set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  thumbnail_height_ = value;
}
inline void CGameRecording_ClipSummary::set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thumbnail_height(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipSummary.thumbnail_height)
}

// -------------------------------------------------------------------

// CGameRecording_SaveClip_Request_Position

// optional string timeline_id = 1;
inline bool CGameRecording_SaveClip_Request_Position::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request_Position::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_SaveClip_Request_Position::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_SaveClip_Request_Position::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.Position.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_SaveClip_Request_Position::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.Position.timeline_id)
}
inline std::string* CGameRecording_SaveClip_Request_Position::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Request.Position.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_SaveClip_Request_Position::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_SaveClip_Request_Position::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_SaveClip_Request_Position::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_SaveClip_Request.Position.timeline_id)
}
inline void CGameRecording_SaveClip_Request_Position::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_SaveClip_Request.Position.timeline_id)
}
inline void CGameRecording_SaveClip_Request_Position::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_SaveClip_Request.Position.timeline_id)
}
inline std::string* CGameRecording_SaveClip_Request_Position::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_SaveClip_Request_Position::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Request.Position.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_SaveClip_Request_Position::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Request.Position.timeline_id)
}

// optional uint64 offset_ms = 2;
inline bool CGameRecording_SaveClip_Request_Position::_internal_has_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request_Position::has_offset_ms() const {
  return _internal_has_offset_ms();
}
inline void CGameRecording_SaveClip_Request_Position::clear_offset_ms() {
  offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SaveClip_Request_Position::_internal_offset_ms() const {
  return offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SaveClip_Request_Position::offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.Position.offset_ms)
  return _internal_offset_ms();
}
inline void CGameRecording_SaveClip_Request_Position::_internal_set_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ms_ = value;
}
inline void CGameRecording_SaveClip_Request_Position::set_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.Position.offset_ms)
}

// -------------------------------------------------------------------

// CGameRecording_SaveClip_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_SaveClip_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_SaveClip_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SaveClip_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SaveClip_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_SaveClip_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  game_id_ = value;
}
inline void CGameRecording_SaveClip_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.game_id)
}

// optional .CGameRecording_SaveClip_Request.Position start = 2;
inline bool CGameRecording_SaveClip_Request::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_start() const {
  return _internal_has_start();
}
inline void CGameRecording_SaveClip_Request::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CGameRecording_SaveClip_Request_Position& CGameRecording_SaveClip_Request::_internal_start() const {
  const ::CGameRecording_SaveClip_Request_Position* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_SaveClip_Request_Position&>(
      ::_CGameRecording_SaveClip_Request_Position_default_instance_);
}
inline const ::CGameRecording_SaveClip_Request_Position& CGameRecording_SaveClip_Request::start() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.start)
  return _internal_start();
}
inline void CGameRecording_SaveClip_Request::unsafe_arena_set_allocated_start(
    ::CGameRecording_SaveClip_Request_Position* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_SaveClip_Request.start)
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::release_start() {
  _has_bits_[0] &= ~0x00000004u;
  ::CGameRecording_SaveClip_Request_Position* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Request.start)
  _has_bits_[0] &= ~0x00000004u;
  ::CGameRecording_SaveClip_Request_Position* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000004u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_SaveClip_Request_Position>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::mutable_start() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Request.start)
  return _internal_mutable_start();
}
inline void CGameRecording_SaveClip_Request::set_allocated_start(::CGameRecording_SaveClip_Request_Position* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Request.start)
}

// optional .CGameRecording_SaveClip_Request.Position end = 3;
inline bool CGameRecording_SaveClip_Request::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_end() const {
  return _internal_has_end();
}
inline void CGameRecording_SaveClip_Request::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CGameRecording_SaveClip_Request_Position& CGameRecording_SaveClip_Request::_internal_end() const {
  const ::CGameRecording_SaveClip_Request_Position* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_SaveClip_Request_Position&>(
      ::_CGameRecording_SaveClip_Request_Position_default_instance_);
}
inline const ::CGameRecording_SaveClip_Request_Position& CGameRecording_SaveClip_Request::end() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.end)
  return _internal_end();
}
inline void CGameRecording_SaveClip_Request::unsafe_arena_set_allocated_end(
    ::CGameRecording_SaveClip_Request_Position* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_SaveClip_Request.end)
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::release_end() {
  _has_bits_[0] &= ~0x00000008u;
  ::CGameRecording_SaveClip_Request_Position* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Request.end)
  _has_bits_[0] &= ~0x00000008u;
  ::CGameRecording_SaveClip_Request_Position* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000008u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_SaveClip_Request_Position>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::CGameRecording_SaveClip_Request_Position* CGameRecording_SaveClip_Request::mutable_end() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Request.end)
  return _internal_mutable_end();
}
inline void CGameRecording_SaveClip_Request::set_allocated_end(::CGameRecording_SaveClip_Request_Position* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Request.end)
}

// optional string name = 4;
inline bool CGameRecording_SaveClip_Request::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_name() const {
  return _internal_has_name();
}
inline void CGameRecording_SaveClip_Request::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_SaveClip_Request::name() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.name)
  return _internal_name();
}
inline void CGameRecording_SaveClip_Request::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.name)
}
inline std::string* CGameRecording_SaveClip_Request::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Request.name)
  return _internal_mutable_name();
}
inline const std::string& CGameRecording_SaveClip_Request::_internal_name() const {
  return name_.Get();
}
inline void CGameRecording_SaveClip_Request::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_SaveClip_Request::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_SaveClip_Request.name)
}
inline void CGameRecording_SaveClip_Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_SaveClip_Request.name)
}
inline void CGameRecording_SaveClip_Request::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_SaveClip_Request.name)
}
inline std::string* CGameRecording_SaveClip_Request::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_SaveClip_Request::release_name() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_SaveClip_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Request.name)
}

// optional string src_clip_id = 5;
inline bool CGameRecording_SaveClip_Request::_internal_has_src_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_src_clip_id() const {
  return _internal_has_src_clip_id();
}
inline void CGameRecording_SaveClip_Request::clear_src_clip_id() {
  src_clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_SaveClip_Request::src_clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.src_clip_id)
  return _internal_src_clip_id();
}
inline void CGameRecording_SaveClip_Request::set_src_clip_id(const std::string& value) {
  _internal_set_src_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.src_clip_id)
}
inline std::string* CGameRecording_SaveClip_Request::mutable_src_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Request.src_clip_id)
  return _internal_mutable_src_clip_id();
}
inline const std::string& CGameRecording_SaveClip_Request::_internal_src_clip_id() const {
  return src_clip_id_.Get();
}
inline void CGameRecording_SaveClip_Request::_internal_set_src_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  src_clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_SaveClip_Request::set_src_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  src_clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_SaveClip_Request.src_clip_id)
}
inline void CGameRecording_SaveClip_Request::set_src_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  src_clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_SaveClip_Request.src_clip_id)
}
inline void CGameRecording_SaveClip_Request::set_src_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  src_clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_SaveClip_Request.src_clip_id)
}
inline std::string* CGameRecording_SaveClip_Request::_internal_mutable_src_clip_id() {
  _has_bits_[0] |= 0x00000002u;
  return src_clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_SaveClip_Request::release_src_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Request.src_clip_id)
  if (!_internal_has_src_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return src_clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_SaveClip_Request::set_allocated_src_clip_id(std::string* src_clip_id) {
  if (src_clip_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Request.src_clip_id)
}

// optional bool temporary = 6;
inline bool CGameRecording_SaveClip_Request::_internal_has_temporary() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_temporary() const {
  return _internal_has_temporary();
}
inline void CGameRecording_SaveClip_Request::clear_temporary() {
  temporary_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CGameRecording_SaveClip_Request::_internal_temporary() const {
  return temporary_;
}
inline bool CGameRecording_SaveClip_Request::temporary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.temporary)
  return _internal_temporary();
}
inline void CGameRecording_SaveClip_Request::_internal_set_temporary(bool value) {
  _has_bits_[0] |= 0x00000020u;
  temporary_ = value;
}
inline void CGameRecording_SaveClip_Request::set_temporary(bool value) {
  _internal_set_temporary(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.temporary)
}

// optional bool force_thumbnail = 7;
inline bool CGameRecording_SaveClip_Request::_internal_has_force_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_SaveClip_Request::has_force_thumbnail() const {
  return _internal_has_force_thumbnail();
}
inline void CGameRecording_SaveClip_Request::clear_force_thumbnail() {
  force_thumbnail_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CGameRecording_SaveClip_Request::_internal_force_thumbnail() const {
  return force_thumbnail_;
}
inline bool CGameRecording_SaveClip_Request::force_thumbnail() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Request.force_thumbnail)
  return _internal_force_thumbnail();
}
inline void CGameRecording_SaveClip_Request::_internal_set_force_thumbnail(bool value) {
  _has_bits_[0] |= 0x00000040u;
  force_thumbnail_ = value;
}
inline void CGameRecording_SaveClip_Request::set_force_thumbnail(bool value) {
  _internal_set_force_thumbnail(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SaveClip_Request.force_thumbnail)
}

// -------------------------------------------------------------------

// CGameRecording_SaveClip_Response

// optional .CGameRecording_ClipSummary summary = 1;
inline bool CGameRecording_SaveClip_Response::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool CGameRecording_SaveClip_Response::has_summary() const {
  return _internal_has_summary();
}
inline void CGameRecording_SaveClip_Response::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_ClipSummary& CGameRecording_SaveClip_Response::_internal_summary() const {
  const ::CGameRecording_ClipSummary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ClipSummary&>(
      ::_CGameRecording_ClipSummary_default_instance_);
}
inline const ::CGameRecording_ClipSummary& CGameRecording_SaveClip_Response::summary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SaveClip_Response.summary)
  return _internal_summary();
}
inline void CGameRecording_SaveClip_Response::unsafe_arena_set_allocated_summary(
    ::CGameRecording_ClipSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_SaveClip_Response.summary)
}
inline ::CGameRecording_ClipSummary* CGameRecording_SaveClip_Response::release_summary() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_SaveClip_Response::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:CGameRecording_SaveClip_Response.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_SaveClip_Response::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ClipSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::CGameRecording_ClipSummary* CGameRecording_SaveClip_Response::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SaveClip_Response.summary)
  return _internal_mutable_summary();
}
inline void CGameRecording_SaveClip_Response::set_allocated_summary(::CGameRecording_ClipSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SaveClip_Response.summary)
}

// -------------------------------------------------------------------

// CGameRecording_DeleteClip_Request

// optional string clip_id = 1;
inline bool CGameRecording_DeleteClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_DeleteClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_DeleteClip_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_DeleteClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_DeleteClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_DeleteClip_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_DeleteClip_Request.clip_id)
}
inline std::string* CGameRecording_DeleteClip_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_DeleteClip_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_DeleteClip_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_DeleteClip_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_DeleteClip_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_DeleteClip_Request.clip_id)
}
inline void CGameRecording_DeleteClip_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_DeleteClip_Request.clip_id)
}
inline void CGameRecording_DeleteClip_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_DeleteClip_Request.clip_id)
}
inline std::string* CGameRecording_DeleteClip_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_DeleteClip_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_DeleteClip_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_DeleteClip_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_DeleteClip_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_DeleteClip_Response

// -------------------------------------------------------------------

// CGameRecording_ExportClip_Settings

// optional int32 bitrate_kbps = 1;
inline bool CGameRecording_ExportClip_Settings::_internal_has_bitrate_kbps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Settings::has_bitrate_kbps() const {
  return _internal_has_bitrate_kbps();
}
inline void CGameRecording_ExportClip_Settings::clear_bitrate_kbps() {
  bitrate_kbps_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::_internal_bitrate_kbps() const {
  return bitrate_kbps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::bitrate_kbps() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Settings.bitrate_kbps)
  return _internal_bitrate_kbps();
}
inline void CGameRecording_ExportClip_Settings::_internal_set_bitrate_kbps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  bitrate_kbps_ = value;
}
inline void CGameRecording_ExportClip_Settings::set_bitrate_kbps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bitrate_kbps(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Settings.bitrate_kbps)
}

// optional int32 width = 2;
inline bool CGameRecording_ExportClip_Settings::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Settings::has_width() const {
  return _internal_has_width();
}
inline void CGameRecording_ExportClip_Settings::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::width() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Settings.width)
  return _internal_width();
}
inline void CGameRecording_ExportClip_Settings::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void CGameRecording_ExportClip_Settings::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Settings.width)
}

// optional int32 height = 3;
inline bool CGameRecording_ExportClip_Settings::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Settings::has_height() const {
  return _internal_has_height();
}
inline void CGameRecording_ExportClip_Settings::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::height() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Settings.height)
  return _internal_height();
}
inline void CGameRecording_ExportClip_Settings::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CGameRecording_ExportClip_Settings::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Settings.height)
}

// optional int32 frames_per_second = 4;
inline bool CGameRecording_ExportClip_Settings::_internal_has_frames_per_second() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Settings::has_frames_per_second() const {
  return _internal_has_frames_per_second();
}
inline void CGameRecording_ExportClip_Settings::clear_frames_per_second() {
  frames_per_second_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::_internal_frames_per_second() const {
  return frames_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportClip_Settings::frames_per_second() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Settings.frames_per_second)
  return _internal_frames_per_second();
}
inline void CGameRecording_ExportClip_Settings::_internal_set_frames_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  frames_per_second_ = value;
}
inline void CGameRecording_ExportClip_Settings::set_frames_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frames_per_second(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Settings.frames_per_second)
}

// optional .EExportCodec codec = 5 [default = EExportCodec_Default];
inline bool CGameRecording_ExportClip_Settings::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Settings::has_codec() const {
  return _internal_has_codec();
}
inline void CGameRecording_ExportClip_Settings::clear_codec() {
  codec_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EExportCodec CGameRecording_ExportClip_Settings::_internal_codec() const {
  return static_cast< ::EExportCodec >(codec_);
}
inline ::EExportCodec CGameRecording_ExportClip_Settings::codec() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Settings.codec)
  return _internal_codec();
}
inline void CGameRecording_ExportClip_Settings::_internal_set_codec(::EExportCodec value) {
  assert(::EExportCodec_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  codec_ = value;
}
inline void CGameRecording_ExportClip_Settings::set_codec(::EExportCodec value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Settings.codec)
}

// -------------------------------------------------------------------

// CGameRecording_ExportClip_Request

// optional string clip_id = 1;
inline bool CGameRecording_ExportClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ExportClip_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ExportClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ExportClip_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Request.clip_id)
}
inline std::string* CGameRecording_ExportClip_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClip_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ExportClip_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ExportClip_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ExportClip_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ExportClip_Request.clip_id)
}
inline void CGameRecording_ExportClip_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ExportClip_Request.clip_id)
}
inline void CGameRecording_ExportClip_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ExportClip_Request.clip_id)
}
inline std::string* CGameRecording_ExportClip_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ExportClip_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClip_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ExportClip_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClip_Request.clip_id)
}

// optional string export_mp4_path = 2;
inline bool CGameRecording_ExportClip_Request::_internal_has_export_mp4_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Request::has_export_mp4_path() const {
  return _internal_has_export_mp4_path();
}
inline void CGameRecording_ExportClip_Request::clear_export_mp4_path() {
  export_mp4_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_ExportClip_Request::export_mp4_path() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Request.export_mp4_path)
  return _internal_export_mp4_path();
}
inline void CGameRecording_ExportClip_Request::set_export_mp4_path(const std::string& value) {
  _internal_set_export_mp4_path(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Request.export_mp4_path)
}
inline std::string* CGameRecording_ExportClip_Request::mutable_export_mp4_path() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClip_Request.export_mp4_path)
  return _internal_mutable_export_mp4_path();
}
inline const std::string& CGameRecording_ExportClip_Request::_internal_export_mp4_path() const {
  return export_mp4_path_.Get();
}
inline void CGameRecording_ExportClip_Request::_internal_set_export_mp4_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  export_mp4_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ExportClip_Request::set_export_mp4_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  export_mp4_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ExportClip_Request.export_mp4_path)
}
inline void CGameRecording_ExportClip_Request::set_export_mp4_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  export_mp4_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ExportClip_Request.export_mp4_path)
}
inline void CGameRecording_ExportClip_Request::set_export_mp4_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  export_mp4_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ExportClip_Request.export_mp4_path)
}
inline std::string* CGameRecording_ExportClip_Request::_internal_mutable_export_mp4_path() {
  _has_bits_[0] |= 0x00000002u;
  return export_mp4_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ExportClip_Request::release_export_mp4_path() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClip_Request.export_mp4_path)
  if (!_internal_has_export_mp4_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return export_mp4_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ExportClip_Request::set_allocated_export_mp4_path(std::string* export_mp4_path) {
  if (export_mp4_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  export_mp4_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), export_mp4_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClip_Request.export_mp4_path)
}

// optional .CGameRecording_ExportClip_Settings settings = 3;
inline bool CGameRecording_ExportClip_Request::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CGameRecording_ExportClip_Request::has_settings() const {
  return _internal_has_settings();
}
inline void CGameRecording_ExportClip_Request::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClip_Request::_internal_settings() const {
  const ::CGameRecording_ExportClip_Settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ExportClip_Settings&>(
      ::_CGameRecording_ExportClip_Settings_default_instance_);
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClip_Request::settings() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Request.settings)
  return _internal_settings();
}
inline void CGameRecording_ExportClip_Request::unsafe_arena_set_allocated_settings(
    ::CGameRecording_ExportClip_Settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_ExportClip_Request.settings)
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClip_Request::release_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClip_Request::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClip_Request.settings)
  _has_bits_[0] &= ~0x00000004u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClip_Request::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ExportClip_Settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClip_Request::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClip_Request.settings)
  return _internal_mutable_settings();
}
inline void CGameRecording_ExportClip_Request::set_allocated_settings(::CGameRecording_ExportClip_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClip_Request.settings)
}

// optional bool use_unique_filename = 4;
inline bool CGameRecording_ExportClip_Request::_internal_has_use_unique_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_ExportClip_Request::has_use_unique_filename() const {
  return _internal_has_use_unique_filename();
}
inline void CGameRecording_ExportClip_Request::clear_use_unique_filename() {
  use_unique_filename_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CGameRecording_ExportClip_Request::_internal_use_unique_filename() const {
  return use_unique_filename_;
}
inline bool CGameRecording_ExportClip_Request::use_unique_filename() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClip_Request.use_unique_filename)
  return _internal_use_unique_filename();
}
inline void CGameRecording_ExportClip_Request::_internal_set_use_unique_filename(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_unique_filename_ = value;
}
inline void CGameRecording_ExportClip_Request::set_use_unique_filename(bool value) {
  _internal_set_use_unique_filename(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClip_Request.use_unique_filename)
}

// -------------------------------------------------------------------

// CGameRecording_ExportClip_Response

// -------------------------------------------------------------------

// CGameRecording_ExportClipPreview_Request

// optional string clip_id = 1;
inline bool CGameRecording_ExportClipPreview_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ExportClipPreview_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ExportClipPreview_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ExportClipPreview_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClipPreview_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ExportClipPreview_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClipPreview_Request.clip_id)
}
inline std::string* CGameRecording_ExportClipPreview_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClipPreview_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ExportClipPreview_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ExportClipPreview_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ExportClipPreview_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ExportClipPreview_Request.clip_id)
}
inline void CGameRecording_ExportClipPreview_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ExportClipPreview_Request.clip_id)
}
inline void CGameRecording_ExportClipPreview_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ExportClipPreview_Request.clip_id)
}
inline std::string* CGameRecording_ExportClipPreview_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ExportClipPreview_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClipPreview_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ExportClipPreview_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClipPreview_Request.clip_id)
}

// optional .CGameRecording_ExportClip_Settings settings = 2;
inline bool CGameRecording_ExportClipPreview_Request::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CGameRecording_ExportClipPreview_Request::has_settings() const {
  return _internal_has_settings();
}
inline void CGameRecording_ExportClipPreview_Request::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClipPreview_Request::_internal_settings() const {
  const ::CGameRecording_ExportClip_Settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ExportClip_Settings&>(
      ::_CGameRecording_ExportClip_Settings_default_instance_);
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClipPreview_Request::settings() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClipPreview_Request.settings)
  return _internal_settings();
}
inline void CGameRecording_ExportClipPreview_Request::unsafe_arena_set_allocated_settings(
    ::CGameRecording_ExportClip_Settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_ExportClipPreview_Request.settings)
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Request::release_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Request::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClipPreview_Request.settings)
  _has_bits_[0] &= ~0x00000002u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Request::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ExportClip_Settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Request::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClipPreview_Request.settings)
  return _internal_mutable_settings();
}
inline void CGameRecording_ExportClipPreview_Request::set_allocated_settings(::CGameRecording_ExportClip_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClipPreview_Request.settings)
}

// optional bool run_policy_checks = 3;
inline bool CGameRecording_ExportClipPreview_Request::_internal_has_run_policy_checks() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_ExportClipPreview_Request::has_run_policy_checks() const {
  return _internal_has_run_policy_checks();
}
inline void CGameRecording_ExportClipPreview_Request::clear_run_policy_checks() {
  run_policy_checks_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CGameRecording_ExportClipPreview_Request::_internal_run_policy_checks() const {
  return run_policy_checks_;
}
inline bool CGameRecording_ExportClipPreview_Request::run_policy_checks() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClipPreview_Request.run_policy_checks)
  return _internal_run_policy_checks();
}
inline void CGameRecording_ExportClipPreview_Request::_internal_set_run_policy_checks(bool value) {
  _has_bits_[0] |= 0x00000004u;
  run_policy_checks_ = value;
}
inline void CGameRecording_ExportClipPreview_Request::set_run_policy_checks(bool value) {
  _internal_set_run_policy_checks(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClipPreview_Request.run_policy_checks)
}

// -------------------------------------------------------------------

// CGameRecording_ExportClipPreview_Response

// optional uint64 estimated_size = 1;
inline bool CGameRecording_ExportClipPreview_Response::_internal_has_estimated_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ExportClipPreview_Response::has_estimated_size() const {
  return _internal_has_estimated_size();
}
inline void CGameRecording_ExportClipPreview_Response::clear_estimated_size() {
  estimated_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ExportClipPreview_Response::_internal_estimated_size() const {
  return estimated_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ExportClipPreview_Response::estimated_size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClipPreview_Response.estimated_size)
  return _internal_estimated_size();
}
inline void CGameRecording_ExportClipPreview_Response::_internal_set_estimated_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  estimated_size_ = value;
}
inline void CGameRecording_ExportClipPreview_Response::set_estimated_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_estimated_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportClipPreview_Response.estimated_size)
}

// optional .CGameRecording_ExportClip_Settings settings = 2;
inline bool CGameRecording_ExportClipPreview_Response::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CGameRecording_ExportClipPreview_Response::has_settings() const {
  return _internal_has_settings();
}
inline void CGameRecording_ExportClipPreview_Response::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClipPreview_Response::_internal_settings() const {
  const ::CGameRecording_ExportClip_Settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ExportClip_Settings&>(
      ::_CGameRecording_ExportClip_Settings_default_instance_);
}
inline const ::CGameRecording_ExportClip_Settings& CGameRecording_ExportClipPreview_Response::settings() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportClipPreview_Response.settings)
  return _internal_settings();
}
inline void CGameRecording_ExportClipPreview_Response::unsafe_arena_set_allocated_settings(
    ::CGameRecording_ExportClip_Settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_ExportClipPreview_Response.settings)
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Response::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Response::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportClipPreview_Response.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ExportClip_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Response::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ExportClip_Settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::CGameRecording_ExportClip_Settings* CGameRecording_ExportClipPreview_Response::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportClipPreview_Response.settings)
  return _internal_mutable_settings();
}
inline void CGameRecording_ExportClipPreview_Response::set_allocated_settings(::CGameRecording_ExportClip_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportClipPreview_Response.settings)
}

// -------------------------------------------------------------------

// CGameRecording_TakeScreenshot_Request

// optional fixed64 game_id = 1;
inline bool CGameRecording_TakeScreenshot_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_TakeScreenshot_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_TakeScreenshot_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TakeScreenshot_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_TakeScreenshot_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_TakeScreenshot_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TakeScreenshot_Request.game_id)
}

// optional string timeline_id = 2;
inline bool CGameRecording_TakeScreenshot_Request::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_TakeScreenshot_Request::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_TakeScreenshot_Request::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_TakeScreenshot_Request::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TakeScreenshot_Request.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_TakeScreenshot_Request::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TakeScreenshot_Request.timeline_id)
}
inline std::string* CGameRecording_TakeScreenshot_Request::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_TakeScreenshot_Request.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_TakeScreenshot_Request::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_TakeScreenshot_Request::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_TakeScreenshot_Request::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_TakeScreenshot_Request.timeline_id)
}
inline void CGameRecording_TakeScreenshot_Request::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_TakeScreenshot_Request.timeline_id)
}
inline void CGameRecording_TakeScreenshot_Request::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_TakeScreenshot_Request.timeline_id)
}
inline std::string* CGameRecording_TakeScreenshot_Request::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_TakeScreenshot_Request::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_TakeScreenshot_Request.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_TakeScreenshot_Request::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_TakeScreenshot_Request.timeline_id)
}

// optional uint64 timeline_offset_ms = 3;
inline bool CGameRecording_TakeScreenshot_Request::_internal_has_timeline_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_TakeScreenshot_Request::has_timeline_offset_ms() const {
  return _internal_has_timeline_offset_ms();
}
inline void CGameRecording_TakeScreenshot_Request::clear_timeline_offset_ms() {
  timeline_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Request::_internal_timeline_offset_ms() const {
  return timeline_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Request::timeline_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TakeScreenshot_Request.timeline_offset_ms)
  return _internal_timeline_offset_ms();
}
inline void CGameRecording_TakeScreenshot_Request::_internal_set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timeline_offset_ms_ = value;
}
inline void CGameRecording_TakeScreenshot_Request::set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeline_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TakeScreenshot_Request.timeline_offset_ms)
}

// -------------------------------------------------------------------

// CGameRecording_TakeScreenshot_Response

// optional fixed64 screenshot_id = 1;
inline bool CGameRecording_TakeScreenshot_Response::_internal_has_screenshot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_TakeScreenshot_Response::has_screenshot_id() const {
  return _internal_has_screenshot_id();
}
inline void CGameRecording_TakeScreenshot_Response::clear_screenshot_id() {
  screenshot_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Response::_internal_screenshot_id() const {
  return screenshot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_TakeScreenshot_Response::screenshot_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_TakeScreenshot_Response.screenshot_id)
  return _internal_screenshot_id();
}
inline void CGameRecording_TakeScreenshot_Response::_internal_set_screenshot_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  screenshot_id_ = value;
}
inline void CGameRecording_TakeScreenshot_Response::set_screenshot_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_screenshot_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_TakeScreenshot_Response.screenshot_id)
}

// -------------------------------------------------------------------

// CGameRecording_UploadClipToSteam_Request

// optional string clip_id = 1;
inline bool CGameRecording_UploadClipToSteam_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UploadClipToSteam_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_UploadClipToSteam_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadClipToSteam_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_UploadClipToSteam_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadClipToSteam_Request.clip_id)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UploadClipToSteam_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_UploadClipToSteam_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UploadClipToSteam_Request.clip_id)
}
inline void CGameRecording_UploadClipToSteam_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UploadClipToSteam_Request.clip_id)
}
inline void CGameRecording_UploadClipToSteam_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UploadClipToSteam_Request.clip_id)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UploadClipToSteam_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UploadClipToSteam_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UploadClipToSteam_Request.clip_id)
}

// optional string title = 2;
inline bool CGameRecording_UploadClipToSteam_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_UploadClipToSteam_Request::has_title() const {
  return _internal_has_title();
}
inline void CGameRecording_UploadClipToSteam_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::title() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadClipToSteam_Request.title)
  return _internal_title();
}
inline void CGameRecording_UploadClipToSteam_Request::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadClipToSteam_Request.title)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UploadClipToSteam_Request.title)
  return _internal_mutable_title();
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::_internal_title() const {
  return title_.Get();
}
inline void CGameRecording_UploadClipToSteam_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UploadClipToSteam_Request.title)
}
inline void CGameRecording_UploadClipToSteam_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UploadClipToSteam_Request.title)
}
inline void CGameRecording_UploadClipToSteam_Request::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UploadClipToSteam_Request.title)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UploadClipToSteam_Request::release_title() {
  // @@protoc_insertion_point(field_release:CGameRecording_UploadClipToSteam_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UploadClipToSteam_Request.title)
}

// optional string desc = 3;
inline bool CGameRecording_UploadClipToSteam_Request::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_UploadClipToSteam_Request::has_desc() const {
  return _internal_has_desc();
}
inline void CGameRecording_UploadClipToSteam_Request::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::desc() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadClipToSteam_Request.desc)
  return _internal_desc();
}
inline void CGameRecording_UploadClipToSteam_Request::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadClipToSteam_Request.desc)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UploadClipToSteam_Request.desc)
  return _internal_mutable_desc();
}
inline const std::string& CGameRecording_UploadClipToSteam_Request::_internal_desc() const {
  return desc_.Get();
}
inline void CGameRecording_UploadClipToSteam_Request::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UploadClipToSteam_Request.desc)
}
inline void CGameRecording_UploadClipToSteam_Request::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UploadClipToSteam_Request.desc)
}
inline void CGameRecording_UploadClipToSteam_Request::set_desc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UploadClipToSteam_Request.desc)
}
inline std::string* CGameRecording_UploadClipToSteam_Request::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000004u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UploadClipToSteam_Request::release_desc() {
  // @@protoc_insertion_point(field_release:CGameRecording_UploadClipToSteam_Request.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UploadClipToSteam_Request::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UploadClipToSteam_Request.desc)
}

// optional int32 visibility = 4;
inline bool CGameRecording_UploadClipToSteam_Request::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_UploadClipToSteam_Request::has_visibility() const {
  return _internal_has_visibility();
}
inline void CGameRecording_UploadClipToSteam_Request::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_UploadClipToSteam_Request::_internal_visibility() const {
  return visibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_UploadClipToSteam_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadClipToSteam_Request.visibility)
  return _internal_visibility();
}
inline void CGameRecording_UploadClipToSteam_Request::_internal_set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  visibility_ = value;
}
inline void CGameRecording_UploadClipToSteam_Request::set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadClipToSteam_Request.visibility)
}

// -------------------------------------------------------------------

// CGameRecording_UploadClipToSteam_Response

// optional .CGameRecording_ClipSummary summary = 1;
inline bool CGameRecording_UploadClipToSteam_Response::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool CGameRecording_UploadClipToSteam_Response::has_summary() const {
  return _internal_has_summary();
}
inline void CGameRecording_UploadClipToSteam_Response::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_ClipSummary& CGameRecording_UploadClipToSteam_Response::_internal_summary() const {
  const ::CGameRecording_ClipSummary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ClipSummary&>(
      ::_CGameRecording_ClipSummary_default_instance_);
}
inline const ::CGameRecording_ClipSummary& CGameRecording_UploadClipToSteam_Response::summary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadClipToSteam_Response.summary)
  return _internal_summary();
}
inline void CGameRecording_UploadClipToSteam_Response::unsafe_arena_set_allocated_summary(
    ::CGameRecording_ClipSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_UploadClipToSteam_Response.summary)
}
inline ::CGameRecording_ClipSummary* CGameRecording_UploadClipToSteam_Response::release_summary() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_UploadClipToSteam_Response::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:CGameRecording_UploadClipToSteam_Response.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_UploadClipToSteam_Response::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ClipSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::CGameRecording_ClipSummary* CGameRecording_UploadClipToSteam_Response::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UploadClipToSteam_Response.summary)
  return _internal_mutable_summary();
}
inline void CGameRecording_UploadClipToSteam_Response::set_allocated_summary(::CGameRecording_ClipSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UploadClipToSteam_Response.summary)
}

// -------------------------------------------------------------------

// CGameRecording_ZipClip_Request

// optional string clip_id = 1;
inline bool CGameRecording_ZipClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ZipClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ZipClip_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ZipClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ZipClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ZipClip_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ZipClip_Request.clip_id)
}
inline std::string* CGameRecording_ZipClip_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ZipClip_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ZipClip_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ZipClip_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ZipClip_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ZipClip_Request.clip_id)
}
inline void CGameRecording_ZipClip_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ZipClip_Request.clip_id)
}
inline void CGameRecording_ZipClip_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ZipClip_Request.clip_id)
}
inline std::string* CGameRecording_ZipClip_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ZipClip_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ZipClip_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ZipClip_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ZipClip_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_ZipClip_Response

// optional string zip_path = 1;
inline bool CGameRecording_ZipClip_Response::_internal_has_zip_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ZipClip_Response::has_zip_path() const {
  return _internal_has_zip_path();
}
inline void CGameRecording_ZipClip_Response::clear_zip_path() {
  zip_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ZipClip_Response::zip_path() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ZipClip_Response.zip_path)
  return _internal_zip_path();
}
inline void CGameRecording_ZipClip_Response::set_zip_path(const std::string& value) {
  _internal_set_zip_path(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ZipClip_Response.zip_path)
}
inline std::string* CGameRecording_ZipClip_Response::mutable_zip_path() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ZipClip_Response.zip_path)
  return _internal_mutable_zip_path();
}
inline const std::string& CGameRecording_ZipClip_Response::_internal_zip_path() const {
  return zip_path_.Get();
}
inline void CGameRecording_ZipClip_Response::_internal_set_zip_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  zip_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ZipClip_Response::set_zip_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  zip_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ZipClip_Response.zip_path)
}
inline void CGameRecording_ZipClip_Response::set_zip_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  zip_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ZipClip_Response.zip_path)
}
inline void CGameRecording_ZipClip_Response::set_zip_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  zip_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ZipClip_Response.zip_path)
}
inline std::string* CGameRecording_ZipClip_Response::_internal_mutable_zip_path() {
  _has_bits_[0] |= 0x00000001u;
  return zip_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ZipClip_Response::release_zip_path() {
  // @@protoc_insertion_point(field_release:CGameRecording_ZipClip_Response.zip_path)
  if (!_internal_has_zip_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return zip_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ZipClip_Response::set_allocated_zip_path(std::string* zip_path) {
  if (zip_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  zip_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ZipClip_Response.zip_path)
}

// -------------------------------------------------------------------

// CGameRecording_GetClips_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_GetClips_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetClips_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetClips_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetClips_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetClips_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetClips_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetClips_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetClips_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetClips_Request.game_id)
}

// optional uint32 created_after = 2;
inline bool CGameRecording_GetClips_Request::_internal_has_created_after() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetClips_Request::has_created_after() const {
  return _internal_has_created_after();
}
inline void CGameRecording_GetClips_Request::clear_created_after() {
  created_after_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetClips_Request::_internal_created_after() const {
  return created_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetClips_Request::created_after() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetClips_Request.created_after)
  return _internal_created_after();
}
inline void CGameRecording_GetClips_Request::_internal_set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  created_after_ = value;
}
inline void CGameRecording_GetClips_Request::set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_created_after(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetClips_Request.created_after)
}

// optional bool include_temporary = 3;
inline bool CGameRecording_GetClips_Request::_internal_has_include_temporary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_GetClips_Request::has_include_temporary() const {
  return _internal_has_include_temporary();
}
inline void CGameRecording_GetClips_Request::clear_include_temporary() {
  include_temporary_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CGameRecording_GetClips_Request::_internal_include_temporary() const {
  return include_temporary_;
}
inline bool CGameRecording_GetClips_Request::include_temporary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetClips_Request.include_temporary)
  return _internal_include_temporary();
}
inline void CGameRecording_GetClips_Request::_internal_set_include_temporary(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_temporary_ = value;
}
inline void CGameRecording_GetClips_Request::set_include_temporary(bool value) {
  _internal_set_include_temporary(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetClips_Request.include_temporary)
}

// -------------------------------------------------------------------

// CGameRecording_GetClips_Response

// repeated .CGameRecording_ClipSummary clip = 1;
inline int CGameRecording_GetClips_Response::_internal_clip_size() const {
  return clip_.size();
}
inline int CGameRecording_GetClips_Response::clip_size() const {
  return _internal_clip_size();
}
inline void CGameRecording_GetClips_Response::clear_clip() {
  clip_.Clear();
}
inline ::CGameRecording_ClipSummary* CGameRecording_GetClips_Response::mutable_clip(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetClips_Response.clip)
  return clip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_ClipSummary >*
CGameRecording_GetClips_Response::mutable_clip() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetClips_Response.clip)
  return &clip_;
}
inline const ::CGameRecording_ClipSummary& CGameRecording_GetClips_Response::_internal_clip(int index) const {
  return clip_.Get(index);
}
inline const ::CGameRecording_ClipSummary& CGameRecording_GetClips_Response::clip(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetClips_Response.clip)
  return _internal_clip(index);
}
inline ::CGameRecording_ClipSummary* CGameRecording_GetClips_Response::_internal_add_clip() {
  return clip_.Add();
}
inline ::CGameRecording_ClipSummary* CGameRecording_GetClips_Response::add_clip() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetClips_Response.clip)
  return _internal_add_clip();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_ClipSummary >&
CGameRecording_GetClips_Response::clip() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetClips_Response.clip)
  return clip_;
}

// -------------------------------------------------------------------

// CGameRecording_GetAndTrimPostGameHighlights_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetAndTrimPostGameHighlights_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetAndTrimPostGameHighlights_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAndTrimPostGameHighlights_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAndTrimPostGameHighlights_Request.game_id)
}

// optional uint32 created_after = 2;
inline bool CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_has_created_after() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetAndTrimPostGameHighlights_Request::has_created_after() const {
  return _internal_has_created_after();
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::clear_created_after() {
  created_after_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_created_after() const {
  return created_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetAndTrimPostGameHighlights_Request::created_after() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAndTrimPostGameHighlights_Request.created_after)
  return _internal_created_after();
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::_internal_set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  created_after_ = value;
}
inline void CGameRecording_GetAndTrimPostGameHighlights_Request::set_created_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_created_after(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetAndTrimPostGameHighlights_Request.created_after)
}

// -------------------------------------------------------------------

// CGameRecording_GetAndTrimPostGameHighlights_Response

// repeated .CGameRecordingTimelineEvent events = 1;
inline int CGameRecording_GetAndTrimPostGameHighlights_Response::_internal_events_size() const {
  return events_.size();
}
inline int CGameRecording_GetAndTrimPostGameHighlights_Response::events_size() const {
  return _internal_events_size();
}
inline ::CGameRecordingTimelineEvent* CGameRecording_GetAndTrimPostGameHighlights_Response::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetAndTrimPostGameHighlights_Response.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >*
CGameRecording_GetAndTrimPostGameHighlights_Response::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetAndTrimPostGameHighlights_Response.events)
  return &events_;
}
inline const ::CGameRecordingTimelineEvent& CGameRecording_GetAndTrimPostGameHighlights_Response::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::CGameRecordingTimelineEvent& CGameRecording_GetAndTrimPostGameHighlights_Response::events(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetAndTrimPostGameHighlights_Response.events)
  return _internal_events(index);
}
inline ::CGameRecordingTimelineEvent* CGameRecording_GetAndTrimPostGameHighlights_Response::_internal_add_events() {
  return events_.Add();
}
inline ::CGameRecordingTimelineEvent* CGameRecording_GetAndTrimPostGameHighlights_Response::add_events() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetAndTrimPostGameHighlights_Response.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >&
CGameRecording_GetAndTrimPostGameHighlights_Response::events() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetAndTrimPostGameHighlights_Response.events)
  return events_;
}

// -------------------------------------------------------------------

// CGameRecording_UserAddTimelineEntry_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_UserAddTimelineEntry_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_UserAddTimelineEntry_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_UserAddTimelineEntry_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserAddTimelineEntry_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserAddTimelineEntry_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserAddTimelineEntry_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_UserAddTimelineEntry_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserAddTimelineEntry_Request.game_id)
}

// optional .CTimelineEntry entry = 2;
inline bool CGameRecording_UserAddTimelineEntry_Request::_internal_has_entry() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || entry_ != nullptr);
  return value;
}
inline bool CGameRecording_UserAddTimelineEntry_Request::has_entry() const {
  return _internal_has_entry();
}
inline void CGameRecording_UserAddTimelineEntry_Request::clear_entry() {
  if (entry_ != nullptr) entry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CTimelineEntry& CGameRecording_UserAddTimelineEntry_Request::_internal_entry() const {
  const ::CTimelineEntry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTimelineEntry&>(
      ::_CTimelineEntry_default_instance_);
}
inline const ::CTimelineEntry& CGameRecording_UserAddTimelineEntry_Request::entry() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserAddTimelineEntry_Request.entry)
  return _internal_entry();
}
inline void CGameRecording_UserAddTimelineEntry_Request::unsafe_arena_set_allocated_entry(
    ::CTimelineEntry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_UserAddTimelineEntry_Request.entry)
}
inline ::CTimelineEntry* CGameRecording_UserAddTimelineEntry_Request::release_entry() {
  _has_bits_[0] &= ~0x00000002u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTimelineEntry* CGameRecording_UserAddTimelineEntry_Request::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserAddTimelineEntry_Request.entry)
  _has_bits_[0] &= ~0x00000002u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::CTimelineEntry* CGameRecording_UserAddTimelineEntry_Request::_internal_mutable_entry() {
  _has_bits_[0] |= 0x00000002u;
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTimelineEntry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::CTimelineEntry* CGameRecording_UserAddTimelineEntry_Request::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserAddTimelineEntry_Request.entry)
  return _internal_mutable_entry();
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_allocated_entry(::CTimelineEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserAddTimelineEntry_Request.entry)
}

// optional string clip_id = 3;
inline bool CGameRecording_UserAddTimelineEntry_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UserAddTimelineEntry_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_UserAddTimelineEntry_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_UserAddTimelineEntry_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserAddTimelineEntry_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserAddTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserAddTimelineEntry_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserAddTimelineEntry_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_UserAddTimelineEntry_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_UserAddTimelineEntry_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UserAddTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UserAddTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UserAddTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserAddTimelineEntry_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UserAddTimelineEntry_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserAddTimelineEntry_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UserAddTimelineEntry_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserAddTimelineEntry_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_UserAddTimelineEntry_Response

// optional uint64 entry_id = 1;
inline bool CGameRecording_UserAddTimelineEntry_Response::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UserAddTimelineEntry_Response::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CGameRecording_UserAddTimelineEntry_Response::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserAddTimelineEntry_Response::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserAddTimelineEntry_Response::entry_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserAddTimelineEntry_Response.entry_id)
  return _internal_entry_id();
}
inline void CGameRecording_UserAddTimelineEntry_Response::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_ = value;
}
inline void CGameRecording_UserAddTimelineEntry_Response::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserAddTimelineEntry_Response.entry_id)
}

// -------------------------------------------------------------------

// CGameRecording_UserUpdateTimelineEntry_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_UserUpdateTimelineEntry_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_UserUpdateTimelineEntry_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserUpdateTimelineEntry_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserUpdateTimelineEntry_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserUpdateTimelineEntry_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserUpdateTimelineEntry_Request.game_id)
}

// optional .CTimelineEntry entry = 2;
inline bool CGameRecording_UserUpdateTimelineEntry_Request::_internal_has_entry() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || entry_ != nullptr);
  return value;
}
inline bool CGameRecording_UserUpdateTimelineEntry_Request::has_entry() const {
  return _internal_has_entry();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::clear_entry() {
  if (entry_ != nullptr) entry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CTimelineEntry& CGameRecording_UserUpdateTimelineEntry_Request::_internal_entry() const {
  const ::CTimelineEntry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTimelineEntry&>(
      ::_CTimelineEntry_default_instance_);
}
inline const ::CTimelineEntry& CGameRecording_UserUpdateTimelineEntry_Request::entry() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserUpdateTimelineEntry_Request.entry)
  return _internal_entry();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::unsafe_arena_set_allocated_entry(
    ::CTimelineEntry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_UserUpdateTimelineEntry_Request.entry)
}
inline ::CTimelineEntry* CGameRecording_UserUpdateTimelineEntry_Request::release_entry() {
  _has_bits_[0] &= ~0x00000002u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTimelineEntry* CGameRecording_UserUpdateTimelineEntry_Request::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserUpdateTimelineEntry_Request.entry)
  _has_bits_[0] &= ~0x00000002u;
  ::CTimelineEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::CTimelineEntry* CGameRecording_UserUpdateTimelineEntry_Request::_internal_mutable_entry() {
  _has_bits_[0] |= 0x00000002u;
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTimelineEntry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::CTimelineEntry* CGameRecording_UserUpdateTimelineEntry_Request::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserUpdateTimelineEntry_Request.entry)
  return _internal_mutable_entry();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_allocated_entry(::CTimelineEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserUpdateTimelineEntry_Request.entry)
}

// optional string clip_id = 3;
inline bool CGameRecording_UserUpdateTimelineEntry_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UserUpdateTimelineEntry_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_UserUpdateTimelineEntry_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserUpdateTimelineEntry_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_UserUpdateTimelineEntry_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserUpdateTimelineEntry_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UserUpdateTimelineEntry_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UserUpdateTimelineEntry_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserUpdateTimelineEntry_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_UserUpdateTimelineEntry_Response

// -------------------------------------------------------------------

// CGameRecording_UserRemoveTimelineEntry_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_UserRemoveTimelineEntry_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_UserRemoveTimelineEntry_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserRemoveTimelineEntry_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserRemoveTimelineEntry_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserRemoveTimelineEntry_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserRemoveTimelineEntry_Request.game_id)
}

// optional string timeline_id = 2;
inline bool CGameRecording_UserRemoveTimelineEntry_Request::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UserRemoveTimelineEntry_Request::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_UserRemoveTimelineEntry_Request::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_UserRemoveTimelineEntry_Request::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserRemoveTimelineEntry_Request.timeline_id)
}

// optional uint64 entry_id = 3;
inline bool CGameRecording_UserRemoveTimelineEntry_Request::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_UserRemoveTimelineEntry_Request::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserRemoveTimelineEntry_Request::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_UserRemoveTimelineEntry_Request::entry_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserRemoveTimelineEntry_Request.entry_id)
  return _internal_entry_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  entry_id_ = value;
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserRemoveTimelineEntry_Request.entry_id)
}

// optional string clip_id = 4;
inline bool CGameRecording_UserRemoveTimelineEntry_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_UserRemoveTimelineEntry_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_UserRemoveTimelineEntry_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_UserRemoveTimelineEntry_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000002u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UserRemoveTimelineEntry_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UserRemoveTimelineEntry_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UserRemoveTimelineEntry_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_UserRemoveTimelineEntry_Response

// -------------------------------------------------------------------

// CGameRecording_ManuallyDeleteRecordingsForApps_Request

// repeated uint64 game_ids = 1;
inline int CGameRecording_ManuallyDeleteRecordingsForApps_Request::_internal_game_ids_size() const {
  return game_ids_.size();
}
inline int CGameRecording_ManuallyDeleteRecordingsForApps_Request::game_ids_size() const {
  return _internal_game_ids_size();
}
inline void CGameRecording_ManuallyDeleteRecordingsForApps_Request::clear_game_ids() {
  game_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ManuallyDeleteRecordingsForApps_Request::_internal_game_ids(int index) const {
  return game_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ManuallyDeleteRecordingsForApps_Request::game_ids(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_ManuallyDeleteRecordingsForApps_Request.game_ids)
  return _internal_game_ids(index);
}
inline void CGameRecording_ManuallyDeleteRecordingsForApps_Request::set_game_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  game_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameRecording_ManuallyDeleteRecordingsForApps_Request.game_ids)
}
inline void CGameRecording_ManuallyDeleteRecordingsForApps_Request::_internal_add_game_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  game_ids_.Add(value);
}
inline void CGameRecording_ManuallyDeleteRecordingsForApps_Request::add_game_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_game_ids(value);
  // @@protoc_insertion_point(field_add:CGameRecording_ManuallyDeleteRecordingsForApps_Request.game_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CGameRecording_ManuallyDeleteRecordingsForApps_Request::_internal_game_ids() const {
  return game_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CGameRecording_ManuallyDeleteRecordingsForApps_Request::game_ids() const {
  // @@protoc_insertion_point(field_list:CGameRecording_ManuallyDeleteRecordingsForApps_Request.game_ids)
  return _internal_game_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CGameRecording_ManuallyDeleteRecordingsForApps_Request::_internal_mutable_game_ids() {
  return &game_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CGameRecording_ManuallyDeleteRecordingsForApps_Request::mutable_game_ids() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_ManuallyDeleteRecordingsForApps_Request.game_ids)
  return _internal_mutable_game_ids();
}

// -------------------------------------------------------------------

// CGameRecording_ManuallyDeleteRecordingsForApps_Response

// -------------------------------------------------------------------

// CGameRecording_GetTotalDiskSpaceUsage_Request

// optional string folder_path = 1;
inline bool CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_has_folder_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTotalDiskSpaceUsage_Request::has_folder_path() const {
  return _internal_has_folder_path();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::clear_folder_path() {
  folder_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_GetTotalDiskSpaceUsage_Request::folder_path() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
  return _internal_folder_path();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_folder_path(const std::string& value) {
  _internal_set_folder_path(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
}
inline std::string* CGameRecording_GetTotalDiskSpaceUsage_Request::mutable_folder_path() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
  return _internal_mutable_folder_path();
}
inline const std::string& CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_folder_path() const {
  return folder_path_.Get();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_set_folder_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  folder_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_folder_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  folder_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_folder_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  folder_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_folder_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  folder_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
}
inline std::string* CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_mutable_folder_path() {
  _has_bits_[0] |= 0x00000001u;
  return folder_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetTotalDiskSpaceUsage_Request::release_folder_path() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
  if (!_internal_has_folder_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return folder_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_allocated_folder_path(std::string* folder_path) {
  if (folder_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  folder_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetTotalDiskSpaceUsage_Request.folder_path)
}

// optional .EDiskSpaceType type = 2 [default = eDiskSpaceType_Recording];
inline bool CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetTotalDiskSpaceUsage_Request::has_type() const {
  return _internal_has_type();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EDiskSpaceType CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_type() const {
  return static_cast< ::EDiskSpaceType >(type_);
}
inline ::EDiskSpaceType CGameRecording_GetTotalDiskSpaceUsage_Request::type() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTotalDiskSpaceUsage_Request.type)
  return _internal_type();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::_internal_set_type(::EDiskSpaceType value) {
  assert(::EDiskSpaceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Request::set_type(::EDiskSpaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTotalDiskSpaceUsage_Request.type)
}

// -------------------------------------------------------------------

// CGameRecording_GetTotalDiskSpaceUsage_Response

// optional uint64 size = 1;
inline bool CGameRecording_GetTotalDiskSpaceUsage_Response::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetTotalDiskSpaceUsage_Response::has_size() const {
  return _internal_has_size();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Response::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTotalDiskSpaceUsage_Response::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetTotalDiskSpaceUsage_Response::size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetTotalDiskSpaceUsage_Response.size)
  return _internal_size();
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Response::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void CGameRecording_GetTotalDiskSpaceUsage_Response::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetTotalDiskSpaceUsage_Response.size)
}

// -------------------------------------------------------------------

// CGameRecording_GetThumbnails_Request

// optional string recording_id = 1;
inline bool CGameRecording_GetThumbnails_Request::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CGameRecording_GetThumbnails_Request::clear_recording_id() {
  recording_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_GetThumbnails_Request::recording_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.recording_id)
  return _internal_recording_id();
}
inline void CGameRecording_GetThumbnails_Request::set_recording_id(const std::string& value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.recording_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::mutable_recording_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetThumbnails_Request.recording_id)
  return _internal_mutable_recording_id();
}
inline const std::string& CGameRecording_GetThumbnails_Request::_internal_recording_id() const {
  return recording_id_.Get();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_recording_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_recording_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetThumbnails_Request.recording_id)
}
inline void CGameRecording_GetThumbnails_Request::set_recording_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetThumbnails_Request.recording_id)
}
inline void CGameRecording_GetThumbnails_Request::set_recording_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetThumbnails_Request.recording_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::_internal_mutable_recording_id() {
  _has_bits_[0] |= 0x00000001u;
  return recording_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetThumbnails_Request::release_recording_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetThumbnails_Request.recording_id)
  if (!_internal_has_recording_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return recording_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_allocated_recording_id(std::string* recording_id) {
  if (recording_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recording_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recording_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetThumbnails_Request.recording_id)
}

// optional string clip_id = 3;
inline bool CGameRecording_GetThumbnails_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_GetThumbnails_Request::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_GetThumbnails_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_GetThumbnails_Request::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.clip_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetThumbnails_Request.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_GetThumbnails_Request::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetThumbnails_Request.clip_id)
}
inline void CGameRecording_GetThumbnails_Request::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetThumbnails_Request.clip_id)
}
inline void CGameRecording_GetThumbnails_Request::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetThumbnails_Request.clip_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000002u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetThumbnails_Request::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetThumbnails_Request.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetThumbnails_Request.clip_id)
}

// optional string timeline_id = 7;
inline bool CGameRecording_GetThumbnails_Request::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecording_GetThumbnails_Request::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameRecording_GetThumbnails_Request::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecording_GetThumbnails_Request::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.timeline_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetThumbnails_Request.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecording_GetThumbnails_Request::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetThumbnails_Request.timeline_id)
}
inline void CGameRecording_GetThumbnails_Request::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetThumbnails_Request.timeline_id)
}
inline void CGameRecording_GetThumbnails_Request::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetThumbnails_Request.timeline_id)
}
inline std::string* CGameRecording_GetThumbnails_Request::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000004u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetThumbnails_Request::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetThumbnails_Request.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetThumbnails_Request::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetThumbnails_Request.timeline_id)
}

// repeated int64 start_offset_us = 4;
inline int CGameRecording_GetThumbnails_Request::_internal_start_offset_us_size() const {
  return start_offset_us_.size();
}
inline int CGameRecording_GetThumbnails_Request::start_offset_us_size() const {
  return _internal_start_offset_us_size();
}
inline void CGameRecording_GetThumbnails_Request::clear_start_offset_us() {
  start_offset_us_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CGameRecording_GetThumbnails_Request::_internal_start_offset_us(int index) const {
  return start_offset_us_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CGameRecording_GetThumbnails_Request::start_offset_us(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.start_offset_us)
  return _internal_start_offset_us(index);
}
inline void CGameRecording_GetThumbnails_Request::set_start_offset_us(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  start_offset_us_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.start_offset_us)
}
inline void CGameRecording_GetThumbnails_Request::_internal_add_start_offset_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  start_offset_us_.Add(value);
}
inline void CGameRecording_GetThumbnails_Request::add_start_offset_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_start_offset_us(value);
  // @@protoc_insertion_point(field_add:CGameRecording_GetThumbnails_Request.start_offset_us)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CGameRecording_GetThumbnails_Request::_internal_start_offset_us() const {
  return start_offset_us_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CGameRecording_GetThumbnails_Request::start_offset_us() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetThumbnails_Request.start_offset_us)
  return _internal_start_offset_us();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CGameRecording_GetThumbnails_Request::_internal_mutable_start_offset_us() {
  return &start_offset_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CGameRecording_GetThumbnails_Request::mutable_start_offset_us() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetThumbnails_Request.start_offset_us)
  return _internal_mutable_start_offset_us();
}

// optional uint32 major_axis = 5 [default = 512];
inline bool CGameRecording_GetThumbnails_Request::_internal_has_major_axis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_major_axis() const {
  return _internal_has_major_axis();
}
inline void CGameRecording_GetThumbnails_Request::clear_major_axis() {
  major_axis_ = 512u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Request::_internal_major_axis() const {
  return major_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Request::major_axis() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.major_axis)
  return _internal_major_axis();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_major_axis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  major_axis_ = value;
}
inline void CGameRecording_GetThumbnails_Request::set_major_axis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_axis(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.major_axis)
}

// optional .EThumbnailTimePrecision time_precision = 6 [default = ePrecise];
inline bool CGameRecording_GetThumbnails_Request::_internal_has_time_precision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_time_precision() const {
  return _internal_has_time_precision();
}
inline void CGameRecording_GetThumbnails_Request::clear_time_precision() {
  time_precision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EThumbnailTimePrecision CGameRecording_GetThumbnails_Request::_internal_time_precision() const {
  return static_cast< ::EThumbnailTimePrecision >(time_precision_);
}
inline ::EThumbnailTimePrecision CGameRecording_GetThumbnails_Request::time_precision() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.time_precision)
  return _internal_time_precision();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_time_precision(::EThumbnailTimePrecision value) {
  assert(::EThumbnailTimePrecision_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  time_precision_ = value;
}
inline void CGameRecording_GetThumbnails_Request::set_time_precision(::EThumbnailTimePrecision value) {
  _internal_set_time_precision(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.time_precision)
}

// optional .EThumbnailFormat format = 8 [default = eJPEG];
inline bool CGameRecording_GetThumbnails_Request::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Request::has_format() const {
  return _internal_has_format();
}
inline void CGameRecording_GetThumbnails_Request::clear_format() {
  format_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EThumbnailFormat CGameRecording_GetThumbnails_Request::_internal_format() const {
  return static_cast< ::EThumbnailFormat >(format_);
}
inline ::EThumbnailFormat CGameRecording_GetThumbnails_Request::format() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Request.format)
  return _internal_format();
}
inline void CGameRecording_GetThumbnails_Request::_internal_set_format(::EThumbnailFormat value) {
  assert(::EThumbnailFormat_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void CGameRecording_GetThumbnails_Request::set_format(::EThumbnailFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Request.format)
}

// -------------------------------------------------------------------

// CGameRecording_GetThumbnails_Response_Thumbnail

// optional bytes image_data = 1;
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::_internal_has_image_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::has_image_data() const {
  return _internal_has_image_data();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::clear_image_data() {
  image_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_GetThumbnails_Response_Thumbnail::image_data() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
  return _internal_image_data();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_image_data(const std::string& value) {
  _internal_set_image_data(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
}
inline std::string* CGameRecording_GetThumbnails_Response_Thumbnail::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
  return _internal_mutable_image_data();
}
inline const std::string& CGameRecording_GetThumbnails_Response_Thumbnail::_internal_image_data() const {
  return image_data_.Get();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::_internal_set_image_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_image_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_image_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
}
inline std::string* CGameRecording_GetThumbnails_Response_Thumbnail::_internal_mutable_image_data() {
  _has_bits_[0] |= 0x00000001u;
  return image_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_GetThumbnails_Response_Thumbnail::release_image_data() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
  if (!_internal_has_image_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetThumbnails_Response.Thumbnail.image_data)
}

// optional uint32 width = 2;
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::has_width() const {
  return _internal_has_width();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Response_Thumbnail::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Response_Thumbnail::width() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Response.Thumbnail.width)
  return _internal_width();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Response.Thumbnail.width)
}

// optional uint32 height = 3;
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_GetThumbnails_Response_Thumbnail::has_height() const {
  return _internal_has_height();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Response_Thumbnail::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_GetThumbnails_Response_Thumbnail::height() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Response.Thumbnail.height)
  return _internal_height();
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CGameRecording_GetThumbnails_Response_Thumbnail::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetThumbnails_Response.Thumbnail.height)
}

// -------------------------------------------------------------------

// CGameRecording_GetThumbnails_Response

// repeated .CGameRecording_GetThumbnails_Response.Thumbnail thumbnails = 1;
inline int CGameRecording_GetThumbnails_Response::_internal_thumbnails_size() const {
  return thumbnails_.size();
}
inline int CGameRecording_GetThumbnails_Response::thumbnails_size() const {
  return _internal_thumbnails_size();
}
inline void CGameRecording_GetThumbnails_Response::clear_thumbnails() {
  thumbnails_.Clear();
}
inline ::CGameRecording_GetThumbnails_Response_Thumbnail* CGameRecording_GetThumbnails_Response::mutable_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetThumbnails_Response.thumbnails)
  return thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetThumbnails_Response_Thumbnail >*
CGameRecording_GetThumbnails_Response::mutable_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetThumbnails_Response.thumbnails)
  return &thumbnails_;
}
inline const ::CGameRecording_GetThumbnails_Response_Thumbnail& CGameRecording_GetThumbnails_Response::_internal_thumbnails(int index) const {
  return thumbnails_.Get(index);
}
inline const ::CGameRecording_GetThumbnails_Response_Thumbnail& CGameRecording_GetThumbnails_Response::thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetThumbnails_Response.thumbnails)
  return _internal_thumbnails(index);
}
inline ::CGameRecording_GetThumbnails_Response_Thumbnail* CGameRecording_GetThumbnails_Response::_internal_add_thumbnails() {
  return thumbnails_.Add();
}
inline ::CGameRecording_GetThumbnails_Response_Thumbnail* CGameRecording_GetThumbnails_Response::add_thumbnails() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetThumbnails_Response.thumbnails)
  return _internal_add_thumbnails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_GetThumbnails_Response_Thumbnail >&
CGameRecording_GetThumbnails_Response::thumbnails() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetThumbnails_Response.thumbnails)
  return thumbnails_;
}

// -------------------------------------------------------------------

// CGameRecording_StartRecording_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_StartRecording_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_StartRecording_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_StartRecording_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_StartRecording_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_StartRecording_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_StartRecording_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_StartRecording_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_StartRecording_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_StartRecording_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_StartRecording_Response

// -------------------------------------------------------------------

// CGameRecording_StopRecording_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_StopRecording_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_StopRecording_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_StopRecording_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_StopRecording_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_StopRecording_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_StopRecording_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_StopRecording_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_StopRecording_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_StopRecording_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_StopRecording_Response

// optional .CGameRecording_ClipSummary summary = 1;
inline bool CGameRecording_StopRecording_Response::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool CGameRecording_StopRecording_Response::has_summary() const {
  return _internal_has_summary();
}
inline void CGameRecording_StopRecording_Response::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_ClipSummary& CGameRecording_StopRecording_Response::_internal_summary() const {
  const ::CGameRecording_ClipSummary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ClipSummary&>(
      ::_CGameRecording_ClipSummary_default_instance_);
}
inline const ::CGameRecording_ClipSummary& CGameRecording_StopRecording_Response::summary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_StopRecording_Response.summary)
  return _internal_summary();
}
inline void CGameRecording_StopRecording_Response::unsafe_arena_set_allocated_summary(
    ::CGameRecording_ClipSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_StopRecording_Response.summary)
}
inline ::CGameRecording_ClipSummary* CGameRecording_StopRecording_Response::release_summary() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_StopRecording_Response::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:CGameRecording_StopRecording_Response.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_StopRecording_Response::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ClipSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::CGameRecording_ClipSummary* CGameRecording_StopRecording_Response::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_StopRecording_Response.summary)
  return _internal_mutable_summary();
}
inline void CGameRecording_StopRecording_Response::set_allocated_summary(::CGameRecording_ClipSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_StopRecording_Response.summary)
}

// -------------------------------------------------------------------

// CGameRecording_GetRecordingSize_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_GetRecordingSize_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetRecordingSize_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_GetRecordingSize_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetRecordingSize_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetRecordingSize_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetRecordingSize_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_GetRecordingSize_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_GetRecordingSize_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetRecordingSize_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_GetRecordingSize_Response

// optional uint64 file_size = 1;
inline bool CGameRecording_GetRecordingSize_Response::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetRecordingSize_Response::has_file_size() const {
  return _internal_has_file_size();
}
inline void CGameRecording_GetRecordingSize_Response::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetRecordingSize_Response::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetRecordingSize_Response::file_size() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetRecordingSize_Response.file_size)
  return _internal_file_size();
}
inline void CGameRecording_GetRecordingSize_Response::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  file_size_ = value;
}
inline void CGameRecording_GetRecordingSize_Response::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetRecordingSize_Response.file_size)
}

// -------------------------------------------------------------------

// CGameRecording_CleanupBackgroundRecordings_Request

// -------------------------------------------------------------------

// CGameRecording_CleanupBackgroundRecordings_Response

// -------------------------------------------------------------------

// CGameRecording_GetPlatformCapabilities_Request

// -------------------------------------------------------------------

// CGameRecording_GetPlatformCapabilities_Response

// optional bool per_process_audio_capture = 1;
inline bool CGameRecording_GetPlatformCapabilities_Response::_internal_has_per_process_audio_capture() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetPlatformCapabilities_Response::has_per_process_audio_capture() const {
  return _internal_has_per_process_audio_capture();
}
inline void CGameRecording_GetPlatformCapabilities_Response::clear_per_process_audio_capture() {
  per_process_audio_capture_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CGameRecording_GetPlatformCapabilities_Response::_internal_per_process_audio_capture() const {
  return per_process_audio_capture_;
}
inline bool CGameRecording_GetPlatformCapabilities_Response::per_process_audio_capture() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetPlatformCapabilities_Response.per_process_audio_capture)
  return _internal_per_process_audio_capture();
}
inline void CGameRecording_GetPlatformCapabilities_Response::_internal_set_per_process_audio_capture(bool value) {
  _has_bits_[0] |= 0x00000001u;
  per_process_audio_capture_ = value;
}
inline void CGameRecording_GetPlatformCapabilities_Response::set_per_process_audio_capture(bool value) {
  _internal_set_per_process_audio_capture(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetPlatformCapabilities_Response.per_process_audio_capture)
}

// -------------------------------------------------------------------

// CGameRecording_ClipCreated_Notification

// optional .CGameRecording_ClipSummary summary = 1;
inline bool CGameRecording_ClipCreated_Notification::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool CGameRecording_ClipCreated_Notification::has_summary() const {
  return _internal_has_summary();
}
inline void CGameRecording_ClipCreated_Notification::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_ClipSummary& CGameRecording_ClipCreated_Notification::_internal_summary() const {
  const ::CGameRecording_ClipSummary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_ClipSummary&>(
      ::_CGameRecording_ClipSummary_default_instance_);
}
inline const ::CGameRecording_ClipSummary& CGameRecording_ClipCreated_Notification::summary() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipCreated_Notification.summary)
  return _internal_summary();
}
inline void CGameRecording_ClipCreated_Notification::unsafe_arena_set_allocated_summary(
    ::CGameRecording_ClipSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_ClipCreated_Notification.summary)
}
inline ::CGameRecording_ClipSummary* CGameRecording_ClipCreated_Notification::release_summary() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_ClipCreated_Notification::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipCreated_Notification.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_ClipSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::CGameRecording_ClipSummary* CGameRecording_ClipCreated_Notification::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_ClipSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::CGameRecording_ClipSummary* CGameRecording_ClipCreated_Notification::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipCreated_Notification.summary)
  return _internal_mutable_summary();
}
inline void CGameRecording_ClipCreated_Notification::set_allocated_summary(::CGameRecording_ClipSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipCreated_Notification.summary)
}

// -------------------------------------------------------------------

// CGameRecording_ClipDeleted_Notification

// optional string clip_id = 1;
inline bool CGameRecording_ClipDeleted_Notification::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ClipDeleted_Notification::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ClipDeleted_Notification::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ClipDeleted_Notification::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipDeleted_Notification.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ClipDeleted_Notification::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipDeleted_Notification.clip_id)
}
inline std::string* CGameRecording_ClipDeleted_Notification::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ClipDeleted_Notification.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ClipDeleted_Notification::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ClipDeleted_Notification::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ClipDeleted_Notification::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ClipDeleted_Notification.clip_id)
}
inline void CGameRecording_ClipDeleted_Notification::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ClipDeleted_Notification.clip_id)
}
inline void CGameRecording_ClipDeleted_Notification::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ClipDeleted_Notification.clip_id)
}
inline std::string* CGameRecording_ClipDeleted_Notification::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ClipDeleted_Notification::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ClipDeleted_Notification.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ClipDeleted_Notification::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ClipDeleted_Notification.clip_id)
}

// optional uint64 game_id = 2;
inline bool CGameRecording_ClipDeleted_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ClipDeleted_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_ClipDeleted_Notification::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipDeleted_Notification::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_ClipDeleted_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ClipDeleted_Notification.game_id)
  return _internal_game_id();
}
inline void CGameRecording_ClipDeleted_Notification::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecording_ClipDeleted_Notification::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ClipDeleted_Notification.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_ExportProgress_Notification

// optional float progress = 1;
inline bool CGameRecording_ExportProgress_Notification::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_ExportProgress_Notification::has_progress() const {
  return _internal_has_progress();
}
inline void CGameRecording_ExportProgress_Notification::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CGameRecording_ExportProgress_Notification::_internal_progress() const {
  return progress_;
}
inline float CGameRecording_ExportProgress_Notification::progress() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportProgress_Notification.progress)
  return _internal_progress();
}
inline void CGameRecording_ExportProgress_Notification::_internal_set_progress(float value) {
  _has_bits_[0] |= 0x00000002u;
  progress_ = value;
}
inline void CGameRecording_ExportProgress_Notification::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportProgress_Notification.progress)
}

// optional string clip_id = 2;
inline bool CGameRecording_ExportProgress_Notification::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_ExportProgress_Notification::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_ExportProgress_Notification::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_ExportProgress_Notification::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportProgress_Notification.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_ExportProgress_Notification::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportProgress_Notification.clip_id)
}
inline std::string* CGameRecording_ExportProgress_Notification::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_ExportProgress_Notification.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_ExportProgress_Notification::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_ExportProgress_Notification::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_ExportProgress_Notification::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_ExportProgress_Notification.clip_id)
}
inline void CGameRecording_ExportProgress_Notification::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_ExportProgress_Notification.clip_id)
}
inline void CGameRecording_ExportProgress_Notification::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_ExportProgress_Notification.clip_id)
}
inline std::string* CGameRecording_ExportProgress_Notification::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_ExportProgress_Notification::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_ExportProgress_Notification.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_ExportProgress_Notification::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_ExportProgress_Notification.clip_id)
}

// optional int32 eresult = 3;
inline bool CGameRecording_ExportProgress_Notification::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_ExportProgress_Notification::has_eresult() const {
  return _internal_has_eresult();
}
inline void CGameRecording_ExportProgress_Notification::clear_eresult() {
  eresult_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportProgress_Notification::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_ExportProgress_Notification::eresult() const {
  // @@protoc_insertion_point(field_get:CGameRecording_ExportProgress_Notification.eresult)
  return _internal_eresult();
}
inline void CGameRecording_ExportProgress_Notification::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CGameRecording_ExportProgress_Notification::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CGameRecording_ExportProgress_Notification.eresult)
}

// -------------------------------------------------------------------

// CGameRecording_PerGameSettings

// optional fixed64 gameid = 1;
inline bool CGameRecording_PerGameSettings::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_PerGameSettings::has_gameid() const {
  return _internal_has_gameid();
}
inline void CGameRecording_PerGameSettings::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_PerGameSettings::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_PerGameSettings::gameid() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PerGameSettings.gameid)
  return _internal_gameid();
}
inline void CGameRecording_PerGameSettings::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  gameid_ = value;
}
inline void CGameRecording_PerGameSettings::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PerGameSettings.gameid)
}

// optional bool enabled = 2;
inline bool CGameRecording_PerGameSettings::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_PerGameSettings::has_enabled() const {
  return _internal_has_enabled();
}
inline void CGameRecording_PerGameSettings::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CGameRecording_PerGameSettings::_internal_enabled() const {
  return enabled_;
}
inline bool CGameRecording_PerGameSettings::enabled() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PerGameSettings.enabled)
  return _internal_enabled();
}
inline void CGameRecording_PerGameSettings::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
}
inline void CGameRecording_PerGameSettings::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PerGameSettings.enabled)
}

// optional uint32 minutes = 3;
inline bool CGameRecording_PerGameSettings::_internal_has_minutes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_PerGameSettings::has_minutes() const {
  return _internal_has_minutes();
}
inline void CGameRecording_PerGameSettings::clear_minutes() {
  minutes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_PerGameSettings::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecording_PerGameSettings::minutes() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PerGameSettings.minutes)
  return _internal_minutes();
}
inline void CGameRecording_PerGameSettings::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  minutes_ = value;
}
inline void CGameRecording_PerGameSettings::set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PerGameSettings.minutes)
}

// optional string bitrate = 4;
inline bool CGameRecording_PerGameSettings::_internal_has_bitrate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_PerGameSettings::has_bitrate() const {
  return _internal_has_bitrate();
}
inline void CGameRecording_PerGameSettings::clear_bitrate() {
  bitrate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_PerGameSettings::bitrate() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PerGameSettings.bitrate)
  return _internal_bitrate();
}
inline void CGameRecording_PerGameSettings::set_bitrate(const std::string& value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PerGameSettings.bitrate)
}
inline std::string* CGameRecording_PerGameSettings::mutable_bitrate() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_PerGameSettings.bitrate)
  return _internal_mutable_bitrate();
}
inline const std::string& CGameRecording_PerGameSettings::_internal_bitrate() const {
  return bitrate_.Get();
}
inline void CGameRecording_PerGameSettings::_internal_set_bitrate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_PerGameSettings::set_bitrate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bitrate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_PerGameSettings.bitrate)
}
inline void CGameRecording_PerGameSettings::set_bitrate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_PerGameSettings.bitrate)
}
inline void CGameRecording_PerGameSettings::set_bitrate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_PerGameSettings.bitrate)
}
inline std::string* CGameRecording_PerGameSettings::_internal_mutable_bitrate() {
  _has_bits_[0] |= 0x00000001u;
  return bitrate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_PerGameSettings::release_bitrate() {
  // @@protoc_insertion_point(field_release:CGameRecording_PerGameSettings.bitrate)
  if (!_internal_has_bitrate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bitrate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_PerGameSettings::set_allocated_bitrate(std::string* bitrate) {
  if (bitrate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bitrate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitrate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_PerGameSettings.bitrate)
}

// optional bool infinite = 5;
inline bool CGameRecording_PerGameSettings::_internal_has_infinite() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_PerGameSettings::has_infinite() const {
  return _internal_has_infinite();
}
inline void CGameRecording_PerGameSettings::clear_infinite() {
  infinite_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CGameRecording_PerGameSettings::_internal_infinite() const {
  return infinite_;
}
inline bool CGameRecording_PerGameSettings::infinite() const {
  // @@protoc_insertion_point(field_get:CGameRecording_PerGameSettings.infinite)
  return _internal_infinite();
}
inline void CGameRecording_PerGameSettings::_internal_set_infinite(bool value) {
  _has_bits_[0] |= 0x00000010u;
  infinite_ = value;
}
inline void CGameRecording_PerGameSettings::set_infinite(bool value) {
  _internal_set_infinite(value);
  // @@protoc_insertion_point(field_set:CGameRecording_PerGameSettings.infinite)
}

// -------------------------------------------------------------------

// CGameRecording_GetPerGameSettings_Request

// -------------------------------------------------------------------

// CGameRecording_GetPerGameSettings_Response

// repeated .CGameRecording_PerGameSettings settings = 1;
inline int CGameRecording_GetPerGameSettings_Response::_internal_settings_size() const {
  return settings_.size();
}
inline int CGameRecording_GetPerGameSettings_Response::settings_size() const {
  return _internal_settings_size();
}
inline void CGameRecording_GetPerGameSettings_Response::clear_settings() {
  settings_.Clear();
}
inline ::CGameRecording_PerGameSettings* CGameRecording_GetPerGameSettings_Response::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetPerGameSettings_Response.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_PerGameSettings >*
CGameRecording_GetPerGameSettings_Response::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_GetPerGameSettings_Response.settings)
  return &settings_;
}
inline const ::CGameRecording_PerGameSettings& CGameRecording_GetPerGameSettings_Response::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::CGameRecording_PerGameSettings& CGameRecording_GetPerGameSettings_Response::settings(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetPerGameSettings_Response.settings)
  return _internal_settings(index);
}
inline ::CGameRecording_PerGameSettings* CGameRecording_GetPerGameSettings_Response::_internal_add_settings() {
  return settings_.Add();
}
inline ::CGameRecording_PerGameSettings* CGameRecording_GetPerGameSettings_Response::add_settings() {
  // @@protoc_insertion_point(field_add:CGameRecording_GetPerGameSettings_Response.settings)
  return _internal_add_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_PerGameSettings >&
CGameRecording_GetPerGameSettings_Response::settings() const {
  // @@protoc_insertion_point(field_list:CGameRecording_GetPerGameSettings_Response.settings)
  return settings_;
}

// -------------------------------------------------------------------

// CGameRecording_SetPerGameSettings_Request

// optional .CGameRecording_PerGameSettings game_settings = 1;
inline bool CGameRecording_SetPerGameSettings_Request::_internal_has_game_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_settings_ != nullptr);
  return value;
}
inline bool CGameRecording_SetPerGameSettings_Request::has_game_settings() const {
  return _internal_has_game_settings();
}
inline void CGameRecording_SetPerGameSettings_Request::clear_game_settings() {
  if (game_settings_ != nullptr) game_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecording_PerGameSettings& CGameRecording_SetPerGameSettings_Request::_internal_game_settings() const {
  const ::CGameRecording_PerGameSettings* p = game_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecording_PerGameSettings&>(
      ::_CGameRecording_PerGameSettings_default_instance_);
}
inline const ::CGameRecording_PerGameSettings& CGameRecording_SetPerGameSettings_Request::game_settings() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SetPerGameSettings_Request.game_settings)
  return _internal_game_settings();
}
inline void CGameRecording_SetPerGameSettings_Request::unsafe_arena_set_allocated_game_settings(
    ::CGameRecording_PerGameSettings* game_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_settings_);
  }
  game_settings_ = game_settings;
  if (game_settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_SetPerGameSettings_Request.game_settings)
}
inline ::CGameRecording_PerGameSettings* CGameRecording_SetPerGameSettings_Request::release_game_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_PerGameSettings* temp = game_settings_;
  game_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecording_PerGameSettings* CGameRecording_SetPerGameSettings_Request::unsafe_arena_release_game_settings() {
  // @@protoc_insertion_point(field_release:CGameRecording_SetPerGameSettings_Request.game_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecording_PerGameSettings* temp = game_settings_;
  game_settings_ = nullptr;
  return temp;
}
inline ::CGameRecording_PerGameSettings* CGameRecording_SetPerGameSettings_Request::_internal_mutable_game_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (game_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecording_PerGameSettings>(GetArena());
    game_settings_ = p;
  }
  return game_settings_;
}
inline ::CGameRecording_PerGameSettings* CGameRecording_SetPerGameSettings_Request::mutable_game_settings() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_SetPerGameSettings_Request.game_settings)
  return _internal_mutable_game_settings();
}
inline void CGameRecording_SetPerGameSettings_Request::set_allocated_game_settings(::CGameRecording_PerGameSettings* game_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete game_settings_;
  }
  if (game_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_settings);
    if (message_arena != submessage_arena) {
      game_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_settings_ = game_settings;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_SetPerGameSettings_Request.game_settings)
}

// -------------------------------------------------------------------

// CGameRecording_SetPerGameSettings_Response

// -------------------------------------------------------------------

// CGameRecording_DeletePerGameSettings_Request

// optional fixed64 gameid = 1;
inline bool CGameRecording_DeletePerGameSettings_Request::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_DeletePerGameSettings_Request::has_gameid() const {
  return _internal_has_gameid();
}
inline void CGameRecording_DeletePerGameSettings_Request::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_DeletePerGameSettings_Request::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_DeletePerGameSettings_Request::gameid() const {
  // @@protoc_insertion_point(field_get:CGameRecording_DeletePerGameSettings_Request.gameid)
  return _internal_gameid();
}
inline void CGameRecording_DeletePerGameSettings_Request::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_ = value;
}
inline void CGameRecording_DeletePerGameSettings_Request::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CGameRecording_DeletePerGameSettings_Request.gameid)
}

// -------------------------------------------------------------------

// CGameRecording_DeletePerGameSettings_Response

// -------------------------------------------------------------------

// CGameRecording_UploadProgress_Notification

// optional float progress = 1;
inline bool CGameRecording_UploadProgress_Notification::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_UploadProgress_Notification::has_progress() const {
  return _internal_has_progress();
}
inline void CGameRecording_UploadProgress_Notification::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CGameRecording_UploadProgress_Notification::_internal_progress() const {
  return progress_;
}
inline float CGameRecording_UploadProgress_Notification::progress() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadProgress_Notification.progress)
  return _internal_progress();
}
inline void CGameRecording_UploadProgress_Notification::_internal_set_progress(float value) {
  _has_bits_[0] |= 0x00000002u;
  progress_ = value;
}
inline void CGameRecording_UploadProgress_Notification::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadProgress_Notification.progress)
}

// optional string clip_id = 2;
inline bool CGameRecording_UploadProgress_Notification::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_UploadProgress_Notification::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_UploadProgress_Notification::clear_clip_id() {
  clip_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_UploadProgress_Notification::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadProgress_Notification.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_UploadProgress_Notification::set_clip_id(const std::string& value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadProgress_Notification.clip_id)
}
inline std::string* CGameRecording_UploadProgress_Notification::mutable_clip_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_UploadProgress_Notification.clip_id)
  return _internal_mutable_clip_id();
}
inline const std::string& CGameRecording_UploadProgress_Notification::_internal_clip_id() const {
  return clip_id_.Get();
}
inline void CGameRecording_UploadProgress_Notification::_internal_set_clip_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_UploadProgress_Notification::set_clip_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_UploadProgress_Notification.clip_id)
}
inline void CGameRecording_UploadProgress_Notification::set_clip_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_UploadProgress_Notification.clip_id)
}
inline void CGameRecording_UploadProgress_Notification::set_clip_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_UploadProgress_Notification.clip_id)
}
inline std::string* CGameRecording_UploadProgress_Notification::_internal_mutable_clip_id() {
  _has_bits_[0] |= 0x00000001u;
  return clip_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_UploadProgress_Notification::release_clip_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_UploadProgress_Notification.clip_id)
  if (!_internal_has_clip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clip_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_UploadProgress_Notification::set_allocated_clip_id(std::string* clip_id) {
  if (clip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_UploadProgress_Notification.clip_id)
}

// optional int32 eresult = 3;
inline bool CGameRecording_UploadProgress_Notification::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_UploadProgress_Notification::has_eresult() const {
  return _internal_has_eresult();
}
inline void CGameRecording_UploadProgress_Notification::clear_eresult() {
  eresult_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_UploadProgress_Notification::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecording_UploadProgress_Notification::eresult() const {
  // @@protoc_insertion_point(field_get:CGameRecording_UploadProgress_Notification.eresult)
  return _internal_eresult();
}
inline void CGameRecording_UploadProgress_Notification::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CGameRecording_UploadProgress_Notification::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CGameRecording_UploadProgress_Notification.eresult)
}

// -------------------------------------------------------------------

// CGameRecording_SwitchBackgroundRecordingGame_Request

// optional uint64 game_id = 1;
inline bool CGameRecording_SwitchBackgroundRecordingGame_Request::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_SwitchBackgroundRecordingGame_Request::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecording_SwitchBackgroundRecordingGame_Request::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SwitchBackgroundRecordingGame_Request::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_SwitchBackgroundRecordingGame_Request::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_SwitchBackgroundRecordingGame_Request.game_id)
  return _internal_game_id();
}
inline void CGameRecording_SwitchBackgroundRecordingGame_Request::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecording_SwitchBackgroundRecordingGame_Request::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_SwitchBackgroundRecordingGame_Request.game_id)
}

// -------------------------------------------------------------------

// CGameRecording_SwitchBackgroundRecordingGame_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ETimelineEntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETimelineEntryType>() {
  return ::ETimelineEntryType_descriptor();
}
template <> struct is_proto_enum< ::EPhaseResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPhaseResultType>() {
  return ::EPhaseResultType_descriptor();
}
template <> struct is_proto_enum< ::ETimelineChangeNotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETimelineChangeNotificationType>() {
  return ::ETimelineChangeNotificationType_descriptor();
}
template <> struct is_proto_enum< ::ERecordingSessionChangeNotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ERecordingSessionChangeNotificationType>() {
  return ::ERecordingSessionChangeNotificationType_descriptor();
}
template <> struct is_proto_enum< ::EDiskSpaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDiskSpaceType>() {
  return ::EDiskSpaceType_descriptor();
}
template <> struct is_proto_enum< ::EThumbnailTimePrecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EThumbnailTimePrecision>() {
  return ::EThumbnailTimePrecision_descriptor();
}
template <> struct is_proto_enum< ::EThumbnailFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EThumbnailFormat>() {
  return ::EThumbnailFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecording_2eproto
