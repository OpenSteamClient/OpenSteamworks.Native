// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamerecordingfiles.proto

#include "webuimessages_gamerecordingfiles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameRecordingFile::CGameRecordingFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_()
  , postgame_events_()
  , temporary_clips_()
  , tags_(){}
struct CGameRecordingFileDefaultTypeInternal {
  constexpr CGameRecordingFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingFileDefaultTypeInternal() {}
  union {
    CGameRecordingFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingFileDefaultTypeInternal _CGameRecordingFile_default_instance_;
constexpr CGameRecordingClipFile::CGameRecordingClipFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timelines_()
  , tags_()
  , phases_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_timeline_start_offset_ms_(PROTOBUF_ULONGLONG(0))
  , game_id_(PROTOBUF_ULONGLONG(0))
  , published_file_id_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u)
  , temporary_(false)
  , size_in_bytes_(PROTOBUF_ULONGLONG(0))
  , original_gaming_device_type_(0u)
  , date_downloaded_(0u)
  , thumbnail_width_(0u)
  , thumbnail_height_(0u){}
struct CGameRecordingClipFileDefaultTypeInternal {
  constexpr CGameRecordingClipFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingClipFileDefaultTypeInternal() {}
  union {
    CGameRecordingClipFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingClipFileDefaultTypeInternal _CGameRecordingClipFile_default_instance_;
constexpr CGameRecordingTimelineMetadata_Recording::CGameRecordingTimelineMetadata_Recording(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recording_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cdn_manifest_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_offset_ms_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , recording_type_(0)

  , delete_on_cleanup_(false)
  , video_manager_clip_id_(PROTOBUF_ULONGLONG(0))
  , video_manager_video_id_(PROTOBUF_ULONGLONG(0))
  , file_size_(PROTOBUF_ULONGLONG(0))
  , recording_zero_timeline_offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal {
  constexpr CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal() {}
  union {
    CGameRecordingTimelineMetadata_Recording _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal _CGameRecordingTimelineMetadata_Recording_default_instance_;
constexpr CGameRecordingTimelineMetadata::CGameRecordingTimelineMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recordings_()
  , phases_()
  , significant_events_()
  , timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u){}
struct CGameRecordingTimelineMetadataDefaultTypeInternal {
  constexpr CGameRecordingTimelineMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTimelineMetadataDefaultTypeInternal() {}
  union {
    CGameRecordingTimelineMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTimelineMetadataDefaultTypeInternal _CGameRecordingTimelineMetadata_default_instance_;
constexpr CGameRecordingPostGameSummary::CGameRecordingPostGameSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingPostGameSummaryDefaultTypeInternal {
  constexpr CGameRecordingPostGameSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingPostGameSummaryDefaultTypeInternal() {}
  union {
    CGameRecordingPostGameSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingPostGameSummaryDefaultTypeInternal _CGameRecordingPostGameSummary_default_instance_;
constexpr CGameRecordingTimelineEvent::CGameRecordingTimelineEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , marker_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , rt_created_(0u)
  , possible_clip_(0)
  , entry_id_(PROTOBUF_ULONGLONG(0))
  , timeline_offset_ms_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , user_marker_(false){}
struct CGameRecordingTimelineEventDefaultTypeInternal {
  constexpr CGameRecordingTimelineEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTimelineEventDefaultTypeInternal() {}
  union {
    CGameRecordingTimelineEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTimelineEventDefaultTypeInternal _CGameRecordingTimelineEvent_default_instance_;
constexpr CGameRecordingTag_Timeline::CGameRecordingTag_Timeline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingTag_TimelineDefaultTypeInternal {
  constexpr CGameRecordingTag_TimelineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTag_TimelineDefaultTypeInternal() {}
  union {
    CGameRecordingTag_Timeline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTag_TimelineDefaultTypeInternal _CGameRecordingTag_Timeline_default_instance_;
constexpr CGameRecordingTag::CGameRecordingTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : references_()
  , tag_(nullptr)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingTagDefaultTypeInternal {
  constexpr CGameRecordingTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTagDefaultTypeInternal() {}
  union {
    CGameRecordingTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTagDefaultTypeInternal _CGameRecordingTag_default_instance_;
constexpr CGameRecordingTagInstance::CGameRecordingTagInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_id_(PROTOBUF_ULONGLONG(0))
  , timeline_offset_ms_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingTagInstanceDefaultTypeInternal {
  constexpr CGameRecordingTagInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingTagInstanceDefaultTypeInternal() {}
  union {
    CGameRecordingTagInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingTagInstanceDefaultTypeInternal _CGameRecordingTagInstance_default_instance_;
constexpr CGameRecordingPhase_Tag::CGameRecordingPhase_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGameRecordingPhase_TagDefaultTypeInternal {
  constexpr CGameRecordingPhase_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingPhase_TagDefaultTypeInternal() {}
  union {
    CGameRecordingPhase_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingPhase_TagDefaultTypeInternal _CGameRecordingPhase_Tag_default_instance_;
constexpr CGameRecordingPhase::CGameRecordingPhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , contained_tags_()
  , attributes_()
  , phase_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_ms_(PROTOBUF_ULONGLONG(0))
  , background_timeline_offset_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingPhaseDefaultTypeInternal {
  constexpr CGameRecordingPhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingPhaseDefaultTypeInternal() {}
  union {
    CGameRecordingPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingPhaseDefaultTypeInternal _CGameRecordingPhase_default_instance_;
constexpr CTimelineTag::CTimelineTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0u){}
struct CTimelineTagDefaultTypeInternal {
  constexpr CTimelineTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTimelineTagDefaultTypeInternal() {}
  union {
    CTimelineTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTimelineTagDefaultTypeInternal _CTimelineTag_default_instance_;
constexpr CPhaseAttribute::CPhaseAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0u){}
struct CPhaseAttributeDefaultTypeInternal {
  constexpr CPhaseAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPhaseAttributeDefaultTypeInternal() {}
  union {
    CPhaseAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPhaseAttributeDefaultTypeInternal _CPhaseAttribute_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fgamerecordingfiles_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fgamerecordingfiles_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_webuimessages_5fgamerecordingfiles_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fgamerecordingfiles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingFile, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingFile, postgame_events_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingFile, temporary_clips_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingFile, tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, timelines_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, first_timeline_start_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, size_in_bytes_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, temporary_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, original_device_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, original_gaming_device_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, date_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, thumbnail_width_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, thumbnail_height_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClipFile, phases_),
  ~0u,
  2,
  5,
  3,
  4,
  7,
  0,
  6,
  1,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, start_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, recording_type_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, delete_on_cleanup_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, video_manager_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, video_manager_video_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, cdn_manifest_url_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, file_size_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata_Recording, recording_zero_timeline_offset_ms_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, recordings_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, phases_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineMetadata, significant_events_),
  0,
  1,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPostGameSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPostGameSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPostGameSummary, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPostGameSummary, events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, rt_created_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, possible_clip_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, timeline_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, marker_icon_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, marker_title_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTimelineEvent, user_marker_),
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  1,
  2,
  9,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag_Timeline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag_Timeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag_Timeline, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag_Timeline, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag_Timeline, offset_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag, game_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag, tag_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTag, references_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, entry_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, timeline_offset_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingTagInstance, duration_ms_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase_Tag, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase_Tag, group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, contained_tags_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, background_timeline_offset_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingPhase, attributes_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, name_),
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, group_),
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, icon_),
  PROTOBUF_FIELD_OFFSET(::CTimelineTag, priority_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CPhaseAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPhaseAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPhaseAttribute, group_),
  PROTOBUF_FIELD_OFFSET(::CPhaseAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::CPhaseAttribute, priority_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CGameRecordingFile)},
  { 9, 29, sizeof(::CGameRecordingClipFile)},
  { 44, 59, sizeof(::CGameRecordingTimelineMetadata_Recording)},
  { 69, 81, sizeof(::CGameRecordingTimelineMetadata)},
  { 88, 95, sizeof(::CGameRecordingPostGameSummary)},
  { 97, 112, sizeof(::CGameRecordingTimelineEvent)},
  { 122, 130, sizeof(::CGameRecordingTag_Timeline)},
  { 133, 141, sizeof(::CGameRecordingTag)},
  { 144, 153, sizeof(::CGameRecordingTagInstance)},
  { 157, 164, sizeof(::CGameRecordingPhase_Tag)},
  { 166, 177, sizeof(::CGameRecordingPhase)},
  { 183, 192, sizeof(::CTimelineTag)},
  { 196, 204, sizeof(::CPhaseAttribute)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingClipFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTimelineMetadata_Recording_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTimelineMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingPostGameSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTimelineEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTag_Timeline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingTagInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingPhase_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTimelineTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPhaseAttribute_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fgamerecordingfiles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&webuimessages_gamerecordingfiles.proto"
  "\032 google/protobuf/descriptor.proto\032\013enum"
  "s.proto\032\030steammessages_base.proto\032\030webui"
  "messages_base.proto\"\274\001\n\022CGameRecordingFi"
  "le\0222\n\ttimelines\030\001 \003(\0132\037.CGameRecordingTi"
  "melineMetadata\0227\n\017postgame_events\030\002 \003(\0132"
  "\036.CGameRecordingPostGameSummary\022\027\n\017tempo"
  "rary_clips\030\003 \003(\t\022 \n\004tags\030\004 \003(\0132\022.CGameRe"
  "cordingTag\"\301\003\n\026CGameRecordingClipFile\0222\n"
  "\ttimelines\030\001 \003(\0132\037.CGameRecordingTimelin"
  "eMetadata\022&\n\036first_timeline_start_offset"
  "_ms\030\002 \001(\004\022\025\n\rdate_recorded\030\003 \001(\r\022\017\n\007game"
  "_id\030\004 \001(\004\022\031\n\021published_file_id\030\005 \001(\006\022\025\n\r"
  "size_in_bytes\030\006 \001(\004\022\014\n\004name\030\007 \001(\t\022\021\n\ttem"
  "porary\030\010 \001(\010\022\027\n\017original_device\030\t \001(\t\022#\n"
  "\033original_gaming_device_type\030\n \001(\r\022\027\n\017da"
  "te_downloaded\030\013 \001(\r\022\027\n\017thumbnail_width\030\014"
  " \001(\r\022\030\n\020thumbnail_height\030\r \001(\r\022 \n\004tags\030\016"
  " \003(\0132\022.CGameRecordingTag\022$\n\006phases\030\017 \003(\013"
  "2\024.CGameRecordingPhase\"\336\004\n\036CGameRecordin"
  "gTimelineMetadata\022\023\n\013timeline_id\030\001 \001(\t\022\017"
  "\n\007game_id\030\002 \001(\004\022\025\n\rdate_recorded\030\003 \001(\r\022\023"
  "\n\013duration_ms\030\004 \001(\004\022=\n\nrecordings\030\005 \003(\0132"
  ").CGameRecordingTimelineMetadata.Recordi"
  "ng\022$\n\006phases\030\006 \003(\0132\024.CGameRecordingPhase"
  "\0228\n\022significant_events\030\007 \003(\0132\034.CGameReco"
  "rdingTimelineEvent\032\312\002\n\tRecording\022\024\n\014reco"
  "rding_id\030\001 \001(\t\022\027\n\017start_offset_ms\030\002 \001(\004\022"
  "\023\n\013duration_ms\030\003 \001(\004\022G\n\016recording_type\030\004"
  " \001(\0162\023.EGameRecordingType:\032EGameRecordin"
  "gType_Unknown\022\031\n\021delete_on_cleanup\030\005 \001(\010"
  "\022\035\n\025video_manager_clip_id\030\006 \001(\004\022\036\n\026video"
  "_manager_video_id\030\007 \001(\004\022\030\n\020cdn_manifest_"
  "url\030\010 \001(\t\022\021\n\tfile_size\030\t \001(\004\022)\n!recordin"
  "g_zero_timeline_offset_ms\030\n \001(\004\"^\n\035CGame"
  "RecordingPostGameSummary\022\017\n\007game_id\030\001 \001("
  "\004\022,\n\006events\030\002 \003(\0132\034.CGameRecordingTimeli"
  "neEvent\"\361\001\n\033CGameRecordingTimelineEvent\022"
  "\017\n\007game_id\030\001 \001(\004\022\022\n\nrt_created\030\002 \001(\r\022\025\n\r"
  "possible_clip\030\003 \001(\005\022\023\n\013timeline_id\030\004 \001(\t"
  "\022\020\n\010entry_id\030\005 \001(\004\022\032\n\022timeline_offset_ms"
  "\030\006 \001(\004\022\023\n\013duration_ms\030\007 \001(\004\022\023\n\013marker_ic"
  "on\030\010 \001(\t\022\024\n\014marker_title\030\t \001(\t\022\023\n\013user_m"
  "arker\030\n \001(\010\"\266\001\n\021CGameRecordingTag\022\017\n\007gam"
  "e_id\030\001 \001(\004\022\032\n\003tag\030\002 \001(\0132\r.CTimelineTag\022/"
  "\n\nreferences\030\003 \003(\0132\033.CGameRecordingTag.T"
  "imeline\032C\n\010Timeline\022\017\n\007clip_id\030\001 \001(\t\022\023\n\013"
  "timeline_id\030\002 \001(\t\022\021\n\toffset_ms\030\003 \001(\004\"s\n\031"
  "CGameRecordingTagInstance\022\023\n\013timeline_id"
  "\030\001 \001(\t\022\020\n\010entry_id\030\002 \001(\004\022\032\n\022timeline_off"
  "set_ms\030\003 \001(\004\022\023\n\013duration_ms\030\004 \001(\004\"\204\002\n\023CG"
  "ameRecordingPhase\022\020\n\010phase_id\030\004 \001(\t\022\023\n\013d"
  "uration_ms\030\005 \001(\004\022&\n\004tags\030\006 \003(\0132\030.CGameRe"
  "cordingPhase.Tag\0220\n\016contained_tags\030\007 \003(\013"
  "2\030.CGameRecordingPhase.Tag\022\"\n\032background"
  "_timeline_offset\030\010 \001(\004\022$\n\nattributes\030\t \003"
  "(\0132\020.CPhaseAttribute\032\"\n\003Tag\022\014\n\004name\030\001 \001("
  "\t\022\r\n\005group\030\002 \001(\t\"K\n\014CTimelineTag\022\014\n\004name"
  "\030\001 \001(\t\022\r\n\005group\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\020\n\010p"
  "riority\030\004 \001(\r\"A\n\017CPhaseAttribute\022\r\n\005grou"
  "p\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\020\n\010priority\030\003 \001(\r"
  "B\037H\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamerecordingfiles_2eproto = {
  false, false, 2473, descriptor_table_protodef_webuimessages_5fgamerecordingfiles_2eproto, "webuimessages_gamerecordingfiles.proto", 
  &descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_once, descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_deps, 4, 13,
  schemas, file_default_instances, TableStruct_webuimessages_5fgamerecordingfiles_2eproto::offsets,
  file_level_metadata_webuimessages_5fgamerecordingfiles_2eproto, file_level_enum_descriptors_webuimessages_5fgamerecordingfiles_2eproto, file_level_service_descriptors_webuimessages_5fgamerecordingfiles_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamerecordingfiles_2eproto);
  return descriptor_table_webuimessages_5fgamerecordingfiles_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fgamerecordingfiles_2eproto(&descriptor_table_webuimessages_5fgamerecordingfiles_2eproto);

// ===================================================================

class CGameRecordingFile::_Internal {
 public:
};

CGameRecordingFile::CGameRecordingFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena),
  postgame_events_(arena),
  temporary_clips_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingFile)
}
CGameRecordingFile::CGameRecordingFile(const CGameRecordingFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timelines_(from.timelines_),
      postgame_events_(from.postgame_events_),
      temporary_clips_(from.temporary_clips_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecordingFile)
}

void CGameRecordingFile::SharedCtor() {
}

CGameRecordingFile::~CGameRecordingFile() {
  // @@protoc_insertion_point(destructor:CGameRecordingFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingFile::ArenaDtor(void* object) {
  CGameRecordingFile* _this = reinterpret_cast< CGameRecordingFile* >(object);
  (void)_this;
}
void CGameRecordingFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  postgame_events_.Clear();
  temporary_clips_.Clear();
  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineMetadata timelines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingPostGameSummary postgame_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_postgame_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string temporary_clips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_temporary_clips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingFile.temporary_clips");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTag tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_timelines(i), target, stream);
  }

  // repeated .CGameRecordingPostGameSummary postgame_events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_postgame_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_postgame_events(i), target, stream);
  }

  // repeated string temporary_clips = 3;
  for (int i = 0, n = this->_internal_temporary_clips_size(); i < n; i++) {
    const auto& s = this->_internal_temporary_clips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingFile.temporary_clips");
    target = stream->WriteString(3, s, target);
  }

  // repeated .CGameRecordingTag tags = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingFile)
  return target;
}

size_t CGameRecordingFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingPostGameSummary postgame_events = 2;
  total_size += 1UL * this->_internal_postgame_events_size();
  for (const auto& msg : this->postgame_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string temporary_clips = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(temporary_clips_.size());
  for (int i = 0, n = temporary_clips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      temporary_clips_.Get(i));
  }

  // repeated .CGameRecordingTag tags = 4;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingFile)
    MergeFrom(*source);
  }
}

void CGameRecordingFile::MergeFrom(const CGameRecordingFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
  postgame_events_.MergeFrom(from.postgame_events_);
  temporary_clips_.MergeFrom(from.temporary_clips_);
  tags_.MergeFrom(from.tags_);
}

void CGameRecordingFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingFile::CopyFrom(const CGameRecordingFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingFile::IsInitialized() const {
  return true;
}

void CGameRecordingFile::InternalSwap(CGameRecordingFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timelines_.InternalSwap(&other->timelines_);
  postgame_events_.InternalSwap(&other->postgame_events_);
  temporary_clips_.InternalSwap(&other->temporary_clips_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingClipFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingClipFile>()._has_bits_);
  static void set_has_first_timeline_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size_in_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temporary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_original_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_gaming_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_date_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnail_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_thumbnail_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CGameRecordingClipFile::CGameRecordingClipFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timelines_(arena),
  tags_(arena),
  phases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingClipFile)
}
CGameRecordingClipFile::CGameRecordingClipFile(const CGameRecordingClipFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timelines_(from.timelines_),
      tags_(from.tags_),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_device()) {
    original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_device(), 
      GetArena());
  }
  ::memcpy(&first_timeline_start_offset_ms_, &from.first_timeline_start_offset_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&first_timeline_start_offset_ms_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingClipFile)
}

void CGameRecordingClipFile::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
original_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_timeline_start_offset_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&first_timeline_start_offset_ms_)) + sizeof(thumbnail_height_));
}

CGameRecordingClipFile::~CGameRecordingClipFile() {
  // @@protoc_insertion_point(destructor:CGameRecordingClipFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingClipFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingClipFile::ArenaDtor(void* object) {
  CGameRecordingClipFile* _this = reinterpret_cast< CGameRecordingClipFile* >(object);
  (void)_this;
}
void CGameRecordingClipFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingClipFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingClipFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingClipFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timelines_.Clear();
  tags_.Clear();
  phases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      original_device_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&first_timeline_start_offset_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_in_bytes_) -
        reinterpret_cast<char*>(&first_timeline_start_offset_ms_)) + sizeof(size_in_bytes_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&original_gaming_device_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_height_) -
        reinterpret_cast<char*>(&original_gaming_device_type_)) + sizeof(thumbnail_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingClipFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecordingTimelineMetadata timelines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 first_timeline_start_offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_timeline_start_offset_ms(&has_bits);
          first_timeline_start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 published_file_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 size_in_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_size_in_bytes(&has_bits);
          size_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingClipFile.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool temporary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_temporary(&has_bits);
          temporary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_device = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_original_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingClipFile.original_device");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_gaming_device_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_original_gaming_device_type(&has_bits);
          original_gaming_device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_downloaded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_date_downloaded(&has_bits);
          date_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_thumbnail_width(&has_bits);
          thumbnail_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thumbnail_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_thumbnail_height(&has_bits);
          thumbnail_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTag tags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingPhase phases = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingClipFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingClipFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_timelines(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 first_timeline_start_offset_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_first_timeline_start_offset_ms(), target);
  }

  // optional uint32 date_recorded = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_recorded(), target);
  }

  // optional uint64 game_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_game_id(), target);
  }

  // optional fixed64 published_file_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_published_file_id(), target);
  }

  // optional uint64 size_in_bytes = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size_in_bytes(), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingClipFile.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // optional bool temporary = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_temporary(), target);
  }

  // optional string original_device = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_device().data(), static_cast<int>(this->_internal_original_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingClipFile.original_device");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_original_device(), target);
  }

  // optional uint32 original_gaming_device_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_original_gaming_device_type(), target);
  }

  // optional uint32 date_downloaded = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_date_downloaded(), target);
  }

  // optional uint32 thumbnail_width = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_thumbnail_height(), target);
  }

  // repeated .CGameRecordingTag tags = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_tags(i), target, stream);
  }

  // repeated .CGameRecordingPhase phases = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_phases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingClipFile)
  return target;
}

size_t CGameRecordingClipFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingClipFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  total_size += 1UL * this->_internal_timelines_size();
  for (const auto& msg : this->timelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingTag tags = 14;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingPhase phases = 15;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string original_device = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_device());
    }

    // optional uint64 first_timeline_start_offset_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_timeline_start_offset_ms());
    }

    // optional uint64 game_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional fixed64 published_file_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 date_recorded = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

    // optional bool temporary = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 size_in_bytes = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size_in_bytes());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 original_gaming_device_type = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_gaming_device_type());
    }

    // optional uint32 date_downloaded = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_downloaded());
    }

    // optional uint32 thumbnail_width = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thumbnail_width());
    }

    // optional uint32 thumbnail_height = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thumbnail_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingClipFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingClipFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingClipFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingClipFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingClipFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingClipFile)
    MergeFrom(*source);
  }
}

void CGameRecordingClipFile::MergeFrom(const CGameRecordingClipFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingClipFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timelines_.MergeFrom(from.timelines_);
  tags_.MergeFrom(from.tags_);
  phases_.MergeFrom(from.phases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_original_device(from._internal_original_device());
    }
    if (cached_has_bits & 0x00000004u) {
      first_timeline_start_offset_ms_ = from.first_timeline_start_offset_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_recorded_ = from.date_recorded_;
    }
    if (cached_has_bits & 0x00000040u) {
      temporary_ = from.temporary_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_in_bytes_ = from.size_in_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      original_gaming_device_type_ = from.original_gaming_device_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      date_downloaded_ = from.date_downloaded_;
    }
    if (cached_has_bits & 0x00000400u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    if (cached_has_bits & 0x00000800u) {
      thumbnail_height_ = from.thumbnail_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingClipFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingClipFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingClipFile::CopyFrom(const CGameRecordingClipFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingClipFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingClipFile::IsInitialized() const {
  return true;
}

void CGameRecordingClipFile::InternalSwap(CGameRecordingClipFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timelines_.InternalSwap(&other->timelines_);
  tags_.InternalSwap(&other->tags_);
  phases_.InternalSwap(&other->phases_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_device_.Swap(&other->original_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingClipFile, thumbnail_height_)
      + sizeof(CGameRecordingClipFile::thumbnail_height_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingClipFile, first_timeline_start_offset_ms_)>(
          reinterpret_cast<char*>(&first_timeline_start_offset_ms_),
          reinterpret_cast<char*>(&other->first_timeline_start_offset_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingClipFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTimelineMetadata_Recording::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTimelineMetadata_Recording>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_recording_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delete_on_cleanup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_video_manager_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_video_manager_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cdn_manifest_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_recording_zero_timeline_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CGameRecordingTimelineMetadata_Recording::CGameRecordingTimelineMetadata_Recording(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTimelineMetadata.Recording)
}
CGameRecordingTimelineMetadata_Recording::CGameRecordingTimelineMetadata_Recording(const CGameRecordingTimelineMetadata_Recording& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recording_id()) {
    recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recording_id(), 
      GetArena());
  }
  cdn_manifest_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cdn_manifest_url()) {
    cdn_manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cdn_manifest_url(), 
      GetArena());
  }
  ::memcpy(&start_offset_ms_, &from.start_offset_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_zero_timeline_offset_ms_) -
    reinterpret_cast<char*>(&start_offset_ms_)) + sizeof(recording_zero_timeline_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTimelineMetadata.Recording)
}

void CGameRecordingTimelineMetadata_Recording::SharedCtor() {
recording_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cdn_manifest_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_offset_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recording_zero_timeline_offset_ms_) -
    reinterpret_cast<char*>(&start_offset_ms_)) + sizeof(recording_zero_timeline_offset_ms_));
}

CGameRecordingTimelineMetadata_Recording::~CGameRecordingTimelineMetadata_Recording() {
  // @@protoc_insertion_point(destructor:CGameRecordingTimelineMetadata.Recording)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTimelineMetadata_Recording::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recording_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_manifest_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingTimelineMetadata_Recording::ArenaDtor(void* object) {
  CGameRecordingTimelineMetadata_Recording* _this = reinterpret_cast< CGameRecordingTimelineMetadata_Recording* >(object);
  (void)_this;
}
void CGameRecordingTimelineMetadata_Recording::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTimelineMetadata_Recording::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTimelineMetadata_Recording::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTimelineMetadata.Recording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      recording_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cdn_manifest_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&start_offset_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&video_manager_video_id_) -
        reinterpret_cast<char*>(&start_offset_ms_)) + sizeof(video_manager_video_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recording_zero_timeline_offset_ms_) -
        reinterpret_cast<char*>(&file_size_)) + sizeof(recording_zero_timeline_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTimelineMetadata_Recording::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recording_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineMetadata.Recording.recording_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_offset_ms(&has_bits);
          start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameRecordingType recording_type = 4 [default = EGameRecordingType_Unknown];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameRecordingType_IsValid(val))) {
            _internal_set_recording_type(static_cast<::EGameRecordingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool delete_on_cleanup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delete_on_cleanup(&has_bits);
          delete_on_cleanup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_manager_clip_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_video_manager_clip_id(&has_bits);
          video_manager_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_manager_video_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_video_manager_video_id(&has_bits);
          video_manager_video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cdn_manifest_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cdn_manifest_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineMetadata.Recording.cdn_manifest_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 recording_zero_timeline_offset_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_recording_zero_timeline_offset_ms(&has_bits);
          recording_zero_timeline_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTimelineMetadata_Recording::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTimelineMetadata.Recording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string recording_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recording_id().data(), static_cast<int>(this->_internal_recording_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineMetadata.Recording.recording_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recording_id(), target);
  }

  // optional uint64 start_offset_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_offset_ms(), target);
  }

  // optional uint64 duration_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // optional .EGameRecordingType recording_type = 4 [default = EGameRecordingType_Unknown];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_recording_type(), target);
  }

  // optional bool delete_on_cleanup = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_delete_on_cleanup(), target);
  }

  // optional uint64 video_manager_clip_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_video_manager_clip_id(), target);
  }

  // optional uint64 video_manager_video_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_video_manager_video_id(), target);
  }

  // optional string cdn_manifest_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cdn_manifest_url().data(), static_cast<int>(this->_internal_cdn_manifest_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineMetadata.Recording.cdn_manifest_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cdn_manifest_url(), target);
  }

  // optional uint64 file_size = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_file_size(), target);
  }

  // optional uint64 recording_zero_timeline_offset_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_recording_zero_timeline_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTimelineMetadata.Recording)
  return target;
}

size_t CGameRecordingTimelineMetadata_Recording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTimelineMetadata.Recording)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string recording_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recording_id());
    }

    // optional string cdn_manifest_url = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cdn_manifest_url());
    }

    // optional uint64 start_offset_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_offset_ms());
    }

    // optional uint64 duration_ms = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional .EGameRecordingType recording_type = 4 [default = EGameRecordingType_Unknown];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_type());
    }

    // optional bool delete_on_cleanup = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 video_manager_clip_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_manager_clip_id());
    }

    // optional uint64 video_manager_video_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_manager_video_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 file_size = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional uint64 recording_zero_timeline_offset_ms = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_recording_zero_timeline_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTimelineMetadata_Recording::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTimelineMetadata.Recording)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTimelineMetadata_Recording* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTimelineMetadata_Recording>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTimelineMetadata.Recording)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTimelineMetadata.Recording)
    MergeFrom(*source);
  }
}

void CGameRecordingTimelineMetadata_Recording::MergeFrom(const CGameRecordingTimelineMetadata_Recording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTimelineMetadata.Recording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_recording_id(from._internal_recording_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cdn_manifest_url(from._internal_cdn_manifest_url());
    }
    if (cached_has_bits & 0x00000004u) {
      start_offset_ms_ = from.start_offset_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      recording_type_ = from.recording_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      delete_on_cleanup_ = from.delete_on_cleanup_;
    }
    if (cached_has_bits & 0x00000040u) {
      video_manager_clip_id_ = from.video_manager_clip_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      video_manager_video_id_ = from.video_manager_video_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      recording_zero_timeline_offset_ms_ = from.recording_zero_timeline_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTimelineMetadata_Recording::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTimelineMetadata.Recording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTimelineMetadata_Recording::CopyFrom(const CGameRecordingTimelineMetadata_Recording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTimelineMetadata.Recording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTimelineMetadata_Recording::IsInitialized() const {
  return true;
}

void CGameRecordingTimelineMetadata_Recording::InternalSwap(CGameRecordingTimelineMetadata_Recording* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recording_id_.Swap(&other->recording_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cdn_manifest_url_.Swap(&other->cdn_manifest_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineMetadata_Recording, recording_zero_timeline_offset_ms_)
      + sizeof(CGameRecordingTimelineMetadata_Recording::recording_zero_timeline_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineMetadata_Recording, start_offset_ms_)>(
          reinterpret_cast<char*>(&start_offset_ms_),
          reinterpret_cast<char*>(&other->start_offset_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTimelineMetadata_Recording::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTimelineMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTimelineMetadata>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecordingTimelineMetadata::CGameRecordingTimelineMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recordings_(arena),
  phases_(arena),
  significant_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTimelineMetadata)
}
CGameRecordingTimelineMetadata::CGameRecordingTimelineMetadata(const CGameRecordingTimelineMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      recordings_(from.recordings_),
      phases_(from.phases_),
      significant_events_(from.significant_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_recorded_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(date_recorded_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTimelineMetadata)
}

void CGameRecordingTimelineMetadata::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_recorded_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(date_recorded_));
}

CGameRecordingTimelineMetadata::~CGameRecordingTimelineMetadata() {
  // @@protoc_insertion_point(destructor:CGameRecordingTimelineMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTimelineMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingTimelineMetadata::ArenaDtor(void* object) {
  CGameRecordingTimelineMetadata* _this = reinterpret_cast< CGameRecordingTimelineMetadata* >(object);
  (void)_this;
}
void CGameRecordingTimelineMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTimelineMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTimelineMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTimelineMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recordings_.Clear();
  phases_.Clear();
  significant_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_recorded_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(date_recorded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTimelineMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineMetadata.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTimelineMetadata.Recording recordings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recordings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingPhase phases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTimelineEvent significant_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_significant_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTimelineMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTimelineMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineMetadata.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint32 date_recorded = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_recorded(), target);
  }

  // optional uint64 duration_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_duration_ms(), target);
  }

  // repeated .CGameRecordingTimelineMetadata.Recording recordings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recordings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_recordings(i), target, stream);
  }

  // repeated .CGameRecordingPhase phases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_phases(i), target, stream);
  }

  // repeated .CGameRecordingTimelineEvent significant_events = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_significant_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_significant_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTimelineMetadata)
  return target;
}

size_t CGameRecordingTimelineMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTimelineMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineMetadata.Recording recordings = 5;
  total_size += 1UL * this->_internal_recordings_size();
  for (const auto& msg : this->recordings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingPhase phases = 6;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingTimelineEvent significant_events = 7;
  total_size += 1UL * this->_internal_significant_events_size();
  for (const auto& msg : this->significant_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint64 duration_ms = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint32 date_recorded = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTimelineMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTimelineMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTimelineMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTimelineMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTimelineMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTimelineMetadata)
    MergeFrom(*source);
  }
}

void CGameRecordingTimelineMetadata::MergeFrom(const CGameRecordingTimelineMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTimelineMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recordings_.MergeFrom(from.recordings_);
  phases_.MergeFrom(from.phases_);
  significant_events_.MergeFrom(from.significant_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_recorded_ = from.date_recorded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTimelineMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTimelineMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTimelineMetadata::CopyFrom(const CGameRecordingTimelineMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTimelineMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTimelineMetadata::IsInitialized() const {
  return true;
}

void CGameRecordingTimelineMetadata::InternalSwap(CGameRecordingTimelineMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recordings_.InternalSwap(&other->recordings_);
  phases_.InternalSwap(&other->phases_);
  significant_events_.InternalSwap(&other->significant_events_);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineMetadata, date_recorded_)
      + sizeof(CGameRecordingTimelineMetadata::date_recorded_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineMetadata, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTimelineMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingPostGameSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingPostGameSummary>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecordingPostGameSummary::CGameRecordingPostGameSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingPostGameSummary)
}
CGameRecordingPostGameSummary::CGameRecordingPostGameSummary(const CGameRecordingPostGameSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingPostGameSummary)
}

void CGameRecordingPostGameSummary::SharedCtor() {
game_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecordingPostGameSummary::~CGameRecordingPostGameSummary() {
  // @@protoc_insertion_point(destructor:CGameRecordingPostGameSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingPostGameSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingPostGameSummary::ArenaDtor(void* object) {
  CGameRecordingPostGameSummary* _this = reinterpret_cast< CGameRecordingPostGameSummary* >(object);
  (void)_this;
}
void CGameRecordingPostGameSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingPostGameSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingPostGameSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingPostGameSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingPostGameSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTimelineEvent events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingPostGameSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingPostGameSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // repeated .CGameRecordingTimelineEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingPostGameSummary)
  return target;
}

size_t CGameRecordingPostGameSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingPostGameSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTimelineEvent events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 game_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingPostGameSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingPostGameSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingPostGameSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingPostGameSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingPostGameSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingPostGameSummary)
    MergeFrom(*source);
  }
}

void CGameRecordingPostGameSummary::MergeFrom(const CGameRecordingPostGameSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingPostGameSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from._internal_has_game_id()) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void CGameRecordingPostGameSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingPostGameSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingPostGameSummary::CopyFrom(const CGameRecordingPostGameSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingPostGameSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingPostGameSummary::IsInitialized() const {
  return true;
}

void CGameRecordingPostGameSummary::InternalSwap(CGameRecordingPostGameSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingPostGameSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTimelineEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTimelineEvent>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rt_created(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_possible_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeline_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_marker_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_marker_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CGameRecordingTimelineEvent::CGameRecordingTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTimelineEvent)
}
CGameRecordingTimelineEvent::CGameRecordingTimelineEvent(const CGameRecordingTimelineEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_icon()) {
    marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_icon(), 
      GetArena());
  }
  marker_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marker_title()) {
    marker_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_title(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_marker_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(user_marker_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTimelineEvent)
}

void CGameRecordingTimelineEvent::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
marker_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_marker_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(user_marker_));
}

CGameRecordingTimelineEvent::~CGameRecordingTimelineEvent() {
  // @@protoc_insertion_point(destructor:CGameRecordingTimelineEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTimelineEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingTimelineEvent::ArenaDtor(void* object) {
  CGameRecordingTimelineEvent* _this = reinterpret_cast< CGameRecordingTimelineEvent* >(object);
  (void)_this;
}
void CGameRecordingTimelineEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTimelineEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      marker_icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      marker_title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeline_offset_ms_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(timeline_offset_ms_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_marker_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(user_marker_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTimelineEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rt_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rt_created(&has_bits);
          rt_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 possible_clip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_possible_clip(&has_bits);
          possible_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineEvent.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timeline_offset_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeline_offset_ms(&has_bits);
          timeline_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_icon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_marker_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineEvent.marker_icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string marker_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_marker_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTimelineEvent.marker_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_marker = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_user_marker(&has_bits);
          user_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTimelineEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 rt_created = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rt_created(), target);
  }

  // optional int32 possible_clip = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_possible_clip(), target);
  }

  // optional string timeline_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineEvent.timeline_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_entry_id(), target);
  }

  // optional uint64 timeline_offset_ms = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timeline_offset_ms(), target);
  }

  // optional uint64 duration_ms = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_duration_ms(), target);
  }

  // optional string marker_icon = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_icon().data(), static_cast<int>(this->_internal_marker_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineEvent.marker_icon");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_marker_icon(), target);
  }

  // optional string marker_title = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_marker_title().data(), static_cast<int>(this->_internal_marker_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTimelineEvent.marker_title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_marker_title(), target);
  }

  // optional bool user_marker = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_user_marker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTimelineEvent)
  return target;
}

size_t CGameRecordingTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTimelineEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string timeline_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional string marker_icon = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_icon());
    }

    // optional string marker_title = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marker_title());
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

    // optional uint32 rt_created = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_created());
    }

    // optional int32 possible_clip = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_possible_clip());
    }

    // optional uint64 entry_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

    // optional uint64 timeline_offset_ms = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timeline_offset_ms());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 duration_ms = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional bool user_marker = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTimelineEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTimelineEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTimelineEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTimelineEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTimelineEvent)
    MergeFrom(*source);
  }
}

void CGameRecordingTimelineEvent::MergeFrom(const CGameRecordingTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_marker_icon(from._internal_marker_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_marker_title(from._internal_marker_title());
    }
    if (cached_has_bits & 0x00000008u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rt_created_ = from.rt_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      possible_clip_ = from.possible_clip_;
    }
    if (cached_has_bits & 0x00000040u) {
      entry_id_ = from.entry_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeline_offset_ms_ = from.timeline_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      user_marker_ = from.user_marker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTimelineEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTimelineEvent::CopyFrom(const CGameRecordingTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTimelineEvent::IsInitialized() const {
  return true;
}

void CGameRecordingTimelineEvent::InternalSwap(CGameRecordingTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_icon_.Swap(&other->marker_icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_title_.Swap(&other->marker_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineEvent, user_marker_)
      + sizeof(CGameRecordingTimelineEvent::user_marker_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingTimelineEvent, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTimelineEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTag_Timeline::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTag_Timeline>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecordingTag_Timeline::CGameRecordingTag_Timeline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTag.Timeline)
}
CGameRecordingTag_Timeline::CGameRecordingTag_Timeline(const CGameRecordingTag_Timeline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_id()) {
    clip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_id(), 
      GetArena());
  }
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  offset_ms_ = from.offset_ms_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTag.Timeline)
}

void CGameRecordingTag_Timeline::SharedCtor() {
clip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
offset_ms_ = PROTOBUF_ULONGLONG(0);
}

CGameRecordingTag_Timeline::~CGameRecordingTag_Timeline() {
  // @@protoc_insertion_point(destructor:CGameRecordingTag.Timeline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTag_Timeline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingTag_Timeline::ArenaDtor(void* object) {
  CGameRecordingTag_Timeline* _this = reinterpret_cast< CGameRecordingTag_Timeline* >(object);
  (void)_this;
}
void CGameRecordingTag_Timeline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTag_Timeline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTag_Timeline::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTag.Timeline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      timeline_id_.ClearNonDefaultToEmpty();
    }
  }
  offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTag_Timeline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTag.Timeline.clip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timeline_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTag.Timeline.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 offset_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_offset_ms(&has_bits);
          offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTag_Timeline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTag.Timeline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_id().data(), static_cast<int>(this->_internal_clip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTag.Timeline.clip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clip_id(), target);
  }

  // optional string timeline_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTag.Timeline.timeline_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_id(), target);
  }

  // optional uint64 offset_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTag.Timeline)
  return target;
}

size_t CGameRecordingTag_Timeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTag.Timeline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_id());
    }

    // optional string timeline_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 offset_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTag_Timeline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTag.Timeline)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTag_Timeline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTag_Timeline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTag.Timeline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTag.Timeline)
    MergeFrom(*source);
  }
}

void CGameRecordingTag_Timeline::MergeFrom(const CGameRecordingTag_Timeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTag.Timeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_id(from._internal_clip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ms_ = from.offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTag_Timeline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTag.Timeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTag_Timeline::CopyFrom(const CGameRecordingTag_Timeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTag.Timeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTag_Timeline::IsInitialized() const {
  return true;
}

void CGameRecordingTag_Timeline::InternalSwap(CGameRecordingTag_Timeline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clip_id_.Swap(&other->clip_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_ms_, other->offset_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTag_Timeline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTag>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CTimelineTag& tag(const CGameRecordingTag* msg);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTimelineTag&
CGameRecordingTag::_Internal::tag(const CGameRecordingTag* msg) {
  return *msg->tag_;
}
CGameRecordingTag::CGameRecordingTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTag)
}
CGameRecordingTag::CGameRecordingTag(const CGameRecordingTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tag()) {
    tag_ = new ::CTimelineTag(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTag)
}

void CGameRecordingTag::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(game_id_));
}

CGameRecordingTag::~CGameRecordingTag() {
  // @@protoc_insertion_point(destructor:CGameRecordingTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tag_;
}

void CGameRecordingTag::ArenaDtor(void* object) {
  CGameRecordingTag* _this = reinterpret_cast< CGameRecordingTag* >(object);
  (void)_this;
}
void CGameRecordingTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tag_ != nullptr);
    tag_->Clear();
  }
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTimelineTag tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingTag.Timeline references = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // optional .CTimelineTag tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tag(this), target, stream);
  }

  // repeated .CGameRecordingTag.Timeline references = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_references(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTag)
  return target;
}

size_t CGameRecordingTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingTag.Timeline references = 3;
  total_size += 1UL * this->_internal_references_size();
  for (const auto& msg : this->references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CTimelineTag tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tag_);
    }

    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTag)
    MergeFrom(*source);
  }
}

void CGameRecordingTag::MergeFrom(const CGameRecordingTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tag()->::CTimelineTag::MergeFrom(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTag::CopyFrom(const CGameRecordingTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTag::IsInitialized() const {
  return true;
}

void CGameRecordingTag::InternalSwap(CGameRecordingTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  references_.InternalSwap(&other->references_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingTag, game_id_)
      + sizeof(CGameRecordingTag::game_id_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingTag, tag_)>(
          reinterpret_cast<char*>(&tag_),
          reinterpret_cast<char*>(&other->tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingTagInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingTagInstance>()._has_bits_);
  static void set_has_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeline_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameRecordingTagInstance::CGameRecordingTagInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingTagInstance)
}
CGameRecordingTagInstance::CGameRecordingTagInstance(const CGameRecordingTagInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeline_id()) {
    timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_id(), 
      GetArena());
  }
  ::memcpy(&entry_id_, &from.entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(duration_ms_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingTagInstance)
}

void CGameRecordingTagInstance::SharedCtor() {
timeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(duration_ms_));
}

CGameRecordingTagInstance::~CGameRecordingTagInstance() {
  // @@protoc_insertion_point(destructor:CGameRecordingTagInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingTagInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingTagInstance::ArenaDtor(void* object) {
  CGameRecordingTagInstance* _this = reinterpret_cast< CGameRecordingTagInstance* >(object);
  (void)_this;
}
void CGameRecordingTagInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingTagInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingTagInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingTagInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timeline_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&entry_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_ms_) -
        reinterpret_cast<char*>(&entry_id_)) + sizeof(duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingTagInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingTagInstance.timeline_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entry_id(&has_bits);
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timeline_offset_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timeline_offset_ms(&has_bits);
          timeline_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingTagInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingTagInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timeline_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeline_id().data(), static_cast<int>(this->_internal_timeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingTagInstance.timeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeline_id(), target);
  }

  // optional uint64 entry_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entry_id(), target);
  }

  // optional uint64 timeline_offset_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timeline_offset_ms(), target);
  }

  // optional uint64 duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingTagInstance)
  return target;
}

size_t CGameRecordingTagInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingTagInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string timeline_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline_id());
    }

    // optional uint64 entry_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_entry_id());
    }

    // optional uint64 timeline_offset_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timeline_offset_ms());
    }

    // optional uint64 duration_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingTagInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingTagInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingTagInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingTagInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingTagInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingTagInstance)
    MergeFrom(*source);
  }
}

void CGameRecordingTagInstance::MergeFrom(const CGameRecordingTagInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingTagInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeline_id(from._internal_timeline_id());
    }
    if (cached_has_bits & 0x00000002u) {
      entry_id_ = from.entry_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeline_offset_ms_ = from.timeline_offset_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingTagInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingTagInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingTagInstance::CopyFrom(const CGameRecordingTagInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingTagInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingTagInstance::IsInitialized() const {
  return true;
}

void CGameRecordingTagInstance::InternalSwap(CGameRecordingTagInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeline_id_.Swap(&other->timeline_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingTagInstance, duration_ms_)
      + sizeof(CGameRecordingTagInstance::duration_ms_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingTagInstance, entry_id_)>(
          reinterpret_cast<char*>(&entry_id_),
          reinterpret_cast<char*>(&other->entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingTagInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingPhase_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingPhase_Tag>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameRecordingPhase_Tag::CGameRecordingPhase_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingPhase.Tag)
}
CGameRecordingPhase_Tag::CGameRecordingPhase_Tag(const CGameRecordingPhase_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecordingPhase.Tag)
}

void CGameRecordingPhase_Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CGameRecordingPhase_Tag::~CGameRecordingPhase_Tag() {
  // @@protoc_insertion_point(destructor:CGameRecordingPhase.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingPhase_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingPhase_Tag::ArenaDtor(void* object) {
  CGameRecordingPhase_Tag* _this = reinterpret_cast< CGameRecordingPhase_Tag* >(object);
  (void)_this;
}
void CGameRecordingPhase_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingPhase_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingPhase_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingPhase.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      group_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingPhase_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingPhase.Tag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingPhase.Tag.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingPhase_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingPhase.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingPhase.Tag.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingPhase.Tag.group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingPhase.Tag)
  return target;
}

size_t CGameRecordingPhase_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingPhase.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingPhase_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingPhase.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingPhase_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingPhase_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingPhase.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingPhase.Tag)
    MergeFrom(*source);
  }
}

void CGameRecordingPhase_Tag::MergeFrom(const CGameRecordingPhase_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingPhase.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group(from._internal_group());
    }
  }
}

void CGameRecordingPhase_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingPhase.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingPhase_Tag::CopyFrom(const CGameRecordingPhase_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingPhase.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingPhase_Tag::IsInitialized() const {
  return true;
}

void CGameRecordingPhase_Tag::InternalSwap(CGameRecordingPhase_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingPhase_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingPhase>()._has_bits_);
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_background_timeline_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGameRecordingPhase::CGameRecordingPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  contained_tags_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingPhase)
}
CGameRecordingPhase::CGameRecordingPhase(const CGameRecordingPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      contained_tags_(from.contained_tags_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phase_id()) {
    phase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase_id(), 
      GetArena());
  }
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_timeline_offset_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(background_timeline_offset_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingPhase)
}

void CGameRecordingPhase::SharedCtor() {
phase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&background_timeline_offset_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(background_timeline_offset_));
}

CGameRecordingPhase::~CGameRecordingPhase() {
  // @@protoc_insertion_point(destructor:CGameRecordingPhase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecordingPhase::ArenaDtor(void* object) {
  CGameRecordingPhase* _this = reinterpret_cast< CGameRecordingPhase* >(object);
  (void)_this;
}
void CGameRecordingPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  contained_tags_.Clear();
  attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phase_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_timeline_offset_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(background_timeline_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string phase_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecordingPhase.phase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingPhase.Tag tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGameRecordingPhase.Tag contained_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 background_timeline_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_background_timeline_offset(&has_bits);
          background_timeline_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CPhaseAttribute attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string phase_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phase_id().data(), static_cast<int>(this->_internal_phase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecordingPhase.phase_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phase_id(), target);
  }

  // optional uint64 duration_ms = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_duration_ms(), target);
  }

  // repeated .CGameRecordingPhase.Tag tags = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags(i), target, stream);
  }

  // repeated .CGameRecordingPhase.Tag contained_tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_contained_tags(i), target, stream);
  }

  // optional uint64 background_timeline_offset = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_background_timeline_offset(), target);
  }

  // repeated .CPhaseAttribute attributes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingPhase)
  return target;
}

size_t CGameRecordingPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecordingPhase.Tag tags = 6;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGameRecordingPhase.Tag contained_tags = 7;
  total_size += 1UL * this->_internal_contained_tags_size();
  for (const auto& msg : this->contained_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPhaseAttribute attributes = 9;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string phase_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phase_id());
    }

    // optional uint64 duration_ms = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_duration_ms());
    }

    // optional uint64 background_timeline_offset = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_background_timeline_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingPhase)
    MergeFrom(*source);
  }
}

void CGameRecordingPhase::MergeFrom(const CGameRecordingPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  contained_tags_.MergeFrom(from.contained_tags_);
  attributes_.MergeFrom(from.attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_phase_id(from._internal_phase_id());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      background_timeline_offset_ = from.background_timeline_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingPhase::CopyFrom(const CGameRecordingPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingPhase::IsInitialized() const {
  return true;
}

void CGameRecordingPhase::InternalSwap(CGameRecordingPhase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  contained_tags_.InternalSwap(&other->contained_tags_);
  attributes_.InternalSwap(&other->attributes_);
  phase_id_.Swap(&other->phase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingPhase, background_timeline_offset_)
      + sizeof(CGameRecordingPhase::background_timeline_offset_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingPhase, duration_ms_)>(
          reinterpret_cast<char*>(&duration_ms_),
          reinterpret_cast<char*>(&other->duration_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CTimelineTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CTimelineTag>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CTimelineTag::CTimelineTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTimelineTag)
}
CTimelineTag::CTimelineTag(const CTimelineTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CTimelineTag)
}

void CTimelineTag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
priority_ = 0u;
}

CTimelineTag::~CTimelineTag() {
  // @@protoc_insertion_point(destructor:CTimelineTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTimelineTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTimelineTag::ArenaDtor(void* object) {
  CTimelineTag* _this = reinterpret_cast< CTimelineTag* >(object);
  (void)_this;
}
void CTimelineTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTimelineTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTimelineTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CTimelineTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
  }
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTimelineTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineTag.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineTag.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTimelineTag.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTimelineTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTimelineTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineTag.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineTag.group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTimelineTag.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // optional uint32 priority = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTimelineTag)
  return target;
}

size_t CTimelineTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTimelineTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional uint32 priority = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTimelineTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTimelineTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CTimelineTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTimelineTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTimelineTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTimelineTag)
    MergeFrom(*source);
  }
}

void CTimelineTag::MergeFrom(const CTimelineTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTimelineTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTimelineTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTimelineTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTimelineTag::CopyFrom(const CTimelineTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTimelineTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTimelineTag::IsInitialized() const {
  return true;
}

void CTimelineTag::InternalSwap(CTimelineTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTimelineTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPhaseAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CPhaseAttribute>()._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPhaseAttribute::CPhaseAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPhaseAttribute)
}
CPhaseAttribute::CPhaseAttribute(const CPhaseAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CPhaseAttribute)
}

void CPhaseAttribute::SharedCtor() {
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
priority_ = 0u;
}

CPhaseAttribute::~CPhaseAttribute() {
  // @@protoc_insertion_point(destructor:CPhaseAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPhaseAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPhaseAttribute::ArenaDtor(void* object) {
  CPhaseAttribute* _this = reinterpret_cast< CPhaseAttribute* >(object);
  (void)_this;
}
void CPhaseAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPhaseAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPhaseAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CPhaseAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPhaseAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPhaseAttribute.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPhaseAttribute.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPhaseAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPhaseAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPhaseAttribute.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPhaseAttribute.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional uint32 priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPhaseAttribute)
  return target;
}

size_t CPhaseAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPhaseAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional uint32 priority = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPhaseAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPhaseAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhaseAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPhaseAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPhaseAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPhaseAttribute)
    MergeFrom(*source);
  }
}

void CPhaseAttribute::MergeFrom(const CPhaseAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPhaseAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhaseAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPhaseAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhaseAttribute::CopyFrom(const CPhaseAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPhaseAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhaseAttribute::IsInitialized() const {
  return true;
}

void CPhaseAttribute::InternalSwap(CPhaseAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPhaseAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameRecordingFile* Arena::CreateMaybeMessage< ::CGameRecordingFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingClipFile* Arena::CreateMaybeMessage< ::CGameRecordingClipFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingClipFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTimelineMetadata_Recording* Arena::CreateMaybeMessage< ::CGameRecordingTimelineMetadata_Recording >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTimelineMetadata_Recording >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTimelineMetadata* Arena::CreateMaybeMessage< ::CGameRecordingTimelineMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTimelineMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingPostGameSummary* Arena::CreateMaybeMessage< ::CGameRecordingPostGameSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingPostGameSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTimelineEvent* Arena::CreateMaybeMessage< ::CGameRecordingTimelineEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTimelineEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTag_Timeline* Arena::CreateMaybeMessage< ::CGameRecordingTag_Timeline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTag_Timeline >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTag* Arena::CreateMaybeMessage< ::CGameRecordingTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingTagInstance* Arena::CreateMaybeMessage< ::CGameRecordingTagInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingTagInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingPhase_Tag* Arena::CreateMaybeMessage< ::CGameRecordingPhase_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingPhase_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingPhase* Arena::CreateMaybeMessage< ::CGameRecordingPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::CTimelineTag* Arena::CreateMaybeMessage< ::CTimelineTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTimelineTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CPhaseAttribute* Arena::CreateMaybeMessage< ::CPhaseAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPhaseAttribute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
