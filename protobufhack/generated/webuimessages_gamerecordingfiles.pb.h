// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamerecordingfiles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecordingfiles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecordingfiles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fgamerecordingfiles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fgamerecordingfiles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamerecordingfiles_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(int index);
class CGameRecordingClipFile;
struct CGameRecordingClipFileDefaultTypeInternal;
extern CGameRecordingClipFileDefaultTypeInternal _CGameRecordingClipFile_default_instance_;
class CGameRecordingFile;
struct CGameRecordingFileDefaultTypeInternal;
extern CGameRecordingFileDefaultTypeInternal _CGameRecordingFile_default_instance_;
class CGameRecordingPostGameSummary;
struct CGameRecordingPostGameSummaryDefaultTypeInternal;
extern CGameRecordingPostGameSummaryDefaultTypeInternal _CGameRecordingPostGameSummary_default_instance_;
class CGameRecordingTimelineEvent;
struct CGameRecordingTimelineEventDefaultTypeInternal;
extern CGameRecordingTimelineEventDefaultTypeInternal _CGameRecordingTimelineEvent_default_instance_;
class CGameRecordingTimelineMetadata;
struct CGameRecordingTimelineMetadataDefaultTypeInternal;
extern CGameRecordingTimelineMetadataDefaultTypeInternal _CGameRecordingTimelineMetadata_default_instance_;
class CGameRecordingTimelineMetadata_Recording;
struct CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal;
extern CGameRecordingTimelineMetadata_RecordingDefaultTypeInternal _CGameRecordingTimelineMetadata_Recording_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameRecordingClipFile* Arena::CreateMaybeMessage<::CGameRecordingClipFile>(Arena*);
template<> ::CGameRecordingFile* Arena::CreateMaybeMessage<::CGameRecordingFile>(Arena*);
template<> ::CGameRecordingPostGameSummary* Arena::CreateMaybeMessage<::CGameRecordingPostGameSummary>(Arena*);
template<> ::CGameRecordingTimelineEvent* Arena::CreateMaybeMessage<::CGameRecordingTimelineEvent>(Arena*);
template<> ::CGameRecordingTimelineMetadata* Arena::CreateMaybeMessage<::CGameRecordingTimelineMetadata>(Arena*);
template<> ::CGameRecordingTimelineMetadata_Recording* Arena::CreateMaybeMessage<::CGameRecordingTimelineMetadata_Recording>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CGameRecordingFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingFile) */ {
 public:
  inline CGameRecordingFile() : CGameRecordingFile(nullptr) {}
  virtual ~CGameRecordingFile();
  explicit constexpr CGameRecordingFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingFile(const CGameRecordingFile& from);
  CGameRecordingFile(CGameRecordingFile&& from) noexcept
    : CGameRecordingFile() {
    *this = ::std::move(from);
  }

  inline CGameRecordingFile& operator=(const CGameRecordingFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingFile& operator=(CGameRecordingFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingFile* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingFile*>(
               &_CGameRecordingFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameRecordingFile& a, CGameRecordingFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingFile* New() const final {
    return CreateMaybeMessage<CGameRecordingFile>(nullptr);
  }

  CGameRecordingFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingFile& from);
  void MergeFrom(const CGameRecordingFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingFile";
  }
  protected:
  explicit CGameRecordingFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelinesFieldNumber = 1,
    kPostgameEventsFieldNumber = 2,
    kTemporaryClipsFieldNumber = 3,
  };
  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  int timelines_size() const;
  private:
  int _internal_timelines_size() const;
  public:
  void clear_timelines();
  ::CGameRecordingTimelineMetadata* mutable_timelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
      mutable_timelines();
  private:
  const ::CGameRecordingTimelineMetadata& _internal_timelines(int index) const;
  ::CGameRecordingTimelineMetadata* _internal_add_timelines();
  public:
  const ::CGameRecordingTimelineMetadata& timelines(int index) const;
  ::CGameRecordingTimelineMetadata* add_timelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
      timelines() const;

  // repeated .CGameRecordingPostGameSummary postgame_events = 2;
  int postgame_events_size() const;
  private:
  int _internal_postgame_events_size() const;
  public:
  void clear_postgame_events();
  ::CGameRecordingPostGameSummary* mutable_postgame_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingPostGameSummary >*
      mutable_postgame_events();
  private:
  const ::CGameRecordingPostGameSummary& _internal_postgame_events(int index) const;
  ::CGameRecordingPostGameSummary* _internal_add_postgame_events();
  public:
  const ::CGameRecordingPostGameSummary& postgame_events(int index) const;
  ::CGameRecordingPostGameSummary* add_postgame_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingPostGameSummary >&
      postgame_events() const;

  // repeated string temporary_clips = 3;
  int temporary_clips_size() const;
  private:
  int _internal_temporary_clips_size() const;
  public:
  void clear_temporary_clips();
  const std::string& temporary_clips(int index) const;
  std::string* mutable_temporary_clips(int index);
  void set_temporary_clips(int index, const std::string& value);
  void set_temporary_clips(int index, std::string&& value);
  void set_temporary_clips(int index, const char* value);
  void set_temporary_clips(int index, const char* value, size_t size);
  std::string* add_temporary_clips();
  void add_temporary_clips(const std::string& value);
  void add_temporary_clips(std::string&& value);
  void add_temporary_clips(const char* value);
  void add_temporary_clips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& temporary_clips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_temporary_clips();
  private:
  const std::string& _internal_temporary_clips(int index) const;
  std::string* _internal_add_temporary_clips();
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata > timelines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingPostGameSummary > postgame_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> temporary_clips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingClipFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingClipFile) */ {
 public:
  inline CGameRecordingClipFile() : CGameRecordingClipFile(nullptr) {}
  virtual ~CGameRecordingClipFile();
  explicit constexpr CGameRecordingClipFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingClipFile(const CGameRecordingClipFile& from);
  CGameRecordingClipFile(CGameRecordingClipFile&& from) noexcept
    : CGameRecordingClipFile() {
    *this = ::std::move(from);
  }

  inline CGameRecordingClipFile& operator=(const CGameRecordingClipFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingClipFile& operator=(CGameRecordingClipFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingClipFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingClipFile* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingClipFile*>(
               &_CGameRecordingClipFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameRecordingClipFile& a, CGameRecordingClipFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingClipFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingClipFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingClipFile* New() const final {
    return CreateMaybeMessage<CGameRecordingClipFile>(nullptr);
  }

  CGameRecordingClipFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingClipFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingClipFile& from);
  void MergeFrom(const CGameRecordingClipFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingClipFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingClipFile";
  }
  protected:
  explicit CGameRecordingClipFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelinesFieldNumber = 1,
    kNameFieldNumber = 7,
    kOriginalDeviceFieldNumber = 9,
    kFirstTimelineStartOffsetMsFieldNumber = 2,
    kGameIdFieldNumber = 4,
    kPublishedFileIdFieldNumber = 5,
    kDateRecordedFieldNumber = 3,
    kTemporaryFieldNumber = 8,
    kSizeInBytesFieldNumber = 6,
    kOriginalGamingDeviceTypeFieldNumber = 10,
    kDateDownloadedFieldNumber = 11,
    kThumbnailWidthFieldNumber = 12,
    kThumbnailHeightFieldNumber = 13,
  };
  // repeated .CGameRecordingTimelineMetadata timelines = 1;
  int timelines_size() const;
  private:
  int _internal_timelines_size() const;
  public:
  void clear_timelines();
  ::CGameRecordingTimelineMetadata* mutable_timelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
      mutable_timelines();
  private:
  const ::CGameRecordingTimelineMetadata& _internal_timelines(int index) const;
  ::CGameRecordingTimelineMetadata* _internal_add_timelines();
  public:
  const ::CGameRecordingTimelineMetadata& timelines(int index) const;
  ::CGameRecordingTimelineMetadata* add_timelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
      timelines() const;

  // optional string name = 7;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string original_device = 9;
  bool has_original_device() const;
  private:
  bool _internal_has_original_device() const;
  public:
  void clear_original_device();
  const std::string& original_device() const;
  void set_original_device(const std::string& value);
  void set_original_device(std::string&& value);
  void set_original_device(const char* value);
  void set_original_device(const char* value, size_t size);
  std::string* mutable_original_device();
  std::string* release_original_device();
  void set_allocated_original_device(std::string* original_device);
  private:
  const std::string& _internal_original_device() const;
  void _internal_set_original_device(const std::string& value);
  std::string* _internal_mutable_original_device();
  public:

  // optional uint64 first_timeline_start_offset_ms = 2;
  bool has_first_timeline_start_offset_ms() const;
  private:
  bool _internal_has_first_timeline_start_offset_ms() const;
  public:
  void clear_first_timeline_start_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_timeline_start_offset_ms() const;
  void set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_timeline_start_offset_ms() const;
  void _internal_set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 game_id = 4;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 published_file_id = 5;
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 published_file_id() const;
  void set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_published_file_id() const;
  void _internal_set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 date_recorded = 3;
  bool has_date_recorded() const;
  private:
  bool _internal_has_date_recorded() const;
  public:
  void clear_date_recorded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded() const;
  void set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_recorded() const;
  void _internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool temporary = 8;
  bool has_temporary() const;
  private:
  bool _internal_has_temporary() const;
  public:
  void clear_temporary();
  bool temporary() const;
  void set_temporary(bool value);
  private:
  bool _internal_temporary() const;
  void _internal_set_temporary(bool value);
  public:

  // optional uint64 size_in_bytes = 6;
  bool has_size_in_bytes() const;
  private:
  bool _internal_has_size_in_bytes() const;
  public:
  void clear_size_in_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_in_bytes() const;
  void set_size_in_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size_in_bytes() const;
  void _internal_set_size_in_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 original_gaming_device_type = 10;
  bool has_original_gaming_device_type() const;
  private:
  bool _internal_has_original_gaming_device_type() const;
  public:
  void clear_original_gaming_device_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 original_gaming_device_type() const;
  void set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_gaming_device_type() const;
  void _internal_set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 date_downloaded = 11;
  bool has_date_downloaded() const;
  private:
  bool _internal_has_date_downloaded() const;
  public:
  void clear_date_downloaded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_downloaded() const;
  void set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_downloaded() const;
  void _internal_set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thumbnail_width = 12;
  bool has_thumbnail_width() const;
  private:
  bool _internal_has_thumbnail_width() const;
  public:
  void clear_thumbnail_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_width() const;
  void set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thumbnail_width() const;
  void _internal_set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thumbnail_height = 13;
  bool has_thumbnail_height() const;
  private:
  bool _internal_has_thumbnail_height() const;
  public:
  void clear_thumbnail_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_height() const;
  void set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thumbnail_height() const;
  void _internal_set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingClipFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata > timelines_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_device_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_timeline_start_offset_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 published_file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded_;
  bool temporary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_in_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 original_gaming_device_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_downloaded_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thumbnail_height_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingTimelineMetadata_Recording PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingTimelineMetadata.Recording) */ {
 public:
  inline CGameRecordingTimelineMetadata_Recording() : CGameRecordingTimelineMetadata_Recording(nullptr) {}
  virtual ~CGameRecordingTimelineMetadata_Recording();
  explicit constexpr CGameRecordingTimelineMetadata_Recording(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingTimelineMetadata_Recording(const CGameRecordingTimelineMetadata_Recording& from);
  CGameRecordingTimelineMetadata_Recording(CGameRecordingTimelineMetadata_Recording&& from) noexcept
    : CGameRecordingTimelineMetadata_Recording() {
    *this = ::std::move(from);
  }

  inline CGameRecordingTimelineMetadata_Recording& operator=(const CGameRecordingTimelineMetadata_Recording& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingTimelineMetadata_Recording& operator=(CGameRecordingTimelineMetadata_Recording&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingTimelineMetadata_Recording& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingTimelineMetadata_Recording* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingTimelineMetadata_Recording*>(
               &_CGameRecordingTimelineMetadata_Recording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameRecordingTimelineMetadata_Recording& a, CGameRecordingTimelineMetadata_Recording& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingTimelineMetadata_Recording* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingTimelineMetadata_Recording* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingTimelineMetadata_Recording* New() const final {
    return CreateMaybeMessage<CGameRecordingTimelineMetadata_Recording>(nullptr);
  }

  CGameRecordingTimelineMetadata_Recording* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingTimelineMetadata_Recording>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingTimelineMetadata_Recording& from);
  void MergeFrom(const CGameRecordingTimelineMetadata_Recording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingTimelineMetadata_Recording* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingTimelineMetadata.Recording";
  }
  protected:
  explicit CGameRecordingTimelineMetadata_Recording(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordingIdFieldNumber = 1,
    kCdnManifestUrlFieldNumber = 8,
    kStartOffsetMsFieldNumber = 2,
    kDurationMsFieldNumber = 3,
    kRecordingTypeFieldNumber = 4,
    kDeleteOnCleanupFieldNumber = 5,
    kVideoManagerClipIdFieldNumber = 6,
    kVideoManagerVideoIdFieldNumber = 7,
    kFileSizeFieldNumber = 9,
    kRecordingZeroTimelineOffsetMsFieldNumber = 10,
  };
  // optional string recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  const std::string& recording_id() const;
  void set_recording_id(const std::string& value);
  void set_recording_id(std::string&& value);
  void set_recording_id(const char* value);
  void set_recording_id(const char* value, size_t size);
  std::string* mutable_recording_id();
  std::string* release_recording_id();
  void set_allocated_recording_id(std::string* recording_id);
  private:
  const std::string& _internal_recording_id() const;
  void _internal_set_recording_id(const std::string& value);
  std::string* _internal_mutable_recording_id();
  public:

  // optional string cdn_manifest_url = 8;
  bool has_cdn_manifest_url() const;
  private:
  bool _internal_has_cdn_manifest_url() const;
  public:
  void clear_cdn_manifest_url();
  const std::string& cdn_manifest_url() const;
  void set_cdn_manifest_url(const std::string& value);
  void set_cdn_manifest_url(std::string&& value);
  void set_cdn_manifest_url(const char* value);
  void set_cdn_manifest_url(const char* value, size_t size);
  std::string* mutable_cdn_manifest_url();
  std::string* release_cdn_manifest_url();
  void set_allocated_cdn_manifest_url(std::string* cdn_manifest_url);
  private:
  const std::string& _internal_cdn_manifest_url() const;
  void _internal_set_cdn_manifest_url(const std::string& value);
  std::string* _internal_mutable_cdn_manifest_url();
  public:

  // optional uint64 start_offset_ms = 2;
  bool has_start_offset_ms() const;
  private:
  bool _internal_has_start_offset_ms() const;
  public:
  void clear_start_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ms() const;
  void set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset_ms() const;
  void _internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 3;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .EGameRecordingType recording_type = 4 [default = EGameRecordingType_Unknown];
  bool has_recording_type() const;
  private:
  bool _internal_has_recording_type() const;
  public:
  void clear_recording_type();
  ::EGameRecordingType recording_type() const;
  void set_recording_type(::EGameRecordingType value);
  private:
  ::EGameRecordingType _internal_recording_type() const;
  void _internal_set_recording_type(::EGameRecordingType value);
  public:

  // optional bool delete_on_cleanup = 5;
  bool has_delete_on_cleanup() const;
  private:
  bool _internal_has_delete_on_cleanup() const;
  public:
  void clear_delete_on_cleanup();
  bool delete_on_cleanup() const;
  void set_delete_on_cleanup(bool value);
  private:
  bool _internal_delete_on_cleanup() const;
  void _internal_set_delete_on_cleanup(bool value);
  public:

  // optional uint64 video_manager_clip_id = 6;
  bool has_video_manager_clip_id() const;
  private:
  bool _internal_has_video_manager_clip_id() const;
  public:
  void clear_video_manager_clip_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_clip_id() const;
  void set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_manager_clip_id() const;
  void _internal_set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 video_manager_video_id = 7;
  bool has_video_manager_video_id() const;
  private:
  bool _internal_has_video_manager_video_id() const;
  public:
  void clear_video_manager_video_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_video_id() const;
  void set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_manager_video_id() const;
  void _internal_set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 file_size = 9;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 recording_zero_timeline_offset_ms = 10;
  bool has_recording_zero_timeline_offset_ms() const;
  private:
  bool _internal_has_recording_zero_timeline_offset_ms() const;
  public:
  void clear_recording_zero_timeline_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_zero_timeline_offset_ms() const;
  void set_recording_zero_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recording_zero_timeline_offset_ms() const;
  void _internal_set_recording_zero_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingTimelineMetadata.Recording)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recording_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_manifest_url_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  int recording_type_;
  bool delete_on_cleanup_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_clip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_video_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_zero_timeline_offset_ms_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingTimelineMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingTimelineMetadata) */ {
 public:
  inline CGameRecordingTimelineMetadata() : CGameRecordingTimelineMetadata(nullptr) {}
  virtual ~CGameRecordingTimelineMetadata();
  explicit constexpr CGameRecordingTimelineMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingTimelineMetadata(const CGameRecordingTimelineMetadata& from);
  CGameRecordingTimelineMetadata(CGameRecordingTimelineMetadata&& from) noexcept
    : CGameRecordingTimelineMetadata() {
    *this = ::std::move(from);
  }

  inline CGameRecordingTimelineMetadata& operator=(const CGameRecordingTimelineMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingTimelineMetadata& operator=(CGameRecordingTimelineMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingTimelineMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingTimelineMetadata* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingTimelineMetadata*>(
               &_CGameRecordingTimelineMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGameRecordingTimelineMetadata& a, CGameRecordingTimelineMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingTimelineMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingTimelineMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingTimelineMetadata* New() const final {
    return CreateMaybeMessage<CGameRecordingTimelineMetadata>(nullptr);
  }

  CGameRecordingTimelineMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingTimelineMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingTimelineMetadata& from);
  void MergeFrom(const CGameRecordingTimelineMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingTimelineMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingTimelineMetadata";
  }
  protected:
  explicit CGameRecordingTimelineMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecordingTimelineMetadata_Recording Recording;

  // accessors -------------------------------------------------------

  enum : int {
    kRecordingsFieldNumber = 5,
    kTimelineIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
    kDurationMsFieldNumber = 4,
    kDateRecordedFieldNumber = 3,
  };
  // repeated .CGameRecordingTimelineMetadata.Recording recordings = 5;
  int recordings_size() const;
  private:
  int _internal_recordings_size() const;
  public:
  void clear_recordings();
  ::CGameRecordingTimelineMetadata_Recording* mutable_recordings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata_Recording >*
      mutable_recordings();
  private:
  const ::CGameRecordingTimelineMetadata_Recording& _internal_recordings(int index) const;
  ::CGameRecordingTimelineMetadata_Recording* _internal_add_recordings();
  public:
  const ::CGameRecordingTimelineMetadata_Recording& recordings(int index) const;
  ::CGameRecordingTimelineMetadata_Recording* add_recordings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata_Recording >&
      recordings() const;

  // optional string timeline_id = 1;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional uint64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 4;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 date_recorded = 3;
  bool has_date_recorded() const;
  private:
  bool _internal_has_date_recorded() const;
  public:
  void clear_date_recorded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded() const;
  void set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_recorded() const;
  void _internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingTimelineMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata_Recording > recordings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingPostGameSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingPostGameSummary) */ {
 public:
  inline CGameRecordingPostGameSummary() : CGameRecordingPostGameSummary(nullptr) {}
  virtual ~CGameRecordingPostGameSummary();
  explicit constexpr CGameRecordingPostGameSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingPostGameSummary(const CGameRecordingPostGameSummary& from);
  CGameRecordingPostGameSummary(CGameRecordingPostGameSummary&& from) noexcept
    : CGameRecordingPostGameSummary() {
    *this = ::std::move(from);
  }

  inline CGameRecordingPostGameSummary& operator=(const CGameRecordingPostGameSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingPostGameSummary& operator=(CGameRecordingPostGameSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingPostGameSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingPostGameSummary* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingPostGameSummary*>(
               &_CGameRecordingPostGameSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameRecordingPostGameSummary& a, CGameRecordingPostGameSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingPostGameSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingPostGameSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingPostGameSummary* New() const final {
    return CreateMaybeMessage<CGameRecordingPostGameSummary>(nullptr);
  }

  CGameRecordingPostGameSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingPostGameSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingPostGameSummary& from);
  void MergeFrom(const CGameRecordingPostGameSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingPostGameSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingPostGameSummary";
  }
  protected:
  explicit CGameRecordingPostGameSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // repeated .CGameRecordingTimelineEvent events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CGameRecordingTimelineEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >*
      mutable_events();
  private:
  const ::CGameRecordingTimelineEvent& _internal_events(int index) const;
  ::CGameRecordingTimelineEvent* _internal_add_events();
  public:
  const ::CGameRecordingTimelineEvent& events(int index) const;
  ::CGameRecordingTimelineEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >&
      events() const;

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingPostGameSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingTimelineEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingTimelineEvent) */ {
 public:
  inline CGameRecordingTimelineEvent() : CGameRecordingTimelineEvent(nullptr) {}
  virtual ~CGameRecordingTimelineEvent();
  explicit constexpr CGameRecordingTimelineEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingTimelineEvent(const CGameRecordingTimelineEvent& from);
  CGameRecordingTimelineEvent(CGameRecordingTimelineEvent&& from) noexcept
    : CGameRecordingTimelineEvent() {
    *this = ::std::move(from);
  }

  inline CGameRecordingTimelineEvent& operator=(const CGameRecordingTimelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingTimelineEvent& operator=(CGameRecordingTimelineEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingTimelineEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingTimelineEvent* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingTimelineEvent*>(
               &_CGameRecordingTimelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGameRecordingTimelineEvent& a, CGameRecordingTimelineEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingTimelineEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingTimelineEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingTimelineEvent* New() const final {
    return CreateMaybeMessage<CGameRecordingTimelineEvent>(nullptr);
  }

  CGameRecordingTimelineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingTimelineEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingTimelineEvent& from);
  void MergeFrom(const CGameRecordingTimelineEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingTimelineEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingTimelineEvent";
  }
  protected:
  explicit CGameRecordingTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamerecordingfiles_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineIdFieldNumber = 4,
    kMarkerIconFieldNumber = 8,
    kMarkerTitleFieldNumber = 9,
    kGameIdFieldNumber = 1,
    kRtCreatedFieldNumber = 2,
    kPossibleClipFieldNumber = 3,
    kEntryIdFieldNumber = 5,
    kTimelineOffsetMsFieldNumber = 6,
    kDurationMsFieldNumber = 7,
    kUserMarkerFieldNumber = 10,
  };
  // optional string timeline_id = 4;
  bool has_timeline_id() const;
  private:
  bool _internal_has_timeline_id() const;
  public:
  void clear_timeline_id();
  const std::string& timeline_id() const;
  void set_timeline_id(const std::string& value);
  void set_timeline_id(std::string&& value);
  void set_timeline_id(const char* value);
  void set_timeline_id(const char* value, size_t size);
  std::string* mutable_timeline_id();
  std::string* release_timeline_id();
  void set_allocated_timeline_id(std::string* timeline_id);
  private:
  const std::string& _internal_timeline_id() const;
  void _internal_set_timeline_id(const std::string& value);
  std::string* _internal_mutable_timeline_id();
  public:

  // optional string marker_icon = 8;
  bool has_marker_icon() const;
  private:
  bool _internal_has_marker_icon() const;
  public:
  void clear_marker_icon();
  const std::string& marker_icon() const;
  void set_marker_icon(const std::string& value);
  void set_marker_icon(std::string&& value);
  void set_marker_icon(const char* value);
  void set_marker_icon(const char* value, size_t size);
  std::string* mutable_marker_icon();
  std::string* release_marker_icon();
  void set_allocated_marker_icon(std::string* marker_icon);
  private:
  const std::string& _internal_marker_icon() const;
  void _internal_set_marker_icon(const std::string& value);
  std::string* _internal_mutable_marker_icon();
  public:

  // optional string marker_title = 9;
  bool has_marker_title() const;
  private:
  bool _internal_has_marker_title() const;
  public:
  void clear_marker_title();
  const std::string& marker_title() const;
  void set_marker_title(const std::string& value);
  void set_marker_title(std::string&& value);
  void set_marker_title(const char* value);
  void set_marker_title(const char* value, size_t size);
  std::string* mutable_marker_title();
  std::string* release_marker_title();
  void set_allocated_marker_title(std::string* marker_title);
  private:
  const std::string& _internal_marker_title() const;
  void _internal_set_marker_title(const std::string& value);
  std::string* _internal_mutable_marker_title();
  public:

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rt_created = 2;
  bool has_rt_created() const;
  private:
  bool _internal_has_rt_created() const;
  public:
  void clear_rt_created();
  ::PROTOBUF_NAMESPACE_ID::uint32 rt_created() const;
  void set_rt_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rt_created() const;
  void _internal_set_rt_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 possible_clip = 3;
  bool has_possible_clip() const;
  private:
  bool _internal_has_possible_clip() const;
  public:
  void clear_possible_clip();
  ::PROTOBUF_NAMESPACE_ID::int32 possible_clip() const;
  void set_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possible_clip() const;
  void _internal_set_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 entry_id = 5;
  bool has_entry_id() const;
  private:
  bool _internal_has_entry_id() const;
  public:
  void clear_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id() const;
  void set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_entry_id() const;
  void _internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 timeline_offset_ms = 6;
  bool has_timeline_offset_ms() const;
  private:
  bool _internal_has_timeline_offset_ms() const;
  public:
  void clear_timeline_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeline_offset_ms() const;
  void set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeline_offset_ms() const;
  void _internal_set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 duration_ms = 7;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool user_marker = 10;
  bool has_user_marker() const;
  private:
  bool _internal_has_user_marker() const;
  public:
  void clear_user_marker();
  bool user_marker() const;
  void set_user_marker(bool value);
  private:
  bool _internal_user_marker() const;
  void _internal_set_user_marker(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingTimelineEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rt_created_;
  ::PROTOBUF_NAMESPACE_ID::int32 possible_clip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeline_offset_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  bool user_marker_;
  friend struct ::TableStruct_webuimessages_5fgamerecordingfiles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameRecordingFile

// repeated .CGameRecordingTimelineMetadata timelines = 1;
inline int CGameRecordingFile::_internal_timelines_size() const {
  return timelines_.size();
}
inline int CGameRecordingFile::timelines_size() const {
  return _internal_timelines_size();
}
inline void CGameRecordingFile::clear_timelines() {
  timelines_.Clear();
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingFile::mutable_timelines(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingFile.timelines)
  return timelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
CGameRecordingFile::mutable_timelines() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingFile.timelines)
  return &timelines_;
}
inline const ::CGameRecordingTimelineMetadata& CGameRecordingFile::_internal_timelines(int index) const {
  return timelines_.Get(index);
}
inline const ::CGameRecordingTimelineMetadata& CGameRecordingFile::timelines(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingFile.timelines)
  return _internal_timelines(index);
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingFile::_internal_add_timelines() {
  return timelines_.Add();
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingFile::add_timelines() {
  // @@protoc_insertion_point(field_add:CGameRecordingFile.timelines)
  return _internal_add_timelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
CGameRecordingFile::timelines() const {
  // @@protoc_insertion_point(field_list:CGameRecordingFile.timelines)
  return timelines_;
}

// repeated .CGameRecordingPostGameSummary postgame_events = 2;
inline int CGameRecordingFile::_internal_postgame_events_size() const {
  return postgame_events_.size();
}
inline int CGameRecordingFile::postgame_events_size() const {
  return _internal_postgame_events_size();
}
inline void CGameRecordingFile::clear_postgame_events() {
  postgame_events_.Clear();
}
inline ::CGameRecordingPostGameSummary* CGameRecordingFile::mutable_postgame_events(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingFile.postgame_events)
  return postgame_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingPostGameSummary >*
CGameRecordingFile::mutable_postgame_events() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingFile.postgame_events)
  return &postgame_events_;
}
inline const ::CGameRecordingPostGameSummary& CGameRecordingFile::_internal_postgame_events(int index) const {
  return postgame_events_.Get(index);
}
inline const ::CGameRecordingPostGameSummary& CGameRecordingFile::postgame_events(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingFile.postgame_events)
  return _internal_postgame_events(index);
}
inline ::CGameRecordingPostGameSummary* CGameRecordingFile::_internal_add_postgame_events() {
  return postgame_events_.Add();
}
inline ::CGameRecordingPostGameSummary* CGameRecordingFile::add_postgame_events() {
  // @@protoc_insertion_point(field_add:CGameRecordingFile.postgame_events)
  return _internal_add_postgame_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingPostGameSummary >&
CGameRecordingFile::postgame_events() const {
  // @@protoc_insertion_point(field_list:CGameRecordingFile.postgame_events)
  return postgame_events_;
}

// repeated string temporary_clips = 3;
inline int CGameRecordingFile::_internal_temporary_clips_size() const {
  return temporary_clips_.size();
}
inline int CGameRecordingFile::temporary_clips_size() const {
  return _internal_temporary_clips_size();
}
inline void CGameRecordingFile::clear_temporary_clips() {
  temporary_clips_.Clear();
}
inline std::string* CGameRecordingFile::add_temporary_clips() {
  // @@protoc_insertion_point(field_add_mutable:CGameRecordingFile.temporary_clips)
  return _internal_add_temporary_clips();
}
inline const std::string& CGameRecordingFile::_internal_temporary_clips(int index) const {
  return temporary_clips_.Get(index);
}
inline const std::string& CGameRecordingFile::temporary_clips(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingFile.temporary_clips)
  return _internal_temporary_clips(index);
}
inline std::string* CGameRecordingFile::mutable_temporary_clips(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingFile.temporary_clips)
  return temporary_clips_.Mutable(index);
}
inline void CGameRecordingFile::set_temporary_clips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CGameRecordingFile.temporary_clips)
  temporary_clips_.Mutable(index)->assign(value);
}
inline void CGameRecordingFile::set_temporary_clips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CGameRecordingFile.temporary_clips)
  temporary_clips_.Mutable(index)->assign(std::move(value));
}
inline void CGameRecordingFile::set_temporary_clips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  temporary_clips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGameRecordingFile.temporary_clips)
}
inline void CGameRecordingFile::set_temporary_clips(int index, const char* value, size_t size) {
  temporary_clips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingFile.temporary_clips)
}
inline std::string* CGameRecordingFile::_internal_add_temporary_clips() {
  return temporary_clips_.Add();
}
inline void CGameRecordingFile::add_temporary_clips(const std::string& value) {
  temporary_clips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGameRecordingFile.temporary_clips)
}
inline void CGameRecordingFile::add_temporary_clips(std::string&& value) {
  temporary_clips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGameRecordingFile.temporary_clips)
}
inline void CGameRecordingFile::add_temporary_clips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  temporary_clips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGameRecordingFile.temporary_clips)
}
inline void CGameRecordingFile::add_temporary_clips(const char* value, size_t size) {
  temporary_clips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGameRecordingFile.temporary_clips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGameRecordingFile::temporary_clips() const {
  // @@protoc_insertion_point(field_list:CGameRecordingFile.temporary_clips)
  return temporary_clips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGameRecordingFile::mutable_temporary_clips() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingFile.temporary_clips)
  return &temporary_clips_;
}

// -------------------------------------------------------------------

// CGameRecordingClipFile

// repeated .CGameRecordingTimelineMetadata timelines = 1;
inline int CGameRecordingClipFile::_internal_timelines_size() const {
  return timelines_.size();
}
inline int CGameRecordingClipFile::timelines_size() const {
  return _internal_timelines_size();
}
inline void CGameRecordingClipFile::clear_timelines() {
  timelines_.Clear();
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingClipFile::mutable_timelines(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingClipFile.timelines)
  return timelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >*
CGameRecordingClipFile::mutable_timelines() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingClipFile.timelines)
  return &timelines_;
}
inline const ::CGameRecordingTimelineMetadata& CGameRecordingClipFile::_internal_timelines(int index) const {
  return timelines_.Get(index);
}
inline const ::CGameRecordingTimelineMetadata& CGameRecordingClipFile::timelines(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.timelines)
  return _internal_timelines(index);
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingClipFile::_internal_add_timelines() {
  return timelines_.Add();
}
inline ::CGameRecordingTimelineMetadata* CGameRecordingClipFile::add_timelines() {
  // @@protoc_insertion_point(field_add:CGameRecordingClipFile.timelines)
  return _internal_add_timelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata >&
CGameRecordingClipFile::timelines() const {
  // @@protoc_insertion_point(field_list:CGameRecordingClipFile.timelines)
  return timelines_;
}

// optional uint64 first_timeline_start_offset_ms = 2;
inline bool CGameRecordingClipFile::_internal_has_first_timeline_start_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_first_timeline_start_offset_ms() const {
  return _internal_has_first_timeline_start_offset_ms();
}
inline void CGameRecordingClipFile::clear_first_timeline_start_offset_ms() {
  first_timeline_start_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::_internal_first_timeline_start_offset_ms() const {
  return first_timeline_start_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::first_timeline_start_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.first_timeline_start_offset_ms)
  return _internal_first_timeline_start_offset_ms();
}
inline void CGameRecordingClipFile::_internal_set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  first_timeline_start_offset_ms_ = value;
}
inline void CGameRecordingClipFile::set_first_timeline_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_timeline_start_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.first_timeline_start_offset_ms)
}

// optional uint32 date_recorded = 3;
inline bool CGameRecordingClipFile::_internal_has_date_recorded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_date_recorded() const {
  return _internal_has_date_recorded();
}
inline void CGameRecordingClipFile::clear_date_recorded() {
  date_recorded_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::_internal_date_recorded() const {
  return date_recorded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::date_recorded() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.date_recorded)
  return _internal_date_recorded();
}
inline void CGameRecordingClipFile::_internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  date_recorded_ = value;
}
inline void CGameRecordingClipFile::set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_recorded(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.date_recorded)
}

// optional uint64 game_id = 4;
inline bool CGameRecordingClipFile::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecordingClipFile::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.game_id)
  return _internal_game_id();
}
inline void CGameRecordingClipFile::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  game_id_ = value;
}
inline void CGameRecordingClipFile::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.game_id)
}

// optional fixed64 published_file_id = 5;
inline bool CGameRecordingClipFile::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CGameRecordingClipFile::clear_published_file_id() {
  published_file_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::_internal_published_file_id() const {
  return published_file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::published_file_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.published_file_id)
  return _internal_published_file_id();
}
inline void CGameRecordingClipFile::_internal_set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  published_file_id_ = value;
}
inline void CGameRecordingClipFile::set_published_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.published_file_id)
}

// optional uint64 size_in_bytes = 6;
inline bool CGameRecordingClipFile::_internal_has_size_in_bytes() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_size_in_bytes() const {
  return _internal_has_size_in_bytes();
}
inline void CGameRecordingClipFile::clear_size_in_bytes() {
  size_in_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::_internal_size_in_bytes() const {
  return size_in_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClipFile::size_in_bytes() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.size_in_bytes)
  return _internal_size_in_bytes();
}
inline void CGameRecordingClipFile::_internal_set_size_in_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  size_in_bytes_ = value;
}
inline void CGameRecordingClipFile::set_size_in_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size_in_bytes(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.size_in_bytes)
}

// optional string name = 7;
inline bool CGameRecordingClipFile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_name() const {
  return _internal_has_name();
}
inline void CGameRecordingClipFile::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecordingClipFile::name() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.name)
  return _internal_name();
}
inline void CGameRecordingClipFile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.name)
}
inline std::string* CGameRecordingClipFile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingClipFile.name)
  return _internal_mutable_name();
}
inline const std::string& CGameRecordingClipFile::_internal_name() const {
  return name_.Get();
}
inline void CGameRecordingClipFile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingClipFile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingClipFile.name)
}
inline void CGameRecordingClipFile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingClipFile.name)
}
inline void CGameRecordingClipFile::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingClipFile.name)
}
inline std::string* CGameRecordingClipFile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingClipFile::release_name() {
  // @@protoc_insertion_point(field_release:CGameRecordingClipFile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingClipFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingClipFile.name)
}

// optional bool temporary = 8;
inline bool CGameRecordingClipFile::_internal_has_temporary() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_temporary() const {
  return _internal_has_temporary();
}
inline void CGameRecordingClipFile::clear_temporary() {
  temporary_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CGameRecordingClipFile::_internal_temporary() const {
  return temporary_;
}
inline bool CGameRecordingClipFile::temporary() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.temporary)
  return _internal_temporary();
}
inline void CGameRecordingClipFile::_internal_set_temporary(bool value) {
  _has_bits_[0] |= 0x00000040u;
  temporary_ = value;
}
inline void CGameRecordingClipFile::set_temporary(bool value) {
  _internal_set_temporary(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.temporary)
}

// optional string original_device = 9;
inline bool CGameRecordingClipFile::_internal_has_original_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_original_device() const {
  return _internal_has_original_device();
}
inline void CGameRecordingClipFile::clear_original_device() {
  original_device_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecordingClipFile::original_device() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.original_device)
  return _internal_original_device();
}
inline void CGameRecordingClipFile::set_original_device(const std::string& value) {
  _internal_set_original_device(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.original_device)
}
inline std::string* CGameRecordingClipFile::mutable_original_device() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingClipFile.original_device)
  return _internal_mutable_original_device();
}
inline const std::string& CGameRecordingClipFile::_internal_original_device() const {
  return original_device_.Get();
}
inline void CGameRecordingClipFile::_internal_set_original_device(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingClipFile::set_original_device(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  original_device_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingClipFile.original_device)
}
inline void CGameRecordingClipFile::set_original_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingClipFile.original_device)
}
inline void CGameRecordingClipFile::set_original_device(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  original_device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingClipFile.original_device)
}
inline std::string* CGameRecordingClipFile::_internal_mutable_original_device() {
  _has_bits_[0] |= 0x00000002u;
  return original_device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingClipFile::release_original_device() {
  // @@protoc_insertion_point(field_release:CGameRecordingClipFile.original_device)
  if (!_internal_has_original_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return original_device_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingClipFile::set_allocated_original_device(std::string* original_device) {
  if (original_device != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingClipFile.original_device)
}

// optional uint32 original_gaming_device_type = 10;
inline bool CGameRecordingClipFile::_internal_has_original_gaming_device_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_original_gaming_device_type() const {
  return _internal_has_original_gaming_device_type();
}
inline void CGameRecordingClipFile::clear_original_gaming_device_type() {
  original_gaming_device_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::_internal_original_gaming_device_type() const {
  return original_gaming_device_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::original_gaming_device_type() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.original_gaming_device_type)
  return _internal_original_gaming_device_type();
}
inline void CGameRecordingClipFile::_internal_set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  original_gaming_device_type_ = value;
}
inline void CGameRecordingClipFile::set_original_gaming_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_original_gaming_device_type(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.original_gaming_device_type)
}

// optional uint32 date_downloaded = 11;
inline bool CGameRecordingClipFile::_internal_has_date_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_date_downloaded() const {
  return _internal_has_date_downloaded();
}
inline void CGameRecordingClipFile::clear_date_downloaded() {
  date_downloaded_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::_internal_date_downloaded() const {
  return date_downloaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::date_downloaded() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.date_downloaded)
  return _internal_date_downloaded();
}
inline void CGameRecordingClipFile::_internal_set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  date_downloaded_ = value;
}
inline void CGameRecordingClipFile::set_date_downloaded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_downloaded(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.date_downloaded)
}

// optional uint32 thumbnail_width = 12;
inline bool CGameRecordingClipFile::_internal_has_thumbnail_width() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_thumbnail_width() const {
  return _internal_has_thumbnail_width();
}
inline void CGameRecordingClipFile::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::_internal_thumbnail_width() const {
  return thumbnail_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.thumbnail_width)
  return _internal_thumbnail_width();
}
inline void CGameRecordingClipFile::_internal_set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  thumbnail_width_ = value;
}
inline void CGameRecordingClipFile::set_thumbnail_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thumbnail_width(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.thumbnail_width)
}

// optional uint32 thumbnail_height = 13;
inline bool CGameRecordingClipFile::_internal_has_thumbnail_height() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGameRecordingClipFile::has_thumbnail_height() const {
  return _internal_has_thumbnail_height();
}
inline void CGameRecordingClipFile::clear_thumbnail_height() {
  thumbnail_height_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::_internal_thumbnail_height() const {
  return thumbnail_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClipFile::thumbnail_height() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClipFile.thumbnail_height)
  return _internal_thumbnail_height();
}
inline void CGameRecordingClipFile::_internal_set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  thumbnail_height_ = value;
}
inline void CGameRecordingClipFile::set_thumbnail_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thumbnail_height(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClipFile.thumbnail_height)
}

// -------------------------------------------------------------------

// CGameRecordingTimelineMetadata_Recording

// optional string recording_id = 1;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_recording_id() {
  recording_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecordingTimelineMetadata_Recording::recording_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.recording_id)
  return _internal_recording_id();
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_id(const std::string& value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.recording_id)
}
inline std::string* CGameRecordingTimelineMetadata_Recording::mutable_recording_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineMetadata.Recording.recording_id)
  return _internal_mutable_recording_id();
}
inline const std::string& CGameRecordingTimelineMetadata_Recording::_internal_recording_id() const {
  return recording_id_.Get();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_recording_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineMetadata.Recording.recording_id)
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineMetadata.Recording.recording_id)
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineMetadata.Recording.recording_id)
}
inline std::string* CGameRecordingTimelineMetadata_Recording::_internal_mutable_recording_id() {
  _has_bits_[0] |= 0x00000001u;
  return recording_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineMetadata_Recording::release_recording_id() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineMetadata.Recording.recording_id)
  if (!_internal_has_recording_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return recording_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineMetadata_Recording::set_allocated_recording_id(std::string* recording_id) {
  if (recording_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recording_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recording_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineMetadata.Recording.recording_id)
}

// optional uint64 start_offset_ms = 2;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_start_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_start_offset_ms() const {
  return _internal_has_start_offset_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_start_offset_ms() {
  start_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_start_offset_ms() const {
  return start_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::start_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.start_offset_ms)
  return _internal_start_offset_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_offset_ms_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.start_offset_ms)
}

// optional uint64 duration_ms = 3;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ms_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.duration_ms)
}

// optional .EGameRecordingType recording_type = 4 [default = EGameRecordingType_Unknown];
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_recording_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_recording_type() const {
  return _internal_has_recording_type();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_recording_type() {
  recording_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EGameRecordingType CGameRecordingTimelineMetadata_Recording::_internal_recording_type() const {
  return static_cast< ::EGameRecordingType >(recording_type_);
}
inline ::EGameRecordingType CGameRecordingTimelineMetadata_Recording::recording_type() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.recording_type)
  return _internal_recording_type();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_recording_type(::EGameRecordingType value) {
  assert(::EGameRecordingType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  recording_type_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_type(::EGameRecordingType value) {
  _internal_set_recording_type(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.recording_type)
}

// optional bool delete_on_cleanup = 5;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_delete_on_cleanup() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_delete_on_cleanup() const {
  return _internal_has_delete_on_cleanup();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_delete_on_cleanup() {
  delete_on_cleanup_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CGameRecordingTimelineMetadata_Recording::_internal_delete_on_cleanup() const {
  return delete_on_cleanup_;
}
inline bool CGameRecordingTimelineMetadata_Recording::delete_on_cleanup() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.delete_on_cleanup)
  return _internal_delete_on_cleanup();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_delete_on_cleanup(bool value) {
  _has_bits_[0] |= 0x00000020u;
  delete_on_cleanup_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_delete_on_cleanup(bool value) {
  _internal_set_delete_on_cleanup(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.delete_on_cleanup)
}

// optional uint64 video_manager_clip_id = 6;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_video_manager_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_video_manager_clip_id() const {
  return _internal_has_video_manager_clip_id();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_video_manager_clip_id() {
  video_manager_clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_video_manager_clip_id() const {
  return video_manager_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::video_manager_clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.video_manager_clip_id)
  return _internal_video_manager_clip_id();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  video_manager_clip_id_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_manager_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.video_manager_clip_id)
}

// optional uint64 video_manager_video_id = 7;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_video_manager_video_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_video_manager_video_id() const {
  return _internal_has_video_manager_video_id();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_video_manager_video_id() {
  video_manager_video_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_video_manager_video_id() const {
  return video_manager_video_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::video_manager_video_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.video_manager_video_id)
  return _internal_video_manager_video_id();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  video_manager_video_id_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_manager_video_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.video_manager_video_id)
}

// optional string cdn_manifest_url = 8;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_cdn_manifest_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_cdn_manifest_url() const {
  return _internal_has_cdn_manifest_url();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_cdn_manifest_url() {
  cdn_manifest_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecordingTimelineMetadata_Recording::cdn_manifest_url() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
  return _internal_cdn_manifest_url();
}
inline void CGameRecordingTimelineMetadata_Recording::set_cdn_manifest_url(const std::string& value) {
  _internal_set_cdn_manifest_url(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
}
inline std::string* CGameRecordingTimelineMetadata_Recording::mutable_cdn_manifest_url() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
  return _internal_mutable_cdn_manifest_url();
}
inline const std::string& CGameRecordingTimelineMetadata_Recording::_internal_cdn_manifest_url() const {
  return cdn_manifest_url_.Get();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_cdn_manifest_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cdn_manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineMetadata_Recording::set_cdn_manifest_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cdn_manifest_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
}
inline void CGameRecordingTimelineMetadata_Recording::set_cdn_manifest_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cdn_manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
}
inline void CGameRecordingTimelineMetadata_Recording::set_cdn_manifest_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cdn_manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
}
inline std::string* CGameRecordingTimelineMetadata_Recording::_internal_mutable_cdn_manifest_url() {
  _has_bits_[0] |= 0x00000002u;
  return cdn_manifest_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineMetadata_Recording::release_cdn_manifest_url() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
  if (!_internal_has_cdn_manifest_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cdn_manifest_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineMetadata_Recording::set_allocated_cdn_manifest_url(std::string* cdn_manifest_url) {
  if (cdn_manifest_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cdn_manifest_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn_manifest_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineMetadata.Recording.cdn_manifest_url)
}

// optional uint64 file_size = 9;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_file_size() const {
  return _internal_has_file_size();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::file_size() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.file_size)
  return _internal_file_size();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  file_size_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.file_size)
}

// optional uint64 recording_zero_timeline_offset_ms = 10;
inline bool CGameRecordingTimelineMetadata_Recording::_internal_has_recording_zero_timeline_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata_Recording::has_recording_zero_timeline_offset_ms() const {
  return _internal_has_recording_zero_timeline_offset_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::clear_recording_zero_timeline_offset_ms() {
  recording_zero_timeline_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::_internal_recording_zero_timeline_offset_ms() const {
  return recording_zero_timeline_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata_Recording::recording_zero_timeline_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.Recording.recording_zero_timeline_offset_ms)
  return _internal_recording_zero_timeline_offset_ms();
}
inline void CGameRecordingTimelineMetadata_Recording::_internal_set_recording_zero_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  recording_zero_timeline_offset_ms_ = value;
}
inline void CGameRecordingTimelineMetadata_Recording::set_recording_zero_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recording_zero_timeline_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.Recording.recording_zero_timeline_offset_ms)
}

// -------------------------------------------------------------------

// CGameRecordingTimelineMetadata

// optional string timeline_id = 1;
inline bool CGameRecordingTimelineMetadata::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecordingTimelineMetadata::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecordingTimelineMetadata::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecordingTimelineMetadata::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.timeline_id)
}
inline std::string* CGameRecordingTimelineMetadata::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineMetadata.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecordingTimelineMetadata::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecordingTimelineMetadata::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineMetadata::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineMetadata.timeline_id)
}
inline void CGameRecordingTimelineMetadata::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineMetadata.timeline_id)
}
inline void CGameRecordingTimelineMetadata::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineMetadata.timeline_id)
}
inline std::string* CGameRecordingTimelineMetadata::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineMetadata::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineMetadata.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineMetadata::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineMetadata.timeline_id)
}

// optional uint64 game_id = 2;
inline bool CGameRecordingTimelineMetadata::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecordingTimelineMetadata::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.game_id)
  return _internal_game_id();
}
inline void CGameRecordingTimelineMetadata::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  game_id_ = value;
}
inline void CGameRecordingTimelineMetadata::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.game_id)
}

// optional uint32 date_recorded = 3;
inline bool CGameRecordingTimelineMetadata::_internal_has_date_recorded() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata::has_date_recorded() const {
  return _internal_has_date_recorded();
}
inline void CGameRecordingTimelineMetadata::clear_date_recorded() {
  date_recorded_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingTimelineMetadata::_internal_date_recorded() const {
  return date_recorded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingTimelineMetadata::date_recorded() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.date_recorded)
  return _internal_date_recorded();
}
inline void CGameRecordingTimelineMetadata::_internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  date_recorded_ = value;
}
inline void CGameRecordingTimelineMetadata::set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_recorded(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.date_recorded)
}

// optional uint64 duration_ms = 4;
inline bool CGameRecordingTimelineMetadata::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecordingTimelineMetadata::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecordingTimelineMetadata::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineMetadata::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecordingTimelineMetadata::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
}
inline void CGameRecordingTimelineMetadata::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineMetadata.duration_ms)
}

// repeated .CGameRecordingTimelineMetadata.Recording recordings = 5;
inline int CGameRecordingTimelineMetadata::_internal_recordings_size() const {
  return recordings_.size();
}
inline int CGameRecordingTimelineMetadata::recordings_size() const {
  return _internal_recordings_size();
}
inline void CGameRecordingTimelineMetadata::clear_recordings() {
  recordings_.Clear();
}
inline ::CGameRecordingTimelineMetadata_Recording* CGameRecordingTimelineMetadata::mutable_recordings(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineMetadata.recordings)
  return recordings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata_Recording >*
CGameRecordingTimelineMetadata::mutable_recordings() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingTimelineMetadata.recordings)
  return &recordings_;
}
inline const ::CGameRecordingTimelineMetadata_Recording& CGameRecordingTimelineMetadata::_internal_recordings(int index) const {
  return recordings_.Get(index);
}
inline const ::CGameRecordingTimelineMetadata_Recording& CGameRecordingTimelineMetadata::recordings(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineMetadata.recordings)
  return _internal_recordings(index);
}
inline ::CGameRecordingTimelineMetadata_Recording* CGameRecordingTimelineMetadata::_internal_add_recordings() {
  return recordings_.Add();
}
inline ::CGameRecordingTimelineMetadata_Recording* CGameRecordingTimelineMetadata::add_recordings() {
  // @@protoc_insertion_point(field_add:CGameRecordingTimelineMetadata.recordings)
  return _internal_add_recordings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineMetadata_Recording >&
CGameRecordingTimelineMetadata::recordings() const {
  // @@protoc_insertion_point(field_list:CGameRecordingTimelineMetadata.recordings)
  return recordings_;
}

// -------------------------------------------------------------------

// CGameRecordingPostGameSummary

// optional uint64 game_id = 1;
inline bool CGameRecordingPostGameSummary::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingPostGameSummary::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecordingPostGameSummary::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingPostGameSummary::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingPostGameSummary::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingPostGameSummary.game_id)
  return _internal_game_id();
}
inline void CGameRecordingPostGameSummary::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CGameRecordingPostGameSummary::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingPostGameSummary.game_id)
}

// repeated .CGameRecordingTimelineEvent events = 2;
inline int CGameRecordingPostGameSummary::_internal_events_size() const {
  return events_.size();
}
inline int CGameRecordingPostGameSummary::events_size() const {
  return _internal_events_size();
}
inline void CGameRecordingPostGameSummary::clear_events() {
  events_.Clear();
}
inline ::CGameRecordingTimelineEvent* CGameRecordingPostGameSummary::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingPostGameSummary.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >*
CGameRecordingPostGameSummary::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingPostGameSummary.events)
  return &events_;
}
inline const ::CGameRecordingTimelineEvent& CGameRecordingPostGameSummary::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::CGameRecordingTimelineEvent& CGameRecordingPostGameSummary::events(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingPostGameSummary.events)
  return _internal_events(index);
}
inline ::CGameRecordingTimelineEvent* CGameRecordingPostGameSummary::_internal_add_events() {
  return events_.Add();
}
inline ::CGameRecordingTimelineEvent* CGameRecordingPostGameSummary::add_events() {
  // @@protoc_insertion_point(field_add:CGameRecordingPostGameSummary.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecordingTimelineEvent >&
CGameRecordingPostGameSummary::events() const {
  // @@protoc_insertion_point(field_list:CGameRecordingPostGameSummary.events)
  return events_;
}

// -------------------------------------------------------------------

// CGameRecordingTimelineEvent

// optional uint64 game_id = 1;
inline bool CGameRecordingTimelineEvent::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_game_id() const {
  return _internal_has_game_id();
}
inline void CGameRecordingTimelineEvent::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::game_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.game_id)
  return _internal_game_id();
}
inline void CGameRecordingTimelineEvent::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  game_id_ = value;
}
inline void CGameRecordingTimelineEvent::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.game_id)
}

// optional uint32 rt_created = 2;
inline bool CGameRecordingTimelineEvent::_internal_has_rt_created() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_rt_created() const {
  return _internal_has_rt_created();
}
inline void CGameRecordingTimelineEvent::clear_rt_created() {
  rt_created_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingTimelineEvent::_internal_rt_created() const {
  return rt_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingTimelineEvent::rt_created() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.rt_created)
  return _internal_rt_created();
}
inline void CGameRecordingTimelineEvent::_internal_set_rt_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rt_created_ = value;
}
inline void CGameRecordingTimelineEvent::set_rt_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rt_created(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.rt_created)
}

// optional int32 possible_clip = 3;
inline bool CGameRecordingTimelineEvent::_internal_has_possible_clip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_possible_clip() const {
  return _internal_has_possible_clip();
}
inline void CGameRecordingTimelineEvent::clear_possible_clip() {
  possible_clip_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecordingTimelineEvent::_internal_possible_clip() const {
  return possible_clip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRecordingTimelineEvent::possible_clip() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.possible_clip)
  return _internal_possible_clip();
}
inline void CGameRecordingTimelineEvent::_internal_set_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  possible_clip_ = value;
}
inline void CGameRecordingTimelineEvent::set_possible_clip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_possible_clip(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.possible_clip)
}

// optional string timeline_id = 4;
inline bool CGameRecordingTimelineEvent::_internal_has_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_timeline_id() const {
  return _internal_has_timeline_id();
}
inline void CGameRecordingTimelineEvent::clear_timeline_id() {
  timeline_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecordingTimelineEvent::timeline_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.timeline_id)
  return _internal_timeline_id();
}
inline void CGameRecordingTimelineEvent::set_timeline_id(const std::string& value) {
  _internal_set_timeline_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.timeline_id)
}
inline std::string* CGameRecordingTimelineEvent::mutable_timeline_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineEvent.timeline_id)
  return _internal_mutable_timeline_id();
}
inline const std::string& CGameRecordingTimelineEvent::_internal_timeline_id() const {
  return timeline_id_.Get();
}
inline void CGameRecordingTimelineEvent::_internal_set_timeline_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineEvent::set_timeline_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineEvent.timeline_id)
}
inline void CGameRecordingTimelineEvent::set_timeline_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineEvent.timeline_id)
}
inline void CGameRecordingTimelineEvent::set_timeline_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineEvent.timeline_id)
}
inline std::string* CGameRecordingTimelineEvent::_internal_mutable_timeline_id() {
  _has_bits_[0] |= 0x00000001u;
  return timeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineEvent::release_timeline_id() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineEvent.timeline_id)
  if (!_internal_has_timeline_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineEvent::set_allocated_timeline_id(std::string* timeline_id) {
  if (timeline_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineEvent.timeline_id)
}

// optional uint64 entry_id = 5;
inline bool CGameRecordingTimelineEvent::_internal_has_entry_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_entry_id() const {
  return _internal_has_entry_id();
}
inline void CGameRecordingTimelineEvent::clear_entry_id() {
  entry_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::_internal_entry_id() const {
  return entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::entry_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.entry_id)
  return _internal_entry_id();
}
inline void CGameRecordingTimelineEvent::_internal_set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  entry_id_ = value;
}
inline void CGameRecordingTimelineEvent::set_entry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.entry_id)
}

// optional uint64 timeline_offset_ms = 6;
inline bool CGameRecordingTimelineEvent::_internal_has_timeline_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_timeline_offset_ms() const {
  return _internal_has_timeline_offset_ms();
}
inline void CGameRecordingTimelineEvent::clear_timeline_offset_ms() {
  timeline_offset_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::_internal_timeline_offset_ms() const {
  return timeline_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::timeline_offset_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.timeline_offset_ms)
  return _internal_timeline_offset_ms();
}
inline void CGameRecordingTimelineEvent::_internal_set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  timeline_offset_ms_ = value;
}
inline void CGameRecordingTimelineEvent::set_timeline_offset_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeline_offset_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.timeline_offset_ms)
}

// optional uint64 duration_ms = 7;
inline bool CGameRecordingTimelineEvent::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecordingTimelineEvent::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingTimelineEvent::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecordingTimelineEvent::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  duration_ms_ = value;
}
inline void CGameRecordingTimelineEvent::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.duration_ms)
}

// optional string marker_icon = 8;
inline bool CGameRecordingTimelineEvent::_internal_has_marker_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_marker_icon() const {
  return _internal_has_marker_icon();
}
inline void CGameRecordingTimelineEvent::clear_marker_icon() {
  marker_icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecordingTimelineEvent::marker_icon() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.marker_icon)
  return _internal_marker_icon();
}
inline void CGameRecordingTimelineEvent::set_marker_icon(const std::string& value) {
  _internal_set_marker_icon(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.marker_icon)
}
inline std::string* CGameRecordingTimelineEvent::mutable_marker_icon() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineEvent.marker_icon)
  return _internal_mutable_marker_icon();
}
inline const std::string& CGameRecordingTimelineEvent::_internal_marker_icon() const {
  return marker_icon_.Get();
}
inline void CGameRecordingTimelineEvent::_internal_set_marker_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineEvent::set_marker_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineEvent.marker_icon)
}
inline void CGameRecordingTimelineEvent::set_marker_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineEvent.marker_icon)
}
inline void CGameRecordingTimelineEvent::set_marker_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  marker_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineEvent.marker_icon)
}
inline std::string* CGameRecordingTimelineEvent::_internal_mutable_marker_icon() {
  _has_bits_[0] |= 0x00000002u;
  return marker_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineEvent::release_marker_icon() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineEvent.marker_icon)
  if (!_internal_has_marker_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return marker_icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineEvent::set_allocated_marker_icon(std::string* marker_icon) {
  if (marker_icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  marker_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineEvent.marker_icon)
}

// optional string marker_title = 9;
inline bool CGameRecordingTimelineEvent::_internal_has_marker_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_marker_title() const {
  return _internal_has_marker_title();
}
inline void CGameRecordingTimelineEvent::clear_marker_title() {
  marker_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameRecordingTimelineEvent::marker_title() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.marker_title)
  return _internal_marker_title();
}
inline void CGameRecordingTimelineEvent::set_marker_title(const std::string& value) {
  _internal_set_marker_title(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.marker_title)
}
inline std::string* CGameRecordingTimelineEvent::mutable_marker_title() {
  // @@protoc_insertion_point(field_mutable:CGameRecordingTimelineEvent.marker_title)
  return _internal_mutable_marker_title();
}
inline const std::string& CGameRecordingTimelineEvent::_internal_marker_title() const {
  return marker_title_.Get();
}
inline void CGameRecordingTimelineEvent::_internal_set_marker_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  marker_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecordingTimelineEvent::set_marker_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  marker_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecordingTimelineEvent.marker_title)
}
inline void CGameRecordingTimelineEvent::set_marker_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  marker_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecordingTimelineEvent.marker_title)
}
inline void CGameRecordingTimelineEvent::set_marker_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  marker_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecordingTimelineEvent.marker_title)
}
inline std::string* CGameRecordingTimelineEvent::_internal_mutable_marker_title() {
  _has_bits_[0] |= 0x00000004u;
  return marker_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecordingTimelineEvent::release_marker_title() {
  // @@protoc_insertion_point(field_release:CGameRecordingTimelineEvent.marker_title)
  if (!_internal_has_marker_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return marker_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecordingTimelineEvent::set_allocated_marker_title(std::string* marker_title) {
  if (marker_title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  marker_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecordingTimelineEvent.marker_title)
}

// optional bool user_marker = 10;
inline bool CGameRecordingTimelineEvent::_internal_has_user_marker() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameRecordingTimelineEvent::has_user_marker() const {
  return _internal_has_user_marker();
}
inline void CGameRecordingTimelineEvent::clear_user_marker() {
  user_marker_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CGameRecordingTimelineEvent::_internal_user_marker() const {
  return user_marker_;
}
inline bool CGameRecordingTimelineEvent::user_marker() const {
  // @@protoc_insertion_point(field_get:CGameRecordingTimelineEvent.user_marker)
  return _internal_user_marker();
}
inline void CGameRecordingTimelineEvent::_internal_set_user_marker(bool value) {
  _has_bits_[0] |= 0x00000200u;
  user_marker_ = value;
}
inline void CGameRecordingTimelineEvent::set_user_marker(bool value) {
  _internal_set_user_marker(value);
  // @@protoc_insertion_point(field_set:CGameRecordingTimelineEvent.user_marker)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamerecordingfiles_2eproto
