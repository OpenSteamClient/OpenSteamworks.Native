// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamescope.proto

#include "webuimessages_gamescope.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgDisplayInfo::CMsgDisplayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_refresh_rates_()
  , supported_frame_rates_()
  , make_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connector_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_external_(false){}
struct CMsgDisplayInfoDefaultTypeInternal {
  constexpr CMsgDisplayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDisplayInfoDefaultTypeInternal() {}
  union {
    CMsgDisplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDisplayInfoDefaultTypeInternal _CMsgDisplayInfo_default_instance_;
constexpr CMsgGamescopeState::CMsgGamescopeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_display_info_(nullptr)
  , is_service_available_(false)
  , is_reshade_supported_(false)
  , is_app_hdr_enabled_(false)
  , is_app_refresh_rate_supported_(false)
  , is_app_refresh_rate_capable_(false)
  , is_refresh_rate_switching_supported_(false)
  , is_refresh_rate_switching_restricted_(false)
  , is_hdr_visualization_supported_(false){}
struct CMsgGamescopeStateDefaultTypeInternal {
  constexpr CMsgGamescopeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGamescopeStateDefaultTypeInternal() {}
  union {
    CMsgGamescopeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGamescopeStateDefaultTypeInternal _CMsgGamescopeState_default_instance_;
constexpr CGamescope_GetState_Request::CGamescope_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGamescope_GetState_RequestDefaultTypeInternal {
  constexpr CGamescope_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGamescope_GetState_RequestDefaultTypeInternal() {}
  union {
    CGamescope_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGamescope_GetState_RequestDefaultTypeInternal _CGamescope_GetState_Request_default_instance_;
constexpr CGamescope_GetState_Response::CGamescope_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct CGamescope_GetState_ResponseDefaultTypeInternal {
  constexpr CGamescope_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGamescope_GetState_ResponseDefaultTypeInternal() {}
  union {
    CGamescope_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGamescope_GetState_ResponseDefaultTypeInternal _CGamescope_GetState_Response_default_instance_;
constexpr CGamescope_StateChanged_Notification::CGamescope_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGamescope_StateChanged_NotificationDefaultTypeInternal {
  constexpr CGamescope_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGamescope_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CGamescope_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGamescope_StateChanged_NotificationDefaultTypeInternal _CGamescope_StateChanged_Notification_default_instance_;
constexpr CGamescope_SetBlurParams_Request::CGamescope_SetBlurParams_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)

  , radius_(0)
  , fade_duration_ms_(0){}
struct CGamescope_SetBlurParams_RequestDefaultTypeInternal {
  constexpr CGamescope_SetBlurParams_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGamescope_SetBlurParams_RequestDefaultTypeInternal() {}
  union {
    CGamescope_SetBlurParams_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGamescope_SetBlurParams_RequestDefaultTypeInternal _CGamescope_SetBlurParams_Request_default_instance_;
constexpr CGamescope_SetBlurParams_Response::CGamescope_SetBlurParams_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGamescope_SetBlurParams_ResponseDefaultTypeInternal {
  constexpr CGamescope_SetBlurParams_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGamescope_SetBlurParams_ResponseDefaultTypeInternal() {}
  union {
    CGamescope_SetBlurParams_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGamescope_SetBlurParams_ResponseDefaultTypeInternal _CGamescope_SetBlurParams_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fgamescope_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fgamescope_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fgamescope_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fgamescope_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, make_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, model_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, connector_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, supported_refresh_rates_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, supported_frame_rates_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisplayInfo, is_external_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_service_available_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_reshade_supported_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_app_hdr_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_app_refresh_rate_supported_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, active_display_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_app_refresh_rate_capable_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_refresh_rate_switching_supported_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_refresh_rate_switching_restricted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGamescopeState, is_hdr_visualization_supported_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGamescope_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGamescope_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGamescope_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGamescope_GetState_Response, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGamescope_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Request, mode_),
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Request, radius_),
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Request, fade_duration_ms_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGamescope_SetBlurParams_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CMsgDisplayInfo)},
  { 17, 31, sizeof(::CMsgGamescopeState)},
  { 40, -1, sizeof(::CGamescope_GetState_Request)},
  { 45, 51, sizeof(::CGamescope_GetState_Response)},
  { 52, -1, sizeof(::CGamescope_StateChanged_Notification)},
  { 57, 65, sizeof(::CGamescope_SetBlurParams_Request)},
  { 68, -1, sizeof(::CGamescope_SetBlurParams_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDisplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGamescopeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGamescope_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGamescope_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGamescope_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGamescope_SetBlurParams_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGamescope_SetBlurParams_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fgamescope_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035webuimessages_gamescope.proto\032 google/"
  "protobuf/descriptor.proto\032\013enums.proto\032\030"
  "steammessages_base.proto\032\030webuimessages_"
  "base.proto\"\233\001\n\017CMsgDisplayInfo\022\014\n\004make\030\001"
  " \001(\t\022\r\n\005model\030\002 \001(\t\022\026\n\016connector_name\030\003 "
  "\001(\t\022\037\n\027supported_refresh_rates\030\004 \003(\005\022\035\n\025"
  "supported_frame_rates\030\005 \003(\005\022\023\n\013is_extern"
  "al\030\006 \001(\010\"\352\002\n\022CMsgGamescopeState\022\034\n\024is_se"
  "rvice_available\030\001 \001(\010\022\034\n\024is_reshade_supp"
  "orted\030\002 \001(\010\022\032\n\022is_app_hdr_enabled\030\003 \001(\010\022"
  "%\n\035is_app_refresh_rate_supported\030\004 \001(\010\022-"
  "\n\023active_display_info\030\005 \001(\0132\020.CMsgDispla"
  "yInfo\022#\n\033is_app_refresh_rate_capable\030\006 \001"
  "(\010\022+\n#is_refresh_rate_switching_supporte"
  "d\030\007 \001(\010\022,\n$is_refresh_rate_switching_res"
  "tricted\030\010 \001(\010\022&\n\036is_hdr_visualization_su"
  "pported\030\t \001(\010\"\035\n\033CGamescope_GetState_Req"
  "uest\"B\n\034CGamescope_GetState_Response\022\"\n\005"
  "state\030\001 \001(\0132\023.CMsgGamescopeState\"&\n$CGam"
  "escope_StateChanged_Notification\"\214\001\n CGa"
  "mescope_SetBlurParams_Request\022>\n\004mode\030\001 "
  "\001(\0162\023.EGamescopeBlurMode:\033EGamescopeBlur"
  "Mode_Disabled\022\016\n\006radius\030\002 \001(\005\022\030\n\020fade_du"
  "ration_ms\030\003 \001(\005\"#\n!CGamescope_SetBlurPar"
  "ams_Response2\201\002\n\tGamescope\022G\n\010GetState\022\034"
  ".CGamescope_GetState_Request\032\035.CGamescop"
  "e_GetState_Response\022M\n\022NotifyStateChange"
  "d\022%.CGamescope_StateChanged_Notification"
  "\032\020.WebUINoResponse\022V\n\rSetBlurParams\022!.CG"
  "amescope_SetBlurParams_Request\032\".CGamesc"
  "ope_SetBlurParams_Response\032\004\200\227\"\001B\037H\001\200\001\001\252"
  "\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fgamescope_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fgamescope_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamescope_2eproto = {
  false, false, 1265, descriptor_table_protodef_webuimessages_5fgamescope_2eproto, "webuimessages_gamescope.proto", 
  &descriptor_table_webuimessages_5fgamescope_2eproto_once, descriptor_table_webuimessages_5fgamescope_2eproto_deps, 4, 7,
  schemas, file_default_instances, TableStruct_webuimessages_5fgamescope_2eproto::offsets,
  file_level_metadata_webuimessages_5fgamescope_2eproto, file_level_enum_descriptors_webuimessages_5fgamescope_2eproto, file_level_service_descriptors_webuimessages_5fgamescope_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamescope_2eproto);
  return descriptor_table_webuimessages_5fgamescope_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fgamescope_2eproto(&descriptor_table_webuimessages_5fgamescope_2eproto);

// ===================================================================

class CMsgDisplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDisplayInfo>()._has_bits_);
  static void set_has_make(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connector_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_external(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDisplayInfo::CMsgDisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_refresh_rates_(arena),
  supported_frame_rates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDisplayInfo)
}
CMsgDisplayInfo::CMsgDisplayInfo(const CMsgDisplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supported_refresh_rates_(from.supported_refresh_rates_),
      supported_frame_rates_(from.supported_frame_rates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  make_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_make()) {
    make_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_make(), 
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  connector_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connector_name()) {
    connector_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connector_name(), 
      GetArena());
  }
  is_external_ = from.is_external_;
  // @@protoc_insertion_point(copy_constructor:CMsgDisplayInfo)
}

void CMsgDisplayInfo::SharedCtor() {
make_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
connector_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_external_ = false;
}

CMsgDisplayInfo::~CMsgDisplayInfo() {
  // @@protoc_insertion_point(destructor:CMsgDisplayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDisplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  make_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connector_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDisplayInfo::ArenaDtor(void* object) {
  CMsgDisplayInfo* _this = reinterpret_cast< CMsgDisplayInfo* >(object);
  (void)_this;
}
void CMsgDisplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDisplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_refresh_rates_.Clear();
  supported_frame_rates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      make_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      connector_name_.ClearNonDefaultToEmpty();
    }
  }
  is_external_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDisplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string make = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_make();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDisplayInfo.make");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDisplayInfo.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connector_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_connector_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDisplayInfo.connector_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 supported_refresh_rates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_supported_refresh_rates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_supported_refresh_rates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 supported_frame_rates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_supported_frame_rates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_supported_frame_rates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_external = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_external(&has_bits);
          is_external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDisplayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string make = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_make().data(), static_cast<int>(this->_internal_make().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDisplayInfo.make");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_make(), target);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDisplayInfo.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // optional string connector_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connector_name().data(), static_cast<int>(this->_internal_connector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDisplayInfo.connector_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connector_name(), target);
  }

  // repeated int32 supported_refresh_rates = 4;
  for (int i = 0, n = this->_internal_supported_refresh_rates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_supported_refresh_rates(i), target);
  }

  // repeated int32 supported_frame_rates = 5;
  for (int i = 0, n = this->_internal_supported_frame_rates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_supported_frame_rates(i), target);
  }

  // optional bool is_external = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_external(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDisplayInfo)
  return target;
}

size_t CMsgDisplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDisplayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 supported_refresh_rates = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->supported_refresh_rates_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_supported_refresh_rates_size());
    total_size += data_size;
  }

  // repeated int32 supported_frame_rates = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->supported_frame_rates_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_supported_frame_rates_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string make = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_make());
    }

    // optional string model = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional string connector_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connector_name());
    }

    // optional bool is_external = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDisplayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDisplayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDisplayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDisplayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDisplayInfo)
    MergeFrom(*source);
  }
}

void CMsgDisplayInfo::MergeFrom(const CMsgDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_refresh_rates_.MergeFrom(from.supported_refresh_rates_);
  supported_frame_rates_.MergeFrom(from.supported_frame_rates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_make(from._internal_make());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_connector_name(from._internal_connector_name());
    }
    if (cached_has_bits & 0x00000008u) {
      is_external_ = from.is_external_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDisplayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDisplayInfo::CopyFrom(const CMsgDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDisplayInfo::IsInitialized() const {
  return true;
}

void CMsgDisplayInfo::InternalSwap(CMsgDisplayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_refresh_rates_.InternalSwap(&other->supported_refresh_rates_);
  supported_frame_rates_.InternalSwap(&other->supported_frame_rates_);
  make_.Swap(&other->make_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connector_name_.Swap(&other->connector_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_external_, other->is_external_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDisplayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGamescopeState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGamescopeState>()._has_bits_);
  static void set_has_is_service_available(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_reshade_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_app_hdr_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_app_refresh_rate_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDisplayInfo& active_display_info(const CMsgGamescopeState* msg);
  static void set_has_active_display_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_app_refresh_rate_capable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_refresh_rate_switching_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_refresh_rate_switching_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_hdr_visualization_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDisplayInfo&
CMsgGamescopeState::_Internal::active_display_info(const CMsgGamescopeState* msg) {
  return *msg->active_display_info_;
}
CMsgGamescopeState::CMsgGamescopeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGamescopeState)
}
CMsgGamescopeState::CMsgGamescopeState(const CMsgGamescopeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_display_info()) {
    active_display_info_ = new ::CMsgDisplayInfo(*from.active_display_info_);
  } else {
    active_display_info_ = nullptr;
  }
  ::memcpy(&is_service_available_, &from.is_service_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_hdr_visualization_supported_) -
    reinterpret_cast<char*>(&is_service_available_)) + sizeof(is_hdr_visualization_supported_));
  // @@protoc_insertion_point(copy_constructor:CMsgGamescopeState)
}

void CMsgGamescopeState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&active_display_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_hdr_visualization_supported_) -
    reinterpret_cast<char*>(&active_display_info_)) + sizeof(is_hdr_visualization_supported_));
}

CMsgGamescopeState::~CMsgGamescopeState() {
  // @@protoc_insertion_point(destructor:CMsgGamescopeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGamescopeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete active_display_info_;
}

void CMsgGamescopeState::ArenaDtor(void* object) {
  CMsgGamescopeState* _this = reinterpret_cast< CMsgGamescopeState* >(object);
  (void)_this;
}
void CMsgGamescopeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGamescopeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGamescopeState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGamescopeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(active_display_info_ != nullptr);
    active_display_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&is_service_available_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_refresh_rate_switching_restricted_) -
        reinterpret_cast<char*>(&is_service_available_)) + sizeof(is_refresh_rate_switching_restricted_));
  }
  is_hdr_visualization_supported_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGamescopeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_service_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_service_available(&has_bits);
          is_service_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_reshade_supported = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_reshade_supported(&has_bits);
          is_reshade_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_app_hdr_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_app_hdr_enabled(&has_bits);
          is_app_hdr_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_app_refresh_rate_supported = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_app_refresh_rate_supported(&has_bits);
          is_app_refresh_rate_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDisplayInfo active_display_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_display_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_app_refresh_rate_capable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_app_refresh_rate_capable(&has_bits);
          is_app_refresh_rate_capable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_refresh_rate_switching_supported = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_refresh_rate_switching_supported(&has_bits);
          is_refresh_rate_switching_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_refresh_rate_switching_restricted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_refresh_rate_switching_restricted(&has_bits);
          is_refresh_rate_switching_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hdr_visualization_supported = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_hdr_visualization_supported(&has_bits);
          is_hdr_visualization_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGamescopeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGamescopeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_service_available = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_service_available(), target);
  }

  // optional bool is_reshade_supported = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_reshade_supported(), target);
  }

  // optional bool is_app_hdr_enabled = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_app_hdr_enabled(), target);
  }

  // optional bool is_app_refresh_rate_supported = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_app_refresh_rate_supported(), target);
  }

  // optional .CMsgDisplayInfo active_display_info = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::active_display_info(this), target, stream);
  }

  // optional bool is_app_refresh_rate_capable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_app_refresh_rate_capable(), target);
  }

  // optional bool is_refresh_rate_switching_supported = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_refresh_rate_switching_supported(), target);
  }

  // optional bool is_refresh_rate_switching_restricted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_refresh_rate_switching_restricted(), target);
  }

  // optional bool is_hdr_visualization_supported = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_hdr_visualization_supported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGamescopeState)
  return target;
}

size_t CMsgGamescopeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGamescopeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDisplayInfo active_display_info = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_display_info_);
    }

    // optional bool is_service_available = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_reshade_supported = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_app_hdr_enabled = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_app_refresh_rate_supported = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_app_refresh_rate_capable = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_refresh_rate_switching_supported = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_refresh_rate_switching_restricted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_hdr_visualization_supported = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGamescopeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGamescopeState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGamescopeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGamescopeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGamescopeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGamescopeState)
    MergeFrom(*source);
  }
}

void CMsgGamescopeState::MergeFrom(const CMsgGamescopeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGamescopeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_active_display_info()->::CMsgDisplayInfo::MergeFrom(from._internal_active_display_info());
    }
    if (cached_has_bits & 0x00000002u) {
      is_service_available_ = from.is_service_available_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_reshade_supported_ = from.is_reshade_supported_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_app_hdr_enabled_ = from.is_app_hdr_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_app_refresh_rate_supported_ = from.is_app_refresh_rate_supported_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_app_refresh_rate_capable_ = from.is_app_refresh_rate_capable_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_refresh_rate_switching_supported_ = from.is_refresh_rate_switching_supported_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_refresh_rate_switching_restricted_ = from.is_refresh_rate_switching_restricted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_hdr_visualization_supported(from._internal_is_hdr_visualization_supported());
  }
}

void CMsgGamescopeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGamescopeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGamescopeState::CopyFrom(const CMsgGamescopeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGamescopeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGamescopeState::IsInitialized() const {
  return true;
}

void CMsgGamescopeState::InternalSwap(CMsgGamescopeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGamescopeState, is_hdr_visualization_supported_)
      + sizeof(CMsgGamescopeState::is_hdr_visualization_supported_)
      - PROTOBUF_FIELD_OFFSET(CMsgGamescopeState, active_display_info_)>(
          reinterpret_cast<char*>(&active_display_info_),
          reinterpret_cast<char*>(&other->active_display_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGamescopeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGamescope_GetState_Request::_Internal {
 public:
};

CGamescope_GetState_Request::CGamescope_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGamescope_GetState_Request)
}
CGamescope_GetState_Request::CGamescope_GetState_Request(const CGamescope_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGamescope_GetState_Request)
}

void CGamescope_GetState_Request::SharedCtor() {
}

CGamescope_GetState_Request::~CGamescope_GetState_Request() {
  // @@protoc_insertion_point(destructor:CGamescope_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGamescope_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGamescope_GetState_Request::ArenaDtor(void* object) {
  CGamescope_GetState_Request* _this = reinterpret_cast< CGamescope_GetState_Request* >(object);
  (void)_this;
}
void CGamescope_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGamescope_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGamescope_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGamescope_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGamescope_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGamescope_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGamescope_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGamescope_GetState_Request)
  return target;
}

size_t CGamescope_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGamescope_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGamescope_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGamescope_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGamescope_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGamescope_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGamescope_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGamescope_GetState_Request)
    MergeFrom(*source);
  }
}

void CGamescope_GetState_Request::MergeFrom(const CGamescope_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGamescope_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGamescope_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGamescope_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGamescope_GetState_Request::CopyFrom(const CGamescope_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGamescope_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGamescope_GetState_Request::IsInitialized() const {
  return true;
}

void CGamescope_GetState_Request::InternalSwap(CGamescope_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGamescope_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGamescope_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGamescope_GetState_Response>()._has_bits_);
  static const ::CMsgGamescopeState& state(const CGamescope_GetState_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGamescopeState&
CGamescope_GetState_Response::_Internal::state(const CGamescope_GetState_Response* msg) {
  return *msg->state_;
}
CGamescope_GetState_Response::CGamescope_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGamescope_GetState_Response)
}
CGamescope_GetState_Response::CGamescope_GetState_Response(const CGamescope_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CMsgGamescopeState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGamescope_GetState_Response)
}

void CGamescope_GetState_Response::SharedCtor() {
state_ = nullptr;
}

CGamescope_GetState_Response::~CGamescope_GetState_Response() {
  // @@protoc_insertion_point(destructor:CGamescope_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGamescope_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void CGamescope_GetState_Response::ArenaDtor(void* object) {
  CGamescope_GetState_Response* _this = reinterpret_cast< CGamescope_GetState_Response* >(object);
  (void)_this;
}
void CGamescope_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGamescope_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGamescope_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGamescope_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGamescope_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGamescopeState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGamescope_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGamescope_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGamescopeState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGamescope_GetState_Response)
  return target;
}

size_t CGamescope_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGamescope_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGamescopeState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGamescope_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGamescope_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGamescope_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGamescope_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGamescope_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGamescope_GetState_Response)
    MergeFrom(*source);
  }
}

void CGamescope_GetState_Response::MergeFrom(const CGamescope_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGamescope_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CMsgGamescopeState::MergeFrom(from._internal_state());
  }
}

void CGamescope_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGamescope_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGamescope_GetState_Response::CopyFrom(const CGamescope_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGamescope_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGamescope_GetState_Response::IsInitialized() const {
  return true;
}

void CGamescope_GetState_Response::InternalSwap(CGamescope_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGamescope_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGamescope_StateChanged_Notification::_Internal {
 public:
};

CGamescope_StateChanged_Notification::CGamescope_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGamescope_StateChanged_Notification)
}
CGamescope_StateChanged_Notification::CGamescope_StateChanged_Notification(const CGamescope_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGamescope_StateChanged_Notification)
}

void CGamescope_StateChanged_Notification::SharedCtor() {
}

CGamescope_StateChanged_Notification::~CGamescope_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGamescope_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGamescope_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGamescope_StateChanged_Notification::ArenaDtor(void* object) {
  CGamescope_StateChanged_Notification* _this = reinterpret_cast< CGamescope_StateChanged_Notification* >(object);
  (void)_this;
}
void CGamescope_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGamescope_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGamescope_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGamescope_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGamescope_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGamescope_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGamescope_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGamescope_StateChanged_Notification)
  return target;
}

size_t CGamescope_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGamescope_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGamescope_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGamescope_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGamescope_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGamescope_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGamescope_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGamescope_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CGamescope_StateChanged_Notification::MergeFrom(const CGamescope_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGamescope_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGamescope_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGamescope_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGamescope_StateChanged_Notification::CopyFrom(const CGamescope_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGamescope_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGamescope_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CGamescope_StateChanged_Notification::InternalSwap(CGamescope_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGamescope_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGamescope_SetBlurParams_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGamescope_SetBlurParams_Request>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fade_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGamescope_SetBlurParams_Request::CGamescope_SetBlurParams_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGamescope_SetBlurParams_Request)
}
CGamescope_SetBlurParams_Request::CGamescope_SetBlurParams_Request(const CGamescope_SetBlurParams_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&fade_duration_ms_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(fade_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:CGamescope_SetBlurParams_Request)
}

void CGamescope_SetBlurParams_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fade_duration_ms_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(fade_duration_ms_));
}

CGamescope_SetBlurParams_Request::~CGamescope_SetBlurParams_Request() {
  // @@protoc_insertion_point(destructor:CGamescope_SetBlurParams_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGamescope_SetBlurParams_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGamescope_SetBlurParams_Request::ArenaDtor(void* object) {
  CGamescope_SetBlurParams_Request* _this = reinterpret_cast< CGamescope_SetBlurParams_Request* >(object);
  (void)_this;
}
void CGamescope_SetBlurParams_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGamescope_SetBlurParams_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGamescope_SetBlurParams_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGamescope_SetBlurParams_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_duration_ms_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(fade_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGamescope_SetBlurParams_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGamescopeBlurMode mode = 1 [default = EGamescopeBlurMode_Disabled];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGamescopeBlurMode_IsValid(val))) {
            _internal_set_mode(static_cast<::EGamescopeBlurMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fade_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fade_duration_ms(&has_bits);
          fade_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGamescope_SetBlurParams_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGamescope_SetBlurParams_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGamescopeBlurMode mode = 1 [default = EGamescopeBlurMode_Disabled];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional int32 radius = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_radius(), target);
  }

  // optional int32 fade_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fade_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGamescope_SetBlurParams_Request)
  return target;
}

size_t CGamescope_SetBlurParams_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGamescope_SetBlurParams_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EGamescopeBlurMode mode = 1 [default = EGamescopeBlurMode_Disabled];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional int32 radius = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radius());
    }

    // optional int32 fade_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fade_duration_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGamescope_SetBlurParams_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGamescope_SetBlurParams_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGamescope_SetBlurParams_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGamescope_SetBlurParams_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGamescope_SetBlurParams_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGamescope_SetBlurParams_Request)
    MergeFrom(*source);
  }
}

void CGamescope_SetBlurParams_Request::MergeFrom(const CGamescope_SetBlurParams_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGamescope_SetBlurParams_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      fade_duration_ms_ = from.fade_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGamescope_SetBlurParams_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGamescope_SetBlurParams_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGamescope_SetBlurParams_Request::CopyFrom(const CGamescope_SetBlurParams_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGamescope_SetBlurParams_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGamescope_SetBlurParams_Request::IsInitialized() const {
  return true;
}

void CGamescope_SetBlurParams_Request::InternalSwap(CGamescope_SetBlurParams_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGamescope_SetBlurParams_Request, fade_duration_ms_)
      + sizeof(CGamescope_SetBlurParams_Request::fade_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(CGamescope_SetBlurParams_Request, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGamescope_SetBlurParams_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGamescope_SetBlurParams_Response::_Internal {
 public:
};

CGamescope_SetBlurParams_Response::CGamescope_SetBlurParams_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGamescope_SetBlurParams_Response)
}
CGamescope_SetBlurParams_Response::CGamescope_SetBlurParams_Response(const CGamescope_SetBlurParams_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGamescope_SetBlurParams_Response)
}

void CGamescope_SetBlurParams_Response::SharedCtor() {
}

CGamescope_SetBlurParams_Response::~CGamescope_SetBlurParams_Response() {
  // @@protoc_insertion_point(destructor:CGamescope_SetBlurParams_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGamescope_SetBlurParams_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGamescope_SetBlurParams_Response::ArenaDtor(void* object) {
  CGamescope_SetBlurParams_Response* _this = reinterpret_cast< CGamescope_SetBlurParams_Response* >(object);
  (void)_this;
}
void CGamescope_SetBlurParams_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGamescope_SetBlurParams_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGamescope_SetBlurParams_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGamescope_SetBlurParams_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGamescope_SetBlurParams_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGamescope_SetBlurParams_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGamescope_SetBlurParams_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGamescope_SetBlurParams_Response)
  return target;
}

size_t CGamescope_SetBlurParams_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGamescope_SetBlurParams_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGamescope_SetBlurParams_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGamescope_SetBlurParams_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGamescope_SetBlurParams_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGamescope_SetBlurParams_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGamescope_SetBlurParams_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGamescope_SetBlurParams_Response)
    MergeFrom(*source);
  }
}

void CGamescope_SetBlurParams_Response::MergeFrom(const CGamescope_SetBlurParams_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGamescope_SetBlurParams_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGamescope_SetBlurParams_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGamescope_SetBlurParams_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGamescope_SetBlurParams_Response::CopyFrom(const CGamescope_SetBlurParams_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGamescope_SetBlurParams_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGamescope_SetBlurParams_Response::IsInitialized() const {
  return true;
}

void CGamescope_SetBlurParams_Response::InternalSwap(CGamescope_SetBlurParams_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGamescope_SetBlurParams_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Gamescope::~Gamescope() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Gamescope::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fgamescope_2eproto);
  return file_level_service_descriptors_webuimessages_5fgamescope_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Gamescope::GetDescriptor() {
  return descriptor();
}

void Gamescope::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGamescope_GetState_Request*,
                         ::CGamescope_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void Gamescope::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGamescope_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void Gamescope::SetBlurParams(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGamescope_SetBlurParams_Request*,
                         ::CGamescope_SetBlurParams_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetBlurParams() not implemented.");
  done->Run();
}

void Gamescope::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fgamescope_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGamescope_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGamescope_GetState_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGamescope_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 2:
      SetBlurParams(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGamescope_SetBlurParams_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGamescope_SetBlurParams_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Gamescope::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGamescope_GetState_Request::default_instance();
    case 1:
      return ::CGamescope_StateChanged_Notification::default_instance();
    case 2:
      return ::CGamescope_SetBlurParams_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Gamescope::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGamescope_GetState_Response::default_instance();
    case 1:
      return ::WebUINoResponse::default_instance();
    case 2:
      return ::CGamescope_SetBlurParams_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Gamescope_Stub::Gamescope_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Gamescope_Stub::Gamescope_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Gamescope_Stub::~Gamescope_Stub() {
  if (owns_channel_) delete channel_;
}

void Gamescope_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGamescope_GetState_Request* request,
                              ::CGamescope_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Gamescope_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGamescope_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Gamescope_Stub::SetBlurParams(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGamescope_SetBlurParams_Request* request,
                              ::CGamescope_SetBlurParams_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDisplayInfo* Arena::CreateMaybeMessage< ::CMsgDisplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDisplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGamescopeState* Arena::CreateMaybeMessage< ::CMsgGamescopeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGamescopeState >(arena);
}
template<> PROTOBUF_NOINLINE ::CGamescope_GetState_Request* Arena::CreateMaybeMessage< ::CGamescope_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGamescope_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGamescope_GetState_Response* Arena::CreateMaybeMessage< ::CGamescope_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGamescope_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGamescope_StateChanged_Notification* Arena::CreateMaybeMessage< ::CGamescope_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGamescope_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CGamescope_SetBlurParams_Request* Arena::CreateMaybeMessage< ::CGamescope_SetBlurParams_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGamescope_SetBlurParams_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGamescope_SetBlurParams_Response* Arena::CreateMaybeMessage< ::CGamescope_SetBlurParams_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGamescope_SetBlurParams_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
