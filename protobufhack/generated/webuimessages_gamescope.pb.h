// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_gamescope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamescope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamescope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fgamescope_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fgamescope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fgamescope_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(int index);
class CGamescope_GetState_Request;
struct CGamescope_GetState_RequestDefaultTypeInternal;
extern CGamescope_GetState_RequestDefaultTypeInternal _CGamescope_GetState_Request_default_instance_;
class CGamescope_GetState_Response;
struct CGamescope_GetState_ResponseDefaultTypeInternal;
extern CGamescope_GetState_ResponseDefaultTypeInternal _CGamescope_GetState_Response_default_instance_;
class CGamescope_SetBlurParams_Request;
struct CGamescope_SetBlurParams_RequestDefaultTypeInternal;
extern CGamescope_SetBlurParams_RequestDefaultTypeInternal _CGamescope_SetBlurParams_Request_default_instance_;
class CGamescope_SetBlurParams_Response;
struct CGamescope_SetBlurParams_ResponseDefaultTypeInternal;
extern CGamescope_SetBlurParams_ResponseDefaultTypeInternal _CGamescope_SetBlurParams_Response_default_instance_;
class CGamescope_StateChanged_Notification;
struct CGamescope_StateChanged_NotificationDefaultTypeInternal;
extern CGamescope_StateChanged_NotificationDefaultTypeInternal _CGamescope_StateChanged_Notification_default_instance_;
class CMsgDisplayInfo;
struct CMsgDisplayInfoDefaultTypeInternal;
extern CMsgDisplayInfoDefaultTypeInternal _CMsgDisplayInfo_default_instance_;
class CMsgGamescopeState;
struct CMsgGamescopeStateDefaultTypeInternal;
extern CMsgGamescopeStateDefaultTypeInternal _CMsgGamescopeState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGamescope_GetState_Request* Arena::CreateMaybeMessage<::CGamescope_GetState_Request>(Arena*);
template<> ::CGamescope_GetState_Response* Arena::CreateMaybeMessage<::CGamescope_GetState_Response>(Arena*);
template<> ::CGamescope_SetBlurParams_Request* Arena::CreateMaybeMessage<::CGamescope_SetBlurParams_Request>(Arena*);
template<> ::CGamescope_SetBlurParams_Response* Arena::CreateMaybeMessage<::CGamescope_SetBlurParams_Response>(Arena*);
template<> ::CGamescope_StateChanged_Notification* Arena::CreateMaybeMessage<::CGamescope_StateChanged_Notification>(Arena*);
template<> ::CMsgDisplayInfo* Arena::CreateMaybeMessage<::CMsgDisplayInfo>(Arena*);
template<> ::CMsgGamescopeState* Arena::CreateMaybeMessage<::CMsgGamescopeState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgDisplayInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDisplayInfo) */ {
 public:
  inline CMsgDisplayInfo() : CMsgDisplayInfo(nullptr) {}
  virtual ~CMsgDisplayInfo();
  explicit constexpr CMsgDisplayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDisplayInfo(const CMsgDisplayInfo& from);
  CMsgDisplayInfo(CMsgDisplayInfo&& from) noexcept
    : CMsgDisplayInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDisplayInfo& operator=(const CMsgDisplayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDisplayInfo& operator=(CMsgDisplayInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDisplayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDisplayInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDisplayInfo*>(
               &_CMsgDisplayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgDisplayInfo& a, CMsgDisplayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDisplayInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDisplayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDisplayInfo* New() const final {
    return CreateMaybeMessage<CMsgDisplayInfo>(nullptr);
  }

  CMsgDisplayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDisplayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDisplayInfo& from);
  void MergeFrom(const CMsgDisplayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDisplayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDisplayInfo";
  }
  protected:
  explicit CMsgDisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedRefreshRatesFieldNumber = 4,
    kSupportedFrameRatesFieldNumber = 5,
    kMakeFieldNumber = 1,
    kModelFieldNumber = 2,
    kConnectorNameFieldNumber = 3,
    kIsExternalFieldNumber = 6,
  };
  // repeated int32 supported_refresh_rates = 4;
  int supported_refresh_rates_size() const;
  private:
  int _internal_supported_refresh_rates_size() const;
  public:
  void clear_supported_refresh_rates();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_supported_refresh_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_supported_refresh_rates() const;
  void _internal_add_supported_refresh_rates(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_supported_refresh_rates();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 supported_refresh_rates(int index) const;
  void set_supported_refresh_rates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_supported_refresh_rates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      supported_refresh_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_supported_refresh_rates();

  // repeated int32 supported_frame_rates = 5;
  int supported_frame_rates_size() const;
  private:
  int _internal_supported_frame_rates_size() const;
  public:
  void clear_supported_frame_rates();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_supported_frame_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_supported_frame_rates() const;
  void _internal_add_supported_frame_rates(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_supported_frame_rates();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 supported_frame_rates(int index) const;
  void set_supported_frame_rates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_supported_frame_rates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      supported_frame_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_supported_frame_rates();

  // optional string make = 1;
  bool has_make() const;
  private:
  bool _internal_has_make() const;
  public:
  void clear_make();
  const std::string& make() const;
  void set_make(const std::string& value);
  void set_make(std::string&& value);
  void set_make(const char* value);
  void set_make(const char* value, size_t size);
  std::string* mutable_make();
  std::string* release_make();
  void set_allocated_make(std::string* make);
  private:
  const std::string& _internal_make() const;
  void _internal_set_make(const std::string& value);
  std::string* _internal_mutable_make();
  public:

  // optional string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string connector_name = 3;
  bool has_connector_name() const;
  private:
  bool _internal_has_connector_name() const;
  public:
  void clear_connector_name();
  const std::string& connector_name() const;
  void set_connector_name(const std::string& value);
  void set_connector_name(std::string&& value);
  void set_connector_name(const char* value);
  void set_connector_name(const char* value, size_t size);
  std::string* mutable_connector_name();
  std::string* release_connector_name();
  void set_allocated_connector_name(std::string* connector_name);
  private:
  const std::string& _internal_connector_name() const;
  void _internal_set_connector_name(const std::string& value);
  std::string* _internal_mutable_connector_name();
  public:

  // optional bool is_external = 6;
  bool has_is_external() const;
  private:
  bool _internal_has_is_external() const;
  public:
  void clear_is_external();
  bool is_external() const;
  void set_is_external(bool value);
  private:
  bool _internal_is_external() const;
  void _internal_set_is_external(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDisplayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > supported_refresh_rates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > supported_frame_rates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr make_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connector_name_;
  bool is_external_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CMsgGamescopeState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGamescopeState) */ {
 public:
  inline CMsgGamescopeState() : CMsgGamescopeState(nullptr) {}
  virtual ~CMsgGamescopeState();
  explicit constexpr CMsgGamescopeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGamescopeState(const CMsgGamescopeState& from);
  CMsgGamescopeState(CMsgGamescopeState&& from) noexcept
    : CMsgGamescopeState() {
    *this = ::std::move(from);
  }

  inline CMsgGamescopeState& operator=(const CMsgGamescopeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGamescopeState& operator=(CMsgGamescopeState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGamescopeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGamescopeState* internal_default_instance() {
    return reinterpret_cast<const CMsgGamescopeState*>(
               &_CMsgGamescopeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgGamescopeState& a, CMsgGamescopeState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGamescopeState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGamescopeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGamescopeState* New() const final {
    return CreateMaybeMessage<CMsgGamescopeState>(nullptr);
  }

  CMsgGamescopeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGamescopeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGamescopeState& from);
  void MergeFrom(const CMsgGamescopeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGamescopeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGamescopeState";
  }
  protected:
  explicit CMsgGamescopeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveDisplayInfoFieldNumber = 5,
    kIsServiceAvailableFieldNumber = 1,
    kIsReshadeSupportedFieldNumber = 2,
    kIsAppHdrEnabledFieldNumber = 3,
    kIsAppRefreshRateSupportedFieldNumber = 4,
    kIsAppRefreshRateCapableFieldNumber = 6,
    kIsRefreshRateSwitchingSupportedFieldNumber = 7,
    kIsRefreshRateSwitchingRestrictedFieldNumber = 8,
    kIsHdrVisualizationSupportedFieldNumber = 9,
  };
  // optional .CMsgDisplayInfo active_display_info = 5;
  bool has_active_display_info() const;
  private:
  bool _internal_has_active_display_info() const;
  public:
  void clear_active_display_info();
  const ::CMsgDisplayInfo& active_display_info() const;
  ::CMsgDisplayInfo* release_active_display_info();
  ::CMsgDisplayInfo* mutable_active_display_info();
  void set_allocated_active_display_info(::CMsgDisplayInfo* active_display_info);
  private:
  const ::CMsgDisplayInfo& _internal_active_display_info() const;
  ::CMsgDisplayInfo* _internal_mutable_active_display_info();
  public:
  void unsafe_arena_set_allocated_active_display_info(
      ::CMsgDisplayInfo* active_display_info);
  ::CMsgDisplayInfo* unsafe_arena_release_active_display_info();

  // optional bool is_service_available = 1;
  bool has_is_service_available() const;
  private:
  bool _internal_has_is_service_available() const;
  public:
  void clear_is_service_available();
  bool is_service_available() const;
  void set_is_service_available(bool value);
  private:
  bool _internal_is_service_available() const;
  void _internal_set_is_service_available(bool value);
  public:

  // optional bool is_reshade_supported = 2;
  bool has_is_reshade_supported() const;
  private:
  bool _internal_has_is_reshade_supported() const;
  public:
  void clear_is_reshade_supported();
  bool is_reshade_supported() const;
  void set_is_reshade_supported(bool value);
  private:
  bool _internal_is_reshade_supported() const;
  void _internal_set_is_reshade_supported(bool value);
  public:

  // optional bool is_app_hdr_enabled = 3;
  bool has_is_app_hdr_enabled() const;
  private:
  bool _internal_has_is_app_hdr_enabled() const;
  public:
  void clear_is_app_hdr_enabled();
  bool is_app_hdr_enabled() const;
  void set_is_app_hdr_enabled(bool value);
  private:
  bool _internal_is_app_hdr_enabled() const;
  void _internal_set_is_app_hdr_enabled(bool value);
  public:

  // optional bool is_app_refresh_rate_supported = 4;
  bool has_is_app_refresh_rate_supported() const;
  private:
  bool _internal_has_is_app_refresh_rate_supported() const;
  public:
  void clear_is_app_refresh_rate_supported();
  bool is_app_refresh_rate_supported() const;
  void set_is_app_refresh_rate_supported(bool value);
  private:
  bool _internal_is_app_refresh_rate_supported() const;
  void _internal_set_is_app_refresh_rate_supported(bool value);
  public:

  // optional bool is_app_refresh_rate_capable = 6;
  bool has_is_app_refresh_rate_capable() const;
  private:
  bool _internal_has_is_app_refresh_rate_capable() const;
  public:
  void clear_is_app_refresh_rate_capable();
  bool is_app_refresh_rate_capable() const;
  void set_is_app_refresh_rate_capable(bool value);
  private:
  bool _internal_is_app_refresh_rate_capable() const;
  void _internal_set_is_app_refresh_rate_capable(bool value);
  public:

  // optional bool is_refresh_rate_switching_supported = 7;
  bool has_is_refresh_rate_switching_supported() const;
  private:
  bool _internal_has_is_refresh_rate_switching_supported() const;
  public:
  void clear_is_refresh_rate_switching_supported();
  bool is_refresh_rate_switching_supported() const;
  void set_is_refresh_rate_switching_supported(bool value);
  private:
  bool _internal_is_refresh_rate_switching_supported() const;
  void _internal_set_is_refresh_rate_switching_supported(bool value);
  public:

  // optional bool is_refresh_rate_switching_restricted = 8;
  bool has_is_refresh_rate_switching_restricted() const;
  private:
  bool _internal_has_is_refresh_rate_switching_restricted() const;
  public:
  void clear_is_refresh_rate_switching_restricted();
  bool is_refresh_rate_switching_restricted() const;
  void set_is_refresh_rate_switching_restricted(bool value);
  private:
  bool _internal_is_refresh_rate_switching_restricted() const;
  void _internal_set_is_refresh_rate_switching_restricted(bool value);
  public:

  // optional bool is_hdr_visualization_supported = 9;
  bool has_is_hdr_visualization_supported() const;
  private:
  bool _internal_has_is_hdr_visualization_supported() const;
  public:
  void clear_is_hdr_visualization_supported();
  bool is_hdr_visualization_supported() const;
  void set_is_hdr_visualization_supported(bool value);
  private:
  bool _internal_is_hdr_visualization_supported() const;
  void _internal_set_is_hdr_visualization_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGamescopeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgDisplayInfo* active_display_info_;
  bool is_service_available_;
  bool is_reshade_supported_;
  bool is_app_hdr_enabled_;
  bool is_app_refresh_rate_supported_;
  bool is_app_refresh_rate_capable_;
  bool is_refresh_rate_switching_supported_;
  bool is_refresh_rate_switching_restricted_;
  bool is_hdr_visualization_supported_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CGamescope_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGamescope_GetState_Request) */ {
 public:
  inline CGamescope_GetState_Request() : CGamescope_GetState_Request(nullptr) {}
  virtual ~CGamescope_GetState_Request();
  explicit constexpr CGamescope_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGamescope_GetState_Request(const CGamescope_GetState_Request& from);
  CGamescope_GetState_Request(CGamescope_GetState_Request&& from) noexcept
    : CGamescope_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CGamescope_GetState_Request& operator=(const CGamescope_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGamescope_GetState_Request& operator=(CGamescope_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGamescope_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGamescope_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CGamescope_GetState_Request*>(
               &_CGamescope_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGamescope_GetState_Request& a, CGamescope_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGamescope_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGamescope_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGamescope_GetState_Request* New() const final {
    return CreateMaybeMessage<CGamescope_GetState_Request>(nullptr);
  }

  CGamescope_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGamescope_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGamescope_GetState_Request& from);
  void MergeFrom(const CGamescope_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGamescope_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGamescope_GetState_Request";
  }
  protected:
  explicit CGamescope_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGamescope_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CGamescope_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGamescope_GetState_Response) */ {
 public:
  inline CGamescope_GetState_Response() : CGamescope_GetState_Response(nullptr) {}
  virtual ~CGamescope_GetState_Response();
  explicit constexpr CGamescope_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGamescope_GetState_Response(const CGamescope_GetState_Response& from);
  CGamescope_GetState_Response(CGamescope_GetState_Response&& from) noexcept
    : CGamescope_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CGamescope_GetState_Response& operator=(const CGamescope_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGamescope_GetState_Response& operator=(CGamescope_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGamescope_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGamescope_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CGamescope_GetState_Response*>(
               &_CGamescope_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGamescope_GetState_Response& a, CGamescope_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGamescope_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGamescope_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGamescope_GetState_Response* New() const final {
    return CreateMaybeMessage<CGamescope_GetState_Response>(nullptr);
  }

  CGamescope_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGamescope_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGamescope_GetState_Response& from);
  void MergeFrom(const CGamescope_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGamescope_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGamescope_GetState_Response";
  }
  protected:
  explicit CGamescope_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .CMsgGamescopeState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::CMsgGamescopeState& state() const;
  ::CMsgGamescopeState* release_state();
  ::CMsgGamescopeState* mutable_state();
  void set_allocated_state(::CMsgGamescopeState* state);
  private:
  const ::CMsgGamescopeState& _internal_state() const;
  ::CMsgGamescopeState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::CMsgGamescopeState* state);
  ::CMsgGamescopeState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:CGamescope_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGamescopeState* state_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CGamescope_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGamescope_StateChanged_Notification) */ {
 public:
  inline CGamescope_StateChanged_Notification() : CGamescope_StateChanged_Notification(nullptr) {}
  virtual ~CGamescope_StateChanged_Notification();
  explicit constexpr CGamescope_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGamescope_StateChanged_Notification(const CGamescope_StateChanged_Notification& from);
  CGamescope_StateChanged_Notification(CGamescope_StateChanged_Notification&& from) noexcept
    : CGamescope_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGamescope_StateChanged_Notification& operator=(const CGamescope_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGamescope_StateChanged_Notification& operator=(CGamescope_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGamescope_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGamescope_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGamescope_StateChanged_Notification*>(
               &_CGamescope_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGamescope_StateChanged_Notification& a, CGamescope_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGamescope_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGamescope_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGamescope_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CGamescope_StateChanged_Notification>(nullptr);
  }

  CGamescope_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGamescope_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGamescope_StateChanged_Notification& from);
  void MergeFrom(const CGamescope_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGamescope_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGamescope_StateChanged_Notification";
  }
  protected:
  explicit CGamescope_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGamescope_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CGamescope_SetBlurParams_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGamescope_SetBlurParams_Request) */ {
 public:
  inline CGamescope_SetBlurParams_Request() : CGamescope_SetBlurParams_Request(nullptr) {}
  virtual ~CGamescope_SetBlurParams_Request();
  explicit constexpr CGamescope_SetBlurParams_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGamescope_SetBlurParams_Request(const CGamescope_SetBlurParams_Request& from);
  CGamescope_SetBlurParams_Request(CGamescope_SetBlurParams_Request&& from) noexcept
    : CGamescope_SetBlurParams_Request() {
    *this = ::std::move(from);
  }

  inline CGamescope_SetBlurParams_Request& operator=(const CGamescope_SetBlurParams_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGamescope_SetBlurParams_Request& operator=(CGamescope_SetBlurParams_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGamescope_SetBlurParams_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGamescope_SetBlurParams_Request* internal_default_instance() {
    return reinterpret_cast<const CGamescope_SetBlurParams_Request*>(
               &_CGamescope_SetBlurParams_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGamescope_SetBlurParams_Request& a, CGamescope_SetBlurParams_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGamescope_SetBlurParams_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGamescope_SetBlurParams_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGamescope_SetBlurParams_Request* New() const final {
    return CreateMaybeMessage<CGamescope_SetBlurParams_Request>(nullptr);
  }

  CGamescope_SetBlurParams_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGamescope_SetBlurParams_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGamescope_SetBlurParams_Request& from);
  void MergeFrom(const CGamescope_SetBlurParams_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGamescope_SetBlurParams_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGamescope_SetBlurParams_Request";
  }
  protected:
  explicit CGamescope_SetBlurParams_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kFadeDurationMsFieldNumber = 3,
  };
  // optional .EGamescopeBlurMode mode = 1 [default = EGamescopeBlurMode_Disabled];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::EGamescopeBlurMode mode() const;
  void set_mode(::EGamescopeBlurMode value);
  private:
  ::EGamescopeBlurMode _internal_mode() const;
  void _internal_set_mode(::EGamescopeBlurMode value);
  public:

  // optional int32 radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fade_duration_ms = 3;
  bool has_fade_duration_ms() const;
  private:
  bool _internal_has_fade_duration_ms() const;
  public:
  void clear_fade_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 fade_duration_ms() const;
  void set_fade_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fade_duration_ms() const;
  void _internal_set_fade_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGamescope_SetBlurParams_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 fade_duration_ms_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// -------------------------------------------------------------------

class CGamescope_SetBlurParams_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGamescope_SetBlurParams_Response) */ {
 public:
  inline CGamescope_SetBlurParams_Response() : CGamescope_SetBlurParams_Response(nullptr) {}
  virtual ~CGamescope_SetBlurParams_Response();
  explicit constexpr CGamescope_SetBlurParams_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGamescope_SetBlurParams_Response(const CGamescope_SetBlurParams_Response& from);
  CGamescope_SetBlurParams_Response(CGamescope_SetBlurParams_Response&& from) noexcept
    : CGamescope_SetBlurParams_Response() {
    *this = ::std::move(from);
  }

  inline CGamescope_SetBlurParams_Response& operator=(const CGamescope_SetBlurParams_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGamescope_SetBlurParams_Response& operator=(CGamescope_SetBlurParams_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGamescope_SetBlurParams_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGamescope_SetBlurParams_Response* internal_default_instance() {
    return reinterpret_cast<const CGamescope_SetBlurParams_Response*>(
               &_CGamescope_SetBlurParams_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGamescope_SetBlurParams_Response& a, CGamescope_SetBlurParams_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGamescope_SetBlurParams_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGamescope_SetBlurParams_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGamescope_SetBlurParams_Response* New() const final {
    return CreateMaybeMessage<CGamescope_SetBlurParams_Response>(nullptr);
  }

  CGamescope_SetBlurParams_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGamescope_SetBlurParams_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGamescope_SetBlurParams_Response& from);
  void MergeFrom(const CGamescope_SetBlurParams_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGamescope_SetBlurParams_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGamescope_SetBlurParams_Response";
  }
  protected:
  explicit CGamescope_SetBlurParams_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fgamescope_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGamescope_SetBlurParams_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fgamescope_2eproto;
};
// ===================================================================

class Gamescope_Stub;

class Gamescope : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Gamescope() {};
 public:
  virtual ~Gamescope();

  typedef Gamescope_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_GetState_Request* request,
                       ::CGamescope_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetBlurParams(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_SetBlurParams_Request* request,
                       ::CGamescope_SetBlurParams_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Gamescope);
};

class Gamescope_Stub : public Gamescope {
 public:
  Gamescope_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Gamescope_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Gamescope_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Gamescope ------------------------------------------

  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_GetState_Request* request,
                       ::CGamescope_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void SetBlurParams(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGamescope_SetBlurParams_Request* request,
                       ::CGamescope_SetBlurParams_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Gamescope_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgDisplayInfo

// optional string make = 1;
inline bool CMsgDisplayInfo::_internal_has_make() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDisplayInfo::has_make() const {
  return _internal_has_make();
}
inline void CMsgDisplayInfo::clear_make() {
  make_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDisplayInfo::make() const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.make)
  return _internal_make();
}
inline void CMsgDisplayInfo::set_make(const std::string& value) {
  _internal_set_make(value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.make)
}
inline std::string* CMsgDisplayInfo::mutable_make() {
  // @@protoc_insertion_point(field_mutable:CMsgDisplayInfo.make)
  return _internal_mutable_make();
}
inline const std::string& CMsgDisplayInfo::_internal_make() const {
  return make_.Get();
}
inline void CMsgDisplayInfo::_internal_set_make(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  make_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDisplayInfo::set_make(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  make_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDisplayInfo.make)
}
inline void CMsgDisplayInfo::set_make(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  make_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDisplayInfo.make)
}
inline void CMsgDisplayInfo::set_make(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  make_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDisplayInfo.make)
}
inline std::string* CMsgDisplayInfo::_internal_mutable_make() {
  _has_bits_[0] |= 0x00000001u;
  return make_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDisplayInfo::release_make() {
  // @@protoc_insertion_point(field_release:CMsgDisplayInfo.make)
  if (!_internal_has_make()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return make_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDisplayInfo::set_allocated_make(std::string* make) {
  if (make != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  make_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), make,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDisplayInfo.make)
}

// optional string model = 2;
inline bool CMsgDisplayInfo::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDisplayInfo::has_model() const {
  return _internal_has_model();
}
inline void CMsgDisplayInfo::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDisplayInfo::model() const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.model)
  return _internal_model();
}
inline void CMsgDisplayInfo::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.model)
}
inline std::string* CMsgDisplayInfo::mutable_model() {
  // @@protoc_insertion_point(field_mutable:CMsgDisplayInfo.model)
  return _internal_mutable_model();
}
inline const std::string& CMsgDisplayInfo::_internal_model() const {
  return model_.Get();
}
inline void CMsgDisplayInfo::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDisplayInfo::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDisplayInfo.model)
}
inline void CMsgDisplayInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDisplayInfo.model)
}
inline void CMsgDisplayInfo::set_model(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDisplayInfo.model)
}
inline std::string* CMsgDisplayInfo::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDisplayInfo::release_model() {
  // @@protoc_insertion_point(field_release:CMsgDisplayInfo.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDisplayInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDisplayInfo.model)
}

// optional string connector_name = 3;
inline bool CMsgDisplayInfo::_internal_has_connector_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDisplayInfo::has_connector_name() const {
  return _internal_has_connector_name();
}
inline void CMsgDisplayInfo::clear_connector_name() {
  connector_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDisplayInfo::connector_name() const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.connector_name)
  return _internal_connector_name();
}
inline void CMsgDisplayInfo::set_connector_name(const std::string& value) {
  _internal_set_connector_name(value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.connector_name)
}
inline std::string* CMsgDisplayInfo::mutable_connector_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDisplayInfo.connector_name)
  return _internal_mutable_connector_name();
}
inline const std::string& CMsgDisplayInfo::_internal_connector_name() const {
  return connector_name_.Get();
}
inline void CMsgDisplayInfo::_internal_set_connector_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  connector_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDisplayInfo::set_connector_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  connector_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDisplayInfo.connector_name)
}
inline void CMsgDisplayInfo::set_connector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  connector_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDisplayInfo.connector_name)
}
inline void CMsgDisplayInfo::set_connector_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  connector_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDisplayInfo.connector_name)
}
inline std::string* CMsgDisplayInfo::_internal_mutable_connector_name() {
  _has_bits_[0] |= 0x00000004u;
  return connector_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDisplayInfo::release_connector_name() {
  // @@protoc_insertion_point(field_release:CMsgDisplayInfo.connector_name)
  if (!_internal_has_connector_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return connector_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDisplayInfo::set_allocated_connector_name(std::string* connector_name) {
  if (connector_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  connector_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connector_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDisplayInfo.connector_name)
}

// repeated int32 supported_refresh_rates = 4;
inline int CMsgDisplayInfo::_internal_supported_refresh_rates_size() const {
  return supported_refresh_rates_.size();
}
inline int CMsgDisplayInfo::supported_refresh_rates_size() const {
  return _internal_supported_refresh_rates_size();
}
inline void CMsgDisplayInfo::clear_supported_refresh_rates() {
  supported_refresh_rates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDisplayInfo::_internal_supported_refresh_rates(int index) const {
  return supported_refresh_rates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDisplayInfo::supported_refresh_rates(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.supported_refresh_rates)
  return _internal_supported_refresh_rates(index);
}
inline void CMsgDisplayInfo::set_supported_refresh_rates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_refresh_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.supported_refresh_rates)
}
inline void CMsgDisplayInfo::_internal_add_supported_refresh_rates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_refresh_rates_.Add(value);
}
inline void CMsgDisplayInfo::add_supported_refresh_rates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_supported_refresh_rates(value);
  // @@protoc_insertion_point(field_add:CMsgDisplayInfo.supported_refresh_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgDisplayInfo::_internal_supported_refresh_rates() const {
  return supported_refresh_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgDisplayInfo::supported_refresh_rates() const {
  // @@protoc_insertion_point(field_list:CMsgDisplayInfo.supported_refresh_rates)
  return _internal_supported_refresh_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgDisplayInfo::_internal_mutable_supported_refresh_rates() {
  return &supported_refresh_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgDisplayInfo::mutable_supported_refresh_rates() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDisplayInfo.supported_refresh_rates)
  return _internal_mutable_supported_refresh_rates();
}

// repeated int32 supported_frame_rates = 5;
inline int CMsgDisplayInfo::_internal_supported_frame_rates_size() const {
  return supported_frame_rates_.size();
}
inline int CMsgDisplayInfo::supported_frame_rates_size() const {
  return _internal_supported_frame_rates_size();
}
inline void CMsgDisplayInfo::clear_supported_frame_rates() {
  supported_frame_rates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDisplayInfo::_internal_supported_frame_rates(int index) const {
  return supported_frame_rates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDisplayInfo::supported_frame_rates(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.supported_frame_rates)
  return _internal_supported_frame_rates(index);
}
inline void CMsgDisplayInfo::set_supported_frame_rates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_frame_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.supported_frame_rates)
}
inline void CMsgDisplayInfo::_internal_add_supported_frame_rates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_frame_rates_.Add(value);
}
inline void CMsgDisplayInfo::add_supported_frame_rates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_supported_frame_rates(value);
  // @@protoc_insertion_point(field_add:CMsgDisplayInfo.supported_frame_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgDisplayInfo::_internal_supported_frame_rates() const {
  return supported_frame_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgDisplayInfo::supported_frame_rates() const {
  // @@protoc_insertion_point(field_list:CMsgDisplayInfo.supported_frame_rates)
  return _internal_supported_frame_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgDisplayInfo::_internal_mutable_supported_frame_rates() {
  return &supported_frame_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgDisplayInfo::mutable_supported_frame_rates() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDisplayInfo.supported_frame_rates)
  return _internal_mutable_supported_frame_rates();
}

// optional bool is_external = 6;
inline bool CMsgDisplayInfo::_internal_has_is_external() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDisplayInfo::has_is_external() const {
  return _internal_has_is_external();
}
inline void CMsgDisplayInfo::clear_is_external() {
  is_external_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgDisplayInfo::_internal_is_external() const {
  return is_external_;
}
inline bool CMsgDisplayInfo::is_external() const {
  // @@protoc_insertion_point(field_get:CMsgDisplayInfo.is_external)
  return _internal_is_external();
}
inline void CMsgDisplayInfo::_internal_set_is_external(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_external_ = value;
}
inline void CMsgDisplayInfo::set_is_external(bool value) {
  _internal_set_is_external(value);
  // @@protoc_insertion_point(field_set:CMsgDisplayInfo.is_external)
}

// -------------------------------------------------------------------

// CMsgGamescopeState

// optional bool is_service_available = 1;
inline bool CMsgGamescopeState::_internal_has_is_service_available() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_service_available() const {
  return _internal_has_is_service_available();
}
inline void CMsgGamescopeState::clear_is_service_available() {
  is_service_available_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGamescopeState::_internal_is_service_available() const {
  return is_service_available_;
}
inline bool CMsgGamescopeState::is_service_available() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_service_available)
  return _internal_is_service_available();
}
inline void CMsgGamescopeState::_internal_set_is_service_available(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_service_available_ = value;
}
inline void CMsgGamescopeState::set_is_service_available(bool value) {
  _internal_set_is_service_available(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_service_available)
}

// optional bool is_reshade_supported = 2;
inline bool CMsgGamescopeState::_internal_has_is_reshade_supported() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_reshade_supported() const {
  return _internal_has_is_reshade_supported();
}
inline void CMsgGamescopeState::clear_is_reshade_supported() {
  is_reshade_supported_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGamescopeState::_internal_is_reshade_supported() const {
  return is_reshade_supported_;
}
inline bool CMsgGamescopeState::is_reshade_supported() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_reshade_supported)
  return _internal_is_reshade_supported();
}
inline void CMsgGamescopeState::_internal_set_is_reshade_supported(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_reshade_supported_ = value;
}
inline void CMsgGamescopeState::set_is_reshade_supported(bool value) {
  _internal_set_is_reshade_supported(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_reshade_supported)
}

// optional bool is_app_hdr_enabled = 3;
inline bool CMsgGamescopeState::_internal_has_is_app_hdr_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_app_hdr_enabled() const {
  return _internal_has_is_app_hdr_enabled();
}
inline void CMsgGamescopeState::clear_is_app_hdr_enabled() {
  is_app_hdr_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGamescopeState::_internal_is_app_hdr_enabled() const {
  return is_app_hdr_enabled_;
}
inline bool CMsgGamescopeState::is_app_hdr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_app_hdr_enabled)
  return _internal_is_app_hdr_enabled();
}
inline void CMsgGamescopeState::_internal_set_is_app_hdr_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_app_hdr_enabled_ = value;
}
inline void CMsgGamescopeState::set_is_app_hdr_enabled(bool value) {
  _internal_set_is_app_hdr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_app_hdr_enabled)
}

// optional bool is_app_refresh_rate_supported = 4;
inline bool CMsgGamescopeState::_internal_has_is_app_refresh_rate_supported() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_app_refresh_rate_supported() const {
  return _internal_has_is_app_refresh_rate_supported();
}
inline void CMsgGamescopeState::clear_is_app_refresh_rate_supported() {
  is_app_refresh_rate_supported_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGamescopeState::_internal_is_app_refresh_rate_supported() const {
  return is_app_refresh_rate_supported_;
}
inline bool CMsgGamescopeState::is_app_refresh_rate_supported() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_app_refresh_rate_supported)
  return _internal_is_app_refresh_rate_supported();
}
inline void CMsgGamescopeState::_internal_set_is_app_refresh_rate_supported(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_app_refresh_rate_supported_ = value;
}
inline void CMsgGamescopeState::set_is_app_refresh_rate_supported(bool value) {
  _internal_set_is_app_refresh_rate_supported(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_app_refresh_rate_supported)
}

// optional .CMsgDisplayInfo active_display_info = 5;
inline bool CMsgGamescopeState::_internal_has_active_display_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || active_display_info_ != nullptr);
  return value;
}
inline bool CMsgGamescopeState::has_active_display_info() const {
  return _internal_has_active_display_info();
}
inline void CMsgGamescopeState::clear_active_display_info() {
  if (active_display_info_ != nullptr) active_display_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDisplayInfo& CMsgGamescopeState::_internal_active_display_info() const {
  const ::CMsgDisplayInfo* p = active_display_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDisplayInfo&>(
      ::_CMsgDisplayInfo_default_instance_);
}
inline const ::CMsgDisplayInfo& CMsgGamescopeState::active_display_info() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.active_display_info)
  return _internal_active_display_info();
}
inline void CMsgGamescopeState::unsafe_arena_set_allocated_active_display_info(
    ::CMsgDisplayInfo* active_display_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_display_info_);
  }
  active_display_info_ = active_display_info;
  if (active_display_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGamescopeState.active_display_info)
}
inline ::CMsgDisplayInfo* CMsgGamescopeState::release_active_display_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDisplayInfo* temp = active_display_info_;
  active_display_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDisplayInfo* CMsgGamescopeState::unsafe_arena_release_active_display_info() {
  // @@protoc_insertion_point(field_release:CMsgGamescopeState.active_display_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDisplayInfo* temp = active_display_info_;
  active_display_info_ = nullptr;
  return temp;
}
inline ::CMsgDisplayInfo* CMsgGamescopeState::_internal_mutable_active_display_info() {
  _has_bits_[0] |= 0x00000001u;
  if (active_display_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDisplayInfo>(GetArena());
    active_display_info_ = p;
  }
  return active_display_info_;
}
inline ::CMsgDisplayInfo* CMsgGamescopeState::mutable_active_display_info() {
  // @@protoc_insertion_point(field_mutable:CMsgGamescopeState.active_display_info)
  return _internal_mutable_active_display_info();
}
inline void CMsgGamescopeState::set_allocated_active_display_info(::CMsgDisplayInfo* active_display_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete active_display_info_;
  }
  if (active_display_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(active_display_info);
    if (message_arena != submessage_arena) {
      active_display_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_display_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  active_display_info_ = active_display_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgGamescopeState.active_display_info)
}

// optional bool is_app_refresh_rate_capable = 6;
inline bool CMsgGamescopeState::_internal_has_is_app_refresh_rate_capable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_app_refresh_rate_capable() const {
  return _internal_has_is_app_refresh_rate_capable();
}
inline void CMsgGamescopeState::clear_is_app_refresh_rate_capable() {
  is_app_refresh_rate_capable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgGamescopeState::_internal_is_app_refresh_rate_capable() const {
  return is_app_refresh_rate_capable_;
}
inline bool CMsgGamescopeState::is_app_refresh_rate_capable() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_app_refresh_rate_capable)
  return _internal_is_app_refresh_rate_capable();
}
inline void CMsgGamescopeState::_internal_set_is_app_refresh_rate_capable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_app_refresh_rate_capable_ = value;
}
inline void CMsgGamescopeState::set_is_app_refresh_rate_capable(bool value) {
  _internal_set_is_app_refresh_rate_capable(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_app_refresh_rate_capable)
}

// optional bool is_refresh_rate_switching_supported = 7;
inline bool CMsgGamescopeState::_internal_has_is_refresh_rate_switching_supported() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_refresh_rate_switching_supported() const {
  return _internal_has_is_refresh_rate_switching_supported();
}
inline void CMsgGamescopeState::clear_is_refresh_rate_switching_supported() {
  is_refresh_rate_switching_supported_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgGamescopeState::_internal_is_refresh_rate_switching_supported() const {
  return is_refresh_rate_switching_supported_;
}
inline bool CMsgGamescopeState::is_refresh_rate_switching_supported() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_refresh_rate_switching_supported)
  return _internal_is_refresh_rate_switching_supported();
}
inline void CMsgGamescopeState::_internal_set_is_refresh_rate_switching_supported(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_refresh_rate_switching_supported_ = value;
}
inline void CMsgGamescopeState::set_is_refresh_rate_switching_supported(bool value) {
  _internal_set_is_refresh_rate_switching_supported(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_refresh_rate_switching_supported)
}

// optional bool is_refresh_rate_switching_restricted = 8;
inline bool CMsgGamescopeState::_internal_has_is_refresh_rate_switching_restricted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_refresh_rate_switching_restricted() const {
  return _internal_has_is_refresh_rate_switching_restricted();
}
inline void CMsgGamescopeState::clear_is_refresh_rate_switching_restricted() {
  is_refresh_rate_switching_restricted_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgGamescopeState::_internal_is_refresh_rate_switching_restricted() const {
  return is_refresh_rate_switching_restricted_;
}
inline bool CMsgGamescopeState::is_refresh_rate_switching_restricted() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_refresh_rate_switching_restricted)
  return _internal_is_refresh_rate_switching_restricted();
}
inline void CMsgGamescopeState::_internal_set_is_refresh_rate_switching_restricted(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_refresh_rate_switching_restricted_ = value;
}
inline void CMsgGamescopeState::set_is_refresh_rate_switching_restricted(bool value) {
  _internal_set_is_refresh_rate_switching_restricted(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_refresh_rate_switching_restricted)
}

// optional bool is_hdr_visualization_supported = 9;
inline bool CMsgGamescopeState::_internal_has_is_hdr_visualization_supported() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGamescopeState::has_is_hdr_visualization_supported() const {
  return _internal_has_is_hdr_visualization_supported();
}
inline void CMsgGamescopeState::clear_is_hdr_visualization_supported() {
  is_hdr_visualization_supported_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgGamescopeState::_internal_is_hdr_visualization_supported() const {
  return is_hdr_visualization_supported_;
}
inline bool CMsgGamescopeState::is_hdr_visualization_supported() const {
  // @@protoc_insertion_point(field_get:CMsgGamescopeState.is_hdr_visualization_supported)
  return _internal_is_hdr_visualization_supported();
}
inline void CMsgGamescopeState::_internal_set_is_hdr_visualization_supported(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_hdr_visualization_supported_ = value;
}
inline void CMsgGamescopeState::set_is_hdr_visualization_supported(bool value) {
  _internal_set_is_hdr_visualization_supported(value);
  // @@protoc_insertion_point(field_set:CMsgGamescopeState.is_hdr_visualization_supported)
}

// -------------------------------------------------------------------

// CGamescope_GetState_Request

// -------------------------------------------------------------------

// CGamescope_GetState_Response

// optional .CMsgGamescopeState state = 1;
inline bool CGamescope_GetState_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool CGamescope_GetState_Response::has_state() const {
  return _internal_has_state();
}
inline void CGamescope_GetState_Response::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGamescopeState& CGamescope_GetState_Response::_internal_state() const {
  const ::CMsgGamescopeState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGamescopeState&>(
      ::_CMsgGamescopeState_default_instance_);
}
inline const ::CMsgGamescopeState& CGamescope_GetState_Response::state() const {
  // @@protoc_insertion_point(field_get:CGamescope_GetState_Response.state)
  return _internal_state();
}
inline void CGamescope_GetState_Response::unsafe_arena_set_allocated_state(
    ::CMsgGamescopeState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGamescope_GetState_Response.state)
}
inline ::CMsgGamescopeState* CGamescope_GetState_Response::release_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGamescopeState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgGamescopeState* CGamescope_GetState_Response::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:CGamescope_GetState_Response.state)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGamescopeState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::CMsgGamescopeState* CGamescope_GetState_Response::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGamescopeState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::CMsgGamescopeState* CGamescope_GetState_Response::mutable_state() {
  // @@protoc_insertion_point(field_mutable:CGamescope_GetState_Response.state)
  return _internal_mutable_state();
}
inline void CGamescope_GetState_Response::set_allocated_state(::CMsgGamescopeState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:CGamescope_GetState_Response.state)
}

// -------------------------------------------------------------------

// CGamescope_StateChanged_Notification

// -------------------------------------------------------------------

// CGamescope_SetBlurParams_Request

// optional .EGamescopeBlurMode mode = 1 [default = EGamescopeBlurMode_Disabled];
inline bool CGamescope_SetBlurParams_Request::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGamescope_SetBlurParams_Request::has_mode() const {
  return _internal_has_mode();
}
inline void CGamescope_SetBlurParams_Request::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EGamescopeBlurMode CGamescope_SetBlurParams_Request::_internal_mode() const {
  return static_cast< ::EGamescopeBlurMode >(mode_);
}
inline ::EGamescopeBlurMode CGamescope_SetBlurParams_Request::mode() const {
  // @@protoc_insertion_point(field_get:CGamescope_SetBlurParams_Request.mode)
  return _internal_mode();
}
inline void CGamescope_SetBlurParams_Request::_internal_set_mode(::EGamescopeBlurMode value) {
  assert(::EGamescopeBlurMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
}
inline void CGamescope_SetBlurParams_Request::set_mode(::EGamescopeBlurMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:CGamescope_SetBlurParams_Request.mode)
}

// optional int32 radius = 2;
inline bool CGamescope_SetBlurParams_Request::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGamescope_SetBlurParams_Request::has_radius() const {
  return _internal_has_radius();
}
inline void CGamescope_SetBlurParams_Request::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGamescope_SetBlurParams_Request::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGamescope_SetBlurParams_Request::radius() const {
  // @@protoc_insertion_point(field_get:CGamescope_SetBlurParams_Request.radius)
  return _internal_radius();
}
inline void CGamescope_SetBlurParams_Request::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  radius_ = value;
}
inline void CGamescope_SetBlurParams_Request::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CGamescope_SetBlurParams_Request.radius)
}

// optional int32 fade_duration_ms = 3;
inline bool CGamescope_SetBlurParams_Request::_internal_has_fade_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGamescope_SetBlurParams_Request::has_fade_duration_ms() const {
  return _internal_has_fade_duration_ms();
}
inline void CGamescope_SetBlurParams_Request::clear_fade_duration_ms() {
  fade_duration_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGamescope_SetBlurParams_Request::_internal_fade_duration_ms() const {
  return fade_duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGamescope_SetBlurParams_Request::fade_duration_ms() const {
  // @@protoc_insertion_point(field_get:CGamescope_SetBlurParams_Request.fade_duration_ms)
  return _internal_fade_duration_ms();
}
inline void CGamescope_SetBlurParams_Request::_internal_set_fade_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  fade_duration_ms_ = value;
}
inline void CGamescope_SetBlurParams_Request::set_fade_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fade_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGamescope_SetBlurParams_Request.fade_duration_ms)
}

// -------------------------------------------------------------------

// CGamescope_SetBlurParams_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fgamescope_2eproto
