// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_hardwareupdate.proto

#include "webuimessages_hardwareupdate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CHardwareUpdate_GetState_Request::CHardwareUpdate_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_GetState_RequestDefaultTypeInternal {
  constexpr CHardwareUpdate_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_GetState_RequestDefaultTypeInternal() {}
  union {
    CHardwareUpdate_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_GetState_RequestDefaultTypeInternal _CHardwareUpdate_GetState_Request_default_instance_;
constexpr CHardwareUpdate_GetState_Response::CHardwareUpdate_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_updater_supported_(false)
  , has_seen_controllers_(false){}
struct CHardwareUpdate_GetState_ResponseDefaultTypeInternal {
  constexpr CHardwareUpdate_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_GetState_ResponseDefaultTypeInternal() {}
  union {
    CHardwareUpdate_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_GetState_ResponseDefaultTypeInternal _CHardwareUpdate_GetState_Response_default_instance_;
constexpr CHardwareUpdate_StateChanged_Notification::CHardwareUpdate_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal {
  constexpr CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CHardwareUpdate_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal _CHardwareUpdate_StateChanged_Notification_default_instance_;
constexpr CHardwareUpdate_CheckForUpdates_Request::CHardwareUpdate_CheckForUpdates_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal {
  constexpr CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal() {}
  union {
    CHardwareUpdate_CheckForUpdates_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal _CHardwareUpdate_CheckForUpdates_Request_default_instance_;
constexpr CMsgAvailableHardwareUpdate::CMsgAvailableHardwareUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_ts_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_ts_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , etype_(0u)
  , hardware_id_(0u){}
struct CMsgAvailableHardwareUpdateDefaultTypeInternal {
  constexpr CMsgAvailableHardwareUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAvailableHardwareUpdateDefaultTypeInternal() {}
  union {
    CMsgAvailableHardwareUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAvailableHardwareUpdateDefaultTypeInternal _CMsgAvailableHardwareUpdate_default_instance_;
constexpr CHardwareUpdate_CheckForUpdates_Response::CHardwareUpdate_CheckForUpdates_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal {
  constexpr CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal() {}
  union {
    CHardwareUpdate_CheckForUpdates_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal _CHardwareUpdate_CheckForUpdates_Response_default_instance_;
constexpr CHardwareUpdate_Update_Request::CHardwareUpdate_Update_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_Update_RequestDefaultTypeInternal {
  constexpr CHardwareUpdate_Update_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_Update_RequestDefaultTypeInternal() {}
  union {
    CHardwareUpdate_Update_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_Update_RequestDefaultTypeInternal _CHardwareUpdate_Update_Request_default_instance_;
constexpr CHardwareUpdate_Update_Response::CHardwareUpdate_Update_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_Update_ResponseDefaultTypeInternal {
  constexpr CHardwareUpdate_Update_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_Update_ResponseDefaultTypeInternal() {}
  union {
    CHardwareUpdate_Update_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_Update_ResponseDefaultTypeInternal _CHardwareUpdate_Update_Response_default_instance_;
constexpr CHardwareUpdate_UpdateProgress_Notification::CHardwareUpdate_UpdateProgress_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : progress_(0){}
struct CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal {
  constexpr CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal() {}
  union {
    CHardwareUpdate_UpdateProgress_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal _CHardwareUpdate_UpdateProgress_Notification_default_instance_;
constexpr CHardwareUpdate_UpdateStateChanged_Notification::CHardwareUpdate_UpdateStateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal {
  constexpr CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal() {}
  union {
    CHardwareUpdate_UpdateStateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal _CHardwareUpdate_UpdateStateChanged_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fhardwareupdate_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fhardwareupdate_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fhardwareupdate_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fhardwareupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_GetState_Response, is_updater_supported_),
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_GetState_Response, has_seen_controllers_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_CheckForUpdates_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, etype_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, hardware_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, current_ts_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailableHardwareUpdate, update_ts_),
  3,
  4,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_CheckForUpdates_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_CheckForUpdates_Response, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_Update_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_Update_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_UpdateProgress_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_UpdateProgress_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_UpdateProgress_Notification, progress_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHardwareUpdate_UpdateStateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CHardwareUpdate_GetState_Request)},
  { 5, 12, sizeof(::CHardwareUpdate_GetState_Response)},
  { 14, -1, sizeof(::CHardwareUpdate_StateChanged_Notification)},
  { 19, -1, sizeof(::CHardwareUpdate_CheckForUpdates_Request)},
  { 24, 34, sizeof(::CMsgAvailableHardwareUpdate)},
  { 39, -1, sizeof(::CHardwareUpdate_CheckForUpdates_Response)},
  { 45, -1, sizeof(::CHardwareUpdate_Update_Request)},
  { 50, -1, sizeof(::CHardwareUpdate_Update_Response)},
  { 55, 61, sizeof(::CHardwareUpdate_UpdateProgress_Notification)},
  { 62, -1, sizeof(::CHardwareUpdate_UpdateStateChanged_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_CheckForUpdates_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAvailableHardwareUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_CheckForUpdates_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_Update_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_Update_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_UpdateProgress_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHardwareUpdate_UpdateStateChanged_Notification_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fhardwareupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"webuimessages_hardwareupdate.proto\032 go"
  "ogle/protobuf/descriptor.proto\032\013enums.pr"
  "oto\032\030steammessages_base.proto\032\030webuimess"
  "ages_base.proto\"\"\n CHardwareUpdate_GetSt"
  "ate_Request\"_\n!CHardwareUpdate_GetState_"
  "Response\022\034\n\024is_updater_supported\030\001 \001(\010\022\034"
  "\n\024has_seen_controllers\030\002 \001(\010\"+\n)CHardwar"
  "eUpdate_StateChanged_Notification\")\n\'CHa"
  "rdwareUpdate_CheckForUpdates_Request\"\177\n\033"
  "CMsgAvailableHardwareUpdate\022\r\n\005etype\030\001 \001"
  "(\r\022\023\n\013hardware_id\030\002 \001(\r\022\025\n\rserial_number"
  "\030\003 \001(\t\022\022\n\ncurrent_ts\030\004 \001(\t\022\021\n\tupdate_ts\030"
  "\005 \001(\t\"Y\n(CHardwareUpdate_CheckForUpdates"
  "_Response\022-\n\007updates\030\001 \003(\0132\034.CMsgAvailab"
  "leHardwareUpdate\" \n\036CHardwareUpdate_Upda"
  "te_Request\"!\n\037CHardwareUpdate_Update_Res"
  "ponse\"\?\n+CHardwareUpdate_UpdateProgress_"
  "Notification\022\020\n\010progress\030\001 \001(\005\"1\n/CHardw"
  "areUpdate_UpdateStateChanged_Notificatio"
  "n2\252\004\n\016HardwareUpdate\022Q\n\010GetState\022!.CHard"
  "wareUpdate_GetState_Request\032\".CHardwareU"
  "pdate_GetState_Response\022R\n\022NotifyStateCh"
  "anged\022*.CHardwareUpdate_StateChanged_Not"
  "ification\032\020.WebUINoResponse\022f\n\017CheckForU"
  "pdates\022(.CHardwareUpdate_CheckForUpdates"
  "_Request\032).CHardwareUpdate_CheckForUpdat"
  "es_Response\022K\n\006Update\022\037.CHardwareUpdate_"
  "Update_Request\032 .CHardwareUpdate_Update_"
  "Response\022V\n\024NotifyUpdateProgress\022,.CHard"
  "wareUpdate_UpdateProgress_Notification\032\020"
  ".WebUINoResponse\022^\n\030NotifyUpdateStateCha"
  "nged\0220.CHardwareUpdate_UpdateStateChange"
  "d_Notification\032\020.WebUINoResponse\032\004\200\227\"\001B\037"
  "H\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fhardwareupdate_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fhardwareupdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fhardwareupdate_2eproto = {
  false, false, 1351, descriptor_table_protodef_webuimessages_5fhardwareupdate_2eproto, "webuimessages_hardwareupdate.proto", 
  &descriptor_table_webuimessages_5fhardwareupdate_2eproto_once, descriptor_table_webuimessages_5fhardwareupdate_2eproto_deps, 4, 10,
  schemas, file_default_instances, TableStruct_webuimessages_5fhardwareupdate_2eproto::offsets,
  file_level_metadata_webuimessages_5fhardwareupdate_2eproto, file_level_enum_descriptors_webuimessages_5fhardwareupdate_2eproto, file_level_service_descriptors_webuimessages_5fhardwareupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fhardwareupdate_2eproto);
  return descriptor_table_webuimessages_5fhardwareupdate_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fhardwareupdate_2eproto(&descriptor_table_webuimessages_5fhardwareupdate_2eproto);

// ===================================================================

class CHardwareUpdate_GetState_Request::_Internal {
 public:
};

CHardwareUpdate_GetState_Request::CHardwareUpdate_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_GetState_Request)
}
CHardwareUpdate_GetState_Request::CHardwareUpdate_GetState_Request(const CHardwareUpdate_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_GetState_Request)
}

void CHardwareUpdate_GetState_Request::SharedCtor() {
}

CHardwareUpdate_GetState_Request::~CHardwareUpdate_GetState_Request() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_GetState_Request::ArenaDtor(void* object) {
  CHardwareUpdate_GetState_Request* _this = reinterpret_cast< CHardwareUpdate_GetState_Request* >(object);
  (void)_this;
}
void CHardwareUpdate_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_GetState_Request)
  return target;
}

size_t CHardwareUpdate_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_GetState_Request)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_GetState_Request::MergeFrom(const CHardwareUpdate_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_GetState_Request::CopyFrom(const CHardwareUpdate_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_GetState_Request::IsInitialized() const {
  return true;
}

void CHardwareUpdate_GetState_Request::InternalSwap(CHardwareUpdate_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CHardwareUpdate_GetState_Response>()._has_bits_);
  static void set_has_is_updater_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_seen_controllers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CHardwareUpdate_GetState_Response::CHardwareUpdate_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_GetState_Response)
}
CHardwareUpdate_GetState_Response::CHardwareUpdate_GetState_Response(const CHardwareUpdate_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_updater_supported_, &from.is_updater_supported_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_seen_controllers_) -
    reinterpret_cast<char*>(&is_updater_supported_)) + sizeof(has_seen_controllers_));
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_GetState_Response)
}

void CHardwareUpdate_GetState_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_updater_supported_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_seen_controllers_) -
    reinterpret_cast<char*>(&is_updater_supported_)) + sizeof(has_seen_controllers_));
}

CHardwareUpdate_GetState_Response::~CHardwareUpdate_GetState_Response() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_GetState_Response::ArenaDtor(void* object) {
  CHardwareUpdate_GetState_Response* _this = reinterpret_cast< CHardwareUpdate_GetState_Response* >(object);
  (void)_this;
}
void CHardwareUpdate_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_updater_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_seen_controllers_) -
      reinterpret_cast<char*>(&is_updater_supported_)) + sizeof(has_seen_controllers_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_updater_supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_updater_supported(&has_bits);
          is_updater_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_seen_controllers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_seen_controllers(&has_bits);
          has_seen_controllers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_updater_supported = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_updater_supported(), target);
  }

  // optional bool has_seen_controllers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_seen_controllers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_GetState_Response)
  return target;
}

size_t CHardwareUpdate_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_updater_supported = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_seen_controllers = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_GetState_Response)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_GetState_Response::MergeFrom(const CHardwareUpdate_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_updater_supported_ = from.is_updater_supported_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_seen_controllers_ = from.has_seen_controllers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHardwareUpdate_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_GetState_Response::CopyFrom(const CHardwareUpdate_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_GetState_Response::IsInitialized() const {
  return true;
}

void CHardwareUpdate_GetState_Response::InternalSwap(CHardwareUpdate_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHardwareUpdate_GetState_Response, has_seen_controllers_)
      + sizeof(CHardwareUpdate_GetState_Response::has_seen_controllers_)
      - PROTOBUF_FIELD_OFFSET(CHardwareUpdate_GetState_Response, is_updater_supported_)>(
          reinterpret_cast<char*>(&is_updater_supported_),
          reinterpret_cast<char*>(&other->is_updater_supported_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_StateChanged_Notification::_Internal {
 public:
};

CHardwareUpdate_StateChanged_Notification::CHardwareUpdate_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_StateChanged_Notification)
}
CHardwareUpdate_StateChanged_Notification::CHardwareUpdate_StateChanged_Notification(const CHardwareUpdate_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_StateChanged_Notification)
}

void CHardwareUpdate_StateChanged_Notification::SharedCtor() {
}

CHardwareUpdate_StateChanged_Notification::~CHardwareUpdate_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_StateChanged_Notification::ArenaDtor(void* object) {
  CHardwareUpdate_StateChanged_Notification* _this = reinterpret_cast< CHardwareUpdate_StateChanged_Notification* >(object);
  (void)_this;
}
void CHardwareUpdate_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_StateChanged_Notification)
  return target;
}

size_t CHardwareUpdate_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_StateChanged_Notification::MergeFrom(const CHardwareUpdate_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_StateChanged_Notification::CopyFrom(const CHardwareUpdate_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CHardwareUpdate_StateChanged_Notification::InternalSwap(CHardwareUpdate_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_CheckForUpdates_Request::_Internal {
 public:
};

CHardwareUpdate_CheckForUpdates_Request::CHardwareUpdate_CheckForUpdates_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_CheckForUpdates_Request)
}
CHardwareUpdate_CheckForUpdates_Request::CHardwareUpdate_CheckForUpdates_Request(const CHardwareUpdate_CheckForUpdates_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_CheckForUpdates_Request)
}

void CHardwareUpdate_CheckForUpdates_Request::SharedCtor() {
}

CHardwareUpdate_CheckForUpdates_Request::~CHardwareUpdate_CheckForUpdates_Request() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_CheckForUpdates_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_CheckForUpdates_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_CheckForUpdates_Request::ArenaDtor(void* object) {
  CHardwareUpdate_CheckForUpdates_Request* _this = reinterpret_cast< CHardwareUpdate_CheckForUpdates_Request* >(object);
  (void)_this;
}
void CHardwareUpdate_CheckForUpdates_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_CheckForUpdates_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_CheckForUpdates_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_CheckForUpdates_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_CheckForUpdates_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_CheckForUpdates_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_CheckForUpdates_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_CheckForUpdates_Request)
  return target;
}

size_t CHardwareUpdate_CheckForUpdates_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_CheckForUpdates_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_CheckForUpdates_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_CheckForUpdates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_CheckForUpdates_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_CheckForUpdates_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_CheckForUpdates_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_CheckForUpdates_Request)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_CheckForUpdates_Request::MergeFrom(const CHardwareUpdate_CheckForUpdates_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_CheckForUpdates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_CheckForUpdates_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_CheckForUpdates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_CheckForUpdates_Request::CopyFrom(const CHardwareUpdate_CheckForUpdates_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_CheckForUpdates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_CheckForUpdates_Request::IsInitialized() const {
  return true;
}

void CHardwareUpdate_CheckForUpdates_Request::InternalSwap(CHardwareUpdate_CheckForUpdates_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_CheckForUpdates_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAvailableHardwareUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAvailableHardwareUpdate>()._has_bits_);
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hardware_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAvailableHardwareUpdate::CMsgAvailableHardwareUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAvailableHardwareUpdate)
}
CMsgAvailableHardwareUpdate::CMsgAvailableHardwareUpdate(const CMsgAvailableHardwareUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  current_ts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_ts()) {
    current_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_ts(), 
      GetArena());
  }
  update_ts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_update_ts()) {
    update_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_ts(), 
      GetArena());
  }
  ::memcpy(&etype_, &from.etype_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(hardware_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgAvailableHardwareUpdate)
}

void CMsgAvailableHardwareUpdate::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
current_ts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
update_ts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&etype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(hardware_id_));
}

CMsgAvailableHardwareUpdate::~CMsgAvailableHardwareUpdate() {
  // @@protoc_insertion_point(destructor:CMsgAvailableHardwareUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAvailableHardwareUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_ts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_ts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAvailableHardwareUpdate::ArenaDtor(void* object) {
  CMsgAvailableHardwareUpdate* _this = reinterpret_cast< CMsgAvailableHardwareUpdate* >(object);
  (void)_this;
}
void CMsgAvailableHardwareUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAvailableHardwareUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAvailableHardwareUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAvailableHardwareUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      current_ts_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      update_ts_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&etype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hardware_id_) -
        reinterpret_cast<char*>(&etype_)) + sizeof(hardware_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAvailableHardwareUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 etype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_etype(&has_bits);
          etype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hardware_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hardware_id(&has_bits);
          hardware_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAvailableHardwareUpdate.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string current_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_current_ts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAvailableHardwareUpdate.current_ts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string update_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_update_ts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAvailableHardwareUpdate.update_ts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAvailableHardwareUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAvailableHardwareUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 etype = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_etype(), target);
  }

  // optional uint32 hardware_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hardware_id(), target);
  }

  // optional string serial_number = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAvailableHardwareUpdate.serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serial_number(), target);
  }

  // optional string current_ts = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_ts().data(), static_cast<int>(this->_internal_current_ts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAvailableHardwareUpdate.current_ts");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_ts(), target);
  }

  // optional string update_ts = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update_ts().data(), static_cast<int>(this->_internal_update_ts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAvailableHardwareUpdate.update_ts");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_update_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAvailableHardwareUpdate)
  return target;
}

size_t CMsgAvailableHardwareUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAvailableHardwareUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string serial_number = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string current_ts = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_ts());
    }

    // optional string update_ts = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_ts());
    }

    // optional uint32 etype = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_etype());
    }

    // optional uint32 hardware_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hardware_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAvailableHardwareUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAvailableHardwareUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAvailableHardwareUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAvailableHardwareUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAvailableHardwareUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAvailableHardwareUpdate)
    MergeFrom(*source);
  }
}

void CMsgAvailableHardwareUpdate::MergeFrom(const CMsgAvailableHardwareUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAvailableHardwareUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_current_ts(from._internal_current_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_update_ts(from._internal_update_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      etype_ = from.etype_;
    }
    if (cached_has_bits & 0x00000010u) {
      hardware_id_ = from.hardware_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAvailableHardwareUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAvailableHardwareUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAvailableHardwareUpdate::CopyFrom(const CMsgAvailableHardwareUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAvailableHardwareUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAvailableHardwareUpdate::IsInitialized() const {
  return true;
}

void CMsgAvailableHardwareUpdate::InternalSwap(CMsgAvailableHardwareUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_ts_.Swap(&other->current_ts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_ts_.Swap(&other->update_ts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAvailableHardwareUpdate, hardware_id_)
      + sizeof(CMsgAvailableHardwareUpdate::hardware_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAvailableHardwareUpdate, etype_)>(
          reinterpret_cast<char*>(&etype_),
          reinterpret_cast<char*>(&other->etype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAvailableHardwareUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_CheckForUpdates_Response::_Internal {
 public:
};

CHardwareUpdate_CheckForUpdates_Response::CHardwareUpdate_CheckForUpdates_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_CheckForUpdates_Response)
}
CHardwareUpdate_CheckForUpdates_Response::CHardwareUpdate_CheckForUpdates_Response(const CHardwareUpdate_CheckForUpdates_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_CheckForUpdates_Response)
}

void CHardwareUpdate_CheckForUpdates_Response::SharedCtor() {
}

CHardwareUpdate_CheckForUpdates_Response::~CHardwareUpdate_CheckForUpdates_Response() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_CheckForUpdates_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_CheckForUpdates_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_CheckForUpdates_Response::ArenaDtor(void* object) {
  CHardwareUpdate_CheckForUpdates_Response* _this = reinterpret_cast< CHardwareUpdate_CheckForUpdates_Response* >(object);
  (void)_this;
}
void CHardwareUpdate_CheckForUpdates_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_CheckForUpdates_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_CheckForUpdates_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_CheckForUpdates_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_CheckForUpdates_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgAvailableHardwareUpdate updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_CheckForUpdates_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_CheckForUpdates_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAvailableHardwareUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_CheckForUpdates_Response)
  return target;
}

size_t CHardwareUpdate_CheckForUpdates_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_CheckForUpdates_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAvailableHardwareUpdate updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_CheckForUpdates_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_CheckForUpdates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_CheckForUpdates_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_CheckForUpdates_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_CheckForUpdates_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_CheckForUpdates_Response)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_CheckForUpdates_Response::MergeFrom(const CHardwareUpdate_CheckForUpdates_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_CheckForUpdates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void CHardwareUpdate_CheckForUpdates_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_CheckForUpdates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_CheckForUpdates_Response::CopyFrom(const CHardwareUpdate_CheckForUpdates_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_CheckForUpdates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_CheckForUpdates_Response::IsInitialized() const {
  return true;
}

void CHardwareUpdate_CheckForUpdates_Response::InternalSwap(CHardwareUpdate_CheckForUpdates_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_CheckForUpdates_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_Update_Request::_Internal {
 public:
};

CHardwareUpdate_Update_Request::CHardwareUpdate_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_Update_Request)
}
CHardwareUpdate_Update_Request::CHardwareUpdate_Update_Request(const CHardwareUpdate_Update_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_Update_Request)
}

void CHardwareUpdate_Update_Request::SharedCtor() {
}

CHardwareUpdate_Update_Request::~CHardwareUpdate_Update_Request() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_Update_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_Update_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_Update_Request::ArenaDtor(void* object) {
  CHardwareUpdate_Update_Request* _this = reinterpret_cast< CHardwareUpdate_Update_Request* >(object);
  (void)_this;
}
void CHardwareUpdate_Update_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_Update_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_Update_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_Update_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_Update_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_Update_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_Update_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_Update_Request)
  return target;
}

size_t CHardwareUpdate_Update_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_Update_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_Update_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_Update_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_Update_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_Update_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_Update_Request)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_Update_Request::MergeFrom(const CHardwareUpdate_Update_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_Update_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_Update_Request::CopyFrom(const CHardwareUpdate_Update_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_Update_Request::IsInitialized() const {
  return true;
}

void CHardwareUpdate_Update_Request::InternalSwap(CHardwareUpdate_Update_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_Update_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_Update_Response::_Internal {
 public:
};

CHardwareUpdate_Update_Response::CHardwareUpdate_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_Update_Response)
}
CHardwareUpdate_Update_Response::CHardwareUpdate_Update_Response(const CHardwareUpdate_Update_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_Update_Response)
}

void CHardwareUpdate_Update_Response::SharedCtor() {
}

CHardwareUpdate_Update_Response::~CHardwareUpdate_Update_Response() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_Update_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_Update_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_Update_Response::ArenaDtor(void* object) {
  CHardwareUpdate_Update_Response* _this = reinterpret_cast< CHardwareUpdate_Update_Response* >(object);
  (void)_this;
}
void CHardwareUpdate_Update_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_Update_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_Update_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_Update_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_Update_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_Update_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_Update_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_Update_Response)
  return target;
}

size_t CHardwareUpdate_Update_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_Update_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_Update_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_Update_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_Update_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_Update_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_Update_Response)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_Update_Response::MergeFrom(const CHardwareUpdate_Update_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_Update_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_Update_Response::CopyFrom(const CHardwareUpdate_Update_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_Update_Response::IsInitialized() const {
  return true;
}

void CHardwareUpdate_Update_Response::InternalSwap(CHardwareUpdate_Update_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_Update_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_UpdateProgress_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CHardwareUpdate_UpdateProgress_Notification>()._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHardwareUpdate_UpdateProgress_Notification::CHardwareUpdate_UpdateProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_UpdateProgress_Notification)
}
CHardwareUpdate_UpdateProgress_Notification::CHardwareUpdate_UpdateProgress_Notification(const CHardwareUpdate_UpdateProgress_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_UpdateProgress_Notification)
}

void CHardwareUpdate_UpdateProgress_Notification::SharedCtor() {
progress_ = 0;
}

CHardwareUpdate_UpdateProgress_Notification::~CHardwareUpdate_UpdateProgress_Notification() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_UpdateProgress_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_UpdateProgress_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_UpdateProgress_Notification::ArenaDtor(void* object) {
  CHardwareUpdate_UpdateProgress_Notification* _this = reinterpret_cast< CHardwareUpdate_UpdateProgress_Notification* >(object);
  (void)_this;
}
void CHardwareUpdate_UpdateProgress_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_UpdateProgress_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_UpdateProgress_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_UpdateProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_UpdateProgress_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_UpdateProgress_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_UpdateProgress_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 progress = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_UpdateProgress_Notification)
  return target;
}

size_t CHardwareUpdate_UpdateProgress_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_UpdateProgress_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 progress = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_UpdateProgress_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_UpdateProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_UpdateProgress_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_UpdateProgress_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_UpdateProgress_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_UpdateProgress_Notification)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_UpdateProgress_Notification::MergeFrom(const CHardwareUpdate_UpdateProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_UpdateProgress_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_progress()) {
    _internal_set_progress(from._internal_progress());
  }
}

void CHardwareUpdate_UpdateProgress_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_UpdateProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_UpdateProgress_Notification::CopyFrom(const CHardwareUpdate_UpdateProgress_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_UpdateProgress_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_UpdateProgress_Notification::IsInitialized() const {
  return true;
}

void CHardwareUpdate_UpdateProgress_Notification::InternalSwap(CHardwareUpdate_UpdateProgress_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_UpdateProgress_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHardwareUpdate_UpdateStateChanged_Notification::_Internal {
 public:
};

CHardwareUpdate_UpdateStateChanged_Notification::CHardwareUpdate_UpdateStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHardwareUpdate_UpdateStateChanged_Notification)
}
CHardwareUpdate_UpdateStateChanged_Notification::CHardwareUpdate_UpdateStateChanged_Notification(const CHardwareUpdate_UpdateStateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHardwareUpdate_UpdateStateChanged_Notification)
}

void CHardwareUpdate_UpdateStateChanged_Notification::SharedCtor() {
}

CHardwareUpdate_UpdateStateChanged_Notification::~CHardwareUpdate_UpdateStateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CHardwareUpdate_UpdateStateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHardwareUpdate_UpdateStateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CHardwareUpdate_UpdateStateChanged_Notification::ArenaDtor(void* object) {
  CHardwareUpdate_UpdateStateChanged_Notification* _this = reinterpret_cast< CHardwareUpdate_UpdateStateChanged_Notification* >(object);
  (void)_this;
}
void CHardwareUpdate_UpdateStateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHardwareUpdate_UpdateStateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHardwareUpdate_UpdateStateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CHardwareUpdate_UpdateStateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHardwareUpdate_UpdateStateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHardwareUpdate_UpdateStateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHardwareUpdate_UpdateStateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHardwareUpdate_UpdateStateChanged_Notification)
  return target;
}

size_t CHardwareUpdate_UpdateStateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHardwareUpdate_UpdateStateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHardwareUpdate_UpdateStateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHardwareUpdate_UpdateStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CHardwareUpdate_UpdateStateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHardwareUpdate_UpdateStateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHardwareUpdate_UpdateStateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHardwareUpdate_UpdateStateChanged_Notification)
    MergeFrom(*source);
  }
}

void CHardwareUpdate_UpdateStateChanged_Notification::MergeFrom(const CHardwareUpdate_UpdateStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHardwareUpdate_UpdateStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHardwareUpdate_UpdateStateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHardwareUpdate_UpdateStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHardwareUpdate_UpdateStateChanged_Notification::CopyFrom(const CHardwareUpdate_UpdateStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHardwareUpdate_UpdateStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHardwareUpdate_UpdateStateChanged_Notification::IsInitialized() const {
  return true;
}

void CHardwareUpdate_UpdateStateChanged_Notification::InternalSwap(CHardwareUpdate_UpdateStateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHardwareUpdate_UpdateStateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HardwareUpdate::~HardwareUpdate() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HardwareUpdate::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fhardwareupdate_2eproto);
  return file_level_service_descriptors_webuimessages_5fhardwareupdate_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HardwareUpdate::GetDescriptor() {
  return descriptor();
}

void HardwareUpdate::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_GetState_Request*,
                         ::CHardwareUpdate_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void HardwareUpdate::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void HardwareUpdate::CheckForUpdates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_CheckForUpdates_Request*,
                         ::CHardwareUpdate_CheckForUpdates_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CheckForUpdates() not implemented.");
  done->Run();
}

void HardwareUpdate::Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_Update_Request*,
                         ::CHardwareUpdate_Update_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void HardwareUpdate::NotifyUpdateProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_UpdateProgress_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUpdateProgress() not implemented.");
  done->Run();
}

void HardwareUpdate::NotifyUpdateStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CHardwareUpdate_UpdateStateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUpdateStateChanged() not implemented.");
  done->Run();
}

void HardwareUpdate::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fhardwareupdate_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CHardwareUpdate_GetState_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 2:
      CheckForUpdates(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_CheckForUpdates_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CHardwareUpdate_CheckForUpdates_Response*>(
                 response),
             done);
      break;
    case 3:
      Update(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_Update_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CHardwareUpdate_Update_Response*>(
                 response),
             done);
      break;
    case 4:
      NotifyUpdateProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_UpdateProgress_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 5:
      NotifyUpdateStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CHardwareUpdate_UpdateStateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HardwareUpdate::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CHardwareUpdate_GetState_Request::default_instance();
    case 1:
      return ::CHardwareUpdate_StateChanged_Notification::default_instance();
    case 2:
      return ::CHardwareUpdate_CheckForUpdates_Request::default_instance();
    case 3:
      return ::CHardwareUpdate_Update_Request::default_instance();
    case 4:
      return ::CHardwareUpdate_UpdateProgress_Notification::default_instance();
    case 5:
      return ::CHardwareUpdate_UpdateStateChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HardwareUpdate::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CHardwareUpdate_GetState_Response::default_instance();
    case 1:
      return ::WebUINoResponse::default_instance();
    case 2:
      return ::CHardwareUpdate_CheckForUpdates_Response::default_instance();
    case 3:
      return ::CHardwareUpdate_Update_Response::default_instance();
    case 4:
      return ::WebUINoResponse::default_instance();
    case 5:
      return ::WebUINoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

HardwareUpdate_Stub::HardwareUpdate_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
HardwareUpdate_Stub::HardwareUpdate_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
HardwareUpdate_Stub::~HardwareUpdate_Stub() {
  if (owns_channel_) delete channel_;
}

void HardwareUpdate_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_GetState_Request* request,
                              ::CHardwareUpdate_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void HardwareUpdate_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void HardwareUpdate_Stub::CheckForUpdates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_CheckForUpdates_Request* request,
                              ::CHardwareUpdate_CheckForUpdates_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void HardwareUpdate_Stub::Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_Update_Request* request,
                              ::CHardwareUpdate_Update_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void HardwareUpdate_Stub::NotifyUpdateProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_UpdateProgress_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void HardwareUpdate_Stub::NotifyUpdateStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CHardwareUpdate_UpdateStateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_GetState_Request* Arena::CreateMaybeMessage< ::CHardwareUpdate_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_GetState_Response* Arena::CreateMaybeMessage< ::CHardwareUpdate_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_StateChanged_Notification* Arena::CreateMaybeMessage< ::CHardwareUpdate_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_CheckForUpdates_Request* Arena::CreateMaybeMessage< ::CHardwareUpdate_CheckForUpdates_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_CheckForUpdates_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAvailableHardwareUpdate* Arena::CreateMaybeMessage< ::CMsgAvailableHardwareUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAvailableHardwareUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_CheckForUpdates_Response* Arena::CreateMaybeMessage< ::CHardwareUpdate_CheckForUpdates_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_CheckForUpdates_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_Update_Request* Arena::CreateMaybeMessage< ::CHardwareUpdate_Update_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_Update_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_Update_Response* Arena::CreateMaybeMessage< ::CHardwareUpdate_Update_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_Update_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_UpdateProgress_Notification* Arena::CreateMaybeMessage< ::CHardwareUpdate_UpdateProgress_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_UpdateProgress_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CHardwareUpdate_UpdateStateChanged_Notification* Arena::CreateMaybeMessage< ::CHardwareUpdate_UpdateStateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHardwareUpdate_UpdateStateChanged_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
