// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_hardwareupdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fhardwareupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fhardwareupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fhardwareupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fhardwareupdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fhardwareupdate_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(int index);
class CHardwareUpdate_CheckForUpdates_Request;
struct CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal;
extern CHardwareUpdate_CheckForUpdates_RequestDefaultTypeInternal _CHardwareUpdate_CheckForUpdates_Request_default_instance_;
class CHardwareUpdate_CheckForUpdates_Response;
struct CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal;
extern CHardwareUpdate_CheckForUpdates_ResponseDefaultTypeInternal _CHardwareUpdate_CheckForUpdates_Response_default_instance_;
class CHardwareUpdate_GetState_Request;
struct CHardwareUpdate_GetState_RequestDefaultTypeInternal;
extern CHardwareUpdate_GetState_RequestDefaultTypeInternal _CHardwareUpdate_GetState_Request_default_instance_;
class CHardwareUpdate_GetState_Response;
struct CHardwareUpdate_GetState_ResponseDefaultTypeInternal;
extern CHardwareUpdate_GetState_ResponseDefaultTypeInternal _CHardwareUpdate_GetState_Response_default_instance_;
class CHardwareUpdate_StateChanged_Notification;
struct CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal;
extern CHardwareUpdate_StateChanged_NotificationDefaultTypeInternal _CHardwareUpdate_StateChanged_Notification_default_instance_;
class CHardwareUpdate_UpdateProgress_Notification;
struct CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal;
extern CHardwareUpdate_UpdateProgress_NotificationDefaultTypeInternal _CHardwareUpdate_UpdateProgress_Notification_default_instance_;
class CHardwareUpdate_UpdateStateChanged_Notification;
struct CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal;
extern CHardwareUpdate_UpdateStateChanged_NotificationDefaultTypeInternal _CHardwareUpdate_UpdateStateChanged_Notification_default_instance_;
class CHardwareUpdate_Update_Request;
struct CHardwareUpdate_Update_RequestDefaultTypeInternal;
extern CHardwareUpdate_Update_RequestDefaultTypeInternal _CHardwareUpdate_Update_Request_default_instance_;
class CHardwareUpdate_Update_Response;
struct CHardwareUpdate_Update_ResponseDefaultTypeInternal;
extern CHardwareUpdate_Update_ResponseDefaultTypeInternal _CHardwareUpdate_Update_Response_default_instance_;
class CMsgAvailableHardwareUpdate;
struct CMsgAvailableHardwareUpdateDefaultTypeInternal;
extern CMsgAvailableHardwareUpdateDefaultTypeInternal _CMsgAvailableHardwareUpdate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CHardwareUpdate_CheckForUpdates_Request* Arena::CreateMaybeMessage<::CHardwareUpdate_CheckForUpdates_Request>(Arena*);
template<> ::CHardwareUpdate_CheckForUpdates_Response* Arena::CreateMaybeMessage<::CHardwareUpdate_CheckForUpdates_Response>(Arena*);
template<> ::CHardwareUpdate_GetState_Request* Arena::CreateMaybeMessage<::CHardwareUpdate_GetState_Request>(Arena*);
template<> ::CHardwareUpdate_GetState_Response* Arena::CreateMaybeMessage<::CHardwareUpdate_GetState_Response>(Arena*);
template<> ::CHardwareUpdate_StateChanged_Notification* Arena::CreateMaybeMessage<::CHardwareUpdate_StateChanged_Notification>(Arena*);
template<> ::CHardwareUpdate_UpdateProgress_Notification* Arena::CreateMaybeMessage<::CHardwareUpdate_UpdateProgress_Notification>(Arena*);
template<> ::CHardwareUpdate_UpdateStateChanged_Notification* Arena::CreateMaybeMessage<::CHardwareUpdate_UpdateStateChanged_Notification>(Arena*);
template<> ::CHardwareUpdate_Update_Request* Arena::CreateMaybeMessage<::CHardwareUpdate_Update_Request>(Arena*);
template<> ::CHardwareUpdate_Update_Response* Arena::CreateMaybeMessage<::CHardwareUpdate_Update_Response>(Arena*);
template<> ::CMsgAvailableHardwareUpdate* Arena::CreateMaybeMessage<::CMsgAvailableHardwareUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CHardwareUpdate_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_GetState_Request) */ {
 public:
  inline CHardwareUpdate_GetState_Request() : CHardwareUpdate_GetState_Request(nullptr) {}
  virtual ~CHardwareUpdate_GetState_Request();
  explicit constexpr CHardwareUpdate_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_GetState_Request(const CHardwareUpdate_GetState_Request& from);
  CHardwareUpdate_GetState_Request(CHardwareUpdate_GetState_Request&& from) noexcept
    : CHardwareUpdate_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_GetState_Request& operator=(const CHardwareUpdate_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_GetState_Request& operator=(CHardwareUpdate_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_GetState_Request*>(
               &_CHardwareUpdate_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHardwareUpdate_GetState_Request& a, CHardwareUpdate_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_GetState_Request* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_GetState_Request>(nullptr);
  }

  CHardwareUpdate_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_GetState_Request& from);
  void MergeFrom(const CHardwareUpdate_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_GetState_Request";
  }
  protected:
  explicit CHardwareUpdate_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_GetState_Response) */ {
 public:
  inline CHardwareUpdate_GetState_Response() : CHardwareUpdate_GetState_Response(nullptr) {}
  virtual ~CHardwareUpdate_GetState_Response();
  explicit constexpr CHardwareUpdate_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_GetState_Response(const CHardwareUpdate_GetState_Response& from);
  CHardwareUpdate_GetState_Response(CHardwareUpdate_GetState_Response&& from) noexcept
    : CHardwareUpdate_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_GetState_Response& operator=(const CHardwareUpdate_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_GetState_Response& operator=(CHardwareUpdate_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_GetState_Response*>(
               &_CHardwareUpdate_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CHardwareUpdate_GetState_Response& a, CHardwareUpdate_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_GetState_Response* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_GetState_Response>(nullptr);
  }

  CHardwareUpdate_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_GetState_Response& from);
  void MergeFrom(const CHardwareUpdate_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_GetState_Response";
  }
  protected:
  explicit CHardwareUpdate_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsUpdaterSupportedFieldNumber = 1,
    kHasSeenControllersFieldNumber = 2,
  };
  // optional bool is_updater_supported = 1;
  bool has_is_updater_supported() const;
  private:
  bool _internal_has_is_updater_supported() const;
  public:
  void clear_is_updater_supported();
  bool is_updater_supported() const;
  void set_is_updater_supported(bool value);
  private:
  bool _internal_is_updater_supported() const;
  void _internal_set_is_updater_supported(bool value);
  public:

  // optional bool has_seen_controllers = 2;
  bool has_has_seen_controllers() const;
  private:
  bool _internal_has_has_seen_controllers() const;
  public:
  void clear_has_seen_controllers();
  bool has_seen_controllers() const;
  void set_has_seen_controllers(bool value);
  private:
  bool _internal_has_seen_controllers() const;
  void _internal_set_has_seen_controllers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_updater_supported_;
  bool has_seen_controllers_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_StateChanged_Notification) */ {
 public:
  inline CHardwareUpdate_StateChanged_Notification() : CHardwareUpdate_StateChanged_Notification(nullptr) {}
  virtual ~CHardwareUpdate_StateChanged_Notification();
  explicit constexpr CHardwareUpdate_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_StateChanged_Notification(const CHardwareUpdate_StateChanged_Notification& from);
  CHardwareUpdate_StateChanged_Notification(CHardwareUpdate_StateChanged_Notification&& from) noexcept
    : CHardwareUpdate_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_StateChanged_Notification& operator=(const CHardwareUpdate_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_StateChanged_Notification& operator=(CHardwareUpdate_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_StateChanged_Notification*>(
               &_CHardwareUpdate_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CHardwareUpdate_StateChanged_Notification& a, CHardwareUpdate_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_StateChanged_Notification>(nullptr);
  }

  CHardwareUpdate_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_StateChanged_Notification& from);
  void MergeFrom(const CHardwareUpdate_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_StateChanged_Notification";
  }
  protected:
  explicit CHardwareUpdate_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_CheckForUpdates_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_CheckForUpdates_Request) */ {
 public:
  inline CHardwareUpdate_CheckForUpdates_Request() : CHardwareUpdate_CheckForUpdates_Request(nullptr) {}
  virtual ~CHardwareUpdate_CheckForUpdates_Request();
  explicit constexpr CHardwareUpdate_CheckForUpdates_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_CheckForUpdates_Request(const CHardwareUpdate_CheckForUpdates_Request& from);
  CHardwareUpdate_CheckForUpdates_Request(CHardwareUpdate_CheckForUpdates_Request&& from) noexcept
    : CHardwareUpdate_CheckForUpdates_Request() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_CheckForUpdates_Request& operator=(const CHardwareUpdate_CheckForUpdates_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_CheckForUpdates_Request& operator=(CHardwareUpdate_CheckForUpdates_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_CheckForUpdates_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_CheckForUpdates_Request* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_CheckForUpdates_Request*>(
               &_CHardwareUpdate_CheckForUpdates_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CHardwareUpdate_CheckForUpdates_Request& a, CHardwareUpdate_CheckForUpdates_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_CheckForUpdates_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_CheckForUpdates_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_CheckForUpdates_Request* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_CheckForUpdates_Request>(nullptr);
  }

  CHardwareUpdate_CheckForUpdates_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_CheckForUpdates_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_CheckForUpdates_Request& from);
  void MergeFrom(const CHardwareUpdate_CheckForUpdates_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_CheckForUpdates_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_CheckForUpdates_Request";
  }
  protected:
  explicit CHardwareUpdate_CheckForUpdates_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_CheckForUpdates_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CMsgAvailableHardwareUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAvailableHardwareUpdate) */ {
 public:
  inline CMsgAvailableHardwareUpdate() : CMsgAvailableHardwareUpdate(nullptr) {}
  virtual ~CMsgAvailableHardwareUpdate();
  explicit constexpr CMsgAvailableHardwareUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAvailableHardwareUpdate(const CMsgAvailableHardwareUpdate& from);
  CMsgAvailableHardwareUpdate(CMsgAvailableHardwareUpdate&& from) noexcept
    : CMsgAvailableHardwareUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgAvailableHardwareUpdate& operator=(const CMsgAvailableHardwareUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAvailableHardwareUpdate& operator=(CMsgAvailableHardwareUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAvailableHardwareUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAvailableHardwareUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgAvailableHardwareUpdate*>(
               &_CMsgAvailableHardwareUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgAvailableHardwareUpdate& a, CMsgAvailableHardwareUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAvailableHardwareUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAvailableHardwareUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAvailableHardwareUpdate* New() const final {
    return CreateMaybeMessage<CMsgAvailableHardwareUpdate>(nullptr);
  }

  CMsgAvailableHardwareUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAvailableHardwareUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAvailableHardwareUpdate& from);
  void MergeFrom(const CMsgAvailableHardwareUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAvailableHardwareUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAvailableHardwareUpdate";
  }
  protected:
  explicit CMsgAvailableHardwareUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 3,
    kCurrentTsFieldNumber = 4,
    kUpdateTsFieldNumber = 5,
    kEtypeFieldNumber = 1,
    kHardwareIdFieldNumber = 2,
  };
  // optional string serial_number = 3;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string current_ts = 4;
  bool has_current_ts() const;
  private:
  bool _internal_has_current_ts() const;
  public:
  void clear_current_ts();
  const std::string& current_ts() const;
  void set_current_ts(const std::string& value);
  void set_current_ts(std::string&& value);
  void set_current_ts(const char* value);
  void set_current_ts(const char* value, size_t size);
  std::string* mutable_current_ts();
  std::string* release_current_ts();
  void set_allocated_current_ts(std::string* current_ts);
  private:
  const std::string& _internal_current_ts() const;
  void _internal_set_current_ts(const std::string& value);
  std::string* _internal_mutable_current_ts();
  public:

  // optional string update_ts = 5;
  bool has_update_ts() const;
  private:
  bool _internal_has_update_ts() const;
  public:
  void clear_update_ts();
  const std::string& update_ts() const;
  void set_update_ts(const std::string& value);
  void set_update_ts(std::string&& value);
  void set_update_ts(const char* value);
  void set_update_ts(const char* value, size_t size);
  std::string* mutable_update_ts();
  std::string* release_update_ts();
  void set_allocated_update_ts(std::string* update_ts);
  private:
  const std::string& _internal_update_ts() const;
  void _internal_set_update_ts(const std::string& value);
  std::string* _internal_mutable_update_ts();
  public:

  // optional uint32 etype = 1;
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::PROTOBUF_NAMESPACE_ID::uint32 etype() const;
  void set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_etype() const;
  void _internal_set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hardware_id = 2;
  bool has_hardware_id() const;
  private:
  bool _internal_has_hardware_id() const;
  public:
  void clear_hardware_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hardware_id() const;
  void set_hardware_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hardware_id() const;
  void _internal_set_hardware_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAvailableHardwareUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_ts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 etype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hardware_id_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_CheckForUpdates_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_CheckForUpdates_Response) */ {
 public:
  inline CHardwareUpdate_CheckForUpdates_Response() : CHardwareUpdate_CheckForUpdates_Response(nullptr) {}
  virtual ~CHardwareUpdate_CheckForUpdates_Response();
  explicit constexpr CHardwareUpdate_CheckForUpdates_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_CheckForUpdates_Response(const CHardwareUpdate_CheckForUpdates_Response& from);
  CHardwareUpdate_CheckForUpdates_Response(CHardwareUpdate_CheckForUpdates_Response&& from) noexcept
    : CHardwareUpdate_CheckForUpdates_Response() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_CheckForUpdates_Response& operator=(const CHardwareUpdate_CheckForUpdates_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_CheckForUpdates_Response& operator=(CHardwareUpdate_CheckForUpdates_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_CheckForUpdates_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_CheckForUpdates_Response* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_CheckForUpdates_Response*>(
               &_CHardwareUpdate_CheckForUpdates_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CHardwareUpdate_CheckForUpdates_Response& a, CHardwareUpdate_CheckForUpdates_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_CheckForUpdates_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_CheckForUpdates_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_CheckForUpdates_Response* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_CheckForUpdates_Response>(nullptr);
  }

  CHardwareUpdate_CheckForUpdates_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_CheckForUpdates_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_CheckForUpdates_Response& from);
  void MergeFrom(const CHardwareUpdate_CheckForUpdates_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_CheckForUpdates_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_CheckForUpdates_Response";
  }
  protected:
  explicit CHardwareUpdate_CheckForUpdates_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .CMsgAvailableHardwareUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::CMsgAvailableHardwareUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailableHardwareUpdate >*
      mutable_updates();
  private:
  const ::CMsgAvailableHardwareUpdate& _internal_updates(int index) const;
  ::CMsgAvailableHardwareUpdate* _internal_add_updates();
  public:
  const ::CMsgAvailableHardwareUpdate& updates(int index) const;
  ::CMsgAvailableHardwareUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailableHardwareUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_CheckForUpdates_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailableHardwareUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_Update_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_Update_Request) */ {
 public:
  inline CHardwareUpdate_Update_Request() : CHardwareUpdate_Update_Request(nullptr) {}
  virtual ~CHardwareUpdate_Update_Request();
  explicit constexpr CHardwareUpdate_Update_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_Update_Request(const CHardwareUpdate_Update_Request& from);
  CHardwareUpdate_Update_Request(CHardwareUpdate_Update_Request&& from) noexcept
    : CHardwareUpdate_Update_Request() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_Update_Request& operator=(const CHardwareUpdate_Update_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_Update_Request& operator=(CHardwareUpdate_Update_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_Update_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_Update_Request* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_Update_Request*>(
               &_CHardwareUpdate_Update_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CHardwareUpdate_Update_Request& a, CHardwareUpdate_Update_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_Update_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_Update_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_Update_Request* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_Update_Request>(nullptr);
  }

  CHardwareUpdate_Update_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_Update_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_Update_Request& from);
  void MergeFrom(const CHardwareUpdate_Update_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_Update_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_Update_Request";
  }
  protected:
  explicit CHardwareUpdate_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_Update_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_Update_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_Update_Response) */ {
 public:
  inline CHardwareUpdate_Update_Response() : CHardwareUpdate_Update_Response(nullptr) {}
  virtual ~CHardwareUpdate_Update_Response();
  explicit constexpr CHardwareUpdate_Update_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_Update_Response(const CHardwareUpdate_Update_Response& from);
  CHardwareUpdate_Update_Response(CHardwareUpdate_Update_Response&& from) noexcept
    : CHardwareUpdate_Update_Response() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_Update_Response& operator=(const CHardwareUpdate_Update_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_Update_Response& operator=(CHardwareUpdate_Update_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_Update_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_Update_Response* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_Update_Response*>(
               &_CHardwareUpdate_Update_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CHardwareUpdate_Update_Response& a, CHardwareUpdate_Update_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_Update_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_Update_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_Update_Response* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_Update_Response>(nullptr);
  }

  CHardwareUpdate_Update_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_Update_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_Update_Response& from);
  void MergeFrom(const CHardwareUpdate_Update_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_Update_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_Update_Response";
  }
  protected:
  explicit CHardwareUpdate_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_Update_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_UpdateProgress_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_UpdateProgress_Notification) */ {
 public:
  inline CHardwareUpdate_UpdateProgress_Notification() : CHardwareUpdate_UpdateProgress_Notification(nullptr) {}
  virtual ~CHardwareUpdate_UpdateProgress_Notification();
  explicit constexpr CHardwareUpdate_UpdateProgress_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_UpdateProgress_Notification(const CHardwareUpdate_UpdateProgress_Notification& from);
  CHardwareUpdate_UpdateProgress_Notification(CHardwareUpdate_UpdateProgress_Notification&& from) noexcept
    : CHardwareUpdate_UpdateProgress_Notification() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_UpdateProgress_Notification& operator=(const CHardwareUpdate_UpdateProgress_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_UpdateProgress_Notification& operator=(CHardwareUpdate_UpdateProgress_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_UpdateProgress_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_UpdateProgress_Notification* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_UpdateProgress_Notification*>(
               &_CHardwareUpdate_UpdateProgress_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CHardwareUpdate_UpdateProgress_Notification& a, CHardwareUpdate_UpdateProgress_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_UpdateProgress_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_UpdateProgress_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_UpdateProgress_Notification* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_UpdateProgress_Notification>(nullptr);
  }

  CHardwareUpdate_UpdateProgress_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_UpdateProgress_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_UpdateProgress_Notification& from);
  void MergeFrom(const CHardwareUpdate_UpdateProgress_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_UpdateProgress_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_UpdateProgress_Notification";
  }
  protected:
  explicit CHardwareUpdate_UpdateProgress_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
  };
  // optional int32 progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_UpdateProgress_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// -------------------------------------------------------------------

class CHardwareUpdate_UpdateStateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHardwareUpdate_UpdateStateChanged_Notification) */ {
 public:
  inline CHardwareUpdate_UpdateStateChanged_Notification() : CHardwareUpdate_UpdateStateChanged_Notification(nullptr) {}
  virtual ~CHardwareUpdate_UpdateStateChanged_Notification();
  explicit constexpr CHardwareUpdate_UpdateStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHardwareUpdate_UpdateStateChanged_Notification(const CHardwareUpdate_UpdateStateChanged_Notification& from);
  CHardwareUpdate_UpdateStateChanged_Notification(CHardwareUpdate_UpdateStateChanged_Notification&& from) noexcept
    : CHardwareUpdate_UpdateStateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CHardwareUpdate_UpdateStateChanged_Notification& operator=(const CHardwareUpdate_UpdateStateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHardwareUpdate_UpdateStateChanged_Notification& operator=(CHardwareUpdate_UpdateStateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHardwareUpdate_UpdateStateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHardwareUpdate_UpdateStateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CHardwareUpdate_UpdateStateChanged_Notification*>(
               &_CHardwareUpdate_UpdateStateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CHardwareUpdate_UpdateStateChanged_Notification& a, CHardwareUpdate_UpdateStateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CHardwareUpdate_UpdateStateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHardwareUpdate_UpdateStateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHardwareUpdate_UpdateStateChanged_Notification* New() const final {
    return CreateMaybeMessage<CHardwareUpdate_UpdateStateChanged_Notification>(nullptr);
  }

  CHardwareUpdate_UpdateStateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHardwareUpdate_UpdateStateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHardwareUpdate_UpdateStateChanged_Notification& from);
  void MergeFrom(const CHardwareUpdate_UpdateStateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHardwareUpdate_UpdateStateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHardwareUpdate_UpdateStateChanged_Notification";
  }
  protected:
  explicit CHardwareUpdate_UpdateStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fhardwareupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHardwareUpdate_UpdateStateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fhardwareupdate_2eproto;
};
// ===================================================================

class HardwareUpdate_Stub;

class HardwareUpdate : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline HardwareUpdate() {};
 public:
  virtual ~HardwareUpdate();

  typedef HardwareUpdate_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_GetState_Request* request,
                       ::CHardwareUpdate_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CheckForUpdates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_CheckForUpdates_Request* request,
                       ::CHardwareUpdate_CheckForUpdates_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_Update_Request* request,
                       ::CHardwareUpdate_Update_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyUpdateProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_UpdateProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyUpdateStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_UpdateStateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(HardwareUpdate);
};

class HardwareUpdate_Stub : public HardwareUpdate {
 public:
  HardwareUpdate_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  HardwareUpdate_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~HardwareUpdate_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements HardwareUpdate ------------------------------------------

  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_GetState_Request* request,
                       ::CHardwareUpdate_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void CheckForUpdates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_CheckForUpdates_Request* request,
                       ::CHardwareUpdate_CheckForUpdates_Response* response,
                       ::google::protobuf::Closure* done);
  void Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_Update_Request* request,
                       ::CHardwareUpdate_Update_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyUpdateProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_UpdateProgress_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyUpdateStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CHardwareUpdate_UpdateStateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(HardwareUpdate_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHardwareUpdate_GetState_Request

// -------------------------------------------------------------------

// CHardwareUpdate_GetState_Response

// optional bool is_updater_supported = 1;
inline bool CHardwareUpdate_GetState_Response::_internal_has_is_updater_supported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHardwareUpdate_GetState_Response::has_is_updater_supported() const {
  return _internal_has_is_updater_supported();
}
inline void CHardwareUpdate_GetState_Response::clear_is_updater_supported() {
  is_updater_supported_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CHardwareUpdate_GetState_Response::_internal_is_updater_supported() const {
  return is_updater_supported_;
}
inline bool CHardwareUpdate_GetState_Response::is_updater_supported() const {
  // @@protoc_insertion_point(field_get:CHardwareUpdate_GetState_Response.is_updater_supported)
  return _internal_is_updater_supported();
}
inline void CHardwareUpdate_GetState_Response::_internal_set_is_updater_supported(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_updater_supported_ = value;
}
inline void CHardwareUpdate_GetState_Response::set_is_updater_supported(bool value) {
  _internal_set_is_updater_supported(value);
  // @@protoc_insertion_point(field_set:CHardwareUpdate_GetState_Response.is_updater_supported)
}

// optional bool has_seen_controllers = 2;
inline bool CHardwareUpdate_GetState_Response::_internal_has_has_seen_controllers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHardwareUpdate_GetState_Response::has_has_seen_controllers() const {
  return _internal_has_has_seen_controllers();
}
inline void CHardwareUpdate_GetState_Response::clear_has_seen_controllers() {
  has_seen_controllers_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CHardwareUpdate_GetState_Response::_internal_has_seen_controllers() const {
  return has_seen_controllers_;
}
inline bool CHardwareUpdate_GetState_Response::has_seen_controllers() const {
  // @@protoc_insertion_point(field_get:CHardwareUpdate_GetState_Response.has_seen_controllers)
  return _internal_has_seen_controllers();
}
inline void CHardwareUpdate_GetState_Response::_internal_set_has_seen_controllers(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_seen_controllers_ = value;
}
inline void CHardwareUpdate_GetState_Response::set_has_seen_controllers(bool value) {
  _internal_set_has_seen_controllers(value);
  // @@protoc_insertion_point(field_set:CHardwareUpdate_GetState_Response.has_seen_controllers)
}

// -------------------------------------------------------------------

// CHardwareUpdate_StateChanged_Notification

// -------------------------------------------------------------------

// CHardwareUpdate_CheckForUpdates_Request

// -------------------------------------------------------------------

// CMsgAvailableHardwareUpdate

// optional uint32 etype = 1;
inline bool CMsgAvailableHardwareUpdate::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAvailableHardwareUpdate::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgAvailableHardwareUpdate::clear_etype() {
  etype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAvailableHardwareUpdate::_internal_etype() const {
  return etype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAvailableHardwareUpdate::etype() const {
  // @@protoc_insertion_point(field_get:CMsgAvailableHardwareUpdate.etype)
  return _internal_etype();
}
inline void CMsgAvailableHardwareUpdate::_internal_set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  etype_ = value;
}
inline void CMsgAvailableHardwareUpdate::set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgAvailableHardwareUpdate.etype)
}

// optional uint32 hardware_id = 2;
inline bool CMsgAvailableHardwareUpdate::_internal_has_hardware_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAvailableHardwareUpdate::has_hardware_id() const {
  return _internal_has_hardware_id();
}
inline void CMsgAvailableHardwareUpdate::clear_hardware_id() {
  hardware_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAvailableHardwareUpdate::_internal_hardware_id() const {
  return hardware_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAvailableHardwareUpdate::hardware_id() const {
  // @@protoc_insertion_point(field_get:CMsgAvailableHardwareUpdate.hardware_id)
  return _internal_hardware_id();
}
inline void CMsgAvailableHardwareUpdate::_internal_set_hardware_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hardware_id_ = value;
}
inline void CMsgAvailableHardwareUpdate::set_hardware_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hardware_id(value);
  // @@protoc_insertion_point(field_set:CMsgAvailableHardwareUpdate.hardware_id)
}

// optional string serial_number = 3;
inline bool CMsgAvailableHardwareUpdate::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAvailableHardwareUpdate::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CMsgAvailableHardwareUpdate::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAvailableHardwareUpdate::serial_number() const {
  // @@protoc_insertion_point(field_get:CMsgAvailableHardwareUpdate.serial_number)
  return _internal_serial_number();
}
inline void CMsgAvailableHardwareUpdate::set_serial_number(const std::string& value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:CMsgAvailableHardwareUpdate.serial_number)
}
inline std::string* CMsgAvailableHardwareUpdate::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:CMsgAvailableHardwareUpdate.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& CMsgAvailableHardwareUpdate::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CMsgAvailableHardwareUpdate::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_serial_number(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgAvailableHardwareUpdate.serial_number)
}
inline void CMsgAvailableHardwareUpdate::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgAvailableHardwareUpdate.serial_number)
}
inline void CMsgAvailableHardwareUpdate::set_serial_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgAvailableHardwareUpdate.serial_number)
}
inline std::string* CMsgAvailableHardwareUpdate::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgAvailableHardwareUpdate::release_serial_number() {
  // @@protoc_insertion_point(field_release:CMsgAvailableHardwareUpdate.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgAvailableHardwareUpdate.serial_number)
}

// optional string current_ts = 4;
inline bool CMsgAvailableHardwareUpdate::_internal_has_current_ts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAvailableHardwareUpdate::has_current_ts() const {
  return _internal_has_current_ts();
}
inline void CMsgAvailableHardwareUpdate::clear_current_ts() {
  current_ts_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgAvailableHardwareUpdate::current_ts() const {
  // @@protoc_insertion_point(field_get:CMsgAvailableHardwareUpdate.current_ts)
  return _internal_current_ts();
}
inline void CMsgAvailableHardwareUpdate::set_current_ts(const std::string& value) {
  _internal_set_current_ts(value);
  // @@protoc_insertion_point(field_set:CMsgAvailableHardwareUpdate.current_ts)
}
inline std::string* CMsgAvailableHardwareUpdate::mutable_current_ts() {
  // @@protoc_insertion_point(field_mutable:CMsgAvailableHardwareUpdate.current_ts)
  return _internal_mutable_current_ts();
}
inline const std::string& CMsgAvailableHardwareUpdate::_internal_current_ts() const {
  return current_ts_.Get();
}
inline void CMsgAvailableHardwareUpdate::_internal_set_current_ts(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  current_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_current_ts(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  current_ts_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgAvailableHardwareUpdate.current_ts)
}
inline void CMsgAvailableHardwareUpdate::set_current_ts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  current_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgAvailableHardwareUpdate.current_ts)
}
inline void CMsgAvailableHardwareUpdate::set_current_ts(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  current_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgAvailableHardwareUpdate.current_ts)
}
inline std::string* CMsgAvailableHardwareUpdate::_internal_mutable_current_ts() {
  _has_bits_[0] |= 0x00000002u;
  return current_ts_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgAvailableHardwareUpdate::release_current_ts() {
  // @@protoc_insertion_point(field_release:CMsgAvailableHardwareUpdate.current_ts)
  if (!_internal_has_current_ts()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return current_ts_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_allocated_current_ts(std::string* current_ts) {
  if (current_ts != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_ts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_ts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgAvailableHardwareUpdate.current_ts)
}

// optional string update_ts = 5;
inline bool CMsgAvailableHardwareUpdate::_internal_has_update_ts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAvailableHardwareUpdate::has_update_ts() const {
  return _internal_has_update_ts();
}
inline void CMsgAvailableHardwareUpdate::clear_update_ts() {
  update_ts_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgAvailableHardwareUpdate::update_ts() const {
  // @@protoc_insertion_point(field_get:CMsgAvailableHardwareUpdate.update_ts)
  return _internal_update_ts();
}
inline void CMsgAvailableHardwareUpdate::set_update_ts(const std::string& value) {
  _internal_set_update_ts(value);
  // @@protoc_insertion_point(field_set:CMsgAvailableHardwareUpdate.update_ts)
}
inline std::string* CMsgAvailableHardwareUpdate::mutable_update_ts() {
  // @@protoc_insertion_point(field_mutable:CMsgAvailableHardwareUpdate.update_ts)
  return _internal_mutable_update_ts();
}
inline const std::string& CMsgAvailableHardwareUpdate::_internal_update_ts() const {
  return update_ts_.Get();
}
inline void CMsgAvailableHardwareUpdate::_internal_set_update_ts(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  update_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_update_ts(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  update_ts_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgAvailableHardwareUpdate.update_ts)
}
inline void CMsgAvailableHardwareUpdate::set_update_ts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  update_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgAvailableHardwareUpdate.update_ts)
}
inline void CMsgAvailableHardwareUpdate::set_update_ts(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  update_ts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgAvailableHardwareUpdate.update_ts)
}
inline std::string* CMsgAvailableHardwareUpdate::_internal_mutable_update_ts() {
  _has_bits_[0] |= 0x00000004u;
  return update_ts_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgAvailableHardwareUpdate::release_update_ts() {
  // @@protoc_insertion_point(field_release:CMsgAvailableHardwareUpdate.update_ts)
  if (!_internal_has_update_ts()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return update_ts_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgAvailableHardwareUpdate::set_allocated_update_ts(std::string* update_ts) {
  if (update_ts != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  update_ts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_ts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgAvailableHardwareUpdate.update_ts)
}

// -------------------------------------------------------------------

// CHardwareUpdate_CheckForUpdates_Response

// repeated .CMsgAvailableHardwareUpdate updates = 1;
inline int CHardwareUpdate_CheckForUpdates_Response::_internal_updates_size() const {
  return updates_.size();
}
inline int CHardwareUpdate_CheckForUpdates_Response::updates_size() const {
  return _internal_updates_size();
}
inline void CHardwareUpdate_CheckForUpdates_Response::clear_updates() {
  updates_.Clear();
}
inline ::CMsgAvailableHardwareUpdate* CHardwareUpdate_CheckForUpdates_Response::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:CHardwareUpdate_CheckForUpdates_Response.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailableHardwareUpdate >*
CHardwareUpdate_CheckForUpdates_Response::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:CHardwareUpdate_CheckForUpdates_Response.updates)
  return &updates_;
}
inline const ::CMsgAvailableHardwareUpdate& CHardwareUpdate_CheckForUpdates_Response::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::CMsgAvailableHardwareUpdate& CHardwareUpdate_CheckForUpdates_Response::updates(int index) const {
  // @@protoc_insertion_point(field_get:CHardwareUpdate_CheckForUpdates_Response.updates)
  return _internal_updates(index);
}
inline ::CMsgAvailableHardwareUpdate* CHardwareUpdate_CheckForUpdates_Response::_internal_add_updates() {
  return updates_.Add();
}
inline ::CMsgAvailableHardwareUpdate* CHardwareUpdate_CheckForUpdates_Response::add_updates() {
  // @@protoc_insertion_point(field_add:CHardwareUpdate_CheckForUpdates_Response.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailableHardwareUpdate >&
CHardwareUpdate_CheckForUpdates_Response::updates() const {
  // @@protoc_insertion_point(field_list:CHardwareUpdate_CheckForUpdates_Response.updates)
  return updates_;
}

// -------------------------------------------------------------------

// CHardwareUpdate_Update_Request

// -------------------------------------------------------------------

// CHardwareUpdate_Update_Response

// -------------------------------------------------------------------

// CHardwareUpdate_UpdateProgress_Notification

// optional int32 progress = 1;
inline bool CHardwareUpdate_UpdateProgress_Notification::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHardwareUpdate_UpdateProgress_Notification::has_progress() const {
  return _internal_has_progress();
}
inline void CHardwareUpdate_UpdateProgress_Notification::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHardwareUpdate_UpdateProgress_Notification::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHardwareUpdate_UpdateProgress_Notification::progress() const {
  // @@protoc_insertion_point(field_get:CHardwareUpdate_UpdateProgress_Notification.progress)
  return _internal_progress();
}
inline void CHardwareUpdate_UpdateProgress_Notification::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void CHardwareUpdate_UpdateProgress_Notification::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CHardwareUpdate_UpdateProgress_Notification.progress)
}

// -------------------------------------------------------------------

// CHardwareUpdate_UpdateStateChanged_Notification

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fhardwareupdate_2eproto
