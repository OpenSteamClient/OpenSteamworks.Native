// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_sharedjscontext.proto

#include "webuimessages_sharedjscontext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSharedJSContext_GetDesiredSteamUIWindows_Request::CSharedJSContext_GetDesiredSteamUIWindows_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal {
  constexpr CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal() {}
  union {
    CSharedJSContext_GetDesiredSteamUIWindows_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal _CSharedJSContext_GetDesiredSteamUIWindows_Request_default_instance_;
constexpr CMsgSteamUIBrowserWindow::CMsgSteamUIBrowserWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , pid_(0)
  , browser_id_(0)
  , window_type_(0)
  , x_(0)
  , y_(0)
  , appid_(PROTOBUF_ULONGLONG(0))
  , parent_window_handle_(PROTOBUF_ULONGLONG(0))
  , gamepadui_via_gamescope_(false){}
struct CMsgSteamUIBrowserWindowDefaultTypeInternal {
  constexpr CMsgSteamUIBrowserWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamUIBrowserWindowDefaultTypeInternal() {}
  union {
    CMsgSteamUIBrowserWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamUIBrowserWindowDefaultTypeInternal _CMsgSteamUIBrowserWindow_default_instance_;
constexpr CSharedJSContext_GetDesiredSteamUIWindows_Response::CSharedJSContext_GetDesiredSteamUIWindows_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : windows_(){}
struct CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal {
  constexpr CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal() {}
  union {
    CSharedJSContext_GetDesiredSteamUIWindows_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal _CSharedJSContext_GetDesiredSteamUIWindows_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fsharedjscontext_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fsharedjscontext_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fsharedjscontext_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fsharedjscontext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSharedJSContext_GetDesiredSteamUIWindows_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, browser_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, window_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, parent_window_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, app_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamUIBrowserWindow, gamepadui_via_gamescope_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSharedJSContext_GetDesiredSteamUIWindows_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSharedJSContext_GetDesiredSteamUIWindows_Response, windows_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CSharedJSContext_GetDesiredSteamUIWindows_Request)},
  { 5, 20, sizeof(::CMsgSteamUIBrowserWindow)},
  { 30, -1, sizeof(::CSharedJSContext_GetDesiredSteamUIWindows_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSharedJSContext_GetDesiredSteamUIWindows_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamUIBrowserWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSharedJSContext_GetDesiredSteamUIWindows_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fsharedjscontext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#webuimessages_sharedjscontext.proto\032 g"
  "oogle/protobuf/descriptor.proto\032\013enums.p"
  "roto\032\030steammessages_base.proto\032\030webuimes"
  "sages_base.proto\"3\n1CSharedJSContext_Get"
  "DesiredSteamUIWindows_Request\"\322\001\n\030CMsgSt"
  "eamUIBrowserWindow\022\n\n\002id\030\001 \001(\005\022\013\n\003pid\030\002 "
  "\001(\005\022\022\n\nbrowser_id\030\003 \001(\005\022\023\n\013window_type\030\004"
  " \001(\005\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\r\n\005appid\030\007 \001("
  "\004\022\034\n\024parent_window_handle\030\010 \001(\004\022\020\n\010app_n"
  "ame\030\t \001(\t\022\037\n\027gamepadui_via_gamescope\030\n \001"
  "(\010\"`\n2CSharedJSContext_GetDesiredSteamUI"
  "Windows_Response\022*\n\007windows\030\001 \003(\0132\031.CMsg"
  "SteamUIBrowserWindow2\235\001\n\017SharedJSContext"
  "\022\203\001\n\030GetDesiredSteamUIWindows\0222.CSharedJ"
  "SContext_GetDesiredSteamUIWindows_Reques"
  "t\0323.CSharedJSContext_GetDesiredSteamUIWi"
  "ndows_Response\032\004\200\227\"\001B\037H\001\200\001\001\252\002\027OpenSteamw"
  "orks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fsharedjscontext_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fsharedjscontext_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsharedjscontext_2eproto = {
  false, false, 693, descriptor_table_protodef_webuimessages_5fsharedjscontext_2eproto, "webuimessages_sharedjscontext.proto", 
  &descriptor_table_webuimessages_5fsharedjscontext_2eproto_once, descriptor_table_webuimessages_5fsharedjscontext_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_webuimessages_5fsharedjscontext_2eproto::offsets,
  file_level_metadata_webuimessages_5fsharedjscontext_2eproto, file_level_enum_descriptors_webuimessages_5fsharedjscontext_2eproto, file_level_service_descriptors_webuimessages_5fsharedjscontext_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fsharedjscontext_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsharedjscontext_2eproto);
  return descriptor_table_webuimessages_5fsharedjscontext_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fsharedjscontext_2eproto(&descriptor_table_webuimessages_5fsharedjscontext_2eproto);

// ===================================================================

class CSharedJSContext_GetDesiredSteamUIWindows_Request::_Internal {
 public:
};

CSharedJSContext_GetDesiredSteamUIWindows_Request::CSharedJSContext_GetDesiredSteamUIWindows_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSharedJSContext_GetDesiredSteamUIWindows_Request)
}
CSharedJSContext_GetDesiredSteamUIWindows_Request::CSharedJSContext_GetDesiredSteamUIWindows_Request(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSharedJSContext_GetDesiredSteamUIWindows_Request)
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::SharedCtor() {
}

CSharedJSContext_GetDesiredSteamUIWindows_Request::~CSharedJSContext_GetDesiredSteamUIWindows_Request() {
  // @@protoc_insertion_point(destructor:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::ArenaDtor(void* object) {
  CSharedJSContext_GetDesiredSteamUIWindows_Request* _this = reinterpret_cast< CSharedJSContext_GetDesiredSteamUIWindows_Request* >(object);
  (void)_this;
}
void CSharedJSContext_GetDesiredSteamUIWindows_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSharedJSContext_GetDesiredSteamUIWindows_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSharedJSContext_GetDesiredSteamUIWindows_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSharedJSContext_GetDesiredSteamUIWindows_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  return target;
}

size_t CSharedJSContext_GetDesiredSteamUIWindows_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSharedJSContext_GetDesiredSteamUIWindows_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSharedJSContext_GetDesiredSteamUIWindows_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSharedJSContext_GetDesiredSteamUIWindows_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSharedJSContext_GetDesiredSteamUIWindows_Request)
    MergeFrom(*source);
  }
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::MergeFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::CopyFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSharedJSContext_GetDesiredSteamUIWindows_Request::IsInitialized() const {
  return true;
}

void CSharedJSContext_GetDesiredSteamUIWindows_Request::InternalSwap(CSharedJSContext_GetDesiredSteamUIWindows_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSharedJSContext_GetDesiredSteamUIWindows_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamUIBrowserWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamUIBrowserWindow>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_browser_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_window_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_parent_window_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamepadui_via_gamescope(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgSteamUIBrowserWindow::CMsgSteamUIBrowserWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamUIBrowserWindow)
}
CMsgSteamUIBrowserWindow::CMsgSteamUIBrowserWindow(const CMsgSteamUIBrowserWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamepadui_via_gamescope_) -
    reinterpret_cast<char*>(&id_)) + sizeof(gamepadui_via_gamescope_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamUIBrowserWindow)
}

void CMsgSteamUIBrowserWindow::SharedCtor() {
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gamepadui_via_gamescope_) -
    reinterpret_cast<char*>(&id_)) + sizeof(gamepadui_via_gamescope_));
}

CMsgSteamUIBrowserWindow::~CMsgSteamUIBrowserWindow() {
  // @@protoc_insertion_point(destructor:CMsgSteamUIBrowserWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamUIBrowserWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamUIBrowserWindow::ArenaDtor(void* object) {
  CMsgSteamUIBrowserWindow* _this = reinterpret_cast< CMsgSteamUIBrowserWindow* >(object);
  (void)_this;
}
void CMsgSteamUIBrowserWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamUIBrowserWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamUIBrowserWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamUIBrowserWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(appid_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&parent_window_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamepadui_via_gamescope_) -
        reinterpret_cast<char*>(&parent_window_handle_)) + sizeof(gamepadui_via_gamescope_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamUIBrowserWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 browser_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_browser_id(&has_bits);
          browser_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_type(&has_bits);
          window_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 appid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 parent_window_handle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_parent_window_handle(&has_bits);
          parent_window_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string app_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamUIBrowserWindow.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamepadui_via_gamescope = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gamepadui_via_gamescope(&has_bits);
          gamepadui_via_gamescope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamUIBrowserWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamUIBrowserWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional int32 browser_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_browser_id(), target);
  }

  // optional int32 window_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_window_type(), target);
  }

  // optional int32 x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // optional int32 y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // optional uint64 appid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_appid(), target);
  }

  // optional uint64 parent_window_handle = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_parent_window_handle(), target);
  }

  // optional string app_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamUIBrowserWindow.app_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_app_name(), target);
  }

  // optional bool gamepadui_via_gamescope = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_gamepadui_via_gamescope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamUIBrowserWindow)
  return target;
}

size_t CMsgSteamUIBrowserWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamUIBrowserWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string app_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid());
    }

    // optional int32 browser_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_browser_id());
    }

    // optional int32 window_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_window_type());
    }

    // optional int32 x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional uint64 appid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_appid());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 parent_window_handle = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_parent_window_handle());
    }

    // optional bool gamepadui_via_gamescope = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamUIBrowserWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamUIBrowserWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamUIBrowserWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamUIBrowserWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamUIBrowserWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamUIBrowserWindow)
    MergeFrom(*source);
  }
}

void CMsgSteamUIBrowserWindow::MergeFrom(const CMsgSteamUIBrowserWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamUIBrowserWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      browser_id_ = from.browser_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      window_type_ = from.window_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      parent_window_handle_ = from.parent_window_handle_;
    }
    if (cached_has_bits & 0x00000200u) {
      gamepadui_via_gamescope_ = from.gamepadui_via_gamescope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamUIBrowserWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamUIBrowserWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamUIBrowserWindow::CopyFrom(const CMsgSteamUIBrowserWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamUIBrowserWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamUIBrowserWindow::IsInitialized() const {
  return true;
}

void CMsgSteamUIBrowserWindow::InternalSwap(CMsgSteamUIBrowserWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamUIBrowserWindow, gamepadui_via_gamescope_)
      + sizeof(CMsgSteamUIBrowserWindow::gamepadui_via_gamescope_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamUIBrowserWindow, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamUIBrowserWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSharedJSContext_GetDesiredSteamUIWindows_Response::_Internal {
 public:
};

CSharedJSContext_GetDesiredSteamUIWindows_Response::CSharedJSContext_GetDesiredSteamUIWindows_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  windows_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSharedJSContext_GetDesiredSteamUIWindows_Response)
}
CSharedJSContext_GetDesiredSteamUIWindows_Response::CSharedJSContext_GetDesiredSteamUIWindows_Response(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      windows_(from.windows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSharedJSContext_GetDesiredSteamUIWindows_Response)
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::SharedCtor() {
}

CSharedJSContext_GetDesiredSteamUIWindows_Response::~CSharedJSContext_GetDesiredSteamUIWindows_Response() {
  // @@protoc_insertion_point(destructor:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::ArenaDtor(void* object) {
  CSharedJSContext_GetDesiredSteamUIWindows_Response* _this = reinterpret_cast< CSharedJSContext_GetDesiredSteamUIWindows_Response* >(object);
  (void)_this;
}
void CSharedJSContext_GetDesiredSteamUIWindows_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSharedJSContext_GetDesiredSteamUIWindows_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  windows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSharedJSContext_GetDesiredSteamUIWindows_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSteamUIBrowserWindow windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_windows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSharedJSContext_GetDesiredSteamUIWindows_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSteamUIBrowserWindow windows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_windows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_windows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  return target;
}

size_t CSharedJSContext_GetDesiredSteamUIWindows_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamUIBrowserWindow windows = 1;
  total_size += 1UL * this->_internal_windows_size();
  for (const auto& msg : this->windows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSharedJSContext_GetDesiredSteamUIWindows_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSharedJSContext_GetDesiredSteamUIWindows_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSharedJSContext_GetDesiredSteamUIWindows_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSharedJSContext_GetDesiredSteamUIWindows_Response)
    MergeFrom(*source);
  }
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::MergeFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  windows_.MergeFrom(from.windows_);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::CopyFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSharedJSContext_GetDesiredSteamUIWindows_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSharedJSContext_GetDesiredSteamUIWindows_Response::IsInitialized() const {
  return true;
}

void CSharedJSContext_GetDesiredSteamUIWindows_Response::InternalSwap(CSharedJSContext_GetDesiredSteamUIWindows_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  windows_.InternalSwap(&other->windows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSharedJSContext_GetDesiredSteamUIWindows_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SharedJSContext::~SharedJSContext() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SharedJSContext::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsharedjscontext_2eproto);
  return file_level_service_descriptors_webuimessages_5fsharedjscontext_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SharedJSContext::GetDescriptor() {
  return descriptor();
}

void SharedJSContext::GetDesiredSteamUIWindows(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSharedJSContext_GetDesiredSteamUIWindows_Request*,
                         ::CSharedJSContext_GetDesiredSteamUIWindows_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDesiredSteamUIWindows() not implemented.");
  done->Run();
}

void SharedJSContext::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fsharedjscontext_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetDesiredSteamUIWindows(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSharedJSContext_GetDesiredSteamUIWindows_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSharedJSContext_GetDesiredSteamUIWindows_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SharedJSContext::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSharedJSContext_GetDesiredSteamUIWindows_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SharedJSContext::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSharedJSContext_GetDesiredSteamUIWindows_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SharedJSContext_Stub::SharedJSContext_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SharedJSContext_Stub::SharedJSContext_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SharedJSContext_Stub::~SharedJSContext_Stub() {
  if (owns_channel_) delete channel_;
}

void SharedJSContext_Stub::GetDesiredSteamUIWindows(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSharedJSContext_GetDesiredSteamUIWindows_Request* request,
                              ::CSharedJSContext_GetDesiredSteamUIWindows_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSharedJSContext_GetDesiredSteamUIWindows_Request* Arena::CreateMaybeMessage< ::CSharedJSContext_GetDesiredSteamUIWindows_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSharedJSContext_GetDesiredSteamUIWindows_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamUIBrowserWindow* Arena::CreateMaybeMessage< ::CMsgSteamUIBrowserWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamUIBrowserWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CSharedJSContext_GetDesiredSteamUIWindows_Response* Arena::CreateMaybeMessage< ::CSharedJSContext_GetDesiredSteamUIWindows_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSharedJSContext_GetDesiredSteamUIWindows_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
