// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_sharedjscontext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsharedjscontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsharedjscontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fsharedjscontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fsharedjscontext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsharedjscontext_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fsharedjscontext_2eproto_metadata_getter(int index);
class CMsgSteamUIBrowserWindow;
struct CMsgSteamUIBrowserWindowDefaultTypeInternal;
extern CMsgSteamUIBrowserWindowDefaultTypeInternal _CMsgSteamUIBrowserWindow_default_instance_;
class CSharedJSContext_GetDesiredSteamUIWindows_Request;
struct CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal;
extern CSharedJSContext_GetDesiredSteamUIWindows_RequestDefaultTypeInternal _CSharedJSContext_GetDesiredSteamUIWindows_Request_default_instance_;
class CSharedJSContext_GetDesiredSteamUIWindows_Response;
struct CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal;
extern CSharedJSContext_GetDesiredSteamUIWindows_ResponseDefaultTypeInternal _CSharedJSContext_GetDesiredSteamUIWindows_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgSteamUIBrowserWindow* Arena::CreateMaybeMessage<::CMsgSteamUIBrowserWindow>(Arena*);
template<> ::CSharedJSContext_GetDesiredSteamUIWindows_Request* Arena::CreateMaybeMessage<::CSharedJSContext_GetDesiredSteamUIWindows_Request>(Arena*);
template<> ::CSharedJSContext_GetDesiredSteamUIWindows_Response* Arena::CreateMaybeMessage<::CSharedJSContext_GetDesiredSteamUIWindows_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSharedJSContext_GetDesiredSteamUIWindows_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSharedJSContext_GetDesiredSteamUIWindows_Request) */ {
 public:
  inline CSharedJSContext_GetDesiredSteamUIWindows_Request() : CSharedJSContext_GetDesiredSteamUIWindows_Request(nullptr) {}
  virtual ~CSharedJSContext_GetDesiredSteamUIWindows_Request();
  explicit constexpr CSharedJSContext_GetDesiredSteamUIWindows_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSharedJSContext_GetDesiredSteamUIWindows_Request(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from);
  CSharedJSContext_GetDesiredSteamUIWindows_Request(CSharedJSContext_GetDesiredSteamUIWindows_Request&& from) noexcept
    : CSharedJSContext_GetDesiredSteamUIWindows_Request() {
    *this = ::std::move(from);
  }

  inline CSharedJSContext_GetDesiredSteamUIWindows_Request& operator=(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSharedJSContext_GetDesiredSteamUIWindows_Request& operator=(CSharedJSContext_GetDesiredSteamUIWindows_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSharedJSContext_GetDesiredSteamUIWindows_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSharedJSContext_GetDesiredSteamUIWindows_Request* internal_default_instance() {
    return reinterpret_cast<const CSharedJSContext_GetDesiredSteamUIWindows_Request*>(
               &_CSharedJSContext_GetDesiredSteamUIWindows_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSharedJSContext_GetDesiredSteamUIWindows_Request& a, CSharedJSContext_GetDesiredSteamUIWindows_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSharedJSContext_GetDesiredSteamUIWindows_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSharedJSContext_GetDesiredSteamUIWindows_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSharedJSContext_GetDesiredSteamUIWindows_Request* New() const final {
    return CreateMaybeMessage<CSharedJSContext_GetDesiredSteamUIWindows_Request>(nullptr);
  }

  CSharedJSContext_GetDesiredSteamUIWindows_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSharedJSContext_GetDesiredSteamUIWindows_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from);
  void MergeFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSharedJSContext_GetDesiredSteamUIWindows_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSharedJSContext_GetDesiredSteamUIWindows_Request";
  }
  protected:
  explicit CSharedJSContext_GetDesiredSteamUIWindows_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsharedjscontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSharedJSContext_GetDesiredSteamUIWindows_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsharedjscontext_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamUIBrowserWindow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamUIBrowserWindow) */ {
 public:
  inline CMsgSteamUIBrowserWindow() : CMsgSteamUIBrowserWindow(nullptr) {}
  virtual ~CMsgSteamUIBrowserWindow();
  explicit constexpr CMsgSteamUIBrowserWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamUIBrowserWindow(const CMsgSteamUIBrowserWindow& from);
  CMsgSteamUIBrowserWindow(CMsgSteamUIBrowserWindow&& from) noexcept
    : CMsgSteamUIBrowserWindow() {
    *this = ::std::move(from);
  }

  inline CMsgSteamUIBrowserWindow& operator=(const CMsgSteamUIBrowserWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamUIBrowserWindow& operator=(CMsgSteamUIBrowserWindow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamUIBrowserWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamUIBrowserWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamUIBrowserWindow*>(
               &_CMsgSteamUIBrowserWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgSteamUIBrowserWindow& a, CMsgSteamUIBrowserWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamUIBrowserWindow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamUIBrowserWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamUIBrowserWindow* New() const final {
    return CreateMaybeMessage<CMsgSteamUIBrowserWindow>(nullptr);
  }

  CMsgSteamUIBrowserWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamUIBrowserWindow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamUIBrowserWindow& from);
  void MergeFrom(const CMsgSteamUIBrowserWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamUIBrowserWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamUIBrowserWindow";
  }
  protected:
  explicit CMsgSteamUIBrowserWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsharedjscontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 9,
    kIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kBrowserIdFieldNumber = 3,
    kWindowTypeFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kAppidFieldNumber = 7,
    kParentWindowHandleFieldNumber = 8,
    kGamepaduiViaGamescopeFieldNumber = 10,
  };
  // optional string app_name = 9;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pid = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 browser_id = 3;
  bool has_browser_id() const;
  private:
  bool _internal_has_browser_id() const;
  public:
  void clear_browser_id();
  ::PROTOBUF_NAMESPACE_ID::int32 browser_id() const;
  void set_browser_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_browser_id() const;
  void _internal_set_browser_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 window_type = 4;
  bool has_window_type() const;
  private:
  bool _internal_has_window_type() const;
  public:
  void clear_window_type();
  ::PROTOBUF_NAMESPACE_ID::int32 window_type() const;
  void set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_window_type() const;
  void _internal_set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 appid = 7;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint64 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 parent_window_handle = 8;
  bool has_parent_window_handle() const;
  private:
  bool _internal_has_parent_window_handle() const;
  public:
  void clear_parent_window_handle();
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_window_handle() const;
  void set_parent_window_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_parent_window_handle() const;
  void _internal_set_parent_window_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool gamepadui_via_gamescope = 10;
  bool has_gamepadui_via_gamescope() const;
  private:
  bool _internal_has_gamepadui_via_gamescope() const;
  public:
  void clear_gamepadui_via_gamescope();
  bool gamepadui_via_gamescope() const;
  void set_gamepadui_via_gamescope(bool value);
  private:
  bool _internal_gamepadui_via_gamescope() const;
  void _internal_set_gamepadui_via_gamescope(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamUIBrowserWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 browser_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint64 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_window_handle_;
  bool gamepadui_via_gamescope_;
  friend struct ::TableStruct_webuimessages_5fsharedjscontext_2eproto;
};
// -------------------------------------------------------------------

class CSharedJSContext_GetDesiredSteamUIWindows_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSharedJSContext_GetDesiredSteamUIWindows_Response) */ {
 public:
  inline CSharedJSContext_GetDesiredSteamUIWindows_Response() : CSharedJSContext_GetDesiredSteamUIWindows_Response(nullptr) {}
  virtual ~CSharedJSContext_GetDesiredSteamUIWindows_Response();
  explicit constexpr CSharedJSContext_GetDesiredSteamUIWindows_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSharedJSContext_GetDesiredSteamUIWindows_Response(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from);
  CSharedJSContext_GetDesiredSteamUIWindows_Response(CSharedJSContext_GetDesiredSteamUIWindows_Response&& from) noexcept
    : CSharedJSContext_GetDesiredSteamUIWindows_Response() {
    *this = ::std::move(from);
  }

  inline CSharedJSContext_GetDesiredSteamUIWindows_Response& operator=(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSharedJSContext_GetDesiredSteamUIWindows_Response& operator=(CSharedJSContext_GetDesiredSteamUIWindows_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSharedJSContext_GetDesiredSteamUIWindows_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSharedJSContext_GetDesiredSteamUIWindows_Response* internal_default_instance() {
    return reinterpret_cast<const CSharedJSContext_GetDesiredSteamUIWindows_Response*>(
               &_CSharedJSContext_GetDesiredSteamUIWindows_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSharedJSContext_GetDesiredSteamUIWindows_Response& a, CSharedJSContext_GetDesiredSteamUIWindows_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSharedJSContext_GetDesiredSteamUIWindows_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSharedJSContext_GetDesiredSteamUIWindows_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSharedJSContext_GetDesiredSteamUIWindows_Response* New() const final {
    return CreateMaybeMessage<CSharedJSContext_GetDesiredSteamUIWindows_Response>(nullptr);
  }

  CSharedJSContext_GetDesiredSteamUIWindows_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSharedJSContext_GetDesiredSteamUIWindows_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from);
  void MergeFrom(const CSharedJSContext_GetDesiredSteamUIWindows_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSharedJSContext_GetDesiredSteamUIWindows_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSharedJSContext_GetDesiredSteamUIWindows_Response";
  }
  protected:
  explicit CSharedJSContext_GetDesiredSteamUIWindows_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsharedjscontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowsFieldNumber = 1,
  };
  // repeated .CMsgSteamUIBrowserWindow windows = 1;
  int windows_size() const;
  private:
  int _internal_windows_size() const;
  public:
  void clear_windows();
  ::CMsgSteamUIBrowserWindow* mutable_windows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamUIBrowserWindow >*
      mutable_windows();
  private:
  const ::CMsgSteamUIBrowserWindow& _internal_windows(int index) const;
  ::CMsgSteamUIBrowserWindow* _internal_add_windows();
  public:
  const ::CMsgSteamUIBrowserWindow& windows(int index) const;
  ::CMsgSteamUIBrowserWindow* add_windows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamUIBrowserWindow >&
      windows() const;

  // @@protoc_insertion_point(class_scope:CSharedJSContext_GetDesiredSteamUIWindows_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamUIBrowserWindow > windows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsharedjscontext_2eproto;
};
// ===================================================================

class SharedJSContext_Stub;

class SharedJSContext : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SharedJSContext() {};
 public:
  virtual ~SharedJSContext();

  typedef SharedJSContext_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetDesiredSteamUIWindows(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSharedJSContext_GetDesiredSteamUIWindows_Request* request,
                       ::CSharedJSContext_GetDesiredSteamUIWindows_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SharedJSContext);
};

class SharedJSContext_Stub : public SharedJSContext {
 public:
  SharedJSContext_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SharedJSContext_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SharedJSContext_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SharedJSContext ------------------------------------------

  void GetDesiredSteamUIWindows(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSharedJSContext_GetDesiredSteamUIWindows_Request* request,
                       ::CSharedJSContext_GetDesiredSteamUIWindows_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SharedJSContext_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSharedJSContext_GetDesiredSteamUIWindows_Request

// -------------------------------------------------------------------

// CMsgSteamUIBrowserWindow

// optional int32 id = 1;
inline bool CMsgSteamUIBrowserWindow::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_id() const {
  return _internal_has_id();
}
inline void CMsgSteamUIBrowserWindow::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.id)
  return _internal_id();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.id)
}

// optional int32 pid = 2;
inline bool CMsgSteamUIBrowserWindow::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_pid() const {
  return _internal_has_pid();
}
inline void CMsgSteamUIBrowserWindow::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::pid() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.pid)
  return _internal_pid();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.pid)
}

// optional int32 browser_id = 3;
inline bool CMsgSteamUIBrowserWindow::_internal_has_browser_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_browser_id() const {
  return _internal_has_browser_id();
}
inline void CMsgSteamUIBrowserWindow::clear_browser_id() {
  browser_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_browser_id() const {
  return browser_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::browser_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.browser_id)
  return _internal_browser_id();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_browser_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  browser_id_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_browser_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_browser_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.browser_id)
}

// optional int32 window_type = 4;
inline bool CMsgSteamUIBrowserWindow::_internal_has_window_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_window_type() const {
  return _internal_has_window_type();
}
inline void CMsgSteamUIBrowserWindow::clear_window_type() {
  window_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_window_type() const {
  return window_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::window_type() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.window_type)
  return _internal_window_type();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  window_type_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_window_type(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.window_type)
}

// optional int32 x = 5;
inline bool CMsgSteamUIBrowserWindow::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_x() const {
  return _internal_has_x();
}
inline void CMsgSteamUIBrowserWindow::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::x() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.x)
  return _internal_x();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.x)
}

// optional int32 y = 6;
inline bool CMsgSteamUIBrowserWindow::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_y() const {
  return _internal_has_y();
}
inline void CMsgSteamUIBrowserWindow::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSteamUIBrowserWindow::y() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.y)
  return _internal_y();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.y)
}

// optional uint64 appid = 7;
inline bool CMsgSteamUIBrowserWindow::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgSteamUIBrowserWindow::clear_appid() {
  appid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamUIBrowserWindow::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamUIBrowserWindow::appid() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.appid)
  return _internal_appid();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  appid_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.appid)
}

// optional uint64 parent_window_handle = 8;
inline bool CMsgSteamUIBrowserWindow::_internal_has_parent_window_handle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_parent_window_handle() const {
  return _internal_has_parent_window_handle();
}
inline void CMsgSteamUIBrowserWindow::clear_parent_window_handle() {
  parent_window_handle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamUIBrowserWindow::_internal_parent_window_handle() const {
  return parent_window_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamUIBrowserWindow::parent_window_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.parent_window_handle)
  return _internal_parent_window_handle();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_parent_window_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  parent_window_handle_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_parent_window_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_parent_window_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.parent_window_handle)
}

// optional string app_name = 9;
inline bool CMsgSteamUIBrowserWindow::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_app_name() const {
  return _internal_has_app_name();
}
inline void CMsgSteamUIBrowserWindow::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamUIBrowserWindow::app_name() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.app_name)
  return _internal_app_name();
}
inline void CMsgSteamUIBrowserWindow::set_app_name(const std::string& value) {
  _internal_set_app_name(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.app_name)
}
inline std::string* CMsgSteamUIBrowserWindow::mutable_app_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamUIBrowserWindow.app_name)
  return _internal_mutable_app_name();
}
inline const std::string& CMsgSteamUIBrowserWindow::_internal_app_name() const {
  return app_name_.Get();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamUIBrowserWindow::set_app_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamUIBrowserWindow.app_name)
}
inline void CMsgSteamUIBrowserWindow::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamUIBrowserWindow.app_name)
}
inline void CMsgSteamUIBrowserWindow::set_app_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamUIBrowserWindow.app_name)
}
inline std::string* CMsgSteamUIBrowserWindow::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000001u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamUIBrowserWindow::release_app_name() {
  // @@protoc_insertion_point(field_release:CMsgSteamUIBrowserWindow.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamUIBrowserWindow::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamUIBrowserWindow.app_name)
}

// optional bool gamepadui_via_gamescope = 10;
inline bool CMsgSteamUIBrowserWindow::_internal_has_gamepadui_via_gamescope() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSteamUIBrowserWindow::has_gamepadui_via_gamescope() const {
  return _internal_has_gamepadui_via_gamescope();
}
inline void CMsgSteamUIBrowserWindow::clear_gamepadui_via_gamescope() {
  gamepadui_via_gamescope_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgSteamUIBrowserWindow::_internal_gamepadui_via_gamescope() const {
  return gamepadui_via_gamescope_;
}
inline bool CMsgSteamUIBrowserWindow::gamepadui_via_gamescope() const {
  // @@protoc_insertion_point(field_get:CMsgSteamUIBrowserWindow.gamepadui_via_gamescope)
  return _internal_gamepadui_via_gamescope();
}
inline void CMsgSteamUIBrowserWindow::_internal_set_gamepadui_via_gamescope(bool value) {
  _has_bits_[0] |= 0x00000200u;
  gamepadui_via_gamescope_ = value;
}
inline void CMsgSteamUIBrowserWindow::set_gamepadui_via_gamescope(bool value) {
  _internal_set_gamepadui_via_gamescope(value);
  // @@protoc_insertion_point(field_set:CMsgSteamUIBrowserWindow.gamepadui_via_gamescope)
}

// -------------------------------------------------------------------

// CSharedJSContext_GetDesiredSteamUIWindows_Response

// repeated .CMsgSteamUIBrowserWindow windows = 1;
inline int CSharedJSContext_GetDesiredSteamUIWindows_Response::_internal_windows_size() const {
  return windows_.size();
}
inline int CSharedJSContext_GetDesiredSteamUIWindows_Response::windows_size() const {
  return _internal_windows_size();
}
inline void CSharedJSContext_GetDesiredSteamUIWindows_Response::clear_windows() {
  windows_.Clear();
}
inline ::CMsgSteamUIBrowserWindow* CSharedJSContext_GetDesiredSteamUIWindows_Response::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:CSharedJSContext_GetDesiredSteamUIWindows_Response.windows)
  return windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamUIBrowserWindow >*
CSharedJSContext_GetDesiredSteamUIWindows_Response::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:CSharedJSContext_GetDesiredSteamUIWindows_Response.windows)
  return &windows_;
}
inline const ::CMsgSteamUIBrowserWindow& CSharedJSContext_GetDesiredSteamUIWindows_Response::_internal_windows(int index) const {
  return windows_.Get(index);
}
inline const ::CMsgSteamUIBrowserWindow& CSharedJSContext_GetDesiredSteamUIWindows_Response::windows(int index) const {
  // @@protoc_insertion_point(field_get:CSharedJSContext_GetDesiredSteamUIWindows_Response.windows)
  return _internal_windows(index);
}
inline ::CMsgSteamUIBrowserWindow* CSharedJSContext_GetDesiredSteamUIWindows_Response::_internal_add_windows() {
  return windows_.Add();
}
inline ::CMsgSteamUIBrowserWindow* CSharedJSContext_GetDesiredSteamUIWindows_Response::add_windows() {
  // @@protoc_insertion_point(field_add:CSharedJSContext_GetDesiredSteamUIWindows_Response.windows)
  return _internal_add_windows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamUIBrowserWindow >&
CSharedJSContext_GetDesiredSteamUIWindows_Response::windows() const {
  // @@protoc_insertion_point(field_list:CSharedJSContext_GetDesiredSteamUIWindows_Response.windows)
  return windows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsharedjscontext_2eproto
