// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steamengine.proto

#include "webuimessages_steamengine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSteamEngine_UpdateTextFilterDictionary_Notification::CSteamEngine_UpdateTextFilterDictionary_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal {
  constexpr CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal() {}
  union {
    CSteamEngine_UpdateTextFilterDictionary_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal _CSteamEngine_UpdateTextFilterDictionary_Notification_default_instance_;
constexpr CSteamEngine_GetTextFilterDictionary_Request::CSteamEngine_GetTextFilterDictionary_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal {
  constexpr CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal() {}
  union {
    CSteamEngine_GetTextFilterDictionary_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal _CSteamEngine_GetTextFilterDictionary_Request_default_instance_;
constexpr CSteamEngine_GetTextFilterDictionary_Response::CSteamEngine_GetTextFilterDictionary_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dictionary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal {
  constexpr CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal() {}
  union {
    CSteamEngine_GetTextFilterDictionary_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal _CSteamEngine_GetTextFilterDictionary_Response_default_instance_;
constexpr CSteamEngine_TextFilterDictionaryChanged_Notification::CSteamEngine_TextFilterDictionaryChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal {
  constexpr CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamEngine_TextFilterDictionaryChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal _CSteamEngine_TextFilterDictionaryChanged_Notification_default_instance_;
constexpr CSteamEngine_GetGameIDForPID_Request::CSteamEngine_GetGameIDForPID_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_(0u){}
struct CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal {
  constexpr CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal() {}
  union {
    CSteamEngine_GetGameIDForPID_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal _CSteamEngine_GetGameIDForPID_Request_default_instance_;
constexpr CSteamEngine_GetGameIDForPID_Response::CSteamEngine_GetGameIDForPID_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(PROTOBUF_ULONGLONG(0)){}
struct CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal {
  constexpr CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal() {}
  union {
    CSteamEngine_GetGameIDForPID_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal _CSteamEngine_GetGameIDForPID_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fsteamengine_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fsteamengine_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fsteamengine_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fsteamengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_UpdateTextFilterDictionary_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_UpdateTextFilterDictionary_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_UpdateTextFilterDictionary_Notification, language_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_UpdateTextFilterDictionary_Notification, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Request, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetTextFilterDictionary_Response, dictionary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_TextFilterDictionaryChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_TextFilterDictionaryChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_TextFilterDictionaryChanged_Notification, language_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_TextFilterDictionaryChanged_Notification, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Request, pid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamEngine_GetGameIDForPID_Response, gameid_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSteamEngine_UpdateTextFilterDictionary_Notification)},
  { 9, 16, sizeof(::CSteamEngine_GetTextFilterDictionary_Request)},
  { 18, 24, sizeof(::CSteamEngine_GetTextFilterDictionary_Response)},
  { 25, 32, sizeof(::CSteamEngine_TextFilterDictionaryChanged_Notification)},
  { 34, 40, sizeof(::CSteamEngine_GetGameIDForPID_Request)},
  { 41, 47, sizeof(::CSteamEngine_GetGameIDForPID_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_UpdateTextFilterDictionary_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_GetTextFilterDictionary_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_GetTextFilterDictionary_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_TextFilterDictionaryChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_GetGameIDForPID_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamEngine_GetGameIDForPID_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fsteamengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037webuimessages_steamengine.proto\032 googl"
  "e/protobuf/descriptor.proto\032\030steammessag"
  "es_base.proto\032\030webuimessages_base.proto\""
  "V\n4CSteamEngine_UpdateTextFilterDictiona"
  "ry_Notification\022\020\n\010language\030\001 \002(\t\022\014\n\004typ"
  "e\030\002 \002(\t\"N\n,CSteamEngine_GetTextFilterDic"
  "tionary_Request\022\020\n\010language\030\001 \002(\t\022\014\n\004typ"
  "e\030\002 \002(\t\"C\n-CSteamEngine_GetTextFilterDic"
  "tionary_Response\022\022\n\ndictionary\030\001 \001(\t\"W\n5"
  "CSteamEngine_TextFilterDictionaryChanged"
  "_Notification\022\020\n\010language\030\001 \002(\t\022\014\n\004type\030"
  "\002 \002(\t\"3\n$CSteamEngine_GetGameIDForPID_Re"
  "quest\022\013\n\003pid\030\001 \001(\r\"7\n%CSteamEngine_GetGa"
  "meIDForPID_Response\022\016\n\006gameid\030\001 \001(\0042\305\003\n\013"
  "SteamEngine\022e\n\032UpdateTextFilterDictionar"
  "y\0225.CSteamEngine_UpdateTextFilterDiction"
  "ary_Notification\032\020.WebUINoResponse\022x\n\027Ge"
  "tTextFilterDictionary\022-.CSteamEngine_Get"
  "TextFilterDictionary_Request\032..CSteamEng"
  "ine_GetTextFilterDictionary_Response\022m\n!"
  "NotifyTextFilterDictionaryChanged\0226.CSte"
  "amEngine_TextFilterDictionaryChanged_Not"
  "ification\032\020.WebUINoResponse\022`\n\017GetGameID"
  "ForPID\022%.CSteamEngine_GetGameIDForPID_Re"
  "quest\032&.CSteamEngine_GetGameIDForPID_Res"
  "ponse\032\004\200\227\"\002B\037H\001\200\001\001\252\002\027OpenSteamworks.Prot"
  "obuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fsteamengine_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fsteamengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteamengine_2eproto = {
  false, false, 1044, descriptor_table_protodef_webuimessages_5fsteamengine_2eproto, "webuimessages_steamengine.proto", 
  &descriptor_table_webuimessages_5fsteamengine_2eproto_once, descriptor_table_webuimessages_5fsteamengine_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_webuimessages_5fsteamengine_2eproto::offsets,
  file_level_metadata_webuimessages_5fsteamengine_2eproto, file_level_enum_descriptors_webuimessages_5fsteamengine_2eproto, file_level_service_descriptors_webuimessages_5fsteamengine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteamengine_2eproto);
  return descriptor_table_webuimessages_5fsteamengine_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fsteamengine_2eproto(&descriptor_table_webuimessages_5fsteamengine_2eproto);

// ===================================================================

class CSteamEngine_UpdateTextFilterDictionary_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_UpdateTextFilterDictionary_Notification>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CSteamEngine_UpdateTextFilterDictionary_Notification::CSteamEngine_UpdateTextFilterDictionary_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_UpdateTextFilterDictionary_Notification)
}
CSteamEngine_UpdateTextFilterDictionary_Notification::CSteamEngine_UpdateTextFilterDictionary_Notification(const CSteamEngine_UpdateTextFilterDictionary_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_UpdateTextFilterDictionary_Notification)
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamEngine_UpdateTextFilterDictionary_Notification::~CSteamEngine_UpdateTextFilterDictionary_Notification() {
  // @@protoc_insertion_point(destructor:CSteamEngine_UpdateTextFilterDictionary_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::ArenaDtor(void* object) {
  CSteamEngine_UpdateTextFilterDictionary_Notification* _this = reinterpret_cast< CSteamEngine_UpdateTextFilterDictionary_Notification* >(object);
  (void)_this;
}
void CSteamEngine_UpdateTextFilterDictionary_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_UpdateTextFilterDictionary_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_UpdateTextFilterDictionary_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_UpdateTextFilterDictionary_Notification.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_UpdateTextFilterDictionary_Notification.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_UpdateTextFilterDictionary_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_UpdateTextFilterDictionary_Notification.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_UpdateTextFilterDictionary_Notification.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_UpdateTextFilterDictionary_Notification)
  return target;
}

size_t CSteamEngine_UpdateTextFilterDictionary_Notification::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  size_t total_size = 0;

  if (_internal_has_language()) {
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return total_size;
}
size_t CSteamEngine_UpdateTextFilterDictionary_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_UpdateTextFilterDictionary_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_UpdateTextFilterDictionary_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_UpdateTextFilterDictionary_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_UpdateTextFilterDictionary_Notification)
    MergeFrom(*source);
  }
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::MergeFrom(const CSteamEngine_UpdateTextFilterDictionary_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::CopyFrom(const CSteamEngine_UpdateTextFilterDictionary_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_UpdateTextFilterDictionary_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_UpdateTextFilterDictionary_Notification::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CSteamEngine_UpdateTextFilterDictionary_Notification::InternalSwap(CSteamEngine_UpdateTextFilterDictionary_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_UpdateTextFilterDictionary_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamEngine_GetTextFilterDictionary_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_GetTextFilterDictionary_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CSteamEngine_GetTextFilterDictionary_Request::CSteamEngine_GetTextFilterDictionary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_GetTextFilterDictionary_Request)
}
CSteamEngine_GetTextFilterDictionary_Request::CSteamEngine_GetTextFilterDictionary_Request(const CSteamEngine_GetTextFilterDictionary_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_GetTextFilterDictionary_Request)
}

void CSteamEngine_GetTextFilterDictionary_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamEngine_GetTextFilterDictionary_Request::~CSteamEngine_GetTextFilterDictionary_Request() {
  // @@protoc_insertion_point(destructor:CSteamEngine_GetTextFilterDictionary_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_GetTextFilterDictionary_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamEngine_GetTextFilterDictionary_Request::ArenaDtor(void* object) {
  CSteamEngine_GetTextFilterDictionary_Request* _this = reinterpret_cast< CSteamEngine_GetTextFilterDictionary_Request* >(object);
  (void)_this;
}
void CSteamEngine_GetTextFilterDictionary_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_GetTextFilterDictionary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_GetTextFilterDictionary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_GetTextFilterDictionary_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_GetTextFilterDictionary_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_GetTextFilterDictionary_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_GetTextFilterDictionary_Request.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_GetTextFilterDictionary_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_GetTextFilterDictionary_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_GetTextFilterDictionary_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_GetTextFilterDictionary_Request.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_GetTextFilterDictionary_Request)
  return target;
}

size_t CSteamEngine_GetTextFilterDictionary_Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSteamEngine_GetTextFilterDictionary_Request)
  size_t total_size = 0;

  if (_internal_has_language()) {
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return total_size;
}
size_t CSteamEngine_GetTextFilterDictionary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_GetTextFilterDictionary_Request)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_GetTextFilterDictionary_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_GetTextFilterDictionary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_GetTextFilterDictionary_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_GetTextFilterDictionary_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_GetTextFilterDictionary_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_GetTextFilterDictionary_Request)
    MergeFrom(*source);
  }
}

void CSteamEngine_GetTextFilterDictionary_Request::MergeFrom(const CSteamEngine_GetTextFilterDictionary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_GetTextFilterDictionary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
}

void CSteamEngine_GetTextFilterDictionary_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_GetTextFilterDictionary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_GetTextFilterDictionary_Request::CopyFrom(const CSteamEngine_GetTextFilterDictionary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_GetTextFilterDictionary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_GetTextFilterDictionary_Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CSteamEngine_GetTextFilterDictionary_Request::InternalSwap(CSteamEngine_GetTextFilterDictionary_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_GetTextFilterDictionary_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamEngine_GetTextFilterDictionary_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_GetTextFilterDictionary_Response>()._has_bits_);
  static void set_has_dictionary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamEngine_GetTextFilterDictionary_Response::CSteamEngine_GetTextFilterDictionary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_GetTextFilterDictionary_Response)
}
CSteamEngine_GetTextFilterDictionary_Response::CSteamEngine_GetTextFilterDictionary_Response(const CSteamEngine_GetTextFilterDictionary_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dictionary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dictionary()) {
    dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dictionary(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_GetTextFilterDictionary_Response)
}

void CSteamEngine_GetTextFilterDictionary_Response::SharedCtor() {
dictionary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamEngine_GetTextFilterDictionary_Response::~CSteamEngine_GetTextFilterDictionary_Response() {
  // @@protoc_insertion_point(destructor:CSteamEngine_GetTextFilterDictionary_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_GetTextFilterDictionary_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dictionary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamEngine_GetTextFilterDictionary_Response::ArenaDtor(void* object) {
  CSteamEngine_GetTextFilterDictionary_Response* _this = reinterpret_cast< CSteamEngine_GetTextFilterDictionary_Response* >(object);
  (void)_this;
}
void CSteamEngine_GetTextFilterDictionary_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_GetTextFilterDictionary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_GetTextFilterDictionary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_GetTextFilterDictionary_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dictionary_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_GetTextFilterDictionary_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string dictionary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dictionary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_GetTextFilterDictionary_Response.dictionary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_GetTextFilterDictionary_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_GetTextFilterDictionary_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string dictionary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dictionary().data(), static_cast<int>(this->_internal_dictionary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_GetTextFilterDictionary_Response.dictionary");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dictionary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_GetTextFilterDictionary_Response)
  return target;
}

size_t CSteamEngine_GetTextFilterDictionary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_GetTextFilterDictionary_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string dictionary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dictionary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_GetTextFilterDictionary_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_GetTextFilterDictionary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_GetTextFilterDictionary_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_GetTextFilterDictionary_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_GetTextFilterDictionary_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_GetTextFilterDictionary_Response)
    MergeFrom(*source);
  }
}

void CSteamEngine_GetTextFilterDictionary_Response::MergeFrom(const CSteamEngine_GetTextFilterDictionary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_GetTextFilterDictionary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dictionary()) {
    _internal_set_dictionary(from._internal_dictionary());
  }
}

void CSteamEngine_GetTextFilterDictionary_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_GetTextFilterDictionary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_GetTextFilterDictionary_Response::CopyFrom(const CSteamEngine_GetTextFilterDictionary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_GetTextFilterDictionary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_GetTextFilterDictionary_Response::IsInitialized() const {
  return true;
}

void CSteamEngine_GetTextFilterDictionary_Response::InternalSwap(CSteamEngine_GetTextFilterDictionary_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dictionary_.Swap(&other->dictionary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_GetTextFilterDictionary_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamEngine_TextFilterDictionaryChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_TextFilterDictionaryChanged_Notification>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CSteamEngine_TextFilterDictionaryChanged_Notification::CSteamEngine_TextFilterDictionaryChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_TextFilterDictionaryChanged_Notification)
}
CSteamEngine_TextFilterDictionaryChanged_Notification::CSteamEngine_TextFilterDictionaryChanged_Notification(const CSteamEngine_TextFilterDictionaryChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_TextFilterDictionaryChanged_Notification)
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteamEngine_TextFilterDictionaryChanged_Notification::~CSteamEngine_TextFilterDictionaryChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamEngine_TextFilterDictionaryChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::ArenaDtor(void* object) {
  CSteamEngine_TextFilterDictionaryChanged_Notification* _this = reinterpret_cast< CSteamEngine_TextFilterDictionaryChanged_Notification* >(object);
  (void)_this;
}
void CSteamEngine_TextFilterDictionaryChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_TextFilterDictionaryChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_TextFilterDictionaryChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_TextFilterDictionaryChanged_Notification.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamEngine_TextFilterDictionaryChanged_Notification.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_TextFilterDictionaryChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_TextFilterDictionaryChanged_Notification.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamEngine_TextFilterDictionaryChanged_Notification.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_TextFilterDictionaryChanged_Notification)
  return target;
}

size_t CSteamEngine_TextFilterDictionaryChanged_Notification::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  size_t total_size = 0;

  if (_internal_has_language()) {
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return total_size;
}
size_t CSteamEngine_TextFilterDictionaryChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string language = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_TextFilterDictionaryChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_TextFilterDictionaryChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_TextFilterDictionaryChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_TextFilterDictionaryChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::MergeFrom(const CSteamEngine_TextFilterDictionaryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::CopyFrom(const CSteamEngine_TextFilterDictionaryChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_TextFilterDictionaryChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_TextFilterDictionaryChanged_Notification::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CSteamEngine_TextFilterDictionaryChanged_Notification::InternalSwap(CSteamEngine_TextFilterDictionaryChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_TextFilterDictionaryChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamEngine_GetGameIDForPID_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_GetGameIDForPID_Request>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamEngine_GetGameIDForPID_Request::CSteamEngine_GetGameIDForPID_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_GetGameIDForPID_Request)
}
CSteamEngine_GetGameIDForPID_Request::CSteamEngine_GetGameIDForPID_Request(const CSteamEngine_GetGameIDForPID_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_GetGameIDForPID_Request)
}

void CSteamEngine_GetGameIDForPID_Request::SharedCtor() {
pid_ = 0u;
}

CSteamEngine_GetGameIDForPID_Request::~CSteamEngine_GetGameIDForPID_Request() {
  // @@protoc_insertion_point(destructor:CSteamEngine_GetGameIDForPID_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_GetGameIDForPID_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamEngine_GetGameIDForPID_Request::ArenaDtor(void* object) {
  CSteamEngine_GetGameIDForPID_Request* _this = reinterpret_cast< CSteamEngine_GetGameIDForPID_Request* >(object);
  (void)_this;
}
void CSteamEngine_GetGameIDForPID_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_GetGameIDForPID_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_GetGameIDForPID_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_GetGameIDForPID_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_GetGameIDForPID_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_GetGameIDForPID_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_GetGameIDForPID_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_GetGameIDForPID_Request)
  return target;
}

size_t CSteamEngine_GetGameIDForPID_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_GetGameIDForPID_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_GetGameIDForPID_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_GetGameIDForPID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_GetGameIDForPID_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_GetGameIDForPID_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_GetGameIDForPID_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_GetGameIDForPID_Request)
    MergeFrom(*source);
  }
}

void CSteamEngine_GetGameIDForPID_Request::MergeFrom(const CSteamEngine_GetGameIDForPID_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_GetGameIDForPID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pid()) {
    _internal_set_pid(from._internal_pid());
  }
}

void CSteamEngine_GetGameIDForPID_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_GetGameIDForPID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_GetGameIDForPID_Request::CopyFrom(const CSteamEngine_GetGameIDForPID_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_GetGameIDForPID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_GetGameIDForPID_Request::IsInitialized() const {
  return true;
}

void CSteamEngine_GetGameIDForPID_Request::InternalSwap(CSteamEngine_GetGameIDForPID_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_GetGameIDForPID_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamEngine_GetGameIDForPID_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamEngine_GetGameIDForPID_Response>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamEngine_GetGameIDForPID_Response::CSteamEngine_GetGameIDForPID_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamEngine_GetGameIDForPID_Response)
}
CSteamEngine_GetGameIDForPID_Response::CSteamEngine_GetGameIDForPID_Response(const CSteamEngine_GetGameIDForPID_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:CSteamEngine_GetGameIDForPID_Response)
}

void CSteamEngine_GetGameIDForPID_Response::SharedCtor() {
gameid_ = PROTOBUF_ULONGLONG(0);
}

CSteamEngine_GetGameIDForPID_Response::~CSteamEngine_GetGameIDForPID_Response() {
  // @@protoc_insertion_point(destructor:CSteamEngine_GetGameIDForPID_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamEngine_GetGameIDForPID_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamEngine_GetGameIDForPID_Response::ArenaDtor(void* object) {
  CSteamEngine_GetGameIDForPID_Response* _this = reinterpret_cast< CSteamEngine_GetGameIDForPID_Response* >(object);
  (void)_this;
}
void CSteamEngine_GetGameIDForPID_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamEngine_GetGameIDForPID_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamEngine_GetGameIDForPID_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamEngine_GetGameIDForPID_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamEngine_GetGameIDForPID_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamEngine_GetGameIDForPID_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamEngine_GetGameIDForPID_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamEngine_GetGameIDForPID_Response)
  return target;
}

size_t CSteamEngine_GetGameIDForPID_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamEngine_GetGameIDForPID_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 gameid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamEngine_GetGameIDForPID_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamEngine_GetGameIDForPID_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamEngine_GetGameIDForPID_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamEngine_GetGameIDForPID_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamEngine_GetGameIDForPID_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamEngine_GetGameIDForPID_Response)
    MergeFrom(*source);
  }
}

void CSteamEngine_GetGameIDForPID_Response::MergeFrom(const CSteamEngine_GetGameIDForPID_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamEngine_GetGameIDForPID_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void CSteamEngine_GetGameIDForPID_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamEngine_GetGameIDForPID_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamEngine_GetGameIDForPID_Response::CopyFrom(const CSteamEngine_GetGameIDForPID_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamEngine_GetGameIDForPID_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamEngine_GetGameIDForPID_Response::IsInitialized() const {
  return true;
}

void CSteamEngine_GetGameIDForPID_Response::InternalSwap(CSteamEngine_GetGameIDForPID_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamEngine_GetGameIDForPID_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SteamEngine::~SteamEngine() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamEngine::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteamengine_2eproto);
  return file_level_service_descriptors_webuimessages_5fsteamengine_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamEngine::GetDescriptor() {
  return descriptor();
}

void SteamEngine::UpdateTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamEngine_UpdateTextFilterDictionary_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateTextFilterDictionary() not implemented.");
  done->Run();
}

void SteamEngine::GetTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamEngine_GetTextFilterDictionary_Request*,
                         ::CSteamEngine_GetTextFilterDictionary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTextFilterDictionary() not implemented.");
  done->Run();
}

void SteamEngine::NotifyTextFilterDictionaryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamEngine_TextFilterDictionaryChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTextFilterDictionaryChanged() not implemented.");
  done->Run();
}

void SteamEngine::GetGameIDForPID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamEngine_GetGameIDForPID_Request*,
                         ::CSteamEngine_GetGameIDForPID_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameIDForPID() not implemented.");
  done->Run();
}

void SteamEngine::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fsteamengine_2eproto[0]);
  switch(method->index()) {
    case 0:
      UpdateTextFilterDictionary(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamEngine_UpdateTextFilterDictionary_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 1:
      GetTextFilterDictionary(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamEngine_GetTextFilterDictionary_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamEngine_GetTextFilterDictionary_Response*>(
                 response),
             done);
      break;
    case 2:
      NotifyTextFilterDictionaryChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamEngine_TextFilterDictionaryChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 3:
      GetGameIDForPID(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamEngine_GetGameIDForPID_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamEngine_GetGameIDForPID_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamEngine::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamEngine_UpdateTextFilterDictionary_Notification::default_instance();
    case 1:
      return ::CSteamEngine_GetTextFilterDictionary_Request::default_instance();
    case 2:
      return ::CSteamEngine_TextFilterDictionaryChanged_Notification::default_instance();
    case 3:
      return ::CSteamEngine_GetGameIDForPID_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamEngine::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::WebUINoResponse::default_instance();
    case 1:
      return ::CSteamEngine_GetTextFilterDictionary_Response::default_instance();
    case 2:
      return ::WebUINoResponse::default_instance();
    case 3:
      return ::CSteamEngine_GetGameIDForPID_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamEngine_Stub::SteamEngine_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamEngine_Stub::SteamEngine_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamEngine_Stub::~SteamEngine_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamEngine_Stub::UpdateTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamEngine_UpdateTextFilterDictionary_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamEngine_Stub::GetTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamEngine_GetTextFilterDictionary_Request* request,
                              ::CSteamEngine_GetTextFilterDictionary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SteamEngine_Stub::NotifyTextFilterDictionaryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamEngine_TextFilterDictionaryChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SteamEngine_Stub::GetGameIDForPID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamEngine_GetGameIDForPID_Request* request,
                              ::CSteamEngine_GetGameIDForPID_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSteamEngine_UpdateTextFilterDictionary_Notification* Arena::CreateMaybeMessage< ::CSteamEngine_UpdateTextFilterDictionary_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_UpdateTextFilterDictionary_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamEngine_GetTextFilterDictionary_Request* Arena::CreateMaybeMessage< ::CSteamEngine_GetTextFilterDictionary_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_GetTextFilterDictionary_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamEngine_GetTextFilterDictionary_Response* Arena::CreateMaybeMessage< ::CSteamEngine_GetTextFilterDictionary_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_GetTextFilterDictionary_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamEngine_TextFilterDictionaryChanged_Notification* Arena::CreateMaybeMessage< ::CSteamEngine_TextFilterDictionaryChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_TextFilterDictionaryChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamEngine_GetGameIDForPID_Request* Arena::CreateMaybeMessage< ::CSteamEngine_GetGameIDForPID_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_GetGameIDForPID_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamEngine_GetGameIDForPID_Response* Arena::CreateMaybeMessage< ::CSteamEngine_GetGameIDForPID_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamEngine_GetGameIDForPID_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
