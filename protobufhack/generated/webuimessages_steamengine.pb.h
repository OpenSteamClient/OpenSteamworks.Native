// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steamengine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fsteamengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fsteamengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteamengine_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(int index);
class CSteamEngine_GetGameIDForPID_Request;
struct CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal;
extern CSteamEngine_GetGameIDForPID_RequestDefaultTypeInternal _CSteamEngine_GetGameIDForPID_Request_default_instance_;
class CSteamEngine_GetGameIDForPID_Response;
struct CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal;
extern CSteamEngine_GetGameIDForPID_ResponseDefaultTypeInternal _CSteamEngine_GetGameIDForPID_Response_default_instance_;
class CSteamEngine_GetTextFilterDictionary_Request;
struct CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal;
extern CSteamEngine_GetTextFilterDictionary_RequestDefaultTypeInternal _CSteamEngine_GetTextFilterDictionary_Request_default_instance_;
class CSteamEngine_GetTextFilterDictionary_Response;
struct CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal;
extern CSteamEngine_GetTextFilterDictionary_ResponseDefaultTypeInternal _CSteamEngine_GetTextFilterDictionary_Response_default_instance_;
class CSteamEngine_TextFilterDictionaryChanged_Notification;
struct CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal;
extern CSteamEngine_TextFilterDictionaryChanged_NotificationDefaultTypeInternal _CSteamEngine_TextFilterDictionaryChanged_Notification_default_instance_;
class CSteamEngine_UpdateTextFilterDictionary_Notification;
struct CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal;
extern CSteamEngine_UpdateTextFilterDictionary_NotificationDefaultTypeInternal _CSteamEngine_UpdateTextFilterDictionary_Notification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSteamEngine_GetGameIDForPID_Request* Arena::CreateMaybeMessage<::CSteamEngine_GetGameIDForPID_Request>(Arena*);
template<> ::CSteamEngine_GetGameIDForPID_Response* Arena::CreateMaybeMessage<::CSteamEngine_GetGameIDForPID_Response>(Arena*);
template<> ::CSteamEngine_GetTextFilterDictionary_Request* Arena::CreateMaybeMessage<::CSteamEngine_GetTextFilterDictionary_Request>(Arena*);
template<> ::CSteamEngine_GetTextFilterDictionary_Response* Arena::CreateMaybeMessage<::CSteamEngine_GetTextFilterDictionary_Response>(Arena*);
template<> ::CSteamEngine_TextFilterDictionaryChanged_Notification* Arena::CreateMaybeMessage<::CSteamEngine_TextFilterDictionaryChanged_Notification>(Arena*);
template<> ::CSteamEngine_UpdateTextFilterDictionary_Notification* Arena::CreateMaybeMessage<::CSteamEngine_UpdateTextFilterDictionary_Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSteamEngine_UpdateTextFilterDictionary_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_UpdateTextFilterDictionary_Notification) */ {
 public:
  inline CSteamEngine_UpdateTextFilterDictionary_Notification() : CSteamEngine_UpdateTextFilterDictionary_Notification(nullptr) {}
  virtual ~CSteamEngine_UpdateTextFilterDictionary_Notification();
  explicit constexpr CSteamEngine_UpdateTextFilterDictionary_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_UpdateTextFilterDictionary_Notification(const CSteamEngine_UpdateTextFilterDictionary_Notification& from);
  CSteamEngine_UpdateTextFilterDictionary_Notification(CSteamEngine_UpdateTextFilterDictionary_Notification&& from) noexcept
    : CSteamEngine_UpdateTextFilterDictionary_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_UpdateTextFilterDictionary_Notification& operator=(const CSteamEngine_UpdateTextFilterDictionary_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_UpdateTextFilterDictionary_Notification& operator=(CSteamEngine_UpdateTextFilterDictionary_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_UpdateTextFilterDictionary_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_UpdateTextFilterDictionary_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_UpdateTextFilterDictionary_Notification*>(
               &_CSteamEngine_UpdateTextFilterDictionary_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSteamEngine_UpdateTextFilterDictionary_Notification& a, CSteamEngine_UpdateTextFilterDictionary_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_UpdateTextFilterDictionary_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_UpdateTextFilterDictionary_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_UpdateTextFilterDictionary_Notification* New() const final {
    return CreateMaybeMessage<CSteamEngine_UpdateTextFilterDictionary_Notification>(nullptr);
  }

  CSteamEngine_UpdateTextFilterDictionary_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_UpdateTextFilterDictionary_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_UpdateTextFilterDictionary_Notification& from);
  void MergeFrom(const CSteamEngine_UpdateTextFilterDictionary_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_UpdateTextFilterDictionary_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_UpdateTextFilterDictionary_Notification";
  }
  protected:
  explicit CSteamEngine_UpdateTextFilterDictionary_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // required string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_UpdateTextFilterDictionary_Notification)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// -------------------------------------------------------------------

class CSteamEngine_GetTextFilterDictionary_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_GetTextFilterDictionary_Request) */ {
 public:
  inline CSteamEngine_GetTextFilterDictionary_Request() : CSteamEngine_GetTextFilterDictionary_Request(nullptr) {}
  virtual ~CSteamEngine_GetTextFilterDictionary_Request();
  explicit constexpr CSteamEngine_GetTextFilterDictionary_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_GetTextFilterDictionary_Request(const CSteamEngine_GetTextFilterDictionary_Request& from);
  CSteamEngine_GetTextFilterDictionary_Request(CSteamEngine_GetTextFilterDictionary_Request&& from) noexcept
    : CSteamEngine_GetTextFilterDictionary_Request() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_GetTextFilterDictionary_Request& operator=(const CSteamEngine_GetTextFilterDictionary_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_GetTextFilterDictionary_Request& operator=(CSteamEngine_GetTextFilterDictionary_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_GetTextFilterDictionary_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_GetTextFilterDictionary_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_GetTextFilterDictionary_Request*>(
               &_CSteamEngine_GetTextFilterDictionary_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSteamEngine_GetTextFilterDictionary_Request& a, CSteamEngine_GetTextFilterDictionary_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_GetTextFilterDictionary_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_GetTextFilterDictionary_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_GetTextFilterDictionary_Request* New() const final {
    return CreateMaybeMessage<CSteamEngine_GetTextFilterDictionary_Request>(nullptr);
  }

  CSteamEngine_GetTextFilterDictionary_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_GetTextFilterDictionary_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_GetTextFilterDictionary_Request& from);
  void MergeFrom(const CSteamEngine_GetTextFilterDictionary_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_GetTextFilterDictionary_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_GetTextFilterDictionary_Request";
  }
  protected:
  explicit CSteamEngine_GetTextFilterDictionary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // required string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_GetTextFilterDictionary_Request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// -------------------------------------------------------------------

class CSteamEngine_GetTextFilterDictionary_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_GetTextFilterDictionary_Response) */ {
 public:
  inline CSteamEngine_GetTextFilterDictionary_Response() : CSteamEngine_GetTextFilterDictionary_Response(nullptr) {}
  virtual ~CSteamEngine_GetTextFilterDictionary_Response();
  explicit constexpr CSteamEngine_GetTextFilterDictionary_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_GetTextFilterDictionary_Response(const CSteamEngine_GetTextFilterDictionary_Response& from);
  CSteamEngine_GetTextFilterDictionary_Response(CSteamEngine_GetTextFilterDictionary_Response&& from) noexcept
    : CSteamEngine_GetTextFilterDictionary_Response() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_GetTextFilterDictionary_Response& operator=(const CSteamEngine_GetTextFilterDictionary_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_GetTextFilterDictionary_Response& operator=(CSteamEngine_GetTextFilterDictionary_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_GetTextFilterDictionary_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_GetTextFilterDictionary_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_GetTextFilterDictionary_Response*>(
               &_CSteamEngine_GetTextFilterDictionary_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSteamEngine_GetTextFilterDictionary_Response& a, CSteamEngine_GetTextFilterDictionary_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_GetTextFilterDictionary_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_GetTextFilterDictionary_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_GetTextFilterDictionary_Response* New() const final {
    return CreateMaybeMessage<CSteamEngine_GetTextFilterDictionary_Response>(nullptr);
  }

  CSteamEngine_GetTextFilterDictionary_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_GetTextFilterDictionary_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_GetTextFilterDictionary_Response& from);
  void MergeFrom(const CSteamEngine_GetTextFilterDictionary_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_GetTextFilterDictionary_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_GetTextFilterDictionary_Response";
  }
  protected:
  explicit CSteamEngine_GetTextFilterDictionary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDictionaryFieldNumber = 1,
  };
  // optional string dictionary = 1;
  bool has_dictionary() const;
  private:
  bool _internal_has_dictionary() const;
  public:
  void clear_dictionary();
  const std::string& dictionary() const;
  void set_dictionary(const std::string& value);
  void set_dictionary(std::string&& value);
  void set_dictionary(const char* value);
  void set_dictionary(const char* value, size_t size);
  std::string* mutable_dictionary();
  std::string* release_dictionary();
  void set_allocated_dictionary(std::string* dictionary);
  private:
  const std::string& _internal_dictionary() const;
  void _internal_set_dictionary(const std::string& value);
  std::string* _internal_mutable_dictionary();
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_GetTextFilterDictionary_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dictionary_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// -------------------------------------------------------------------

class CSteamEngine_TextFilterDictionaryChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_TextFilterDictionaryChanged_Notification) */ {
 public:
  inline CSteamEngine_TextFilterDictionaryChanged_Notification() : CSteamEngine_TextFilterDictionaryChanged_Notification(nullptr) {}
  virtual ~CSteamEngine_TextFilterDictionaryChanged_Notification();
  explicit constexpr CSteamEngine_TextFilterDictionaryChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_TextFilterDictionaryChanged_Notification(const CSteamEngine_TextFilterDictionaryChanged_Notification& from);
  CSteamEngine_TextFilterDictionaryChanged_Notification(CSteamEngine_TextFilterDictionaryChanged_Notification&& from) noexcept
    : CSteamEngine_TextFilterDictionaryChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_TextFilterDictionaryChanged_Notification& operator=(const CSteamEngine_TextFilterDictionaryChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_TextFilterDictionaryChanged_Notification& operator=(CSteamEngine_TextFilterDictionaryChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_TextFilterDictionaryChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_TextFilterDictionaryChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_TextFilterDictionaryChanged_Notification*>(
               &_CSteamEngine_TextFilterDictionaryChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSteamEngine_TextFilterDictionaryChanged_Notification& a, CSteamEngine_TextFilterDictionaryChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_TextFilterDictionaryChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_TextFilterDictionaryChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_TextFilterDictionaryChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamEngine_TextFilterDictionaryChanged_Notification>(nullptr);
  }

  CSteamEngine_TextFilterDictionaryChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_TextFilterDictionaryChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_TextFilterDictionaryChanged_Notification& from);
  void MergeFrom(const CSteamEngine_TextFilterDictionaryChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_TextFilterDictionaryChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_TextFilterDictionaryChanged_Notification";
  }
  protected:
  explicit CSteamEngine_TextFilterDictionaryChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // required string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_TextFilterDictionaryChanged_Notification)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// -------------------------------------------------------------------

class CSteamEngine_GetGameIDForPID_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_GetGameIDForPID_Request) */ {
 public:
  inline CSteamEngine_GetGameIDForPID_Request() : CSteamEngine_GetGameIDForPID_Request(nullptr) {}
  virtual ~CSteamEngine_GetGameIDForPID_Request();
  explicit constexpr CSteamEngine_GetGameIDForPID_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_GetGameIDForPID_Request(const CSteamEngine_GetGameIDForPID_Request& from);
  CSteamEngine_GetGameIDForPID_Request(CSteamEngine_GetGameIDForPID_Request&& from) noexcept
    : CSteamEngine_GetGameIDForPID_Request() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_GetGameIDForPID_Request& operator=(const CSteamEngine_GetGameIDForPID_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_GetGameIDForPID_Request& operator=(CSteamEngine_GetGameIDForPID_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_GetGameIDForPID_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_GetGameIDForPID_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_GetGameIDForPID_Request*>(
               &_CSteamEngine_GetGameIDForPID_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSteamEngine_GetGameIDForPID_Request& a, CSteamEngine_GetGameIDForPID_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_GetGameIDForPID_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_GetGameIDForPID_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_GetGameIDForPID_Request* New() const final {
    return CreateMaybeMessage<CSteamEngine_GetGameIDForPID_Request>(nullptr);
  }

  CSteamEngine_GetGameIDForPID_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_GetGameIDForPID_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_GetGameIDForPID_Request& from);
  void MergeFrom(const CSteamEngine_GetGameIDForPID_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_GetGameIDForPID_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_GetGameIDForPID_Request";
  }
  protected:
  explicit CSteamEngine_GetGameIDForPID_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_GetGameIDForPID_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// -------------------------------------------------------------------

class CSteamEngine_GetGameIDForPID_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamEngine_GetGameIDForPID_Response) */ {
 public:
  inline CSteamEngine_GetGameIDForPID_Response() : CSteamEngine_GetGameIDForPID_Response(nullptr) {}
  virtual ~CSteamEngine_GetGameIDForPID_Response();
  explicit constexpr CSteamEngine_GetGameIDForPID_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamEngine_GetGameIDForPID_Response(const CSteamEngine_GetGameIDForPID_Response& from);
  CSteamEngine_GetGameIDForPID_Response(CSteamEngine_GetGameIDForPID_Response&& from) noexcept
    : CSteamEngine_GetGameIDForPID_Response() {
    *this = ::std::move(from);
  }

  inline CSteamEngine_GetGameIDForPID_Response& operator=(const CSteamEngine_GetGameIDForPID_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamEngine_GetGameIDForPID_Response& operator=(CSteamEngine_GetGameIDForPID_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamEngine_GetGameIDForPID_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamEngine_GetGameIDForPID_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamEngine_GetGameIDForPID_Response*>(
               &_CSteamEngine_GetGameIDForPID_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSteamEngine_GetGameIDForPID_Response& a, CSteamEngine_GetGameIDForPID_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamEngine_GetGameIDForPID_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamEngine_GetGameIDForPID_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamEngine_GetGameIDForPID_Response* New() const final {
    return CreateMaybeMessage<CSteamEngine_GetGameIDForPID_Response>(nullptr);
  }

  CSteamEngine_GetGameIDForPID_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamEngine_GetGameIDForPID_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamEngine_GetGameIDForPID_Response& from);
  void MergeFrom(const CSteamEngine_GetGameIDForPID_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamEngine_GetGameIDForPID_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamEngine_GetGameIDForPID_Response";
  }
  protected:
  explicit CSteamEngine_GetGameIDForPID_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 1,
  };
  // optional uint64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamEngine_GetGameIDForPID_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  friend struct ::TableStruct_webuimessages_5fsteamengine_2eproto;
};
// ===================================================================

class SteamEngine_Stub;

class SteamEngine : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SteamEngine() {};
 public:
  virtual ~SteamEngine();

  typedef SteamEngine_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UpdateTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_UpdateTextFilterDictionary_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_GetTextFilterDictionary_Request* request,
                       ::CSteamEngine_GetTextFilterDictionary_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyTextFilterDictionaryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_TextFilterDictionaryChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGameIDForPID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_GetGameIDForPID_Request* request,
                       ::CSteamEngine_GetGameIDForPID_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamEngine);
};

class SteamEngine_Stub : public SteamEngine {
 public:
  SteamEngine_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SteamEngine_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SteamEngine_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SteamEngine ------------------------------------------

  void UpdateTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_UpdateTextFilterDictionary_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetTextFilterDictionary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_GetTextFilterDictionary_Request* request,
                       ::CSteamEngine_GetTextFilterDictionary_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyTextFilterDictionaryChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_TextFilterDictionaryChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGameIDForPID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamEngine_GetGameIDForPID_Request* request,
                       ::CSteamEngine_GetGameIDForPID_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamEngine_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSteamEngine_UpdateTextFilterDictionary_Notification

// required string language = 1;
inline bool CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_UpdateTextFilterDictionary_Notification::has_language() const {
  return _internal_has_language();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteamEngine_UpdateTextFilterDictionary_Notification::language() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
  return _internal_language();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::mutable_language() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
  return _internal_mutable_language();
}
inline const std::string& CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_language() const {
  return language_.Get();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::release_language() {
  // @@protoc_insertion_point(field_release:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
}

// required string type = 2;
inline bool CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamEngine_UpdateTextFilterDictionary_Notification::has_type() const {
  return _internal_has_type();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSteamEngine_UpdateTextFilterDictionary_Notification::type() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
  return _internal_type();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
  return _internal_mutable_type();
}
inline const std::string& CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_type() const {
  return type_.Get();
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_UpdateTextFilterDictionary_Notification::release_type() {
  // @@protoc_insertion_point(field_release:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_UpdateTextFilterDictionary_Notification::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
}

// -------------------------------------------------------------------

// CSteamEngine_GetTextFilterDictionary_Request

// required string language = 1;
inline bool CSteamEngine_GetTextFilterDictionary_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_GetTextFilterDictionary_Request::has_language() const {
  return _internal_has_language();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Request::language() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_GetTextFilterDictionary_Request.language)
  return _internal_language();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_GetTextFilterDictionary_Request.language)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::mutable_language() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_GetTextFilterDictionary_Request.language)
  return _internal_mutable_language();
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Request::_internal_language() const {
  return language_.Get();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_GetTextFilterDictionary_Request.language)
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_GetTextFilterDictionary_Request.language)
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_GetTextFilterDictionary_Request.language)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::release_language() {
  // @@protoc_insertion_point(field_release:CSteamEngine_GetTextFilterDictionary_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_GetTextFilterDictionary_Request.language)
}

// required string type = 2;
inline bool CSteamEngine_GetTextFilterDictionary_Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamEngine_GetTextFilterDictionary_Request::has_type() const {
  return _internal_has_type();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Request::type() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_GetTextFilterDictionary_Request.type)
  return _internal_type();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_GetTextFilterDictionary_Request.type)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_GetTextFilterDictionary_Request.type)
  return _internal_mutable_type();
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Request::_internal_type() const {
  return type_.Get();
}
inline void CSteamEngine_GetTextFilterDictionary_Request::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_GetTextFilterDictionary_Request.type)
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_GetTextFilterDictionary_Request.type)
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_GetTextFilterDictionary_Request.type)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Request::release_type() {
  // @@protoc_insertion_point(field_release:CSteamEngine_GetTextFilterDictionary_Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_GetTextFilterDictionary_Request.type)
}

// -------------------------------------------------------------------

// CSteamEngine_GetTextFilterDictionary_Response

// optional string dictionary = 1;
inline bool CSteamEngine_GetTextFilterDictionary_Response::_internal_has_dictionary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_GetTextFilterDictionary_Response::has_dictionary() const {
  return _internal_has_dictionary();
}
inline void CSteamEngine_GetTextFilterDictionary_Response::clear_dictionary() {
  dictionary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Response::dictionary() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
  return _internal_dictionary();
}
inline void CSteamEngine_GetTextFilterDictionary_Response::set_dictionary(const std::string& value) {
  _internal_set_dictionary(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Response::mutable_dictionary() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
  return _internal_mutable_dictionary();
}
inline const std::string& CSteamEngine_GetTextFilterDictionary_Response::_internal_dictionary() const {
  return dictionary_.Get();
}
inline void CSteamEngine_GetTextFilterDictionary_Response::_internal_set_dictionary(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Response::set_dictionary(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
}
inline void CSteamEngine_GetTextFilterDictionary_Response::set_dictionary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
}
inline void CSteamEngine_GetTextFilterDictionary_Response::set_dictionary(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Response::_internal_mutable_dictionary() {
  _has_bits_[0] |= 0x00000001u;
  return dictionary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_GetTextFilterDictionary_Response::release_dictionary() {
  // @@protoc_insertion_point(field_release:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
  if (!_internal_has_dictionary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dictionary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_GetTextFilterDictionary_Response::set_allocated_dictionary(std::string* dictionary) {
  if (dictionary != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dictionary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dictionary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
}

// -------------------------------------------------------------------

// CSteamEngine_TextFilterDictionaryChanged_Notification

// required string language = 1;
inline bool CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_TextFilterDictionaryChanged_Notification::has_language() const {
  return _internal_has_language();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteamEngine_TextFilterDictionaryChanged_Notification::language() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
  return _internal_language();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::mutable_language() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
  return _internal_mutable_language();
}
inline const std::string& CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_language() const {
  return language_.Get();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::release_language() {
  // @@protoc_insertion_point(field_release:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
}

// required string type = 2;
inline bool CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamEngine_TextFilterDictionaryChanged_Notification::has_type() const {
  return _internal_has_type();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSteamEngine_TextFilterDictionaryChanged_Notification::type() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
  return _internal_type();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
  return _internal_mutable_type();
}
inline const std::string& CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_type() const {
  return type_.Get();
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamEngine_TextFilterDictionaryChanged_Notification::release_type() {
  // @@protoc_insertion_point(field_release:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamEngine_TextFilterDictionaryChanged_Notification::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
}

// -------------------------------------------------------------------

// CSteamEngine_GetGameIDForPID_Request

// optional uint32 pid = 1;
inline bool CSteamEngine_GetGameIDForPID_Request::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_GetGameIDForPID_Request::has_pid() const {
  return _internal_has_pid();
}
inline void CSteamEngine_GetGameIDForPID_Request::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamEngine_GetGameIDForPID_Request::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamEngine_GetGameIDForPID_Request::pid() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_GetGameIDForPID_Request.pid)
  return _internal_pid();
}
inline void CSteamEngine_GetGameIDForPID_Request::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
}
inline void CSteamEngine_GetGameIDForPID_Request::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_GetGameIDForPID_Request.pid)
}

// -------------------------------------------------------------------

// CSteamEngine_GetGameIDForPID_Response

// optional uint64 gameid = 1;
inline bool CSteamEngine_GetGameIDForPID_Response::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamEngine_GetGameIDForPID_Response::has_gameid() const {
  return _internal_has_gameid();
}
inline void CSteamEngine_GetGameIDForPID_Response::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSteamEngine_GetGameIDForPID_Response::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSteamEngine_GetGameIDForPID_Response::gameid() const {
  // @@protoc_insertion_point(field_get:CSteamEngine_GetGameIDForPID_Response.gameid)
  return _internal_gameid();
}
inline void CSteamEngine_GetGameIDForPID_Response::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_ = value;
}
inline void CSteamEngine_GetGameIDForPID_Response::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CSteamEngine_GetGameIDForPID_Response.gameid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamengine_2eproto
