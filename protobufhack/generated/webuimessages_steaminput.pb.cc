// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steaminput.proto

#include "webuimessages_steaminput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSteamInputService_ControllerButtonStateChanged_Notification::CSteamInputService_ControllerButtonStateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_index_(0u)
  , dpad_up_(false)
  , dpad_down_(false)
  , dpad_left_(false)
  , dpad_right_(false)
  , button_south_(false)
  , button_east_(false)
  , button_west_(false)
  , button_north_(false)
  , button_bacview_(false)
  , button_start_options_(false)
  , button_steam_(false)
  , button_quicaccess_(false)
  , button_mute_capture_(false)
  , left_sticclick_(false)
  , left_stictouch_(false)
  , left_sticdeflect_(false)
  , right_sticclick_(false)
  , right_stictouch_(false)
  , right_sticdeflect_(false)
  , center_trackpad_touch_(false)
  , center_trackpad_click_(false)
  , left_trackpad_touch_(false)
  , left_trackpad_click_(false)
  , right_trackpad_touch_(false)
  , right_trackpad_click_(false)
  , left_bumper_(false)
  , left_trigger_(false)
  , l4_(false)
  , l5_(false)
  , left_aux_(false)
  , right_bumper_(false)
  , right_trigger_(false)
  , r4_(false)
  , r5_(false)
  , right_aux_(false){}
struct CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_ControllerButtonStateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal _CSteamInputService_ControllerButtonStateChanged_Notification_default_instance_;
constexpr ControllerVector2::ControllerVector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct ControllerVector2DefaultTypeInternal {
  constexpr ControllerVector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerVector2DefaultTypeInternal() {}
  union {
    ControllerVector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerVector2DefaultTypeInternal _ControllerVector2_default_instance_;
constexpr ControllerVector3::ControllerVector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ControllerVector3DefaultTypeInternal {
  constexpr ControllerVector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerVector3DefaultTypeInternal() {}
  union {
    ControllerVector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerVector3DefaultTypeInternal _ControllerVector3_default_instance_;
constexpr ControllerQuaternion::ControllerQuaternion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct ControllerQuaternionDefaultTypeInternal {
  constexpr ControllerQuaternionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerQuaternionDefaultTypeInternal() {}
  union {
    ControllerQuaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerQuaternionDefaultTypeInternal _ControllerQuaternion_default_instance_;
constexpr ControllerGyroEulerAngles::ControllerGyroEulerAngles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct ControllerGyroEulerAnglesDefaultTypeInternal {
  constexpr ControllerGyroEulerAnglesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGyroEulerAnglesDefaultTypeInternal() {}
  union {
    ControllerGyroEulerAngles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGyroEulerAnglesDefaultTypeInternal _ControllerGyroEulerAngles_default_instance_;
constexpr CSteamInputService_ControllerAxesStateChange_Notification::CSteamInputService_ControllerAxesStateChange_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joysticleft_(nullptr)
  , joysticright_(nullptr)
  , trackpad_left_(nullptr)
  , trackpad_right_(nullptr)
  , trackpad_center_(nullptr)
  , controller_index_(0u)
  , trackpad_pressure_left_(0)
  , trackpad_pressure_right_(0)
  , trigger_left_(0)
  , trigger_right_(0){}
struct CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_ControllerAxesStateChange_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal _CSteamInputService_ControllerAxesStateChange_Notification_default_instance_;
constexpr CSteamInputService_GyroQuaternionChanged_Notification::CSteamInputService_GyroQuaternionChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyro_raw_quaternion_(nullptr)
  , gyro_filtered_quaternion_(nullptr)
  , controller_index_(0u)
  , imu_index_(0u)
  , imu_sensor_delta_time_(0u){}
struct CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_GyroQuaternionChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroQuaternionChanged_Notification_default_instance_;
constexpr CSteamInputService_GyroSpeedChanged_Notification::CSteamInputService_GyroSpeedChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyro_raw_speed_(nullptr)
  , gyro_filtered_speed_(nullptr)
  , controller_index_(0u)
  , imu_index_(0u){}
struct CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_GyroSpeedChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroSpeedChanged_Notification_default_instance_;
constexpr CSteamInputService_GyroAccelerometerChanged_Notification::CSteamInputService_GyroAccelerometerChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceleromter_1g_(nullptr)
  , trusted_gravity_1g_(nullptr)
  , controller_index_(0u)
  , imu_index_(0u){}
struct CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_GyroAccelerometerChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroAccelerometerChanged_Notification_default_instance_;
constexpr CSteamInputService_GyroCalibration_Notification::CSteamInputService_GyroCalibration_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_index_(0u)
  , imu_index_(0u)
  , acceleromter_noise_(0)
  , gyroscope_noise_(0)
  , calibration_progress_(0){}
struct CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal {
  constexpr CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal() {}
  union {
    CSteamInputService_GyroCalibration_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal _CSteamInputService_GyroCalibration_Notification_default_instance_;
constexpr CSteamInputService_ControllerStateFlow_Request::CSteamInputService_ControllerStateFlow_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_index_(0u)
  , flow_mode_(0u){}
struct CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal {
  constexpr CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal() {}
  union {
    CSteamInputService_ControllerStateFlow_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal _CSteamInputService_ControllerStateFlow_Request_default_instance_;
constexpr CSteamInputService_ControllerStateFlow_Response::CSteamInputService_ControllerStateFlow_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal {
  constexpr CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal() {}
  union {
    CSteamInputService_ControllerStateFlow_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal _CSteamInputService_ControllerStateFlow_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fsteaminput_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fsteaminput_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fsteaminput_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fsteaminput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, dpad_up_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, dpad_down_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, dpad_left_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, dpad_right_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_south_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_east_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_west_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_north_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_bacview_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_start_options_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_steam_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_quicaccess_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, button_mute_capture_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_sticclick_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_stictouch_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_sticdeflect_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_sticclick_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_stictouch_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_sticdeflect_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, center_trackpad_touch_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, center_trackpad_click_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_trackpad_touch_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_trackpad_click_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_trackpad_touch_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_trackpad_click_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_bumper_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_trigger_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, l4_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, l5_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, left_aux_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_bumper_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_trigger_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, r4_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, r5_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerButtonStateChanged_Notification, right_aux_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  PROTOBUF_FIELD_OFFSET(::ControllerVector2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ControllerVector2, x_),
  PROTOBUF_FIELD_OFFSET(::ControllerVector2, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ControllerVector3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ControllerVector3, x_),
  PROTOBUF_FIELD_OFFSET(::ControllerVector3, y_),
  PROTOBUF_FIELD_OFFSET(::ControllerVector3, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, w_),
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, x_),
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, y_),
  PROTOBUF_FIELD_OFFSET(::ControllerQuaternion, z_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ControllerGyroEulerAngles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerGyroEulerAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ControllerGyroEulerAngles, pitch_),
  PROTOBUF_FIELD_OFFSET(::ControllerGyroEulerAngles, yaw_),
  PROTOBUF_FIELD_OFFSET(::ControllerGyroEulerAngles, roll_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, joysticleft_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, joysticright_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trackpad_left_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trackpad_right_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trackpad_center_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trackpad_pressure_left_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trackpad_pressure_right_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trigger_left_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerAxesStateChange_Notification, trigger_right_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, imu_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, gyro_raw_quaternion_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, gyro_filtered_quaternion_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroQuaternionChanged_Notification, imu_sensor_delta_time_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, imu_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, gyro_raw_speed_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroSpeedChanged_Notification, gyro_filtered_speed_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, imu_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, acceleromter_1g_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroAccelerometerChanged_Notification, trusted_gravity_1g_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, imu_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, acceleromter_noise_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, gyroscope_noise_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_GyroCalibration_Notification, calibration_progress_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerStateFlow_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerStateFlow_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerStateFlow_Request, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerStateFlow_Request, flow_mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamInputService_ControllerStateFlow_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 41, sizeof(::CSteamInputService_ControllerButtonStateChanged_Notification)},
  { 77, 84, sizeof(::ControllerVector2)},
  { 86, 94, sizeof(::ControllerVector3)},
  { 97, 106, sizeof(::ControllerQuaternion)},
  { 110, 118, sizeof(::ControllerGyroEulerAngles)},
  { 121, 136, sizeof(::CSteamInputService_ControllerAxesStateChange_Notification)},
  { 146, 156, sizeof(::CSteamInputService_GyroQuaternionChanged_Notification)},
  { 161, 170, sizeof(::CSteamInputService_GyroSpeedChanged_Notification)},
  { 174, 183, sizeof(::CSteamInputService_GyroAccelerometerChanged_Notification)},
  { 187, 197, sizeof(::CSteamInputService_GyroCalibration_Notification)},
  { 202, 209, sizeof(::CSteamInputService_ControllerStateFlow_Request)},
  { 211, -1, sizeof(::CSteamInputService_ControllerStateFlow_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_ControllerButtonStateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerQuaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerGyroEulerAngles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_ControllerAxesStateChange_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_GyroQuaternionChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_GyroSpeedChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_GyroAccelerometerChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_GyroCalibration_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_ControllerStateFlow_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamInputService_ControllerStateFlow_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fsteaminput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036webuimessages_steaminput.proto\032 google"
  "/protobuf/descriptor.proto\032\030steammessage"
  "s_base.proto\032\030webuimessages_base.proto\"\365"
  "\006\n<CSteamInputService_ControllerButtonSt"
  "ateChanged_Notification\022\030\n\020controller_in"
  "dex\030\001 \001(\r\022\017\n\007dpad_up\030\002 \001(\010\022\021\n\tdpad_down\030"
  "\003 \001(\010\022\021\n\tdpad_left\030\004 \001(\010\022\022\n\ndpad_right\030\005"
  " \001(\010\022\024\n\014button_south\030\006 \001(\010\022\023\n\013button_eas"
  "t\030\007 \001(\010\022\023\n\013button_west\030\010 \001(\010\022\024\n\014button_n"
  "orth\030\t \001(\010\022\026\n\016button_bacview\030\n \001(\010\022\034\n\024bu"
  "tton_start_options\030\013 \001(\010\022\024\n\014button_steam"
  "\030\014 \001(\010\022\031\n\021button_quicaccess\030\r \001(\010\022\033\n\023but"
  "ton_mute_capture\030\016 \001(\010\022\026\n\016left_sticclick"
  "\030\017 \001(\010\022\026\n\016left_stictouch\030\020 \001(\010\022\030\n\020left_s"
  "ticdeflect\030\021 \001(\010\022\027\n\017right_sticclick\030\022 \001("
  "\010\022\027\n\017right_stictouch\030\023 \001(\010\022\031\n\021right_stic"
  "deflect\030\024 \001(\010\022\035\n\025center_trackpad_touch\030\025"
  " \001(\010\022\035\n\025center_trackpad_click\030\026 \001(\010\022\033\n\023l"
  "eft_trackpad_touch\030\027 \001(\010\022\033\n\023left_trackpa"
  "d_click\030\030 \001(\010\022\034\n\024right_trackpad_touch\030\031 "
  "\001(\010\022\034\n\024right_trackpad_click\030\032 \001(\010\022\023\n\013lef"
  "t_bumper\030\033 \001(\010\022\024\n\014left_trigger\030\034 \001(\010\022\n\n\002"
  "l4\030\035 \001(\010\022\n\n\002l5\030\036 \001(\010\022\020\n\010left_aux\030\037 \001(\010\022\024"
  "\n\014right_bumper\030  \001(\010\022\025\n\rright_trigger\030! "
  "\001(\010\022\n\n\002r4\030\" \001(\010\022\n\n\002r5\030# \001(\010\022\021\n\tright_aux"
  "\030$ \001(\010\")\n\021ControllerVector2\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\"4\n\021ControllerVector3\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"B\n\024ControllerQua"
  "ternion\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002"
  "\022\t\n\001z\030\004 \001(\002\"E\n\031ControllerGyroEulerAngles"
  "\022\r\n\005pitch\030\001 \001(\002\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001"
  "(\002\"\232\003\n9CSteamInputService_ControllerAxes"
  "StateChange_Notification\022\030\n\020controller_i"
  "ndex\030\001 \001(\r\022\'\n\013joysticleft\030\002 \001(\0132\022.Contro"
  "llerVector2\022(\n\014joysticright\030\003 \001(\0132\022.Cont"
  "rollerVector2\022)\n\rtrackpad_left\030\004 \001(\0132\022.C"
  "ontrollerVector2\022*\n\016trackpad_right\030\005 \001(\013"
  "2\022.ControllerVector2\022+\n\017trackpad_center\030"
  "\006 \001(\0132\022.ControllerVector2\022\036\n\026trackpad_pr"
  "essure_left\030\007 \001(\002\022\037\n\027trackpad_pressure_r"
  "ight\030\010 \001(\002\022\024\n\014trigger_left\030\t \001(\002\022\025\n\rtrig"
  "ger_right\030\n \001(\002\"\360\001\n5CSteamInputService_G"
  "yroQuaternionChanged_Notification\022\030\n\020con"
  "troller_index\030\001 \001(\r\022\021\n\timu_index\030\002 \001(\r\0222"
  "\n\023gyro_raw_quaternion\030\003 \001(\0132\025.Controller"
  "Quaternion\0227\n\030gyro_filtered_quaternion\030\004"
  " \001(\0132\025.ControllerQuaternion\022\035\n\025imu_senso"
  "r_delta_time\030\005 \001(\r\"\314\001\n0CSteamInputServic"
  "e_GyroSpeedChanged_Notification\022\030\n\020contr"
  "oller_index\030\001 \001(\r\022\021\n\timu_index\030\002 \001(\r\0222\n\016"
  "gyro_raw_speed\030\003 \001(\0132\032.ControllerGyroEul"
  "erAngles\0227\n\023gyro_filtered_speed\030\004 \001(\0132\032."
  "ControllerGyroEulerAngles\"\304\001\n8CSteamInpu"
  "tService_GyroAccelerometerChanged_Notifi"
  "cation\022\030\n\020controller_index\030\001 \001(\r\022\021\n\timu_"
  "index\030\002 \001(\r\022+\n\017acceleromter_1g\030\004 \001(\0132\022.C"
  "ontrollerVector3\022.\n\022trusted_gravity_1g\030\005"
  " \001(\0132\022.ControllerVector3\"\261\001\n/CSteamInput"
  "Service_GyroCalibration_Notification\022\030\n\020"
  "controller_index\030\001 \001(\r\022\021\n\timu_index\030\002 \001("
  "\r\022\032\n\022acceleromter_noise\030\003 \001(\002\022\027\n\017gyrosco"
  "pe_noise\030\004 \001(\002\022\034\n\024calibration_progress\030\005"
  " \001(\002\"]\n.CSteamInputService_ControllerSta"
  "teFlow_Request\022\030\n\020controller_index\030\001 \001(\r"
  "\022\021\n\tflow_mode\030\002 \001(\r\"1\n/CSteamInputServic"
  "e_ControllerStateFlow_Response2\231\007\n\021Steam"
  "InputManager\022k\n\030NotifyButtonStateChanged"
  "\022=.CSteamInputService_ControllerButtonSt"
  "ateChanged_Notification\032\020.WebUINoRespons"
  "e\022f\n\026NotifyAxesStateChanged\022:.CSteamInpu"
  "tService_ControllerAxesStateChange_Notif"
  "ication\032\020.WebUINoResponse\022l\n NotifyGyroQ"
  "uaternionStateChanged\0226.CSteamInputServi"
  "ce_GyroQuaternionChanged_Notification\032\020."
  "WebUINoResponse\022b\n\033NotifyGyroSpeedStateC"
  "hanged\0221.CSteamInputService_GyroSpeedCha"
  "nged_Notification\032\020.WebUINoResponse\022r\n#N"
  "otifyGyroAccelerometerStateChanged\0229.CSt"
  "eamInputService_GyroAccelerometerChanged"
  "_Notification\032\020.WebUINoResponse\022g\n!Notif"
  "yGyroCalibrationStateChanged\0220.CSteamInp"
  "utService_GyroCalibration_Notification\032\020"
  ".WebUINoResponse\022}\n\030StartControllerState"
  "Flow\022/.CSteamInputService_ControllerStat"
  "eFlow_Request\0320.CSteamInputService_Contr"
  "ollerStateFlow_Response\022{\n\026EndController"
  "StateFlow\022/.CSteamInputService_Controlle"
  "rStateFlow_Request\0320.CSteamInputService_"
  "ControllerStateFlow_Response\032\004\200\227\"\002B\037H\001\200\001"
  "\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fsteaminput_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fsteaminput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteaminput_2eproto = {
  false, false, 3587, descriptor_table_protodef_webuimessages_5fsteaminput_2eproto, "webuimessages_steaminput.proto", 
  &descriptor_table_webuimessages_5fsteaminput_2eproto_once, descriptor_table_webuimessages_5fsteaminput_2eproto_deps, 3, 12,
  schemas, file_default_instances, TableStruct_webuimessages_5fsteaminput_2eproto::offsets,
  file_level_metadata_webuimessages_5fsteaminput_2eproto, file_level_enum_descriptors_webuimessages_5fsteaminput_2eproto, file_level_service_descriptors_webuimessages_5fsteaminput_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteaminput_2eproto);
  return descriptor_table_webuimessages_5fsteaminput_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fsteaminput_2eproto(&descriptor_table_webuimessages_5fsteaminput_2eproto);

// ===================================================================

class CSteamInputService_ControllerButtonStateChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_ControllerButtonStateChanged_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dpad_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dpad_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dpad_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dpad_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_button_south(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_button_east(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_button_west(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_button_north(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_button_bacview(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_button_start_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_button_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_button_quicaccess(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_button_mute_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_left_sticclick(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_left_stictouch(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_left_sticdeflect(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_right_sticclick(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_right_stictouch(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_right_sticdeflect(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_center_trackpad_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_center_trackpad_click(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_left_trackpad_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_left_trackpad_click(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_right_trackpad_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_right_trackpad_click(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_left_bumper(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_left_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_l4(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_l5(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_left_aux(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_right_bumper(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_right_trigger(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_r4(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_r5(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_right_aux(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

CSteamInputService_ControllerButtonStateChanged_Notification::CSteamInputService_ControllerButtonStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_ControllerButtonStateChanged_Notification)
}
CSteamInputService_ControllerButtonStateChanged_Notification::CSteamInputService_ControllerButtonStateChanged_Notification(const CSteamInputService_ControllerButtonStateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_aux_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(right_aux_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_ControllerButtonStateChanged_Notification)
}

void CSteamInputService_ControllerButtonStateChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_aux_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(right_aux_));
}

CSteamInputService_ControllerButtonStateChanged_Notification::~CSteamInputService_ControllerButtonStateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_ControllerButtonStateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_ControllerButtonStateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamInputService_ControllerButtonStateChanged_Notification::ArenaDtor(void* object) {
  CSteamInputService_ControllerButtonStateChanged_Notification* _this = reinterpret_cast< CSteamInputService_ControllerButtonStateChanged_Notification* >(object);
  (void)_this;
}
void CSteamInputService_ControllerButtonStateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_ControllerButtonStateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_ControllerButtonStateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_west_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(button_west_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&button_north_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_stictouch_) -
        reinterpret_cast<char*>(&button_north_)) + sizeof(left_stictouch_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&left_sticdeflect_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_trackpad_click_) -
        reinterpret_cast<char*>(&left_sticdeflect_)) + sizeof(left_trackpad_click_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&right_trackpad_touch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_bumper_) -
        reinterpret_cast<char*>(&right_trackpad_touch_)) + sizeof(right_bumper_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&right_trigger_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_aux_) -
        reinterpret_cast<char*>(&right_trigger_)) + sizeof(right_aux_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_ControllerButtonStateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&_has_bits_);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dpad_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dpad_up(&_has_bits_);
          dpad_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dpad_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dpad_down(&_has_bits_);
          dpad_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dpad_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dpad_left(&_has_bits_);
          dpad_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dpad_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dpad_right(&_has_bits_);
          dpad_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_south = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_button_south(&_has_bits_);
          button_south_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_east = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_button_east(&_has_bits_);
          button_east_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_west = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_button_west(&_has_bits_);
          button_west_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_north = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_button_north(&_has_bits_);
          button_north_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_bacview = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_button_bacview(&_has_bits_);
          button_bacview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_start_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_button_start_options(&_has_bits_);
          button_start_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_steam = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_button_steam(&_has_bits_);
          button_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_quicaccess = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_button_quicaccess(&_has_bits_);
          button_quicaccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_mute_capture = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_button_mute_capture(&_has_bits_);
          button_mute_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_sticclick = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_left_sticclick(&_has_bits_);
          left_sticclick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_stictouch = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_left_stictouch(&_has_bits_);
          left_stictouch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_sticdeflect = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_left_sticdeflect(&_has_bits_);
          left_sticdeflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_sticclick = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_right_sticclick(&_has_bits_);
          right_sticclick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_stictouch = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_right_stictouch(&_has_bits_);
          right_stictouch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_sticdeflect = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_right_sticdeflect(&_has_bits_);
          right_sticdeflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool center_trackpad_touch = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_center_trackpad_touch(&_has_bits_);
          center_trackpad_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool center_trackpad_click = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_center_trackpad_click(&_has_bits_);
          center_trackpad_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_trackpad_touch = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_left_trackpad_touch(&_has_bits_);
          left_trackpad_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_trackpad_click = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_left_trackpad_click(&_has_bits_);
          left_trackpad_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_trackpad_touch = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_right_trackpad_touch(&_has_bits_);
          right_trackpad_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_trackpad_click = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_right_trackpad_click(&_has_bits_);
          right_trackpad_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_bumper = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_left_bumper(&_has_bits_);
          left_bumper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_trigger = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_left_trigger(&_has_bits_);
          left_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool l4 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_l4(&_has_bits_);
          l4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool l5 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_l5(&_has_bits_);
          l5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_aux = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_left_aux(&_has_bits_);
          left_aux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_bumper = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_right_bumper(&_has_bits_);
          right_bumper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_trigger = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_right_trigger(&_has_bits_);
          right_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool r4 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_r4(&_has_bits_);
          r4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool r5 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_r5(&_has_bits_);
          r5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_aux = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_right_aux(&_has_bits_);
          right_aux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_ControllerButtonStateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional bool dpad_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_dpad_up(), target);
  }

  // optional bool dpad_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_dpad_down(), target);
  }

  // optional bool dpad_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_dpad_left(), target);
  }

  // optional bool dpad_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dpad_right(), target);
  }

  // optional bool button_south = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_button_south(), target);
  }

  // optional bool button_east = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_button_east(), target);
  }

  // optional bool button_west = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_button_west(), target);
  }

  // optional bool button_north = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_button_north(), target);
  }

  // optional bool button_bacview = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_button_bacview(), target);
  }

  // optional bool button_start_options = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_button_start_options(), target);
  }

  // optional bool button_steam = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_button_steam(), target);
  }

  // optional bool button_quicaccess = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_button_quicaccess(), target);
  }

  // optional bool button_mute_capture = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_button_mute_capture(), target);
  }

  // optional bool left_sticclick = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_left_sticclick(), target);
  }

  // optional bool left_stictouch = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_left_stictouch(), target);
  }

  // optional bool left_sticdeflect = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_left_sticdeflect(), target);
  }

  // optional bool right_sticclick = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_right_sticclick(), target);
  }

  // optional bool right_stictouch = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_right_stictouch(), target);
  }

  // optional bool right_sticdeflect = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_right_sticdeflect(), target);
  }

  // optional bool center_trackpad_touch = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_center_trackpad_touch(), target);
  }

  // optional bool center_trackpad_click = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_center_trackpad_click(), target);
  }

  // optional bool left_trackpad_touch = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_left_trackpad_touch(), target);
  }

  // optional bool left_trackpad_click = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_left_trackpad_click(), target);
  }

  // optional bool right_trackpad_touch = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_right_trackpad_touch(), target);
  }

  // optional bool right_trackpad_click = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_right_trackpad_click(), target);
  }

  // optional bool left_bumper = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_left_bumper(), target);
  }

  // optional bool left_trigger = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_left_trigger(), target);
  }

  // optional bool l4 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_l4(), target);
  }

  // optional bool l5 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_l5(), target);
  }

  // optional bool left_aux = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_left_aux(), target);
  }

  // optional bool right_bumper = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_right_bumper(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool right_trigger = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_right_trigger(), target);
  }

  // optional bool r4 = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_r4(), target);
  }

  // optional bool r5 = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_r5(), target);
  }

  // optional bool right_aux = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_right_aux(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_ControllerButtonStateChanged_Notification)
  return target;
}

size_t CSteamInputService_ControllerButtonStateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional bool dpad_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool dpad_down = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool dpad_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool dpad_right = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool button_south = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool button_east = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool button_west = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool button_north = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool button_bacview = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool button_start_options = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool button_steam = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool button_quicaccess = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool button_mute_capture = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool left_sticclick = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool left_stictouch = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool left_sticdeflect = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool right_sticclick = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool right_stictouch = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool right_sticdeflect = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool center_trackpad_touch = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool center_trackpad_click = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool left_trackpad_touch = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool left_trackpad_click = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool right_trackpad_touch = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool right_trackpad_click = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool left_bumper = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool left_trigger = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool l4 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool l5 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool left_aux = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool right_bumper = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool right_trigger = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool r4 = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool r5 = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool right_aux = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_ControllerButtonStateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_ControllerButtonStateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_ControllerButtonStateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_ControllerButtonStateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_ControllerButtonStateChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_ControllerButtonStateChanged_Notification::MergeFrom(const CSteamInputService_ControllerButtonStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      dpad_up_ = from.dpad_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      dpad_down_ = from.dpad_down_;
    }
    if (cached_has_bits & 0x00000008u) {
      dpad_left_ = from.dpad_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      dpad_right_ = from.dpad_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      button_south_ = from.button_south_;
    }
    if (cached_has_bits & 0x00000040u) {
      button_east_ = from.button_east_;
    }
    if (cached_has_bits & 0x00000080u) {
      button_west_ = from.button_west_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      button_north_ = from.button_north_;
    }
    if (cached_has_bits & 0x00000200u) {
      button_bacview_ = from.button_bacview_;
    }
    if (cached_has_bits & 0x00000400u) {
      button_start_options_ = from.button_start_options_;
    }
    if (cached_has_bits & 0x00000800u) {
      button_steam_ = from.button_steam_;
    }
    if (cached_has_bits & 0x00001000u) {
      button_quicaccess_ = from.button_quicaccess_;
    }
    if (cached_has_bits & 0x00002000u) {
      button_mute_capture_ = from.button_mute_capture_;
    }
    if (cached_has_bits & 0x00004000u) {
      left_sticclick_ = from.left_sticclick_;
    }
    if (cached_has_bits & 0x00008000u) {
      left_stictouch_ = from.left_stictouch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      left_sticdeflect_ = from.left_sticdeflect_;
    }
    if (cached_has_bits & 0x00020000u) {
      right_sticclick_ = from.right_sticclick_;
    }
    if (cached_has_bits & 0x00040000u) {
      right_stictouch_ = from.right_stictouch_;
    }
    if (cached_has_bits & 0x00080000u) {
      right_sticdeflect_ = from.right_sticdeflect_;
    }
    if (cached_has_bits & 0x00100000u) {
      center_trackpad_touch_ = from.center_trackpad_touch_;
    }
    if (cached_has_bits & 0x00200000u) {
      center_trackpad_click_ = from.center_trackpad_click_;
    }
    if (cached_has_bits & 0x00400000u) {
      left_trackpad_touch_ = from.left_trackpad_touch_;
    }
    if (cached_has_bits & 0x00800000u) {
      left_trackpad_click_ = from.left_trackpad_click_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      right_trackpad_touch_ = from.right_trackpad_touch_;
    }
    if (cached_has_bits & 0x02000000u) {
      right_trackpad_click_ = from.right_trackpad_click_;
    }
    if (cached_has_bits & 0x04000000u) {
      left_bumper_ = from.left_bumper_;
    }
    if (cached_has_bits & 0x08000000u) {
      left_trigger_ = from.left_trigger_;
    }
    if (cached_has_bits & 0x10000000u) {
      l4_ = from.l4_;
    }
    if (cached_has_bits & 0x20000000u) {
      l5_ = from.l5_;
    }
    if (cached_has_bits & 0x40000000u) {
      left_aux_ = from.left_aux_;
    }
    if (cached_has_bits & 0x80000000u) {
      right_bumper_ = from.right_bumper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      right_trigger_ = from.right_trigger_;
    }
    if (cached_has_bits & 0x00000002u) {
      r4_ = from.r4_;
    }
    if (cached_has_bits & 0x00000004u) {
      r5_ = from.r5_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_aux_ = from.right_aux_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSteamInputService_ControllerButtonStateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_ControllerButtonStateChanged_Notification::CopyFrom(const CSteamInputService_ControllerButtonStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_ControllerButtonStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_ControllerButtonStateChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_ControllerButtonStateChanged_Notification::InternalSwap(CSteamInputService_ControllerButtonStateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerButtonStateChanged_Notification, right_aux_)
      + sizeof(CSteamInputService_ControllerButtonStateChanged_Notification::right_aux_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerButtonStateChanged_Notification, controller_index_)>(
          reinterpret_cast<char*>(&controller_index_),
          reinterpret_cast<char*>(&other->controller_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_ControllerButtonStateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerVector2::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerVector2>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ControllerVector2::ControllerVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerVector2)
}
ControllerVector2::ControllerVector2(const ControllerVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ControllerVector2)
}

void ControllerVector2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ControllerVector2::~ControllerVector2() {
  // @@protoc_insertion_point(destructor:ControllerVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerVector2::ArenaDtor(void* object) {
  ControllerVector2* _this = reinterpret_cast< ControllerVector2* >(object);
  (void)_this;
}
void ControllerVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerVector2)
  return target;
}

size_t ControllerVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerVector2)
    MergeFrom(*source);
  }
}

void ControllerVector2::MergeFrom(const ControllerVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerVector2::CopyFrom(const ControllerVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerVector2::IsInitialized() const {
  return true;
}

void ControllerVector2::InternalSwap(ControllerVector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerVector2, y_)
      + sizeof(ControllerVector2::y_)
      - PROTOBUF_FIELD_OFFSET(ControllerVector2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerVector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerVector3::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerVector3>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ControllerVector3::ControllerVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerVector3)
}
ControllerVector3::ControllerVector3(const ControllerVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ControllerVector3)
}

void ControllerVector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ControllerVector3::~ControllerVector3() {
  // @@protoc_insertion_point(destructor:ControllerVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerVector3::ArenaDtor(void* object) {
  ControllerVector3* _this = reinterpret_cast< ControllerVector3* >(object);
  (void)_this;
}
void ControllerVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerVector3)
  return target;
}

size_t ControllerVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerVector3)
    MergeFrom(*source);
  }
}

void ControllerVector3::MergeFrom(const ControllerVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerVector3::CopyFrom(const ControllerVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerVector3::IsInitialized() const {
  return true;
}

void ControllerVector3::InternalSwap(ControllerVector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerVector3, z_)
      + sizeof(ControllerVector3::z_)
      - PROTOBUF_FIELD_OFFSET(ControllerVector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerVector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerQuaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerQuaternion>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ControllerQuaternion::ControllerQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerQuaternion)
}
ControllerQuaternion::ControllerQuaternion(const ControllerQuaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ControllerQuaternion)
}

void ControllerQuaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

ControllerQuaternion::~ControllerQuaternion() {
  // @@protoc_insertion_point(destructor:ControllerQuaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerQuaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerQuaternion::ArenaDtor(void* object) {
  ControllerQuaternion* _this = reinterpret_cast< ControllerQuaternion* >(object);
  (void)_this;
}
void ControllerQuaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerQuaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerQuaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&w_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerQuaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerQuaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerQuaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerQuaternion)
  return target;
}

size_t ControllerQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerQuaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerQuaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerQuaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerQuaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerQuaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerQuaternion)
    MergeFrom(*source);
  }
}

void ControllerQuaternion::MergeFrom(const ControllerQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerQuaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerQuaternion::CopyFrom(const ControllerQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerQuaternion::IsInitialized() const {
  return true;
}

void ControllerQuaternion::InternalSwap(ControllerQuaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerQuaternion, z_)
      + sizeof(ControllerQuaternion::z_)
      - PROTOBUF_FIELD_OFFSET(ControllerQuaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerQuaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGyroEulerAngles::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerGyroEulerAngles>()._has_bits_);
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ControllerGyroEulerAngles::ControllerGyroEulerAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerGyroEulerAngles)
}
ControllerGyroEulerAngles::ControllerGyroEulerAngles(const ControllerGyroEulerAngles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:ControllerGyroEulerAngles)
}

void ControllerGyroEulerAngles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pitch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
}

ControllerGyroEulerAngles::~ControllerGyroEulerAngles() {
  // @@protoc_insertion_point(destructor:ControllerGyroEulerAngles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGyroEulerAngles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerGyroEulerAngles::ArenaDtor(void* object) {
  ControllerGyroEulerAngles* _this = reinterpret_cast< ControllerGyroEulerAngles* >(object);
  (void)_this;
}
void ControllerGyroEulerAngles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGyroEulerAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGyroEulerAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerGyroEulerAngles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGyroEulerAngles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGyroEulerAngles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerGyroEulerAngles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch(), target);
  }

  // optional float yaw = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // optional float roll = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerGyroEulerAngles)
  return target;
}

size_t ControllerGyroEulerAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerGyroEulerAngles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float pitch = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float yaw = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float roll = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGyroEulerAngles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerGyroEulerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGyroEulerAngles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGyroEulerAngles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerGyroEulerAngles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerGyroEulerAngles)
    MergeFrom(*source);
  }
}

void ControllerGyroEulerAngles::MergeFrom(const ControllerGyroEulerAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerGyroEulerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000002u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerGyroEulerAngles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerGyroEulerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGyroEulerAngles::CopyFrom(const ControllerGyroEulerAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerGyroEulerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGyroEulerAngles::IsInitialized() const {
  return true;
}

void ControllerGyroEulerAngles::InternalSwap(ControllerGyroEulerAngles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerGyroEulerAngles, roll_)
      + sizeof(ControllerGyroEulerAngles::roll_)
      - PROTOBUF_FIELD_OFFSET(ControllerGyroEulerAngles, pitch_)>(
          reinterpret_cast<char*>(&pitch_),
          reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGyroEulerAngles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_ControllerAxesStateChange_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_ControllerAxesStateChange_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ControllerVector2& joysticleft(const CSteamInputService_ControllerAxesStateChange_Notification* msg);
  static void set_has_joysticleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ControllerVector2& joysticright(const CSteamInputService_ControllerAxesStateChange_Notification* msg);
  static void set_has_joysticright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ControllerVector2& trackpad_left(const CSteamInputService_ControllerAxesStateChange_Notification* msg);
  static void set_has_trackpad_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ControllerVector2& trackpad_right(const CSteamInputService_ControllerAxesStateChange_Notification* msg);
  static void set_has_trackpad_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ControllerVector2& trackpad_center(const CSteamInputService_ControllerAxesStateChange_Notification* msg);
  static void set_has_trackpad_center(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trackpad_pressure_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_trackpad_pressure_right(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trigger_left(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trigger_right(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::ControllerVector2&
CSteamInputService_ControllerAxesStateChange_Notification::_Internal::joysticleft(const CSteamInputService_ControllerAxesStateChange_Notification* msg) {
  return *msg->joysticleft_;
}
const ::ControllerVector2&
CSteamInputService_ControllerAxesStateChange_Notification::_Internal::joysticright(const CSteamInputService_ControllerAxesStateChange_Notification* msg) {
  return *msg->joysticright_;
}
const ::ControllerVector2&
CSteamInputService_ControllerAxesStateChange_Notification::_Internal::trackpad_left(const CSteamInputService_ControllerAxesStateChange_Notification* msg) {
  return *msg->trackpad_left_;
}
const ::ControllerVector2&
CSteamInputService_ControllerAxesStateChange_Notification::_Internal::trackpad_right(const CSteamInputService_ControllerAxesStateChange_Notification* msg) {
  return *msg->trackpad_right_;
}
const ::ControllerVector2&
CSteamInputService_ControllerAxesStateChange_Notification::_Internal::trackpad_center(const CSteamInputService_ControllerAxesStateChange_Notification* msg) {
  return *msg->trackpad_center_;
}
CSteamInputService_ControllerAxesStateChange_Notification::CSteamInputService_ControllerAxesStateChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_ControllerAxesStateChange_Notification)
}
CSteamInputService_ControllerAxesStateChange_Notification::CSteamInputService_ControllerAxesStateChange_Notification(const CSteamInputService_ControllerAxesStateChange_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_joysticleft()) {
    joysticleft_ = new ::ControllerVector2(*from.joysticleft_);
  } else {
    joysticleft_ = nullptr;
  }
  if (from._internal_has_joysticright()) {
    joysticright_ = new ::ControllerVector2(*from.joysticright_);
  } else {
    joysticright_ = nullptr;
  }
  if (from._internal_has_trackpad_left()) {
    trackpad_left_ = new ::ControllerVector2(*from.trackpad_left_);
  } else {
    trackpad_left_ = nullptr;
  }
  if (from._internal_has_trackpad_right()) {
    trackpad_right_ = new ::ControllerVector2(*from.trackpad_right_);
  } else {
    trackpad_right_ = nullptr;
  }
  if (from._internal_has_trackpad_center()) {
    trackpad_center_ = new ::ControllerVector2(*from.trackpad_center_);
  } else {
    trackpad_center_ = nullptr;
  }
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_right_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(trigger_right_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_ControllerAxesStateChange_Notification)
}

void CSteamInputService_ControllerAxesStateChange_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&joysticleft_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trigger_right_) -
    reinterpret_cast<char*>(&joysticleft_)) + sizeof(trigger_right_));
}

CSteamInputService_ControllerAxesStateChange_Notification::~CSteamInputService_ControllerAxesStateChange_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_ControllerAxesStateChange_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_ControllerAxesStateChange_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete joysticleft_;
  if (this != internal_default_instance()) delete joysticright_;
  if (this != internal_default_instance()) delete trackpad_left_;
  if (this != internal_default_instance()) delete trackpad_right_;
  if (this != internal_default_instance()) delete trackpad_center_;
}

void CSteamInputService_ControllerAxesStateChange_Notification::ArenaDtor(void* object) {
  CSteamInputService_ControllerAxesStateChange_Notification* _this = reinterpret_cast< CSteamInputService_ControllerAxesStateChange_Notification* >(object);
  (void)_this;
}
void CSteamInputService_ControllerAxesStateChange_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_ControllerAxesStateChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_ControllerAxesStateChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_ControllerAxesStateChange_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(joysticleft_ != nullptr);
      joysticleft_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(joysticright_ != nullptr);
      joysticright_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trackpad_left_ != nullptr);
      trackpad_left_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trackpad_right_ != nullptr);
      trackpad_right_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(trackpad_center_ != nullptr);
      trackpad_center_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trackpad_pressure_right_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(trackpad_pressure_right_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&trigger_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_right_) -
        reinterpret_cast<char*>(&trigger_left_)) + sizeof(trigger_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_ControllerAxesStateChange_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector2 joysticleft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_joysticleft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector2 joysticright = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_joysticright(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector2 trackpad_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trackpad_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector2 trackpad_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trackpad_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector2 trackpad_center = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trackpad_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float trackpad_pressure_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_trackpad_pressure_left(&has_bits);
          trackpad_pressure_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float trackpad_pressure_right = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_trackpad_pressure_right(&has_bits);
          trackpad_pressure_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float trigger_left = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_trigger_left(&has_bits);
          trigger_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float trigger_right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_trigger_right(&has_bits);
          trigger_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_ControllerAxesStateChange_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_ControllerAxesStateChange_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional .ControllerVector2 joysticleft = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::joysticleft(this), target, stream);
  }

  // optional .ControllerVector2 joysticright = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::joysticright(this), target, stream);
  }

  // optional .ControllerVector2 trackpad_left = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trackpad_left(this), target, stream);
  }

  // optional .ControllerVector2 trackpad_right = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trackpad_right(this), target, stream);
  }

  // optional .ControllerVector2 trackpad_center = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::trackpad_center(this), target, stream);
  }

  // optional float trackpad_pressure_left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_trackpad_pressure_left(), target);
  }

  // optional float trackpad_pressure_right = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_trackpad_pressure_right(), target);
  }

  // optional float trigger_left = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_trigger_left(), target);
  }

  // optional float trigger_right = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_trigger_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_ControllerAxesStateChange_Notification)
  return target;
}

size_t CSteamInputService_ControllerAxesStateChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_ControllerAxesStateChange_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ControllerVector2 joysticleft = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joysticleft_);
    }

    // optional .ControllerVector2 joysticright = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joysticright_);
    }

    // optional .ControllerVector2 trackpad_left = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trackpad_left_);
    }

    // optional .ControllerVector2 trackpad_right = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trackpad_right_);
    }

    // optional .ControllerVector2 trackpad_center = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trackpad_center_);
    }

    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional float trackpad_pressure_left = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float trackpad_pressure_right = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float trigger_left = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float trigger_right = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_ControllerAxesStateChange_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_ControllerAxesStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_ControllerAxesStateChange_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_ControllerAxesStateChange_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_ControllerAxesStateChange_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_ControllerAxesStateChange_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_ControllerAxesStateChange_Notification::MergeFrom(const CSteamInputService_ControllerAxesStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_ControllerAxesStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_joysticleft()->::ControllerVector2::MergeFrom(from._internal_joysticleft());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_joysticright()->::ControllerVector2::MergeFrom(from._internal_joysticright());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trackpad_left()->::ControllerVector2::MergeFrom(from._internal_trackpad_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_trackpad_right()->::ControllerVector2::MergeFrom(from._internal_trackpad_right());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_trackpad_center()->::ControllerVector2::MergeFrom(from._internal_trackpad_center());
    }
    if (cached_has_bits & 0x00000020u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      trackpad_pressure_left_ = from.trackpad_pressure_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      trackpad_pressure_right_ = from.trackpad_pressure_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      trigger_left_ = from.trigger_left_;
    }
    if (cached_has_bits & 0x00000200u) {
      trigger_right_ = from.trigger_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_ControllerAxesStateChange_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_ControllerAxesStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_ControllerAxesStateChange_Notification::CopyFrom(const CSteamInputService_ControllerAxesStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_ControllerAxesStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_ControllerAxesStateChange_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_ControllerAxesStateChange_Notification::InternalSwap(CSteamInputService_ControllerAxesStateChange_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerAxesStateChange_Notification, trigger_right_)
      + sizeof(CSteamInputService_ControllerAxesStateChange_Notification::trigger_right_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerAxesStateChange_Notification, joysticleft_)>(
          reinterpret_cast<char*>(&joysticleft_),
          reinterpret_cast<char*>(&other->joysticleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_ControllerAxesStateChange_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_GyroQuaternionChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_GyroQuaternionChanged_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imu_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ControllerQuaternion& gyro_raw_quaternion(const CSteamInputService_GyroQuaternionChanged_Notification* msg);
  static void set_has_gyro_raw_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ControllerQuaternion& gyro_filtered_quaternion(const CSteamInputService_GyroQuaternionChanged_Notification* msg);
  static void set_has_gyro_filtered_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imu_sensor_delta_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ControllerQuaternion&
CSteamInputService_GyroQuaternionChanged_Notification::_Internal::gyro_raw_quaternion(const CSteamInputService_GyroQuaternionChanged_Notification* msg) {
  return *msg->gyro_raw_quaternion_;
}
const ::ControllerQuaternion&
CSteamInputService_GyroQuaternionChanged_Notification::_Internal::gyro_filtered_quaternion(const CSteamInputService_GyroQuaternionChanged_Notification* msg) {
  return *msg->gyro_filtered_quaternion_;
}
CSteamInputService_GyroQuaternionChanged_Notification::CSteamInputService_GyroQuaternionChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_GyroQuaternionChanged_Notification)
}
CSteamInputService_GyroQuaternionChanged_Notification::CSteamInputService_GyroQuaternionChanged_Notification(const CSteamInputService_GyroQuaternionChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gyro_raw_quaternion()) {
    gyro_raw_quaternion_ = new ::ControllerQuaternion(*from.gyro_raw_quaternion_);
  } else {
    gyro_raw_quaternion_ = nullptr;
  }
  if (from._internal_has_gyro_filtered_quaternion()) {
    gyro_filtered_quaternion_ = new ::ControllerQuaternion(*from.gyro_filtered_quaternion_);
  } else {
    gyro_filtered_quaternion_ = nullptr;
  }
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_sensor_delta_time_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_sensor_delta_time_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_GyroQuaternionChanged_Notification)
}

void CSteamInputService_GyroQuaternionChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gyro_raw_quaternion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imu_sensor_delta_time_) -
    reinterpret_cast<char*>(&gyro_raw_quaternion_)) + sizeof(imu_sensor_delta_time_));
}

CSteamInputService_GyroQuaternionChanged_Notification::~CSteamInputService_GyroQuaternionChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_GyroQuaternionChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_GyroQuaternionChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gyro_raw_quaternion_;
  if (this != internal_default_instance()) delete gyro_filtered_quaternion_;
}

void CSteamInputService_GyroQuaternionChanged_Notification::ArenaDtor(void* object) {
  CSteamInputService_GyroQuaternionChanged_Notification* _this = reinterpret_cast< CSteamInputService_GyroQuaternionChanged_Notification* >(object);
  (void)_this;
}
void CSteamInputService_GyroQuaternionChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_GyroQuaternionChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_GyroQuaternionChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_GyroQuaternionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gyro_raw_quaternion_ != nullptr);
      gyro_raw_quaternion_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gyro_filtered_quaternion_ != nullptr);
      gyro_filtered_quaternion_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_sensor_delta_time_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_sensor_delta_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_GyroQuaternionChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 imu_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_imu_index(&has_bits);
          imu_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerQuaternion gyro_raw_quaternion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyro_raw_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerQuaternion gyro_filtered_quaternion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyro_filtered_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 imu_sensor_delta_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_imu_sensor_delta_time(&has_bits);
          imu_sensor_delta_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_GyroQuaternionChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_GyroQuaternionChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional uint32 imu_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_imu_index(), target);
  }

  // optional .ControllerQuaternion gyro_raw_quaternion = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gyro_raw_quaternion(this), target, stream);
  }

  // optional .ControllerQuaternion gyro_filtered_quaternion = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gyro_filtered_quaternion(this), target, stream);
  }

  // optional uint32 imu_sensor_delta_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_imu_sensor_delta_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_GyroQuaternionChanged_Notification)
  return target;
}

size_t CSteamInputService_GyroQuaternionChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_GyroQuaternionChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ControllerQuaternion gyro_raw_quaternion = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gyro_raw_quaternion_);
    }

    // optional .ControllerQuaternion gyro_filtered_quaternion = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gyro_filtered_quaternion_);
    }

    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional uint32 imu_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_imu_index());
    }

    // optional uint32 imu_sensor_delta_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_imu_sensor_delta_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_GyroQuaternionChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_GyroQuaternionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_GyroQuaternionChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_GyroQuaternionChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_GyroQuaternionChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_GyroQuaternionChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_GyroQuaternionChanged_Notification::MergeFrom(const CSteamInputService_GyroQuaternionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_GyroQuaternionChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gyro_raw_quaternion()->::ControllerQuaternion::MergeFrom(from._internal_gyro_raw_quaternion());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gyro_filtered_quaternion()->::ControllerQuaternion::MergeFrom(from._internal_gyro_filtered_quaternion());
    }
    if (cached_has_bits & 0x00000004u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      imu_index_ = from.imu_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      imu_sensor_delta_time_ = from.imu_sensor_delta_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_GyroQuaternionChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_GyroQuaternionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_GyroQuaternionChanged_Notification::CopyFrom(const CSteamInputService_GyroQuaternionChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_GyroQuaternionChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_GyroQuaternionChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_GyroQuaternionChanged_Notification::InternalSwap(CSteamInputService_GyroQuaternionChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroQuaternionChanged_Notification, imu_sensor_delta_time_)
      + sizeof(CSteamInputService_GyroQuaternionChanged_Notification::imu_sensor_delta_time_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroQuaternionChanged_Notification, gyro_raw_quaternion_)>(
          reinterpret_cast<char*>(&gyro_raw_quaternion_),
          reinterpret_cast<char*>(&other->gyro_raw_quaternion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_GyroQuaternionChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_GyroSpeedChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_GyroSpeedChanged_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imu_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ControllerGyroEulerAngles& gyro_raw_speed(const CSteamInputService_GyroSpeedChanged_Notification* msg);
  static void set_has_gyro_raw_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ControllerGyroEulerAngles& gyro_filtered_speed(const CSteamInputService_GyroSpeedChanged_Notification* msg);
  static void set_has_gyro_filtered_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ControllerGyroEulerAngles&
CSteamInputService_GyroSpeedChanged_Notification::_Internal::gyro_raw_speed(const CSteamInputService_GyroSpeedChanged_Notification* msg) {
  return *msg->gyro_raw_speed_;
}
const ::ControllerGyroEulerAngles&
CSteamInputService_GyroSpeedChanged_Notification::_Internal::gyro_filtered_speed(const CSteamInputService_GyroSpeedChanged_Notification* msg) {
  return *msg->gyro_filtered_speed_;
}
CSteamInputService_GyroSpeedChanged_Notification::CSteamInputService_GyroSpeedChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_GyroSpeedChanged_Notification)
}
CSteamInputService_GyroSpeedChanged_Notification::CSteamInputService_GyroSpeedChanged_Notification(const CSteamInputService_GyroSpeedChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gyro_raw_speed()) {
    gyro_raw_speed_ = new ::ControllerGyroEulerAngles(*from.gyro_raw_speed_);
  } else {
    gyro_raw_speed_ = nullptr;
  }
  if (from._internal_has_gyro_filtered_speed()) {
    gyro_filtered_speed_ = new ::ControllerGyroEulerAngles(*from.gyro_filtered_speed_);
  } else {
    gyro_filtered_speed_ = nullptr;
  }
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_index_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_index_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_GyroSpeedChanged_Notification)
}

void CSteamInputService_GyroSpeedChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gyro_raw_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imu_index_) -
    reinterpret_cast<char*>(&gyro_raw_speed_)) + sizeof(imu_index_));
}

CSteamInputService_GyroSpeedChanged_Notification::~CSteamInputService_GyroSpeedChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_GyroSpeedChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_GyroSpeedChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gyro_raw_speed_;
  if (this != internal_default_instance()) delete gyro_filtered_speed_;
}

void CSteamInputService_GyroSpeedChanged_Notification::ArenaDtor(void* object) {
  CSteamInputService_GyroSpeedChanged_Notification* _this = reinterpret_cast< CSteamInputService_GyroSpeedChanged_Notification* >(object);
  (void)_this;
}
void CSteamInputService_GyroSpeedChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_GyroSpeedChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_GyroSpeedChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_GyroSpeedChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gyro_raw_speed_ != nullptr);
      gyro_raw_speed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gyro_filtered_speed_ != nullptr);
      gyro_filtered_speed_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_index_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_GyroSpeedChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 imu_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_imu_index(&has_bits);
          imu_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerGyroEulerAngles gyro_raw_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyro_raw_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerGyroEulerAngles gyro_filtered_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyro_filtered_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_GyroSpeedChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_GyroSpeedChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional uint32 imu_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_imu_index(), target);
  }

  // optional .ControllerGyroEulerAngles gyro_raw_speed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gyro_raw_speed(this), target, stream);
  }

  // optional .ControllerGyroEulerAngles gyro_filtered_speed = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gyro_filtered_speed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_GyroSpeedChanged_Notification)
  return target;
}

size_t CSteamInputService_GyroSpeedChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_GyroSpeedChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ControllerGyroEulerAngles gyro_raw_speed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gyro_raw_speed_);
    }

    // optional .ControllerGyroEulerAngles gyro_filtered_speed = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gyro_filtered_speed_);
    }

    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional uint32 imu_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_imu_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_GyroSpeedChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_GyroSpeedChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_GyroSpeedChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_GyroSpeedChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_GyroSpeedChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_GyroSpeedChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_GyroSpeedChanged_Notification::MergeFrom(const CSteamInputService_GyroSpeedChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_GyroSpeedChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gyro_raw_speed()->::ControllerGyroEulerAngles::MergeFrom(from._internal_gyro_raw_speed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gyro_filtered_speed()->::ControllerGyroEulerAngles::MergeFrom(from._internal_gyro_filtered_speed());
    }
    if (cached_has_bits & 0x00000004u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      imu_index_ = from.imu_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_GyroSpeedChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_GyroSpeedChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_GyroSpeedChanged_Notification::CopyFrom(const CSteamInputService_GyroSpeedChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_GyroSpeedChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_GyroSpeedChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_GyroSpeedChanged_Notification::InternalSwap(CSteamInputService_GyroSpeedChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroSpeedChanged_Notification, imu_index_)
      + sizeof(CSteamInputService_GyroSpeedChanged_Notification::imu_index_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroSpeedChanged_Notification, gyro_raw_speed_)>(
          reinterpret_cast<char*>(&gyro_raw_speed_),
          reinterpret_cast<char*>(&other->gyro_raw_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_GyroSpeedChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_GyroAccelerometerChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_GyroAccelerometerChanged_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imu_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ControllerVector3& acceleromter_1g(const CSteamInputService_GyroAccelerometerChanged_Notification* msg);
  static void set_has_acceleromter_1g(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ControllerVector3& trusted_gravity_1g(const CSteamInputService_GyroAccelerometerChanged_Notification* msg);
  static void set_has_trusted_gravity_1g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ControllerVector3&
CSteamInputService_GyroAccelerometerChanged_Notification::_Internal::acceleromter_1g(const CSteamInputService_GyroAccelerometerChanged_Notification* msg) {
  return *msg->acceleromter_1g_;
}
const ::ControllerVector3&
CSteamInputService_GyroAccelerometerChanged_Notification::_Internal::trusted_gravity_1g(const CSteamInputService_GyroAccelerometerChanged_Notification* msg) {
  return *msg->trusted_gravity_1g_;
}
CSteamInputService_GyroAccelerometerChanged_Notification::CSteamInputService_GyroAccelerometerChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_GyroAccelerometerChanged_Notification)
}
CSteamInputService_GyroAccelerometerChanged_Notification::CSteamInputService_GyroAccelerometerChanged_Notification(const CSteamInputService_GyroAccelerometerChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleromter_1g()) {
    acceleromter_1g_ = new ::ControllerVector3(*from.acceleromter_1g_);
  } else {
    acceleromter_1g_ = nullptr;
  }
  if (from._internal_has_trusted_gravity_1g()) {
    trusted_gravity_1g_ = new ::ControllerVector3(*from.trusted_gravity_1g_);
  } else {
    trusted_gravity_1g_ = nullptr;
  }
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_index_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_index_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_GyroAccelerometerChanged_Notification)
}

void CSteamInputService_GyroAccelerometerChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acceleromter_1g_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imu_index_) -
    reinterpret_cast<char*>(&acceleromter_1g_)) + sizeof(imu_index_));
}

CSteamInputService_GyroAccelerometerChanged_Notification::~CSteamInputService_GyroAccelerometerChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_GyroAccelerometerChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_GyroAccelerometerChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete acceleromter_1g_;
  if (this != internal_default_instance()) delete trusted_gravity_1g_;
}

void CSteamInputService_GyroAccelerometerChanged_Notification::ArenaDtor(void* object) {
  CSteamInputService_GyroAccelerometerChanged_Notification* _this = reinterpret_cast< CSteamInputService_GyroAccelerometerChanged_Notification* >(object);
  (void)_this;
}
void CSteamInputService_GyroAccelerometerChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_GyroAccelerometerChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_GyroAccelerometerChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(acceleromter_1g_ != nullptr);
      acceleromter_1g_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trusted_gravity_1g_ != nullptr);
      trusted_gravity_1g_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_index_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(imu_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_GyroAccelerometerChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 imu_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_imu_index(&has_bits);
          imu_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector3 acceleromter_1g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleromter_1g(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ControllerVector3 trusted_gravity_1g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusted_gravity_1g(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_GyroAccelerometerChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional uint32 imu_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_imu_index(), target);
  }

  // optional .ControllerVector3 acceleromter_1g = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleromter_1g(this), target, stream);
  }

  // optional .ControllerVector3 trusted_gravity_1g = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trusted_gravity_1g(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_GyroAccelerometerChanged_Notification)
  return target;
}

size_t CSteamInputService_GyroAccelerometerChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ControllerVector3 acceleromter_1g = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleromter_1g_);
    }

    // optional .ControllerVector3 trusted_gravity_1g = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trusted_gravity_1g_);
    }

    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional uint32 imu_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_imu_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_GyroAccelerometerChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_GyroAccelerometerChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_GyroAccelerometerChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_GyroAccelerometerChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_GyroAccelerometerChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_GyroAccelerometerChanged_Notification::MergeFrom(const CSteamInputService_GyroAccelerometerChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_acceleromter_1g()->::ControllerVector3::MergeFrom(from._internal_acceleromter_1g());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trusted_gravity_1g()->::ControllerVector3::MergeFrom(from._internal_trusted_gravity_1g());
    }
    if (cached_has_bits & 0x00000004u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      imu_index_ = from.imu_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_GyroAccelerometerChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_GyroAccelerometerChanged_Notification::CopyFrom(const CSteamInputService_GyroAccelerometerChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_GyroAccelerometerChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_GyroAccelerometerChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_GyroAccelerometerChanged_Notification::InternalSwap(CSteamInputService_GyroAccelerometerChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroAccelerometerChanged_Notification, imu_index_)
      + sizeof(CSteamInputService_GyroAccelerometerChanged_Notification::imu_index_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroAccelerometerChanged_Notification, acceleromter_1g_)>(
          reinterpret_cast<char*>(&acceleromter_1g_),
          reinterpret_cast<char*>(&other->acceleromter_1g_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_GyroAccelerometerChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_GyroCalibration_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_GyroCalibration_Notification>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imu_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acceleromter_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gyroscope_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_calibration_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSteamInputService_GyroCalibration_Notification::CSteamInputService_GyroCalibration_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_GyroCalibration_Notification)
}
CSteamInputService_GyroCalibration_Notification::CSteamInputService_GyroCalibration_Notification(const CSteamInputService_GyroCalibration_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&calibration_progress_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(calibration_progress_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_GyroCalibration_Notification)
}

void CSteamInputService_GyroCalibration_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calibration_progress_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(calibration_progress_));
}

CSteamInputService_GyroCalibration_Notification::~CSteamInputService_GyroCalibration_Notification() {
  // @@protoc_insertion_point(destructor:CSteamInputService_GyroCalibration_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_GyroCalibration_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamInputService_GyroCalibration_Notification::ArenaDtor(void* object) {
  CSteamInputService_GyroCalibration_Notification* _this = reinterpret_cast< CSteamInputService_GyroCalibration_Notification* >(object);
  (void)_this;
}
void CSteamInputService_GyroCalibration_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_GyroCalibration_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_GyroCalibration_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_GyroCalibration_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calibration_progress_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(calibration_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_GyroCalibration_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 imu_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_imu_index(&has_bits);
          imu_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float acceleromter_noise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_acceleromter_noise(&has_bits);
          acceleromter_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gyroscope_noise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_gyroscope_noise(&has_bits);
          gyroscope_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float calibration_progress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_calibration_progress(&has_bits);
          calibration_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_GyroCalibration_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_GyroCalibration_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional uint32 imu_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_imu_index(), target);
  }

  // optional float acceleromter_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acceleromter_noise(), target);
  }

  // optional float gyroscope_noise = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_gyroscope_noise(), target);
  }

  // optional float calibration_progress = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_calibration_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_GyroCalibration_Notification)
  return target;
}

size_t CSteamInputService_GyroCalibration_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_GyroCalibration_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional uint32 imu_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_imu_index());
    }

    // optional float acceleromter_noise = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float gyroscope_noise = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float calibration_progress = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_GyroCalibration_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_GyroCalibration_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_GyroCalibration_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_GyroCalibration_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_GyroCalibration_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_GyroCalibration_Notification)
    MergeFrom(*source);
  }
}

void CSteamInputService_GyroCalibration_Notification::MergeFrom(const CSteamInputService_GyroCalibration_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_GyroCalibration_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      imu_index_ = from.imu_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceleromter_noise_ = from.acceleromter_noise_;
    }
    if (cached_has_bits & 0x00000008u) {
      gyroscope_noise_ = from.gyroscope_noise_;
    }
    if (cached_has_bits & 0x00000010u) {
      calibration_progress_ = from.calibration_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_GyroCalibration_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_GyroCalibration_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_GyroCalibration_Notification::CopyFrom(const CSteamInputService_GyroCalibration_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_GyroCalibration_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_GyroCalibration_Notification::IsInitialized() const {
  return true;
}

void CSteamInputService_GyroCalibration_Notification::InternalSwap(CSteamInputService_GyroCalibration_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroCalibration_Notification, calibration_progress_)
      + sizeof(CSteamInputService_GyroCalibration_Notification::calibration_progress_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_GyroCalibration_Notification, controller_index_)>(
          reinterpret_cast<char*>(&controller_index_),
          reinterpret_cast<char*>(&other->controller_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_GyroCalibration_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_ControllerStateFlow_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamInputService_ControllerStateFlow_Request>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flow_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamInputService_ControllerStateFlow_Request::CSteamInputService_ControllerStateFlow_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_ControllerStateFlow_Request)
}
CSteamInputService_ControllerStateFlow_Request::CSteamInputService_ControllerStateFlow_Request(const CSteamInputService_ControllerStateFlow_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_index_, &from.controller_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flow_mode_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(flow_mode_));
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_ControllerStateFlow_Request)
}

void CSteamInputService_ControllerStateFlow_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flow_mode_) -
    reinterpret_cast<char*>(&controller_index_)) + sizeof(flow_mode_));
}

CSteamInputService_ControllerStateFlow_Request::~CSteamInputService_ControllerStateFlow_Request() {
  // @@protoc_insertion_point(destructor:CSteamInputService_ControllerStateFlow_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_ControllerStateFlow_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamInputService_ControllerStateFlow_Request::ArenaDtor(void* object) {
  CSteamInputService_ControllerStateFlow_Request* _this = reinterpret_cast< CSteamInputService_ControllerStateFlow_Request* >(object);
  (void)_this;
}
void CSteamInputService_ControllerStateFlow_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_ControllerStateFlow_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_ControllerStateFlow_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_ControllerStateFlow_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&controller_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flow_mode_) -
        reinterpret_cast<char*>(&controller_index_)) + sizeof(flow_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_ControllerStateFlow_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flow_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flow_mode(&has_bits);
          flow_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_ControllerStateFlow_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_ControllerStateFlow_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional uint32 flow_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flow_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_ControllerStateFlow_Request)
  return target;
}

size_t CSteamInputService_ControllerStateFlow_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_ControllerStateFlow_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 controller_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_index());
    }

    // optional uint32 flow_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flow_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_ControllerStateFlow_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_ControllerStateFlow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_ControllerStateFlow_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_ControllerStateFlow_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_ControllerStateFlow_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_ControllerStateFlow_Request)
    MergeFrom(*source);
  }
}

void CSteamInputService_ControllerStateFlow_Request::MergeFrom(const CSteamInputService_ControllerStateFlow_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_ControllerStateFlow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      controller_index_ = from.controller_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      flow_mode_ = from.flow_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamInputService_ControllerStateFlow_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_ControllerStateFlow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_ControllerStateFlow_Request::CopyFrom(const CSteamInputService_ControllerStateFlow_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_ControllerStateFlow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_ControllerStateFlow_Request::IsInitialized() const {
  return true;
}

void CSteamInputService_ControllerStateFlow_Request::InternalSwap(CSteamInputService_ControllerStateFlow_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerStateFlow_Request, flow_mode_)
      + sizeof(CSteamInputService_ControllerStateFlow_Request::flow_mode_)
      - PROTOBUF_FIELD_OFFSET(CSteamInputService_ControllerStateFlow_Request, controller_index_)>(
          reinterpret_cast<char*>(&controller_index_),
          reinterpret_cast<char*>(&other->controller_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_ControllerStateFlow_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamInputService_ControllerStateFlow_Response::_Internal {
 public:
};

CSteamInputService_ControllerStateFlow_Response::CSteamInputService_ControllerStateFlow_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamInputService_ControllerStateFlow_Response)
}
CSteamInputService_ControllerStateFlow_Response::CSteamInputService_ControllerStateFlow_Response(const CSteamInputService_ControllerStateFlow_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamInputService_ControllerStateFlow_Response)
}

void CSteamInputService_ControllerStateFlow_Response::SharedCtor() {
}

CSteamInputService_ControllerStateFlow_Response::~CSteamInputService_ControllerStateFlow_Response() {
  // @@protoc_insertion_point(destructor:CSteamInputService_ControllerStateFlow_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamInputService_ControllerStateFlow_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamInputService_ControllerStateFlow_Response::ArenaDtor(void* object) {
  CSteamInputService_ControllerStateFlow_Response* _this = reinterpret_cast< CSteamInputService_ControllerStateFlow_Response* >(object);
  (void)_this;
}
void CSteamInputService_ControllerStateFlow_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamInputService_ControllerStateFlow_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamInputService_ControllerStateFlow_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamInputService_ControllerStateFlow_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamInputService_ControllerStateFlow_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamInputService_ControllerStateFlow_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamInputService_ControllerStateFlow_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamInputService_ControllerStateFlow_Response)
  return target;
}

size_t CSteamInputService_ControllerStateFlow_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamInputService_ControllerStateFlow_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamInputService_ControllerStateFlow_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamInputService_ControllerStateFlow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamInputService_ControllerStateFlow_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamInputService_ControllerStateFlow_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamInputService_ControllerStateFlow_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamInputService_ControllerStateFlow_Response)
    MergeFrom(*source);
  }
}

void CSteamInputService_ControllerStateFlow_Response::MergeFrom(const CSteamInputService_ControllerStateFlow_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamInputService_ControllerStateFlow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamInputService_ControllerStateFlow_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamInputService_ControllerStateFlow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamInputService_ControllerStateFlow_Response::CopyFrom(const CSteamInputService_ControllerStateFlow_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamInputService_ControllerStateFlow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamInputService_ControllerStateFlow_Response::IsInitialized() const {
  return true;
}

void CSteamInputService_ControllerStateFlow_Response::InternalSwap(CSteamInputService_ControllerStateFlow_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamInputService_ControllerStateFlow_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SteamInputManager::~SteamInputManager() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamInputManager::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteaminput_2eproto);
  return file_level_service_descriptors_webuimessages_5fsteaminput_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamInputManager::GetDescriptor() {
  return descriptor();
}

void SteamInputManager::NotifyButtonStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_ControllerButtonStateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyButtonStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::NotifyAxesStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_ControllerAxesStateChange_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAxesStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::NotifyGyroQuaternionStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_GyroQuaternionChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyGyroQuaternionStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::NotifyGyroSpeedStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_GyroSpeedChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyGyroSpeedStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::NotifyGyroAccelerometerStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_GyroAccelerometerChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyGyroAccelerometerStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::NotifyGyroCalibrationStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_GyroCalibration_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyGyroCalibrationStateChanged() not implemented.");
  done->Run();
}

void SteamInputManager::StartControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_ControllerStateFlow_Request*,
                         ::CSteamInputService_ControllerStateFlow_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartControllerStateFlow() not implemented.");
  done->Run();
}

void SteamInputManager::EndControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamInputService_ControllerStateFlow_Request*,
                         ::CSteamInputService_ControllerStateFlow_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndControllerStateFlow() not implemented.");
  done->Run();
}

void SteamInputManager::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fsteaminput_2eproto[0]);
  switch(method->index()) {
    case 0:
      NotifyButtonStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_ControllerButtonStateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyAxesStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_ControllerAxesStateChange_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyGyroQuaternionStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_GyroQuaternionChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 3:
      NotifyGyroSpeedStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_GyroSpeedChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 4:
      NotifyGyroAccelerometerStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_GyroAccelerometerChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 5:
      NotifyGyroCalibrationStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_GyroCalibration_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 6:
      StartControllerStateFlow(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_ControllerStateFlow_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamInputService_ControllerStateFlow_Response*>(
                 response),
             done);
      break;
    case 7:
      EndControllerStateFlow(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamInputService_ControllerStateFlow_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamInputService_ControllerStateFlow_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamInputManager::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamInputService_ControllerButtonStateChanged_Notification::default_instance();
    case 1:
      return ::CSteamInputService_ControllerAxesStateChange_Notification::default_instance();
    case 2:
      return ::CSteamInputService_GyroQuaternionChanged_Notification::default_instance();
    case 3:
      return ::CSteamInputService_GyroSpeedChanged_Notification::default_instance();
    case 4:
      return ::CSteamInputService_GyroAccelerometerChanged_Notification::default_instance();
    case 5:
      return ::CSteamInputService_GyroCalibration_Notification::default_instance();
    case 6:
      return ::CSteamInputService_ControllerStateFlow_Request::default_instance();
    case 7:
      return ::CSteamInputService_ControllerStateFlow_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamInputManager::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::WebUINoResponse::default_instance();
    case 1:
      return ::WebUINoResponse::default_instance();
    case 2:
      return ::WebUINoResponse::default_instance();
    case 3:
      return ::WebUINoResponse::default_instance();
    case 4:
      return ::WebUINoResponse::default_instance();
    case 5:
      return ::WebUINoResponse::default_instance();
    case 6:
      return ::CSteamInputService_ControllerStateFlow_Response::default_instance();
    case 7:
      return ::CSteamInputService_ControllerStateFlow_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamInputManager_Stub::SteamInputManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamInputManager_Stub::SteamInputManager_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamInputManager_Stub::~SteamInputManager_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamInputManager_Stub::NotifyButtonStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_ControllerButtonStateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamInputManager_Stub::NotifyAxesStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_ControllerAxesStateChange_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SteamInputManager_Stub::NotifyGyroQuaternionStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_GyroQuaternionChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SteamInputManager_Stub::NotifyGyroSpeedStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_GyroSpeedChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SteamInputManager_Stub::NotifyGyroAccelerometerStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_GyroAccelerometerChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void SteamInputManager_Stub::NotifyGyroCalibrationStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_GyroCalibration_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void SteamInputManager_Stub::StartControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_ControllerStateFlow_Request* request,
                              ::CSteamInputService_ControllerStateFlow_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void SteamInputManager_Stub::EndControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamInputService_ControllerStateFlow_Request* request,
                              ::CSteamInputService_ControllerStateFlow_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSteamInputService_ControllerButtonStateChanged_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_ControllerButtonStateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_ControllerButtonStateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerVector2* Arena::CreateMaybeMessage< ::ControllerVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerVector3* Arena::CreateMaybeMessage< ::ControllerVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerQuaternion* Arena::CreateMaybeMessage< ::ControllerQuaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerQuaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerGyroEulerAngles* Arena::CreateMaybeMessage< ::ControllerGyroEulerAngles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerGyroEulerAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_ControllerAxesStateChange_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_ControllerAxesStateChange_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_ControllerAxesStateChange_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_GyroQuaternionChanged_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_GyroQuaternionChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_GyroQuaternionChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_GyroSpeedChanged_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_GyroSpeedChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_GyroSpeedChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_GyroAccelerometerChanged_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_GyroAccelerometerChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_GyroAccelerometerChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_GyroCalibration_Notification* Arena::CreateMaybeMessage< ::CSteamInputService_GyroCalibration_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_GyroCalibration_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_ControllerStateFlow_Request* Arena::CreateMaybeMessage< ::CSteamInputService_ControllerStateFlow_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_ControllerStateFlow_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamInputService_ControllerStateFlow_Response* Arena::CreateMaybeMessage< ::CSteamInputService_ControllerStateFlow_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamInputService_ControllerStateFlow_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
