// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steaminput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteaminput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteaminput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fsteaminput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fsteaminput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteaminput_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(int index);
class CSteamInputService_ControllerAxesStateChange_Notification;
struct CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal;
extern CSteamInputService_ControllerAxesStateChange_NotificationDefaultTypeInternal _CSteamInputService_ControllerAxesStateChange_Notification_default_instance_;
class CSteamInputService_ControllerButtonStateChanged_Notification;
struct CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal;
extern CSteamInputService_ControllerButtonStateChanged_NotificationDefaultTypeInternal _CSteamInputService_ControllerButtonStateChanged_Notification_default_instance_;
class CSteamInputService_ControllerStateFlow_Request;
struct CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal;
extern CSteamInputService_ControllerStateFlow_RequestDefaultTypeInternal _CSteamInputService_ControllerStateFlow_Request_default_instance_;
class CSteamInputService_ControllerStateFlow_Response;
struct CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal;
extern CSteamInputService_ControllerStateFlow_ResponseDefaultTypeInternal _CSteamInputService_ControllerStateFlow_Response_default_instance_;
class CSteamInputService_GyroAccelerometerChanged_Notification;
struct CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal;
extern CSteamInputService_GyroAccelerometerChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroAccelerometerChanged_Notification_default_instance_;
class CSteamInputService_GyroCalibration_Notification;
struct CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal;
extern CSteamInputService_GyroCalibration_NotificationDefaultTypeInternal _CSteamInputService_GyroCalibration_Notification_default_instance_;
class CSteamInputService_GyroQuaternionChanged_Notification;
struct CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal;
extern CSteamInputService_GyroQuaternionChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroQuaternionChanged_Notification_default_instance_;
class CSteamInputService_GyroSpeedChanged_Notification;
struct CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal;
extern CSteamInputService_GyroSpeedChanged_NotificationDefaultTypeInternal _CSteamInputService_GyroSpeedChanged_Notification_default_instance_;
class ControllerGyroEulerAngles;
struct ControllerGyroEulerAnglesDefaultTypeInternal;
extern ControllerGyroEulerAnglesDefaultTypeInternal _ControllerGyroEulerAngles_default_instance_;
class ControllerQuaternion;
struct ControllerQuaternionDefaultTypeInternal;
extern ControllerQuaternionDefaultTypeInternal _ControllerQuaternion_default_instance_;
class ControllerVector2;
struct ControllerVector2DefaultTypeInternal;
extern ControllerVector2DefaultTypeInternal _ControllerVector2_default_instance_;
class ControllerVector3;
struct ControllerVector3DefaultTypeInternal;
extern ControllerVector3DefaultTypeInternal _ControllerVector3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSteamInputService_ControllerAxesStateChange_Notification* Arena::CreateMaybeMessage<::CSteamInputService_ControllerAxesStateChange_Notification>(Arena*);
template<> ::CSteamInputService_ControllerButtonStateChanged_Notification* Arena::CreateMaybeMessage<::CSteamInputService_ControllerButtonStateChanged_Notification>(Arena*);
template<> ::CSteamInputService_ControllerStateFlow_Request* Arena::CreateMaybeMessage<::CSteamInputService_ControllerStateFlow_Request>(Arena*);
template<> ::CSteamInputService_ControllerStateFlow_Response* Arena::CreateMaybeMessage<::CSteamInputService_ControllerStateFlow_Response>(Arena*);
template<> ::CSteamInputService_GyroAccelerometerChanged_Notification* Arena::CreateMaybeMessage<::CSteamInputService_GyroAccelerometerChanged_Notification>(Arena*);
template<> ::CSteamInputService_GyroCalibration_Notification* Arena::CreateMaybeMessage<::CSteamInputService_GyroCalibration_Notification>(Arena*);
template<> ::CSteamInputService_GyroQuaternionChanged_Notification* Arena::CreateMaybeMessage<::CSteamInputService_GyroQuaternionChanged_Notification>(Arena*);
template<> ::CSteamInputService_GyroSpeedChanged_Notification* Arena::CreateMaybeMessage<::CSteamInputService_GyroSpeedChanged_Notification>(Arena*);
template<> ::ControllerGyroEulerAngles* Arena::CreateMaybeMessage<::ControllerGyroEulerAngles>(Arena*);
template<> ::ControllerQuaternion* Arena::CreateMaybeMessage<::ControllerQuaternion>(Arena*);
template<> ::ControllerVector2* Arena::CreateMaybeMessage<::ControllerVector2>(Arena*);
template<> ::ControllerVector3* Arena::CreateMaybeMessage<::ControllerVector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSteamInputService_ControllerButtonStateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_ControllerButtonStateChanged_Notification) */ {
 public:
  inline CSteamInputService_ControllerButtonStateChanged_Notification() : CSteamInputService_ControllerButtonStateChanged_Notification(nullptr) {}
  virtual ~CSteamInputService_ControllerButtonStateChanged_Notification();
  explicit constexpr CSteamInputService_ControllerButtonStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_ControllerButtonStateChanged_Notification(const CSteamInputService_ControllerButtonStateChanged_Notification& from);
  CSteamInputService_ControllerButtonStateChanged_Notification(CSteamInputService_ControllerButtonStateChanged_Notification&& from) noexcept
    : CSteamInputService_ControllerButtonStateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_ControllerButtonStateChanged_Notification& operator=(const CSteamInputService_ControllerButtonStateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_ControllerButtonStateChanged_Notification& operator=(CSteamInputService_ControllerButtonStateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_ControllerButtonStateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_ControllerButtonStateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_ControllerButtonStateChanged_Notification*>(
               &_CSteamInputService_ControllerButtonStateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSteamInputService_ControllerButtonStateChanged_Notification& a, CSteamInputService_ControllerButtonStateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_ControllerButtonStateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_ControllerButtonStateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_ControllerButtonStateChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_ControllerButtonStateChanged_Notification>(nullptr);
  }

  CSteamInputService_ControllerButtonStateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_ControllerButtonStateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_ControllerButtonStateChanged_Notification& from);
  void MergeFrom(const CSteamInputService_ControllerButtonStateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_ControllerButtonStateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_ControllerButtonStateChanged_Notification";
  }
  protected:
  explicit CSteamInputService_ControllerButtonStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIndexFieldNumber = 1,
    kDpadUpFieldNumber = 2,
    kDpadDownFieldNumber = 3,
    kDpadLeftFieldNumber = 4,
    kDpadRightFieldNumber = 5,
    kButtonSouthFieldNumber = 6,
    kButtonEastFieldNumber = 7,
    kButtonWestFieldNumber = 8,
    kButtonNorthFieldNumber = 9,
    kButtonBacviewFieldNumber = 10,
    kButtonStartOptionsFieldNumber = 11,
    kButtonSteamFieldNumber = 12,
    kButtonQuicaccessFieldNumber = 13,
    kButtonMuteCaptureFieldNumber = 14,
    kLeftSticclickFieldNumber = 15,
    kLeftStictouchFieldNumber = 16,
    kLeftSticdeflectFieldNumber = 17,
    kRightSticclickFieldNumber = 18,
    kRightStictouchFieldNumber = 19,
    kRightSticdeflectFieldNumber = 20,
    kCenterTrackpadTouchFieldNumber = 21,
    kCenterTrackpadClickFieldNumber = 22,
    kLeftTrackpadTouchFieldNumber = 23,
    kLeftTrackpadClickFieldNumber = 24,
    kRightTrackpadTouchFieldNumber = 25,
    kRightTrackpadClickFieldNumber = 26,
    kLeftBumperFieldNumber = 27,
    kLeftTriggerFieldNumber = 28,
    kL4FieldNumber = 29,
    kL5FieldNumber = 30,
    kLeftAuxFieldNumber = 31,
    kRightBumperFieldNumber = 32,
    kRightTriggerFieldNumber = 33,
    kR4FieldNumber = 34,
    kR5FieldNumber = 35,
    kRightAuxFieldNumber = 36,
  };
  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool dpad_up = 2;
  bool has_dpad_up() const;
  private:
  bool _internal_has_dpad_up() const;
  public:
  void clear_dpad_up();
  bool dpad_up() const;
  void set_dpad_up(bool value);
  private:
  bool _internal_dpad_up() const;
  void _internal_set_dpad_up(bool value);
  public:

  // optional bool dpad_down = 3;
  bool has_dpad_down() const;
  private:
  bool _internal_has_dpad_down() const;
  public:
  void clear_dpad_down();
  bool dpad_down() const;
  void set_dpad_down(bool value);
  private:
  bool _internal_dpad_down() const;
  void _internal_set_dpad_down(bool value);
  public:

  // optional bool dpad_left = 4;
  bool has_dpad_left() const;
  private:
  bool _internal_has_dpad_left() const;
  public:
  void clear_dpad_left();
  bool dpad_left() const;
  void set_dpad_left(bool value);
  private:
  bool _internal_dpad_left() const;
  void _internal_set_dpad_left(bool value);
  public:

  // optional bool dpad_right = 5;
  bool has_dpad_right() const;
  private:
  bool _internal_has_dpad_right() const;
  public:
  void clear_dpad_right();
  bool dpad_right() const;
  void set_dpad_right(bool value);
  private:
  bool _internal_dpad_right() const;
  void _internal_set_dpad_right(bool value);
  public:

  // optional bool button_south = 6;
  bool has_button_south() const;
  private:
  bool _internal_has_button_south() const;
  public:
  void clear_button_south();
  bool button_south() const;
  void set_button_south(bool value);
  private:
  bool _internal_button_south() const;
  void _internal_set_button_south(bool value);
  public:

  // optional bool button_east = 7;
  bool has_button_east() const;
  private:
  bool _internal_has_button_east() const;
  public:
  void clear_button_east();
  bool button_east() const;
  void set_button_east(bool value);
  private:
  bool _internal_button_east() const;
  void _internal_set_button_east(bool value);
  public:

  // optional bool button_west = 8;
  bool has_button_west() const;
  private:
  bool _internal_has_button_west() const;
  public:
  void clear_button_west();
  bool button_west() const;
  void set_button_west(bool value);
  private:
  bool _internal_button_west() const;
  void _internal_set_button_west(bool value);
  public:

  // optional bool button_north = 9;
  bool has_button_north() const;
  private:
  bool _internal_has_button_north() const;
  public:
  void clear_button_north();
  bool button_north() const;
  void set_button_north(bool value);
  private:
  bool _internal_button_north() const;
  void _internal_set_button_north(bool value);
  public:

  // optional bool button_bacview = 10;
  bool has_button_bacview() const;
  private:
  bool _internal_has_button_bacview() const;
  public:
  void clear_button_bacview();
  bool button_bacview() const;
  void set_button_bacview(bool value);
  private:
  bool _internal_button_bacview() const;
  void _internal_set_button_bacview(bool value);
  public:

  // optional bool button_start_options = 11;
  bool has_button_start_options() const;
  private:
  bool _internal_has_button_start_options() const;
  public:
  void clear_button_start_options();
  bool button_start_options() const;
  void set_button_start_options(bool value);
  private:
  bool _internal_button_start_options() const;
  void _internal_set_button_start_options(bool value);
  public:

  // optional bool button_steam = 12;
  bool has_button_steam() const;
  private:
  bool _internal_has_button_steam() const;
  public:
  void clear_button_steam();
  bool button_steam() const;
  void set_button_steam(bool value);
  private:
  bool _internal_button_steam() const;
  void _internal_set_button_steam(bool value);
  public:

  // optional bool button_quicaccess = 13;
  bool has_button_quicaccess() const;
  private:
  bool _internal_has_button_quicaccess() const;
  public:
  void clear_button_quicaccess();
  bool button_quicaccess() const;
  void set_button_quicaccess(bool value);
  private:
  bool _internal_button_quicaccess() const;
  void _internal_set_button_quicaccess(bool value);
  public:

  // optional bool button_mute_capture = 14;
  bool has_button_mute_capture() const;
  private:
  bool _internal_has_button_mute_capture() const;
  public:
  void clear_button_mute_capture();
  bool button_mute_capture() const;
  void set_button_mute_capture(bool value);
  private:
  bool _internal_button_mute_capture() const;
  void _internal_set_button_mute_capture(bool value);
  public:

  // optional bool left_sticclick = 15;
  bool has_left_sticclick() const;
  private:
  bool _internal_has_left_sticclick() const;
  public:
  void clear_left_sticclick();
  bool left_sticclick() const;
  void set_left_sticclick(bool value);
  private:
  bool _internal_left_sticclick() const;
  void _internal_set_left_sticclick(bool value);
  public:

  // optional bool left_stictouch = 16;
  bool has_left_stictouch() const;
  private:
  bool _internal_has_left_stictouch() const;
  public:
  void clear_left_stictouch();
  bool left_stictouch() const;
  void set_left_stictouch(bool value);
  private:
  bool _internal_left_stictouch() const;
  void _internal_set_left_stictouch(bool value);
  public:

  // optional bool left_sticdeflect = 17;
  bool has_left_sticdeflect() const;
  private:
  bool _internal_has_left_sticdeflect() const;
  public:
  void clear_left_sticdeflect();
  bool left_sticdeflect() const;
  void set_left_sticdeflect(bool value);
  private:
  bool _internal_left_sticdeflect() const;
  void _internal_set_left_sticdeflect(bool value);
  public:

  // optional bool right_sticclick = 18;
  bool has_right_sticclick() const;
  private:
  bool _internal_has_right_sticclick() const;
  public:
  void clear_right_sticclick();
  bool right_sticclick() const;
  void set_right_sticclick(bool value);
  private:
  bool _internal_right_sticclick() const;
  void _internal_set_right_sticclick(bool value);
  public:

  // optional bool right_stictouch = 19;
  bool has_right_stictouch() const;
  private:
  bool _internal_has_right_stictouch() const;
  public:
  void clear_right_stictouch();
  bool right_stictouch() const;
  void set_right_stictouch(bool value);
  private:
  bool _internal_right_stictouch() const;
  void _internal_set_right_stictouch(bool value);
  public:

  // optional bool right_sticdeflect = 20;
  bool has_right_sticdeflect() const;
  private:
  bool _internal_has_right_sticdeflect() const;
  public:
  void clear_right_sticdeflect();
  bool right_sticdeflect() const;
  void set_right_sticdeflect(bool value);
  private:
  bool _internal_right_sticdeflect() const;
  void _internal_set_right_sticdeflect(bool value);
  public:

  // optional bool center_trackpad_touch = 21;
  bool has_center_trackpad_touch() const;
  private:
  bool _internal_has_center_trackpad_touch() const;
  public:
  void clear_center_trackpad_touch();
  bool center_trackpad_touch() const;
  void set_center_trackpad_touch(bool value);
  private:
  bool _internal_center_trackpad_touch() const;
  void _internal_set_center_trackpad_touch(bool value);
  public:

  // optional bool center_trackpad_click = 22;
  bool has_center_trackpad_click() const;
  private:
  bool _internal_has_center_trackpad_click() const;
  public:
  void clear_center_trackpad_click();
  bool center_trackpad_click() const;
  void set_center_trackpad_click(bool value);
  private:
  bool _internal_center_trackpad_click() const;
  void _internal_set_center_trackpad_click(bool value);
  public:

  // optional bool left_trackpad_touch = 23;
  bool has_left_trackpad_touch() const;
  private:
  bool _internal_has_left_trackpad_touch() const;
  public:
  void clear_left_trackpad_touch();
  bool left_trackpad_touch() const;
  void set_left_trackpad_touch(bool value);
  private:
  bool _internal_left_trackpad_touch() const;
  void _internal_set_left_trackpad_touch(bool value);
  public:

  // optional bool left_trackpad_click = 24;
  bool has_left_trackpad_click() const;
  private:
  bool _internal_has_left_trackpad_click() const;
  public:
  void clear_left_trackpad_click();
  bool left_trackpad_click() const;
  void set_left_trackpad_click(bool value);
  private:
  bool _internal_left_trackpad_click() const;
  void _internal_set_left_trackpad_click(bool value);
  public:

  // optional bool right_trackpad_touch = 25;
  bool has_right_trackpad_touch() const;
  private:
  bool _internal_has_right_trackpad_touch() const;
  public:
  void clear_right_trackpad_touch();
  bool right_trackpad_touch() const;
  void set_right_trackpad_touch(bool value);
  private:
  bool _internal_right_trackpad_touch() const;
  void _internal_set_right_trackpad_touch(bool value);
  public:

  // optional bool right_trackpad_click = 26;
  bool has_right_trackpad_click() const;
  private:
  bool _internal_has_right_trackpad_click() const;
  public:
  void clear_right_trackpad_click();
  bool right_trackpad_click() const;
  void set_right_trackpad_click(bool value);
  private:
  bool _internal_right_trackpad_click() const;
  void _internal_set_right_trackpad_click(bool value);
  public:

  // optional bool left_bumper = 27;
  bool has_left_bumper() const;
  private:
  bool _internal_has_left_bumper() const;
  public:
  void clear_left_bumper();
  bool left_bumper() const;
  void set_left_bumper(bool value);
  private:
  bool _internal_left_bumper() const;
  void _internal_set_left_bumper(bool value);
  public:

  // optional bool left_trigger = 28;
  bool has_left_trigger() const;
  private:
  bool _internal_has_left_trigger() const;
  public:
  void clear_left_trigger();
  bool left_trigger() const;
  void set_left_trigger(bool value);
  private:
  bool _internal_left_trigger() const;
  void _internal_set_left_trigger(bool value);
  public:

  // optional bool l4 = 29;
  bool has_l4() const;
  private:
  bool _internal_has_l4() const;
  public:
  void clear_l4();
  bool l4() const;
  void set_l4(bool value);
  private:
  bool _internal_l4() const;
  void _internal_set_l4(bool value);
  public:

  // optional bool l5 = 30;
  bool has_l5() const;
  private:
  bool _internal_has_l5() const;
  public:
  void clear_l5();
  bool l5() const;
  void set_l5(bool value);
  private:
  bool _internal_l5() const;
  void _internal_set_l5(bool value);
  public:

  // optional bool left_aux = 31;
  bool has_left_aux() const;
  private:
  bool _internal_has_left_aux() const;
  public:
  void clear_left_aux();
  bool left_aux() const;
  void set_left_aux(bool value);
  private:
  bool _internal_left_aux() const;
  void _internal_set_left_aux(bool value);
  public:

  // optional bool right_bumper = 32;
  bool has_right_bumper() const;
  private:
  bool _internal_has_right_bumper() const;
  public:
  void clear_right_bumper();
  bool right_bumper() const;
  void set_right_bumper(bool value);
  private:
  bool _internal_right_bumper() const;
  void _internal_set_right_bumper(bool value);
  public:

  // optional bool right_trigger = 33;
  bool has_right_trigger() const;
  private:
  bool _internal_has_right_trigger() const;
  public:
  void clear_right_trigger();
  bool right_trigger() const;
  void set_right_trigger(bool value);
  private:
  bool _internal_right_trigger() const;
  void _internal_set_right_trigger(bool value);
  public:

  // optional bool r4 = 34;
  bool has_r4() const;
  private:
  bool _internal_has_r4() const;
  public:
  void clear_r4();
  bool r4() const;
  void set_r4(bool value);
  private:
  bool _internal_r4() const;
  void _internal_set_r4(bool value);
  public:

  // optional bool r5 = 35;
  bool has_r5() const;
  private:
  bool _internal_has_r5() const;
  public:
  void clear_r5();
  bool r5() const;
  void set_r5(bool value);
  private:
  bool _internal_r5() const;
  void _internal_set_r5(bool value);
  public:

  // optional bool right_aux = 36;
  bool has_right_aux() const;
  private:
  bool _internal_has_right_aux() const;
  public:
  void clear_right_aux();
  bool right_aux() const;
  void set_right_aux(bool value);
  private:
  bool _internal_right_aux() const;
  void _internal_set_right_aux(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_ControllerButtonStateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  bool dpad_up_;
  bool dpad_down_;
  bool dpad_left_;
  bool dpad_right_;
  bool button_south_;
  bool button_east_;
  bool button_west_;
  bool button_north_;
  bool button_bacview_;
  bool button_start_options_;
  bool button_steam_;
  bool button_quicaccess_;
  bool button_mute_capture_;
  bool left_sticclick_;
  bool left_stictouch_;
  bool left_sticdeflect_;
  bool right_sticclick_;
  bool right_stictouch_;
  bool right_sticdeflect_;
  bool center_trackpad_touch_;
  bool center_trackpad_click_;
  bool left_trackpad_touch_;
  bool left_trackpad_click_;
  bool right_trackpad_touch_;
  bool right_trackpad_click_;
  bool left_bumper_;
  bool left_trigger_;
  bool l4_;
  bool l5_;
  bool left_aux_;
  bool right_bumper_;
  bool right_trigger_;
  bool r4_;
  bool r5_;
  bool right_aux_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class ControllerVector2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerVector2) */ {
 public:
  inline ControllerVector2() : ControllerVector2(nullptr) {}
  virtual ~ControllerVector2();
  explicit constexpr ControllerVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerVector2(const ControllerVector2& from);
  ControllerVector2(ControllerVector2&& from) noexcept
    : ControllerVector2() {
    *this = ::std::move(from);
  }

  inline ControllerVector2& operator=(const ControllerVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerVector2& operator=(ControllerVector2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerVector2* internal_default_instance() {
    return reinterpret_cast<const ControllerVector2*>(
               &_ControllerVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControllerVector2& a, ControllerVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerVector2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerVector2* New() const final {
    return CreateMaybeMessage<ControllerVector2>(nullptr);
  }

  ControllerVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerVector2& from);
  void MergeFrom(const ControllerVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerVector2";
  }
  protected:
  explicit ControllerVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class ControllerVector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerVector3) */ {
 public:
  inline ControllerVector3() : ControllerVector3(nullptr) {}
  virtual ~ControllerVector3();
  explicit constexpr ControllerVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerVector3(const ControllerVector3& from);
  ControllerVector3(ControllerVector3&& from) noexcept
    : ControllerVector3() {
    *this = ::std::move(from);
  }

  inline ControllerVector3& operator=(const ControllerVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerVector3& operator=(ControllerVector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerVector3* internal_default_instance() {
    return reinterpret_cast<const ControllerVector3*>(
               &_ControllerVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerVector3& a, ControllerVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerVector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerVector3* New() const final {
    return CreateMaybeMessage<ControllerVector3>(nullptr);
  }

  ControllerVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerVector3& from);
  void MergeFrom(const ControllerVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerVector3";
  }
  protected:
  explicit ControllerVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class ControllerQuaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerQuaternion) */ {
 public:
  inline ControllerQuaternion() : ControllerQuaternion(nullptr) {}
  virtual ~ControllerQuaternion();
  explicit constexpr ControllerQuaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerQuaternion(const ControllerQuaternion& from);
  ControllerQuaternion(ControllerQuaternion&& from) noexcept
    : ControllerQuaternion() {
    *this = ::std::move(from);
  }

  inline ControllerQuaternion& operator=(const ControllerQuaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerQuaternion& operator=(ControllerQuaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerQuaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerQuaternion* internal_default_instance() {
    return reinterpret_cast<const ControllerQuaternion*>(
               &_ControllerQuaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControllerQuaternion& a, ControllerQuaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerQuaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerQuaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerQuaternion* New() const final {
    return CreateMaybeMessage<ControllerQuaternion>(nullptr);
  }

  ControllerQuaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerQuaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerQuaternion& from);
  void MergeFrom(const ControllerQuaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerQuaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerQuaternion";
  }
  protected:
  explicit ControllerQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // optional float w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // optional float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerQuaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float w_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class ControllerGyroEulerAngles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerGyroEulerAngles) */ {
 public:
  inline ControllerGyroEulerAngles() : ControllerGyroEulerAngles(nullptr) {}
  virtual ~ControllerGyroEulerAngles();
  explicit constexpr ControllerGyroEulerAngles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerGyroEulerAngles(const ControllerGyroEulerAngles& from);
  ControllerGyroEulerAngles(ControllerGyroEulerAngles&& from) noexcept
    : ControllerGyroEulerAngles() {
    *this = ::std::move(from);
  }

  inline ControllerGyroEulerAngles& operator=(const ControllerGyroEulerAngles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerGyroEulerAngles& operator=(ControllerGyroEulerAngles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerGyroEulerAngles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerGyroEulerAngles* internal_default_instance() {
    return reinterpret_cast<const ControllerGyroEulerAngles*>(
               &_ControllerGyroEulerAngles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControllerGyroEulerAngles& a, ControllerGyroEulerAngles& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerGyroEulerAngles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerGyroEulerAngles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerGyroEulerAngles* New() const final {
    return CreateMaybeMessage<ControllerGyroEulerAngles>(nullptr);
  }

  ControllerGyroEulerAngles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerGyroEulerAngles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerGyroEulerAngles& from);
  void MergeFrom(const ControllerGyroEulerAngles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerGyroEulerAngles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerGyroEulerAngles";
  }
  protected:
  explicit ControllerGyroEulerAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kYawFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // optional float pitch = 1;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // optional float yaw = 2;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // optional float roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerGyroEulerAngles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float pitch_;
  float yaw_;
  float roll_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_ControllerAxesStateChange_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_ControllerAxesStateChange_Notification) */ {
 public:
  inline CSteamInputService_ControllerAxesStateChange_Notification() : CSteamInputService_ControllerAxesStateChange_Notification(nullptr) {}
  virtual ~CSteamInputService_ControllerAxesStateChange_Notification();
  explicit constexpr CSteamInputService_ControllerAxesStateChange_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_ControllerAxesStateChange_Notification(const CSteamInputService_ControllerAxesStateChange_Notification& from);
  CSteamInputService_ControllerAxesStateChange_Notification(CSteamInputService_ControllerAxesStateChange_Notification&& from) noexcept
    : CSteamInputService_ControllerAxesStateChange_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_ControllerAxesStateChange_Notification& operator=(const CSteamInputService_ControllerAxesStateChange_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_ControllerAxesStateChange_Notification& operator=(CSteamInputService_ControllerAxesStateChange_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_ControllerAxesStateChange_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_ControllerAxesStateChange_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_ControllerAxesStateChange_Notification*>(
               &_CSteamInputService_ControllerAxesStateChange_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSteamInputService_ControllerAxesStateChange_Notification& a, CSteamInputService_ControllerAxesStateChange_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_ControllerAxesStateChange_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_ControllerAxesStateChange_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_ControllerAxesStateChange_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_ControllerAxesStateChange_Notification>(nullptr);
  }

  CSteamInputService_ControllerAxesStateChange_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_ControllerAxesStateChange_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_ControllerAxesStateChange_Notification& from);
  void MergeFrom(const CSteamInputService_ControllerAxesStateChange_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_ControllerAxesStateChange_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_ControllerAxesStateChange_Notification";
  }
  protected:
  explicit CSteamInputService_ControllerAxesStateChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoysticleftFieldNumber = 2,
    kJoysticrightFieldNumber = 3,
    kTrackpadLeftFieldNumber = 4,
    kTrackpadRightFieldNumber = 5,
    kTrackpadCenterFieldNumber = 6,
    kControllerIndexFieldNumber = 1,
    kTrackpadPressureLeftFieldNumber = 7,
    kTrackpadPressureRightFieldNumber = 8,
    kTriggerLeftFieldNumber = 9,
    kTriggerRightFieldNumber = 10,
  };
  // optional .ControllerVector2 joysticleft = 2;
  bool has_joysticleft() const;
  private:
  bool _internal_has_joysticleft() const;
  public:
  void clear_joysticleft();
  const ::ControllerVector2& joysticleft() const;
  ::ControllerVector2* release_joysticleft();
  ::ControllerVector2* mutable_joysticleft();
  void set_allocated_joysticleft(::ControllerVector2* joysticleft);
  private:
  const ::ControllerVector2& _internal_joysticleft() const;
  ::ControllerVector2* _internal_mutable_joysticleft();
  public:
  void unsafe_arena_set_allocated_joysticleft(
      ::ControllerVector2* joysticleft);
  ::ControllerVector2* unsafe_arena_release_joysticleft();

  // optional .ControllerVector2 joysticright = 3;
  bool has_joysticright() const;
  private:
  bool _internal_has_joysticright() const;
  public:
  void clear_joysticright();
  const ::ControllerVector2& joysticright() const;
  ::ControllerVector2* release_joysticright();
  ::ControllerVector2* mutable_joysticright();
  void set_allocated_joysticright(::ControllerVector2* joysticright);
  private:
  const ::ControllerVector2& _internal_joysticright() const;
  ::ControllerVector2* _internal_mutable_joysticright();
  public:
  void unsafe_arena_set_allocated_joysticright(
      ::ControllerVector2* joysticright);
  ::ControllerVector2* unsafe_arena_release_joysticright();

  // optional .ControllerVector2 trackpad_left = 4;
  bool has_trackpad_left() const;
  private:
  bool _internal_has_trackpad_left() const;
  public:
  void clear_trackpad_left();
  const ::ControllerVector2& trackpad_left() const;
  ::ControllerVector2* release_trackpad_left();
  ::ControllerVector2* mutable_trackpad_left();
  void set_allocated_trackpad_left(::ControllerVector2* trackpad_left);
  private:
  const ::ControllerVector2& _internal_trackpad_left() const;
  ::ControllerVector2* _internal_mutable_trackpad_left();
  public:
  void unsafe_arena_set_allocated_trackpad_left(
      ::ControllerVector2* trackpad_left);
  ::ControllerVector2* unsafe_arena_release_trackpad_left();

  // optional .ControllerVector2 trackpad_right = 5;
  bool has_trackpad_right() const;
  private:
  bool _internal_has_trackpad_right() const;
  public:
  void clear_trackpad_right();
  const ::ControllerVector2& trackpad_right() const;
  ::ControllerVector2* release_trackpad_right();
  ::ControllerVector2* mutable_trackpad_right();
  void set_allocated_trackpad_right(::ControllerVector2* trackpad_right);
  private:
  const ::ControllerVector2& _internal_trackpad_right() const;
  ::ControllerVector2* _internal_mutable_trackpad_right();
  public:
  void unsafe_arena_set_allocated_trackpad_right(
      ::ControllerVector2* trackpad_right);
  ::ControllerVector2* unsafe_arena_release_trackpad_right();

  // optional .ControllerVector2 trackpad_center = 6;
  bool has_trackpad_center() const;
  private:
  bool _internal_has_trackpad_center() const;
  public:
  void clear_trackpad_center();
  const ::ControllerVector2& trackpad_center() const;
  ::ControllerVector2* release_trackpad_center();
  ::ControllerVector2* mutable_trackpad_center();
  void set_allocated_trackpad_center(::ControllerVector2* trackpad_center);
  private:
  const ::ControllerVector2& _internal_trackpad_center() const;
  ::ControllerVector2* _internal_mutable_trackpad_center();
  public:
  void unsafe_arena_set_allocated_trackpad_center(
      ::ControllerVector2* trackpad_center);
  ::ControllerVector2* unsafe_arena_release_trackpad_center();

  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float trackpad_pressure_left = 7;
  bool has_trackpad_pressure_left() const;
  private:
  bool _internal_has_trackpad_pressure_left() const;
  public:
  void clear_trackpad_pressure_left();
  float trackpad_pressure_left() const;
  void set_trackpad_pressure_left(float value);
  private:
  float _internal_trackpad_pressure_left() const;
  void _internal_set_trackpad_pressure_left(float value);
  public:

  // optional float trackpad_pressure_right = 8;
  bool has_trackpad_pressure_right() const;
  private:
  bool _internal_has_trackpad_pressure_right() const;
  public:
  void clear_trackpad_pressure_right();
  float trackpad_pressure_right() const;
  void set_trackpad_pressure_right(float value);
  private:
  float _internal_trackpad_pressure_right() const;
  void _internal_set_trackpad_pressure_right(float value);
  public:

  // optional float trigger_left = 9;
  bool has_trigger_left() const;
  private:
  bool _internal_has_trigger_left() const;
  public:
  void clear_trigger_left();
  float trigger_left() const;
  void set_trigger_left(float value);
  private:
  float _internal_trigger_left() const;
  void _internal_set_trigger_left(float value);
  public:

  // optional float trigger_right = 10;
  bool has_trigger_right() const;
  private:
  bool _internal_has_trigger_right() const;
  public:
  void clear_trigger_right();
  float trigger_right() const;
  void set_trigger_right(float value);
  private:
  float _internal_trigger_right() const;
  void _internal_set_trigger_right(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_ControllerAxesStateChange_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ControllerVector2* joysticleft_;
  ::ControllerVector2* joysticright_;
  ::ControllerVector2* trackpad_left_;
  ::ControllerVector2* trackpad_right_;
  ::ControllerVector2* trackpad_center_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  float trackpad_pressure_left_;
  float trackpad_pressure_right_;
  float trigger_left_;
  float trigger_right_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_GyroQuaternionChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_GyroQuaternionChanged_Notification) */ {
 public:
  inline CSteamInputService_GyroQuaternionChanged_Notification() : CSteamInputService_GyroQuaternionChanged_Notification(nullptr) {}
  virtual ~CSteamInputService_GyroQuaternionChanged_Notification();
  explicit constexpr CSteamInputService_GyroQuaternionChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_GyroQuaternionChanged_Notification(const CSteamInputService_GyroQuaternionChanged_Notification& from);
  CSteamInputService_GyroQuaternionChanged_Notification(CSteamInputService_GyroQuaternionChanged_Notification&& from) noexcept
    : CSteamInputService_GyroQuaternionChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_GyroQuaternionChanged_Notification& operator=(const CSteamInputService_GyroQuaternionChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_GyroQuaternionChanged_Notification& operator=(CSteamInputService_GyroQuaternionChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_GyroQuaternionChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_GyroQuaternionChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_GyroQuaternionChanged_Notification*>(
               &_CSteamInputService_GyroQuaternionChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSteamInputService_GyroQuaternionChanged_Notification& a, CSteamInputService_GyroQuaternionChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_GyroQuaternionChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_GyroQuaternionChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_GyroQuaternionChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_GyroQuaternionChanged_Notification>(nullptr);
  }

  CSteamInputService_GyroQuaternionChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_GyroQuaternionChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_GyroQuaternionChanged_Notification& from);
  void MergeFrom(const CSteamInputService_GyroQuaternionChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_GyroQuaternionChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_GyroQuaternionChanged_Notification";
  }
  protected:
  explicit CSteamInputService_GyroQuaternionChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroRawQuaternionFieldNumber = 3,
    kGyroFilteredQuaternionFieldNumber = 4,
    kControllerIndexFieldNumber = 1,
    kImuIndexFieldNumber = 2,
    kImuSensorDeltaTimeFieldNumber = 5,
    kPacketNumberFieldNumber = 6,
  };
  // optional .ControllerQuaternion gyro_raw_quaternion = 3;
  bool has_gyro_raw_quaternion() const;
  private:
  bool _internal_has_gyro_raw_quaternion() const;
  public:
  void clear_gyro_raw_quaternion();
  const ::ControllerQuaternion& gyro_raw_quaternion() const;
  ::ControllerQuaternion* release_gyro_raw_quaternion();
  ::ControllerQuaternion* mutable_gyro_raw_quaternion();
  void set_allocated_gyro_raw_quaternion(::ControllerQuaternion* gyro_raw_quaternion);
  private:
  const ::ControllerQuaternion& _internal_gyro_raw_quaternion() const;
  ::ControllerQuaternion* _internal_mutable_gyro_raw_quaternion();
  public:
  void unsafe_arena_set_allocated_gyro_raw_quaternion(
      ::ControllerQuaternion* gyro_raw_quaternion);
  ::ControllerQuaternion* unsafe_arena_release_gyro_raw_quaternion();

  // optional .ControllerQuaternion gyro_filtered_quaternion = 4;
  bool has_gyro_filtered_quaternion() const;
  private:
  bool _internal_has_gyro_filtered_quaternion() const;
  public:
  void clear_gyro_filtered_quaternion();
  const ::ControllerQuaternion& gyro_filtered_quaternion() const;
  ::ControllerQuaternion* release_gyro_filtered_quaternion();
  ::ControllerQuaternion* mutable_gyro_filtered_quaternion();
  void set_allocated_gyro_filtered_quaternion(::ControllerQuaternion* gyro_filtered_quaternion);
  private:
  const ::ControllerQuaternion& _internal_gyro_filtered_quaternion() const;
  ::ControllerQuaternion* _internal_mutable_gyro_filtered_quaternion();
  public:
  void unsafe_arena_set_allocated_gyro_filtered_quaternion(
      ::ControllerQuaternion* gyro_filtered_quaternion);
  ::ControllerQuaternion* unsafe_arena_release_gyro_filtered_quaternion();

  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 imu_index = 2;
  bool has_imu_index() const;
  private:
  bool _internal_has_imu_index() const;
  public:
  void clear_imu_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index() const;
  void set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imu_index() const;
  void _internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 imu_sensor_delta_time = 5;
  bool has_imu_sensor_delta_time() const;
  private:
  bool _internal_has_imu_sensor_delta_time() const;
  public:
  void clear_imu_sensor_delta_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_sensor_delta_time() const;
  void set_imu_sensor_delta_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imu_sensor_delta_time() const;
  void _internal_set_imu_sensor_delta_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 packet_number = 6;
  bool has_packet_number() const;
  private:
  bool _internal_has_packet_number() const;
  public:
  void clear_packet_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_number() const;
  void set_packet_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_number() const;
  void _internal_set_packet_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_GyroQuaternionChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ControllerQuaternion* gyro_raw_quaternion_;
  ::ControllerQuaternion* gyro_filtered_quaternion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_sensor_delta_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_number_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_GyroSpeedChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_GyroSpeedChanged_Notification) */ {
 public:
  inline CSteamInputService_GyroSpeedChanged_Notification() : CSteamInputService_GyroSpeedChanged_Notification(nullptr) {}
  virtual ~CSteamInputService_GyroSpeedChanged_Notification();
  explicit constexpr CSteamInputService_GyroSpeedChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_GyroSpeedChanged_Notification(const CSteamInputService_GyroSpeedChanged_Notification& from);
  CSteamInputService_GyroSpeedChanged_Notification(CSteamInputService_GyroSpeedChanged_Notification&& from) noexcept
    : CSteamInputService_GyroSpeedChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_GyroSpeedChanged_Notification& operator=(const CSteamInputService_GyroSpeedChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_GyroSpeedChanged_Notification& operator=(CSteamInputService_GyroSpeedChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_GyroSpeedChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_GyroSpeedChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_GyroSpeedChanged_Notification*>(
               &_CSteamInputService_GyroSpeedChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSteamInputService_GyroSpeedChanged_Notification& a, CSteamInputService_GyroSpeedChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_GyroSpeedChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_GyroSpeedChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_GyroSpeedChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_GyroSpeedChanged_Notification>(nullptr);
  }

  CSteamInputService_GyroSpeedChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_GyroSpeedChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_GyroSpeedChanged_Notification& from);
  void MergeFrom(const CSteamInputService_GyroSpeedChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_GyroSpeedChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_GyroSpeedChanged_Notification";
  }
  protected:
  explicit CSteamInputService_GyroSpeedChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroRawSpeedFieldNumber = 3,
    kGyroFilteredSpeedFieldNumber = 4,
    kControllerIndexFieldNumber = 1,
    kImuIndexFieldNumber = 2,
  };
  // optional .ControllerGyroEulerAngles gyro_raw_speed = 3;
  bool has_gyro_raw_speed() const;
  private:
  bool _internal_has_gyro_raw_speed() const;
  public:
  void clear_gyro_raw_speed();
  const ::ControllerGyroEulerAngles& gyro_raw_speed() const;
  ::ControllerGyroEulerAngles* release_gyro_raw_speed();
  ::ControllerGyroEulerAngles* mutable_gyro_raw_speed();
  void set_allocated_gyro_raw_speed(::ControllerGyroEulerAngles* gyro_raw_speed);
  private:
  const ::ControllerGyroEulerAngles& _internal_gyro_raw_speed() const;
  ::ControllerGyroEulerAngles* _internal_mutable_gyro_raw_speed();
  public:
  void unsafe_arena_set_allocated_gyro_raw_speed(
      ::ControllerGyroEulerAngles* gyro_raw_speed);
  ::ControllerGyroEulerAngles* unsafe_arena_release_gyro_raw_speed();

  // optional .ControllerGyroEulerAngles gyro_filtered_speed = 4;
  bool has_gyro_filtered_speed() const;
  private:
  bool _internal_has_gyro_filtered_speed() const;
  public:
  void clear_gyro_filtered_speed();
  const ::ControllerGyroEulerAngles& gyro_filtered_speed() const;
  ::ControllerGyroEulerAngles* release_gyro_filtered_speed();
  ::ControllerGyroEulerAngles* mutable_gyro_filtered_speed();
  void set_allocated_gyro_filtered_speed(::ControllerGyroEulerAngles* gyro_filtered_speed);
  private:
  const ::ControllerGyroEulerAngles& _internal_gyro_filtered_speed() const;
  ::ControllerGyroEulerAngles* _internal_mutable_gyro_filtered_speed();
  public:
  void unsafe_arena_set_allocated_gyro_filtered_speed(
      ::ControllerGyroEulerAngles* gyro_filtered_speed);
  ::ControllerGyroEulerAngles* unsafe_arena_release_gyro_filtered_speed();

  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 imu_index = 2;
  bool has_imu_index() const;
  private:
  bool _internal_has_imu_index() const;
  public:
  void clear_imu_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index() const;
  void set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imu_index() const;
  void _internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_GyroSpeedChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ControllerGyroEulerAngles* gyro_raw_speed_;
  ::ControllerGyroEulerAngles* gyro_filtered_speed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_GyroAccelerometerChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_GyroAccelerometerChanged_Notification) */ {
 public:
  inline CSteamInputService_GyroAccelerometerChanged_Notification() : CSteamInputService_GyroAccelerometerChanged_Notification(nullptr) {}
  virtual ~CSteamInputService_GyroAccelerometerChanged_Notification();
  explicit constexpr CSteamInputService_GyroAccelerometerChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_GyroAccelerometerChanged_Notification(const CSteamInputService_GyroAccelerometerChanged_Notification& from);
  CSteamInputService_GyroAccelerometerChanged_Notification(CSteamInputService_GyroAccelerometerChanged_Notification&& from) noexcept
    : CSteamInputService_GyroAccelerometerChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_GyroAccelerometerChanged_Notification& operator=(const CSteamInputService_GyroAccelerometerChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_GyroAccelerometerChanged_Notification& operator=(CSteamInputService_GyroAccelerometerChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_GyroAccelerometerChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_GyroAccelerometerChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_GyroAccelerometerChanged_Notification*>(
               &_CSteamInputService_GyroAccelerometerChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSteamInputService_GyroAccelerometerChanged_Notification& a, CSteamInputService_GyroAccelerometerChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_GyroAccelerometerChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_GyroAccelerometerChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_GyroAccelerometerChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_GyroAccelerometerChanged_Notification>(nullptr);
  }

  CSteamInputService_GyroAccelerometerChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_GyroAccelerometerChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_GyroAccelerometerChanged_Notification& from);
  void MergeFrom(const CSteamInputService_GyroAccelerometerChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_GyroAccelerometerChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_GyroAccelerometerChanged_Notification";
  }
  protected:
  explicit CSteamInputService_GyroAccelerometerChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceleromter1GFieldNumber = 4,
    kTrustedGravity1GFieldNumber = 5,
    kControllerIndexFieldNumber = 1,
    kImuIndexFieldNumber = 2,
  };
  // optional .ControllerVector3 acceleromter_1g = 4;
  bool has_acceleromter_1g() const;
  private:
  bool _internal_has_acceleromter_1g() const;
  public:
  void clear_acceleromter_1g();
  const ::ControllerVector3& acceleromter_1g() const;
  ::ControllerVector3* release_acceleromter_1g();
  ::ControllerVector3* mutable_acceleromter_1g();
  void set_allocated_acceleromter_1g(::ControllerVector3* acceleromter_1g);
  private:
  const ::ControllerVector3& _internal_acceleromter_1g() const;
  ::ControllerVector3* _internal_mutable_acceleromter_1g();
  public:
  void unsafe_arena_set_allocated_acceleromter_1g(
      ::ControllerVector3* acceleromter_1g);
  ::ControllerVector3* unsafe_arena_release_acceleromter_1g();

  // optional .ControllerVector3 trusted_gravity_1g = 5;
  bool has_trusted_gravity_1g() const;
  private:
  bool _internal_has_trusted_gravity_1g() const;
  public:
  void clear_trusted_gravity_1g();
  const ::ControllerVector3& trusted_gravity_1g() const;
  ::ControllerVector3* release_trusted_gravity_1g();
  ::ControllerVector3* mutable_trusted_gravity_1g();
  void set_allocated_trusted_gravity_1g(::ControllerVector3* trusted_gravity_1g);
  private:
  const ::ControllerVector3& _internal_trusted_gravity_1g() const;
  ::ControllerVector3* _internal_mutable_trusted_gravity_1g();
  public:
  void unsafe_arena_set_allocated_trusted_gravity_1g(
      ::ControllerVector3* trusted_gravity_1g);
  ::ControllerVector3* unsafe_arena_release_trusted_gravity_1g();

  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 imu_index = 2;
  bool has_imu_index() const;
  private:
  bool _internal_has_imu_index() const;
  public:
  void clear_imu_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index() const;
  void set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imu_index() const;
  void _internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_GyroAccelerometerChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ControllerVector3* acceleromter_1g_;
  ::ControllerVector3* trusted_gravity_1g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_GyroCalibration_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_GyroCalibration_Notification) */ {
 public:
  inline CSteamInputService_GyroCalibration_Notification() : CSteamInputService_GyroCalibration_Notification(nullptr) {}
  virtual ~CSteamInputService_GyroCalibration_Notification();
  explicit constexpr CSteamInputService_GyroCalibration_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_GyroCalibration_Notification(const CSteamInputService_GyroCalibration_Notification& from);
  CSteamInputService_GyroCalibration_Notification(CSteamInputService_GyroCalibration_Notification&& from) noexcept
    : CSteamInputService_GyroCalibration_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_GyroCalibration_Notification& operator=(const CSteamInputService_GyroCalibration_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_GyroCalibration_Notification& operator=(CSteamInputService_GyroCalibration_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_GyroCalibration_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_GyroCalibration_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_GyroCalibration_Notification*>(
               &_CSteamInputService_GyroCalibration_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSteamInputService_GyroCalibration_Notification& a, CSteamInputService_GyroCalibration_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_GyroCalibration_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_GyroCalibration_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_GyroCalibration_Notification* New() const final {
    return CreateMaybeMessage<CSteamInputService_GyroCalibration_Notification>(nullptr);
  }

  CSteamInputService_GyroCalibration_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_GyroCalibration_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_GyroCalibration_Notification& from);
  void MergeFrom(const CSteamInputService_GyroCalibration_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_GyroCalibration_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_GyroCalibration_Notification";
  }
  protected:
  explicit CSteamInputService_GyroCalibration_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIndexFieldNumber = 1,
    kImuIndexFieldNumber = 2,
    kAcceleromterNoiseFieldNumber = 3,
    kGyroscopeNoiseFieldNumber = 4,
    kCalibrationProgressFieldNumber = 5,
  };
  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 imu_index = 2;
  bool has_imu_index() const;
  private:
  bool _internal_has_imu_index() const;
  public:
  void clear_imu_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index() const;
  void set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imu_index() const;
  void _internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float acceleromter_noise = 3;
  bool has_acceleromter_noise() const;
  private:
  bool _internal_has_acceleromter_noise() const;
  public:
  void clear_acceleromter_noise();
  float acceleromter_noise() const;
  void set_acceleromter_noise(float value);
  private:
  float _internal_acceleromter_noise() const;
  void _internal_set_acceleromter_noise(float value);
  public:

  // optional float gyroscope_noise = 4;
  bool has_gyroscope_noise() const;
  private:
  bool _internal_has_gyroscope_noise() const;
  public:
  void clear_gyroscope_noise();
  float gyroscope_noise() const;
  void set_gyroscope_noise(float value);
  private:
  float _internal_gyroscope_noise() const;
  void _internal_set_gyroscope_noise(float value);
  public:

  // optional float calibration_progress = 5;
  bool has_calibration_progress() const;
  private:
  bool _internal_has_calibration_progress() const;
  public:
  void clear_calibration_progress();
  float calibration_progress() const;
  void set_calibration_progress(float value);
  private:
  float _internal_calibration_progress() const;
  void _internal_set_calibration_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_GyroCalibration_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imu_index_;
  float acceleromter_noise_;
  float gyroscope_noise_;
  float calibration_progress_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_ControllerStateFlow_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_ControllerStateFlow_Request) */ {
 public:
  inline CSteamInputService_ControllerStateFlow_Request() : CSteamInputService_ControllerStateFlow_Request(nullptr) {}
  virtual ~CSteamInputService_ControllerStateFlow_Request();
  explicit constexpr CSteamInputService_ControllerStateFlow_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_ControllerStateFlow_Request(const CSteamInputService_ControllerStateFlow_Request& from);
  CSteamInputService_ControllerStateFlow_Request(CSteamInputService_ControllerStateFlow_Request&& from) noexcept
    : CSteamInputService_ControllerStateFlow_Request() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_ControllerStateFlow_Request& operator=(const CSteamInputService_ControllerStateFlow_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_ControllerStateFlow_Request& operator=(CSteamInputService_ControllerStateFlow_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_ControllerStateFlow_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_ControllerStateFlow_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_ControllerStateFlow_Request*>(
               &_CSteamInputService_ControllerStateFlow_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CSteamInputService_ControllerStateFlow_Request& a, CSteamInputService_ControllerStateFlow_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_ControllerStateFlow_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_ControllerStateFlow_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_ControllerStateFlow_Request* New() const final {
    return CreateMaybeMessage<CSteamInputService_ControllerStateFlow_Request>(nullptr);
  }

  CSteamInputService_ControllerStateFlow_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_ControllerStateFlow_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_ControllerStateFlow_Request& from);
  void MergeFrom(const CSteamInputService_ControllerStateFlow_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_ControllerStateFlow_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_ControllerStateFlow_Request";
  }
  protected:
  explicit CSteamInputService_ControllerStateFlow_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIndexFieldNumber = 1,
    kFlowModeFieldNumber = 2,
  };
  // optional uint32 controller_index = 1;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flow_mode = 2;
  bool has_flow_mode() const;
  private:
  bool _internal_has_flow_mode() const;
  public:
  void clear_flow_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 flow_mode() const;
  void set_flow_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flow_mode() const;
  void _internal_set_flow_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamInputService_ControllerStateFlow_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flow_mode_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// -------------------------------------------------------------------

class CSteamInputService_ControllerStateFlow_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamInputService_ControllerStateFlow_Response) */ {
 public:
  inline CSteamInputService_ControllerStateFlow_Response() : CSteamInputService_ControllerStateFlow_Response(nullptr) {}
  virtual ~CSteamInputService_ControllerStateFlow_Response();
  explicit constexpr CSteamInputService_ControllerStateFlow_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamInputService_ControllerStateFlow_Response(const CSteamInputService_ControllerStateFlow_Response& from);
  CSteamInputService_ControllerStateFlow_Response(CSteamInputService_ControllerStateFlow_Response&& from) noexcept
    : CSteamInputService_ControllerStateFlow_Response() {
    *this = ::std::move(from);
  }

  inline CSteamInputService_ControllerStateFlow_Response& operator=(const CSteamInputService_ControllerStateFlow_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamInputService_ControllerStateFlow_Response& operator=(CSteamInputService_ControllerStateFlow_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamInputService_ControllerStateFlow_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamInputService_ControllerStateFlow_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamInputService_ControllerStateFlow_Response*>(
               &_CSteamInputService_ControllerStateFlow_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CSteamInputService_ControllerStateFlow_Response& a, CSteamInputService_ControllerStateFlow_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamInputService_ControllerStateFlow_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamInputService_ControllerStateFlow_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamInputService_ControllerStateFlow_Response* New() const final {
    return CreateMaybeMessage<CSteamInputService_ControllerStateFlow_Response>(nullptr);
  }

  CSteamInputService_ControllerStateFlow_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamInputService_ControllerStateFlow_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamInputService_ControllerStateFlow_Response& from);
  void MergeFrom(const CSteamInputService_ControllerStateFlow_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamInputService_ControllerStateFlow_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamInputService_ControllerStateFlow_Response";
  }
  protected:
  explicit CSteamInputService_ControllerStateFlow_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteaminput_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamInputService_ControllerStateFlow_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteaminput_2eproto;
};
// ===================================================================

class SteamInputManager_Stub;

class SteamInputManager : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SteamInputManager() {};
 public:
  virtual ~SteamInputManager();

  typedef SteamInputManager_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyButtonStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerButtonStateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyAxesStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerAxesStateChange_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyGyroQuaternionStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroQuaternionChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyGyroSpeedStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroSpeedChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyGyroAccelerometerStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroAccelerometerChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyGyroCalibrationStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroCalibration_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StartControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerStateFlow_Request* request,
                       ::CSteamInputService_ControllerStateFlow_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EndControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerStateFlow_Request* request,
                       ::CSteamInputService_ControllerStateFlow_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamInputManager);
};

class SteamInputManager_Stub : public SteamInputManager {
 public:
  SteamInputManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SteamInputManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SteamInputManager_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SteamInputManager ------------------------------------------

  void NotifyButtonStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerButtonStateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyAxesStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerAxesStateChange_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyGyroQuaternionStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroQuaternionChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyGyroSpeedStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroSpeedChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyGyroAccelerometerStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroAccelerometerChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyGyroCalibrationStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_GyroCalibration_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void StartControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerStateFlow_Request* request,
                       ::CSteamInputService_ControllerStateFlow_Response* response,
                       ::google::protobuf::Closure* done);
  void EndControllerStateFlow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamInputService_ControllerStateFlow_Request* request,
                       ::CSteamInputService_ControllerStateFlow_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamInputManager_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSteamInputService_ControllerButtonStateChanged_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerButtonStateChanged_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerButtonStateChanged_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  controller_index_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.controller_index)
}

// optional bool dpad_up = 2;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_dpad_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_dpad_up() const {
  return _internal_has_dpad_up();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_dpad_up() {
  dpad_up_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_dpad_up() const {
  return dpad_up_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::dpad_up() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_up)
  return _internal_dpad_up();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_dpad_up(bool value) {
  _has_bits_[0] |= 0x00000002u;
  dpad_up_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_dpad_up(bool value) {
  _internal_set_dpad_up(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_up)
}

// optional bool dpad_down = 3;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_dpad_down() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_dpad_down() const {
  return _internal_has_dpad_down();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_dpad_down() {
  dpad_down_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_dpad_down() const {
  return dpad_down_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::dpad_down() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_down)
  return _internal_dpad_down();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_dpad_down(bool value) {
  _has_bits_[0] |= 0x00000004u;
  dpad_down_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_dpad_down(bool value) {
  _internal_set_dpad_down(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_down)
}

// optional bool dpad_left = 4;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_dpad_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_dpad_left() const {
  return _internal_has_dpad_left();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_dpad_left() {
  dpad_left_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_dpad_left() const {
  return dpad_left_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::dpad_left() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_left)
  return _internal_dpad_left();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_dpad_left(bool value) {
  _has_bits_[0] |= 0x00000008u;
  dpad_left_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_dpad_left(bool value) {
  _internal_set_dpad_left(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_left)
}

// optional bool dpad_right = 5;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_dpad_right() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_dpad_right() const {
  return _internal_has_dpad_right();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_dpad_right() {
  dpad_right_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_dpad_right() const {
  return dpad_right_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::dpad_right() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_right)
  return _internal_dpad_right();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_dpad_right(bool value) {
  _has_bits_[0] |= 0x00000010u;
  dpad_right_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_dpad_right(bool value) {
  _internal_set_dpad_right(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.dpad_right)
}

// optional bool button_south = 6;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_south() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_south() const {
  return _internal_has_button_south();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_south() {
  button_south_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_south() const {
  return button_south_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_south() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_south)
  return _internal_button_south();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_south(bool value) {
  _has_bits_[0] |= 0x00000020u;
  button_south_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_south(bool value) {
  _internal_set_button_south(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_south)
}

// optional bool button_east = 7;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_east() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_east() const {
  return _internal_has_button_east();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_east() {
  button_east_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_east() const {
  return button_east_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_east() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_east)
  return _internal_button_east();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_east(bool value) {
  _has_bits_[0] |= 0x00000040u;
  button_east_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_east(bool value) {
  _internal_set_button_east(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_east)
}

// optional bool button_west = 8;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_west() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_west() const {
  return _internal_has_button_west();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_west() {
  button_west_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_west() const {
  return button_west_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_west() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_west)
  return _internal_button_west();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_west(bool value) {
  _has_bits_[0] |= 0x00000080u;
  button_west_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_west(bool value) {
  _internal_set_button_west(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_west)
}

// optional bool button_north = 9;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_north() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_north() const {
  return _internal_has_button_north();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_north() {
  button_north_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_north() const {
  return button_north_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_north() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_north)
  return _internal_button_north();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_north(bool value) {
  _has_bits_[0] |= 0x00000100u;
  button_north_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_north(bool value) {
  _internal_set_button_north(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_north)
}

// optional bool button_bacview = 10;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_bacview() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_bacview() const {
  return _internal_has_button_bacview();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_bacview() {
  button_bacview_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_bacview() const {
  return button_bacview_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_bacview() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_bacview)
  return _internal_button_bacview();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_bacview(bool value) {
  _has_bits_[0] |= 0x00000200u;
  button_bacview_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_bacview(bool value) {
  _internal_set_button_bacview(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_bacview)
}

// optional bool button_start_options = 11;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_start_options() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_start_options() const {
  return _internal_has_button_start_options();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_start_options() {
  button_start_options_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_start_options() const {
  return button_start_options_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_start_options() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_start_options)
  return _internal_button_start_options();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_start_options(bool value) {
  _has_bits_[0] |= 0x00000400u;
  button_start_options_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_start_options(bool value) {
  _internal_set_button_start_options(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_start_options)
}

// optional bool button_steam = 12;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_steam() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_steam() const {
  return _internal_has_button_steam();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_steam() {
  button_steam_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_steam() const {
  return button_steam_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_steam() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_steam)
  return _internal_button_steam();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_steam(bool value) {
  _has_bits_[0] |= 0x00000800u;
  button_steam_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_steam(bool value) {
  _internal_set_button_steam(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_steam)
}

// optional bool button_quicaccess = 13;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_quicaccess() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_quicaccess() const {
  return _internal_has_button_quicaccess();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_quicaccess() {
  button_quicaccess_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_quicaccess() const {
  return button_quicaccess_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_quicaccess() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_quicaccess)
  return _internal_button_quicaccess();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_quicaccess(bool value) {
  _has_bits_[0] |= 0x00001000u;
  button_quicaccess_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_quicaccess(bool value) {
  _internal_set_button_quicaccess(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_quicaccess)
}

// optional bool button_mute_capture = 14;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_button_mute_capture() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_button_mute_capture() const {
  return _internal_has_button_mute_capture();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_button_mute_capture() {
  button_mute_capture_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_button_mute_capture() const {
  return button_mute_capture_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::button_mute_capture() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.button_mute_capture)
  return _internal_button_mute_capture();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_button_mute_capture(bool value) {
  _has_bits_[0] |= 0x00002000u;
  button_mute_capture_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_button_mute_capture(bool value) {
  _internal_set_button_mute_capture(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.button_mute_capture)
}

// optional bool left_sticclick = 15;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_sticclick() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_sticclick() const {
  return _internal_has_left_sticclick();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_sticclick() {
  left_sticclick_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_sticclick() const {
  return left_sticclick_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_sticclick() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_sticclick)
  return _internal_left_sticclick();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_sticclick(bool value) {
  _has_bits_[0] |= 0x00004000u;
  left_sticclick_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_sticclick(bool value) {
  _internal_set_left_sticclick(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_sticclick)
}

// optional bool left_stictouch = 16;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_stictouch() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_stictouch() const {
  return _internal_has_left_stictouch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_stictouch() {
  left_stictouch_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_stictouch() const {
  return left_stictouch_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_stictouch() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_stictouch)
  return _internal_left_stictouch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_stictouch(bool value) {
  _has_bits_[0] |= 0x00008000u;
  left_stictouch_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_stictouch(bool value) {
  _internal_set_left_stictouch(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_stictouch)
}

// optional bool left_sticdeflect = 17;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_sticdeflect() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_sticdeflect() const {
  return _internal_has_left_sticdeflect();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_sticdeflect() {
  left_sticdeflect_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_sticdeflect() const {
  return left_sticdeflect_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_sticdeflect() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_sticdeflect)
  return _internal_left_sticdeflect();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_sticdeflect(bool value) {
  _has_bits_[0] |= 0x00010000u;
  left_sticdeflect_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_sticdeflect(bool value) {
  _internal_set_left_sticdeflect(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_sticdeflect)
}

// optional bool right_sticclick = 18;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_sticclick() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_sticclick() const {
  return _internal_has_right_sticclick();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_sticclick() {
  right_sticclick_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_sticclick() const {
  return right_sticclick_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_sticclick() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_sticclick)
  return _internal_right_sticclick();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_sticclick(bool value) {
  _has_bits_[0] |= 0x00020000u;
  right_sticclick_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_sticclick(bool value) {
  _internal_set_right_sticclick(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_sticclick)
}

// optional bool right_stictouch = 19;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_stictouch() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_stictouch() const {
  return _internal_has_right_stictouch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_stictouch() {
  right_stictouch_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_stictouch() const {
  return right_stictouch_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_stictouch() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_stictouch)
  return _internal_right_stictouch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_stictouch(bool value) {
  _has_bits_[0] |= 0x00040000u;
  right_stictouch_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_stictouch(bool value) {
  _internal_set_right_stictouch(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_stictouch)
}

// optional bool right_sticdeflect = 20;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_sticdeflect() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_sticdeflect() const {
  return _internal_has_right_sticdeflect();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_sticdeflect() {
  right_sticdeflect_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_sticdeflect() const {
  return right_sticdeflect_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_sticdeflect() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_sticdeflect)
  return _internal_right_sticdeflect();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_sticdeflect(bool value) {
  _has_bits_[0] |= 0x00080000u;
  right_sticdeflect_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_sticdeflect(bool value) {
  _internal_set_right_sticdeflect(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_sticdeflect)
}

// optional bool center_trackpad_touch = 21;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_center_trackpad_touch() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_center_trackpad_touch() const {
  return _internal_has_center_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_center_trackpad_touch() {
  center_trackpad_touch_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_center_trackpad_touch() const {
  return center_trackpad_touch_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::center_trackpad_touch() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.center_trackpad_touch)
  return _internal_center_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_center_trackpad_touch(bool value) {
  _has_bits_[0] |= 0x00100000u;
  center_trackpad_touch_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_center_trackpad_touch(bool value) {
  _internal_set_center_trackpad_touch(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.center_trackpad_touch)
}

// optional bool center_trackpad_click = 22;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_center_trackpad_click() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_center_trackpad_click() const {
  return _internal_has_center_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_center_trackpad_click() {
  center_trackpad_click_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_center_trackpad_click() const {
  return center_trackpad_click_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::center_trackpad_click() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.center_trackpad_click)
  return _internal_center_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_center_trackpad_click(bool value) {
  _has_bits_[0] |= 0x00200000u;
  center_trackpad_click_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_center_trackpad_click(bool value) {
  _internal_set_center_trackpad_click(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.center_trackpad_click)
}

// optional bool left_trackpad_touch = 23;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_trackpad_touch() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_trackpad_touch() const {
  return _internal_has_left_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_trackpad_touch() {
  left_trackpad_touch_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_trackpad_touch() const {
  return left_trackpad_touch_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_trackpad_touch() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_trackpad_touch)
  return _internal_left_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_trackpad_touch(bool value) {
  _has_bits_[0] |= 0x00400000u;
  left_trackpad_touch_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_trackpad_touch(bool value) {
  _internal_set_left_trackpad_touch(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_trackpad_touch)
}

// optional bool left_trackpad_click = 24;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_trackpad_click() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_trackpad_click() const {
  return _internal_has_left_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_trackpad_click() {
  left_trackpad_click_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_trackpad_click() const {
  return left_trackpad_click_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_trackpad_click() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_trackpad_click)
  return _internal_left_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_trackpad_click(bool value) {
  _has_bits_[0] |= 0x00800000u;
  left_trackpad_click_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_trackpad_click(bool value) {
  _internal_set_left_trackpad_click(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_trackpad_click)
}

// optional bool right_trackpad_touch = 25;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_trackpad_touch() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_trackpad_touch() const {
  return _internal_has_right_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_trackpad_touch() {
  right_trackpad_touch_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_trackpad_touch() const {
  return right_trackpad_touch_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_trackpad_touch() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_trackpad_touch)
  return _internal_right_trackpad_touch();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_trackpad_touch(bool value) {
  _has_bits_[0] |= 0x01000000u;
  right_trackpad_touch_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_trackpad_touch(bool value) {
  _internal_set_right_trackpad_touch(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_trackpad_touch)
}

// optional bool right_trackpad_click = 26;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_trackpad_click() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_trackpad_click() const {
  return _internal_has_right_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_trackpad_click() {
  right_trackpad_click_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_trackpad_click() const {
  return right_trackpad_click_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_trackpad_click() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_trackpad_click)
  return _internal_right_trackpad_click();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_trackpad_click(bool value) {
  _has_bits_[0] |= 0x02000000u;
  right_trackpad_click_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_trackpad_click(bool value) {
  _internal_set_right_trackpad_click(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_trackpad_click)
}

// optional bool left_bumper = 27;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_bumper() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_bumper() const {
  return _internal_has_left_bumper();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_bumper() {
  left_bumper_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_bumper() const {
  return left_bumper_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_bumper() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_bumper)
  return _internal_left_bumper();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_bumper(bool value) {
  _has_bits_[0] |= 0x04000000u;
  left_bumper_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_bumper(bool value) {
  _internal_set_left_bumper(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_bumper)
}

// optional bool left_trigger = 28;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_trigger() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_trigger() const {
  return _internal_has_left_trigger();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_trigger() {
  left_trigger_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_trigger() const {
  return left_trigger_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_trigger() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_trigger)
  return _internal_left_trigger();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_trigger(bool value) {
  _has_bits_[0] |= 0x08000000u;
  left_trigger_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_trigger(bool value) {
  _internal_set_left_trigger(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_trigger)
}

// optional bool l4 = 29;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_l4() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_l4() const {
  return _internal_has_l4();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_l4() {
  l4_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_l4() const {
  return l4_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::l4() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.l4)
  return _internal_l4();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_l4(bool value) {
  _has_bits_[0] |= 0x10000000u;
  l4_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_l4(bool value) {
  _internal_set_l4(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.l4)
}

// optional bool l5 = 30;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_l5() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_l5() const {
  return _internal_has_l5();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_l5() {
  l5_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_l5() const {
  return l5_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::l5() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.l5)
  return _internal_l5();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_l5(bool value) {
  _has_bits_[0] |= 0x20000000u;
  l5_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_l5(bool value) {
  _internal_set_l5(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.l5)
}

// optional bool left_aux = 31;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_left_aux() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_left_aux() const {
  return _internal_has_left_aux();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_left_aux() {
  left_aux_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_left_aux() const {
  return left_aux_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::left_aux() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.left_aux)
  return _internal_left_aux();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_left_aux(bool value) {
  _has_bits_[0] |= 0x40000000u;
  left_aux_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_left_aux(bool value) {
  _internal_set_left_aux(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.left_aux)
}

// optional bool right_bumper = 32;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_bumper() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_bumper() const {
  return _internal_has_right_bumper();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_bumper() {
  right_bumper_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_bumper() const {
  return right_bumper_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_bumper() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_bumper)
  return _internal_right_bumper();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_bumper(bool value) {
  _has_bits_[0] |= 0x80000000u;
  right_bumper_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_bumper(bool value) {
  _internal_set_right_bumper(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_bumper)
}

// optional bool right_trigger = 33;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_trigger() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_trigger() const {
  return _internal_has_right_trigger();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_trigger() {
  right_trigger_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_trigger() const {
  return right_trigger_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_trigger() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_trigger)
  return _internal_right_trigger();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_trigger(bool value) {
  _has_bits_[1] |= 0x00000001u;
  right_trigger_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_trigger(bool value) {
  _internal_set_right_trigger(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_trigger)
}

// optional bool r4 = 34;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_r4() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_r4() const {
  return _internal_has_r4();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_r4() {
  r4_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_r4() const {
  return r4_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::r4() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.r4)
  return _internal_r4();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_r4(bool value) {
  _has_bits_[1] |= 0x00000002u;
  r4_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_r4(bool value) {
  _internal_set_r4(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.r4)
}

// optional bool r5 = 35;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_r5() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_r5() const {
  return _internal_has_r5();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_r5() {
  r5_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_r5() const {
  return r5_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::r5() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.r5)
  return _internal_r5();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_r5(bool value) {
  _has_bits_[1] |= 0x00000004u;
  r5_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_r5(bool value) {
  _internal_set_r5(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.r5)
}

// optional bool right_aux = 36;
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_has_right_aux() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::has_right_aux() const {
  return _internal_has_right_aux();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::clear_right_aux() {
  right_aux_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::_internal_right_aux() const {
  return right_aux_;
}
inline bool CSteamInputService_ControllerButtonStateChanged_Notification::right_aux() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerButtonStateChanged_Notification.right_aux)
  return _internal_right_aux();
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::_internal_set_right_aux(bool value) {
  _has_bits_[1] |= 0x00000008u;
  right_aux_ = value;
}
inline void CSteamInputService_ControllerButtonStateChanged_Notification::set_right_aux(bool value) {
  _internal_set_right_aux(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerButtonStateChanged_Notification.right_aux)
}

// -------------------------------------------------------------------

// ControllerVector2

// optional float x = 1;
inline bool ControllerVector2::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerVector2::has_x() const {
  return _internal_has_x();
}
inline void ControllerVector2::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ControllerVector2::_internal_x() const {
  return x_;
}
inline float ControllerVector2::x() const {
  // @@protoc_insertion_point(field_get:ControllerVector2.x)
  return _internal_x();
}
inline void ControllerVector2::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void ControllerVector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ControllerVector2.x)
}

// optional float y = 2;
inline bool ControllerVector2::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControllerVector2::has_y() const {
  return _internal_has_y();
}
inline void ControllerVector2::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ControllerVector2::_internal_y() const {
  return y_;
}
inline float ControllerVector2::y() const {
  // @@protoc_insertion_point(field_get:ControllerVector2.y)
  return _internal_y();
}
inline void ControllerVector2::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void ControllerVector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ControllerVector2.y)
}

// -------------------------------------------------------------------

// ControllerVector3

// optional float x = 1;
inline bool ControllerVector3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerVector3::has_x() const {
  return _internal_has_x();
}
inline void ControllerVector3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ControllerVector3::_internal_x() const {
  return x_;
}
inline float ControllerVector3::x() const {
  // @@protoc_insertion_point(field_get:ControllerVector3.x)
  return _internal_x();
}
inline void ControllerVector3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void ControllerVector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ControllerVector3.x)
}

// optional float y = 2;
inline bool ControllerVector3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControllerVector3::has_y() const {
  return _internal_has_y();
}
inline void ControllerVector3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ControllerVector3::_internal_y() const {
  return y_;
}
inline float ControllerVector3::y() const {
  // @@protoc_insertion_point(field_get:ControllerVector3.y)
  return _internal_y();
}
inline void ControllerVector3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void ControllerVector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ControllerVector3.y)
}

// optional float z = 3;
inline bool ControllerVector3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControllerVector3::has_z() const {
  return _internal_has_z();
}
inline void ControllerVector3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ControllerVector3::_internal_z() const {
  return z_;
}
inline float ControllerVector3::z() const {
  // @@protoc_insertion_point(field_get:ControllerVector3.z)
  return _internal_z();
}
inline void ControllerVector3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void ControllerVector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ControllerVector3.z)
}

// -------------------------------------------------------------------

// ControllerQuaternion

// optional float w = 1;
inline bool ControllerQuaternion::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerQuaternion::has_w() const {
  return _internal_has_w();
}
inline void ControllerQuaternion::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ControllerQuaternion::_internal_w() const {
  return w_;
}
inline float ControllerQuaternion::w() const {
  // @@protoc_insertion_point(field_get:ControllerQuaternion.w)
  return _internal_w();
}
inline void ControllerQuaternion::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000001u;
  w_ = value;
}
inline void ControllerQuaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ControllerQuaternion.w)
}

// optional float x = 2;
inline bool ControllerQuaternion::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControllerQuaternion::has_x() const {
  return _internal_has_x();
}
inline void ControllerQuaternion::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ControllerQuaternion::_internal_x() const {
  return x_;
}
inline float ControllerQuaternion::x() const {
  // @@protoc_insertion_point(field_get:ControllerQuaternion.x)
  return _internal_x();
}
inline void ControllerQuaternion::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void ControllerQuaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ControllerQuaternion.x)
}

// optional float y = 3;
inline bool ControllerQuaternion::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControllerQuaternion::has_y() const {
  return _internal_has_y();
}
inline void ControllerQuaternion::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ControllerQuaternion::_internal_y() const {
  return y_;
}
inline float ControllerQuaternion::y() const {
  // @@protoc_insertion_point(field_get:ControllerQuaternion.y)
  return _internal_y();
}
inline void ControllerQuaternion::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void ControllerQuaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ControllerQuaternion.y)
}

// optional float z = 4;
inline bool ControllerQuaternion::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControllerQuaternion::has_z() const {
  return _internal_has_z();
}
inline void ControllerQuaternion::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ControllerQuaternion::_internal_z() const {
  return z_;
}
inline float ControllerQuaternion::z() const {
  // @@protoc_insertion_point(field_get:ControllerQuaternion.z)
  return _internal_z();
}
inline void ControllerQuaternion::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
}
inline void ControllerQuaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ControllerQuaternion.z)
}

// -------------------------------------------------------------------

// ControllerGyroEulerAngles

// optional float pitch = 1;
inline bool ControllerGyroEulerAngles::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerGyroEulerAngles::has_pitch() const {
  return _internal_has_pitch();
}
inline void ControllerGyroEulerAngles::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ControllerGyroEulerAngles::_internal_pitch() const {
  return pitch_;
}
inline float ControllerGyroEulerAngles::pitch() const {
  // @@protoc_insertion_point(field_get:ControllerGyroEulerAngles.pitch)
  return _internal_pitch();
}
inline void ControllerGyroEulerAngles::_internal_set_pitch(float value) {
  _has_bits_[0] |= 0x00000001u;
  pitch_ = value;
}
inline void ControllerGyroEulerAngles::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:ControllerGyroEulerAngles.pitch)
}

// optional float yaw = 2;
inline bool ControllerGyroEulerAngles::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControllerGyroEulerAngles::has_yaw() const {
  return _internal_has_yaw();
}
inline void ControllerGyroEulerAngles::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ControllerGyroEulerAngles::_internal_yaw() const {
  return yaw_;
}
inline float ControllerGyroEulerAngles::yaw() const {
  // @@protoc_insertion_point(field_get:ControllerGyroEulerAngles.yaw)
  return _internal_yaw();
}
inline void ControllerGyroEulerAngles::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000002u;
  yaw_ = value;
}
inline void ControllerGyroEulerAngles::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:ControllerGyroEulerAngles.yaw)
}

// optional float roll = 3;
inline bool ControllerGyroEulerAngles::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControllerGyroEulerAngles::has_roll() const {
  return _internal_has_roll();
}
inline void ControllerGyroEulerAngles::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ControllerGyroEulerAngles::_internal_roll() const {
  return roll_;
}
inline float ControllerGyroEulerAngles::roll() const {
  // @@protoc_insertion_point(field_get:ControllerGyroEulerAngles.roll)
  return _internal_roll();
}
inline void ControllerGyroEulerAngles::_internal_set_roll(float value) {
  _has_bits_[0] |= 0x00000004u;
  roll_ = value;
}
inline void ControllerGyroEulerAngles::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:ControllerGyroEulerAngles.roll)
}

// -------------------------------------------------------------------

// CSteamInputService_ControllerAxesStateChange_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerAxesStateChange_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerAxesStateChange_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  controller_index_ = value;
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerAxesStateChange_Notification.controller_index)
}

// optional .ControllerVector2 joysticleft = 2;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_joysticleft() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || joysticleft_ != nullptr);
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_joysticleft() const {
  return _internal_has_joysticleft();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_joysticleft() {
  if (joysticleft_ != nullptr) joysticleft_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::_internal_joysticleft() const {
  const ::ControllerVector2* p = joysticleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector2&>(
      ::_ControllerVector2_default_instance_);
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::joysticleft() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.joysticleft)
  return _internal_joysticleft();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_set_allocated_joysticleft(
    ::ControllerVector2* joysticleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joysticleft_);
  }
  joysticleft_ = joysticleft;
  if (joysticleft) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.joysticleft)
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::release_joysticleft() {
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerVector2* temp = joysticleft_;
  joysticleft_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_release_joysticleft() {
  // @@protoc_insertion_point(field_release:CSteamInputService_ControllerAxesStateChange_Notification.joysticleft)
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerVector2* temp = joysticleft_;
  joysticleft_ = nullptr;
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::_internal_mutable_joysticleft() {
  _has_bits_[0] |= 0x00000001u;
  if (joysticleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector2>(GetArena());
    joysticleft_ = p;
  }
  return joysticleft_;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::mutable_joysticleft() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_ControllerAxesStateChange_Notification.joysticleft)
  return _internal_mutable_joysticleft();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_allocated_joysticleft(::ControllerVector2* joysticleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete joysticleft_;
  }
  if (joysticleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joysticleft);
    if (message_arena != submessage_arena) {
      joysticleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joysticleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  joysticleft_ = joysticleft;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.joysticleft)
}

// optional .ControllerVector2 joysticright = 3;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_joysticright() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || joysticright_ != nullptr);
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_joysticright() const {
  return _internal_has_joysticright();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_joysticright() {
  if (joysticright_ != nullptr) joysticright_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::_internal_joysticright() const {
  const ::ControllerVector2* p = joysticright_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector2&>(
      ::_ControllerVector2_default_instance_);
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::joysticright() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.joysticright)
  return _internal_joysticright();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_set_allocated_joysticright(
    ::ControllerVector2* joysticright) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joysticright_);
  }
  joysticright_ = joysticright;
  if (joysticright) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.joysticright)
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::release_joysticright() {
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerVector2* temp = joysticright_;
  joysticright_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_release_joysticright() {
  // @@protoc_insertion_point(field_release:CSteamInputService_ControllerAxesStateChange_Notification.joysticright)
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerVector2* temp = joysticright_;
  joysticright_ = nullptr;
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::_internal_mutable_joysticright() {
  _has_bits_[0] |= 0x00000002u;
  if (joysticright_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector2>(GetArena());
    joysticright_ = p;
  }
  return joysticright_;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::mutable_joysticright() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_ControllerAxesStateChange_Notification.joysticright)
  return _internal_mutable_joysticright();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_allocated_joysticright(::ControllerVector2* joysticright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete joysticright_;
  }
  if (joysticright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joysticright);
    if (message_arena != submessage_arena) {
      joysticright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joysticright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  joysticright_ = joysticright;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.joysticright)
}

// optional .ControllerVector2 trackpad_left = 4;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trackpad_left() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || trackpad_left_ != nullptr);
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trackpad_left() const {
  return _internal_has_trackpad_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trackpad_left() {
  if (trackpad_left_ != nullptr) trackpad_left_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::_internal_trackpad_left() const {
  const ::ControllerVector2* p = trackpad_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector2&>(
      ::_ControllerVector2_default_instance_);
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::trackpad_left() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left)
  return _internal_trackpad_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_set_allocated_trackpad_left(
    ::ControllerVector2* trackpad_left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trackpad_left_);
  }
  trackpad_left_ = trackpad_left;
  if (trackpad_left) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left)
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::release_trackpad_left() {
  _has_bits_[0] &= ~0x00000004u;
  ::ControllerVector2* temp = trackpad_left_;
  trackpad_left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_release_trackpad_left() {
  // @@protoc_insertion_point(field_release:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left)
  _has_bits_[0] &= ~0x00000004u;
  ::ControllerVector2* temp = trackpad_left_;
  trackpad_left_ = nullptr;
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::_internal_mutable_trackpad_left() {
  _has_bits_[0] |= 0x00000004u;
  if (trackpad_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector2>(GetArena());
    trackpad_left_ = p;
  }
  return trackpad_left_;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::mutable_trackpad_left() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left)
  return _internal_mutable_trackpad_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_allocated_trackpad_left(::ControllerVector2* trackpad_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trackpad_left_;
  }
  if (trackpad_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trackpad_left);
    if (message_arena != submessage_arena) {
      trackpad_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trackpad_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trackpad_left_ = trackpad_left;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left)
}

// optional .ControllerVector2 trackpad_right = 5;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trackpad_right() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || trackpad_right_ != nullptr);
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trackpad_right() const {
  return _internal_has_trackpad_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trackpad_right() {
  if (trackpad_right_ != nullptr) trackpad_right_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::_internal_trackpad_right() const {
  const ::ControllerVector2* p = trackpad_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector2&>(
      ::_ControllerVector2_default_instance_);
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::trackpad_right() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right)
  return _internal_trackpad_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_set_allocated_trackpad_right(
    ::ControllerVector2* trackpad_right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trackpad_right_);
  }
  trackpad_right_ = trackpad_right;
  if (trackpad_right) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right)
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::release_trackpad_right() {
  _has_bits_[0] &= ~0x00000008u;
  ::ControllerVector2* temp = trackpad_right_;
  trackpad_right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_release_trackpad_right() {
  // @@protoc_insertion_point(field_release:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right)
  _has_bits_[0] &= ~0x00000008u;
  ::ControllerVector2* temp = trackpad_right_;
  trackpad_right_ = nullptr;
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::_internal_mutable_trackpad_right() {
  _has_bits_[0] |= 0x00000008u;
  if (trackpad_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector2>(GetArena());
    trackpad_right_ = p;
  }
  return trackpad_right_;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::mutable_trackpad_right() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right)
  return _internal_mutable_trackpad_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_allocated_trackpad_right(::ControllerVector2* trackpad_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trackpad_right_;
  }
  if (trackpad_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trackpad_right);
    if (message_arena != submessage_arena) {
      trackpad_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trackpad_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trackpad_right_ = trackpad_right;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right)
}

// optional .ControllerVector2 trackpad_center = 6;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trackpad_center() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || trackpad_center_ != nullptr);
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trackpad_center() const {
  return _internal_has_trackpad_center();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trackpad_center() {
  if (trackpad_center_ != nullptr) trackpad_center_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::_internal_trackpad_center() const {
  const ::ControllerVector2* p = trackpad_center_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector2&>(
      ::_ControllerVector2_default_instance_);
}
inline const ::ControllerVector2& CSteamInputService_ControllerAxesStateChange_Notification::trackpad_center() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center)
  return _internal_trackpad_center();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_set_allocated_trackpad_center(
    ::ControllerVector2* trackpad_center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trackpad_center_);
  }
  trackpad_center_ = trackpad_center;
  if (trackpad_center) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center)
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::release_trackpad_center() {
  _has_bits_[0] &= ~0x00000010u;
  ::ControllerVector2* temp = trackpad_center_;
  trackpad_center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::unsafe_arena_release_trackpad_center() {
  // @@protoc_insertion_point(field_release:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center)
  _has_bits_[0] &= ~0x00000010u;
  ::ControllerVector2* temp = trackpad_center_;
  trackpad_center_ = nullptr;
  return temp;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::_internal_mutable_trackpad_center() {
  _has_bits_[0] |= 0x00000010u;
  if (trackpad_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector2>(GetArena());
    trackpad_center_ = p;
  }
  return trackpad_center_;
}
inline ::ControllerVector2* CSteamInputService_ControllerAxesStateChange_Notification::mutable_trackpad_center() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center)
  return _internal_mutable_trackpad_center();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_allocated_trackpad_center(::ControllerVector2* trackpad_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trackpad_center_;
  }
  if (trackpad_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trackpad_center);
    if (message_arena != submessage_arena) {
      trackpad_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trackpad_center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  trackpad_center_ = trackpad_center;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center)
}

// optional float trackpad_pressure_left = 7;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trackpad_pressure_left() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trackpad_pressure_left() const {
  return _internal_has_trackpad_pressure_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trackpad_pressure_left() {
  trackpad_pressure_left_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::_internal_trackpad_pressure_left() const {
  return trackpad_pressure_left_;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::trackpad_pressure_left() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_pressure_left)
  return _internal_trackpad_pressure_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::_internal_set_trackpad_pressure_left(float value) {
  _has_bits_[0] |= 0x00000040u;
  trackpad_pressure_left_ = value;
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_trackpad_pressure_left(float value) {
  _internal_set_trackpad_pressure_left(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_pressure_left)
}

// optional float trackpad_pressure_right = 8;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trackpad_pressure_right() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trackpad_pressure_right() const {
  return _internal_has_trackpad_pressure_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trackpad_pressure_right() {
  trackpad_pressure_right_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::_internal_trackpad_pressure_right() const {
  return trackpad_pressure_right_;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::trackpad_pressure_right() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_pressure_right)
  return _internal_trackpad_pressure_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::_internal_set_trackpad_pressure_right(float value) {
  _has_bits_[0] |= 0x00000080u;
  trackpad_pressure_right_ = value;
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_trackpad_pressure_right(float value) {
  _internal_set_trackpad_pressure_right(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerAxesStateChange_Notification.trackpad_pressure_right)
}

// optional float trigger_left = 9;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trigger_left() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trigger_left() const {
  return _internal_has_trigger_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trigger_left() {
  trigger_left_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::_internal_trigger_left() const {
  return trigger_left_;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::trigger_left() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trigger_left)
  return _internal_trigger_left();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::_internal_set_trigger_left(float value) {
  _has_bits_[0] |= 0x00000100u;
  trigger_left_ = value;
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_trigger_left(float value) {
  _internal_set_trigger_left(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerAxesStateChange_Notification.trigger_left)
}

// optional float trigger_right = 10;
inline bool CSteamInputService_ControllerAxesStateChange_Notification::_internal_has_trigger_right() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerAxesStateChange_Notification::has_trigger_right() const {
  return _internal_has_trigger_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::clear_trigger_right() {
  trigger_right_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::_internal_trigger_right() const {
  return trigger_right_;
}
inline float CSteamInputService_ControllerAxesStateChange_Notification::trigger_right() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerAxesStateChange_Notification.trigger_right)
  return _internal_trigger_right();
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::_internal_set_trigger_right(float value) {
  _has_bits_[0] |= 0x00000200u;
  trigger_right_ = value;
}
inline void CSteamInputService_ControllerAxesStateChange_Notification::set_trigger_right(float value) {
  _internal_set_trigger_right(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerAxesStateChange_Notification.trigger_right)
}

// -------------------------------------------------------------------

// CSteamInputService_GyroQuaternionChanged_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  controller_index_ = value;
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroQuaternionChanged_Notification.controller_index)
}

// optional uint32 imu_index = 2;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_imu_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_imu_index() const {
  return _internal_has_imu_index();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_imu_index() {
  imu_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::_internal_imu_index() const {
  return imu_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::imu_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.imu_index)
  return _internal_imu_index();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::_internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  imu_index_ = value;
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imu_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroQuaternionChanged_Notification.imu_index)
}

// optional .ControllerQuaternion gyro_raw_quaternion = 3;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_gyro_raw_quaternion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gyro_raw_quaternion_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_gyro_raw_quaternion() const {
  return _internal_has_gyro_raw_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_gyro_raw_quaternion() {
  if (gyro_raw_quaternion_ != nullptr) gyro_raw_quaternion_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ControllerQuaternion& CSteamInputService_GyroQuaternionChanged_Notification::_internal_gyro_raw_quaternion() const {
  const ::ControllerQuaternion* p = gyro_raw_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerQuaternion&>(
      ::_ControllerQuaternion_default_instance_);
}
inline const ::ControllerQuaternion& CSteamInputService_GyroQuaternionChanged_Notification::gyro_raw_quaternion() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion)
  return _internal_gyro_raw_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::unsafe_arena_set_allocated_gyro_raw_quaternion(
    ::ControllerQuaternion* gyro_raw_quaternion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_raw_quaternion_);
  }
  gyro_raw_quaternion_ = gyro_raw_quaternion;
  if (gyro_raw_quaternion) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion)
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::release_gyro_raw_quaternion() {
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerQuaternion* temp = gyro_raw_quaternion_;
  gyro_raw_quaternion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::unsafe_arena_release_gyro_raw_quaternion() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion)
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerQuaternion* temp = gyro_raw_quaternion_;
  gyro_raw_quaternion_ = nullptr;
  return temp;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::_internal_mutable_gyro_raw_quaternion() {
  _has_bits_[0] |= 0x00000001u;
  if (gyro_raw_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerQuaternion>(GetArena());
    gyro_raw_quaternion_ = p;
  }
  return gyro_raw_quaternion_;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::mutable_gyro_raw_quaternion() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion)
  return _internal_mutable_gyro_raw_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_allocated_gyro_raw_quaternion(::ControllerQuaternion* gyro_raw_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gyro_raw_quaternion_;
  }
  if (gyro_raw_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gyro_raw_quaternion);
    if (message_arena != submessage_arena) {
      gyro_raw_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro_raw_quaternion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gyro_raw_quaternion_ = gyro_raw_quaternion;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion)
}

// optional .ControllerQuaternion gyro_filtered_quaternion = 4;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_gyro_filtered_quaternion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gyro_filtered_quaternion_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_gyro_filtered_quaternion() const {
  return _internal_has_gyro_filtered_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_gyro_filtered_quaternion() {
  if (gyro_filtered_quaternion_ != nullptr) gyro_filtered_quaternion_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ControllerQuaternion& CSteamInputService_GyroQuaternionChanged_Notification::_internal_gyro_filtered_quaternion() const {
  const ::ControllerQuaternion* p = gyro_filtered_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerQuaternion&>(
      ::_ControllerQuaternion_default_instance_);
}
inline const ::ControllerQuaternion& CSteamInputService_GyroQuaternionChanged_Notification::gyro_filtered_quaternion() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion)
  return _internal_gyro_filtered_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::unsafe_arena_set_allocated_gyro_filtered_quaternion(
    ::ControllerQuaternion* gyro_filtered_quaternion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_filtered_quaternion_);
  }
  gyro_filtered_quaternion_ = gyro_filtered_quaternion;
  if (gyro_filtered_quaternion) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion)
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::release_gyro_filtered_quaternion() {
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerQuaternion* temp = gyro_filtered_quaternion_;
  gyro_filtered_quaternion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::unsafe_arena_release_gyro_filtered_quaternion() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion)
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerQuaternion* temp = gyro_filtered_quaternion_;
  gyro_filtered_quaternion_ = nullptr;
  return temp;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::_internal_mutable_gyro_filtered_quaternion() {
  _has_bits_[0] |= 0x00000002u;
  if (gyro_filtered_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerQuaternion>(GetArena());
    gyro_filtered_quaternion_ = p;
  }
  return gyro_filtered_quaternion_;
}
inline ::ControllerQuaternion* CSteamInputService_GyroQuaternionChanged_Notification::mutable_gyro_filtered_quaternion() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion)
  return _internal_mutable_gyro_filtered_quaternion();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_allocated_gyro_filtered_quaternion(::ControllerQuaternion* gyro_filtered_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gyro_filtered_quaternion_;
  }
  if (gyro_filtered_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gyro_filtered_quaternion);
    if (message_arena != submessage_arena) {
      gyro_filtered_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro_filtered_quaternion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gyro_filtered_quaternion_ = gyro_filtered_quaternion;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion)
}

// optional uint32 imu_sensor_delta_time = 5;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_imu_sensor_delta_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_imu_sensor_delta_time() const {
  return _internal_has_imu_sensor_delta_time();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_imu_sensor_delta_time() {
  imu_sensor_delta_time_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::_internal_imu_sensor_delta_time() const {
  return imu_sensor_delta_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::imu_sensor_delta_time() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.imu_sensor_delta_time)
  return _internal_imu_sensor_delta_time();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::_internal_set_imu_sensor_delta_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  imu_sensor_delta_time_ = value;
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_imu_sensor_delta_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imu_sensor_delta_time(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroQuaternionChanged_Notification.imu_sensor_delta_time)
}

// optional uint32 packet_number = 6;
inline bool CSteamInputService_GyroQuaternionChanged_Notification::_internal_has_packet_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSteamInputService_GyroQuaternionChanged_Notification::has_packet_number() const {
  return _internal_has_packet_number();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::clear_packet_number() {
  packet_number_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::_internal_packet_number() const {
  return packet_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroQuaternionChanged_Notification::packet_number() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroQuaternionChanged_Notification.packet_number)
  return _internal_packet_number();
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::_internal_set_packet_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  packet_number_ = value;
}
inline void CSteamInputService_GyroQuaternionChanged_Notification::set_packet_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_number(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroQuaternionChanged_Notification.packet_number)
}

// -------------------------------------------------------------------

// CSteamInputService_GyroSpeedChanged_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_GyroSpeedChanged_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_GyroSpeedChanged_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroSpeedChanged_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroSpeedChanged_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroSpeedChanged_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  controller_index_ = value;
}
inline void CSteamInputService_GyroSpeedChanged_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroSpeedChanged_Notification.controller_index)
}

// optional uint32 imu_index = 2;
inline bool CSteamInputService_GyroSpeedChanged_Notification::_internal_has_imu_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_GyroSpeedChanged_Notification::has_imu_index() const {
  return _internal_has_imu_index();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::clear_imu_index() {
  imu_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroSpeedChanged_Notification::_internal_imu_index() const {
  return imu_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroSpeedChanged_Notification::imu_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroSpeedChanged_Notification.imu_index)
  return _internal_imu_index();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::_internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  imu_index_ = value;
}
inline void CSteamInputService_GyroSpeedChanged_Notification::set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imu_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroSpeedChanged_Notification.imu_index)
}

// optional .ControllerGyroEulerAngles gyro_raw_speed = 3;
inline bool CSteamInputService_GyroSpeedChanged_Notification::_internal_has_gyro_raw_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gyro_raw_speed_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroSpeedChanged_Notification::has_gyro_raw_speed() const {
  return _internal_has_gyro_raw_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::clear_gyro_raw_speed() {
  if (gyro_raw_speed_ != nullptr) gyro_raw_speed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ControllerGyroEulerAngles& CSteamInputService_GyroSpeedChanged_Notification::_internal_gyro_raw_speed() const {
  const ::ControllerGyroEulerAngles* p = gyro_raw_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerGyroEulerAngles&>(
      ::_ControllerGyroEulerAngles_default_instance_);
}
inline const ::ControllerGyroEulerAngles& CSteamInputService_GyroSpeedChanged_Notification::gyro_raw_speed() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed)
  return _internal_gyro_raw_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::unsafe_arena_set_allocated_gyro_raw_speed(
    ::ControllerGyroEulerAngles* gyro_raw_speed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_raw_speed_);
  }
  gyro_raw_speed_ = gyro_raw_speed;
  if (gyro_raw_speed) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed)
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::release_gyro_raw_speed() {
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerGyroEulerAngles* temp = gyro_raw_speed_;
  gyro_raw_speed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::unsafe_arena_release_gyro_raw_speed() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed)
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerGyroEulerAngles* temp = gyro_raw_speed_;
  gyro_raw_speed_ = nullptr;
  return temp;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::_internal_mutable_gyro_raw_speed() {
  _has_bits_[0] |= 0x00000001u;
  if (gyro_raw_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerGyroEulerAngles>(GetArena());
    gyro_raw_speed_ = p;
  }
  return gyro_raw_speed_;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::mutable_gyro_raw_speed() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed)
  return _internal_mutable_gyro_raw_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::set_allocated_gyro_raw_speed(::ControllerGyroEulerAngles* gyro_raw_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gyro_raw_speed_;
  }
  if (gyro_raw_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gyro_raw_speed);
    if (message_arena != submessage_arena) {
      gyro_raw_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro_raw_speed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gyro_raw_speed_ = gyro_raw_speed;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed)
}

// optional .ControllerGyroEulerAngles gyro_filtered_speed = 4;
inline bool CSteamInputService_GyroSpeedChanged_Notification::_internal_has_gyro_filtered_speed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gyro_filtered_speed_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroSpeedChanged_Notification::has_gyro_filtered_speed() const {
  return _internal_has_gyro_filtered_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::clear_gyro_filtered_speed() {
  if (gyro_filtered_speed_ != nullptr) gyro_filtered_speed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ControllerGyroEulerAngles& CSteamInputService_GyroSpeedChanged_Notification::_internal_gyro_filtered_speed() const {
  const ::ControllerGyroEulerAngles* p = gyro_filtered_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerGyroEulerAngles&>(
      ::_ControllerGyroEulerAngles_default_instance_);
}
inline const ::ControllerGyroEulerAngles& CSteamInputService_GyroSpeedChanged_Notification::gyro_filtered_speed() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed)
  return _internal_gyro_filtered_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::unsafe_arena_set_allocated_gyro_filtered_speed(
    ::ControllerGyroEulerAngles* gyro_filtered_speed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_filtered_speed_);
  }
  gyro_filtered_speed_ = gyro_filtered_speed;
  if (gyro_filtered_speed) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed)
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::release_gyro_filtered_speed() {
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerGyroEulerAngles* temp = gyro_filtered_speed_;
  gyro_filtered_speed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::unsafe_arena_release_gyro_filtered_speed() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed)
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerGyroEulerAngles* temp = gyro_filtered_speed_;
  gyro_filtered_speed_ = nullptr;
  return temp;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::_internal_mutable_gyro_filtered_speed() {
  _has_bits_[0] |= 0x00000002u;
  if (gyro_filtered_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerGyroEulerAngles>(GetArena());
    gyro_filtered_speed_ = p;
  }
  return gyro_filtered_speed_;
}
inline ::ControllerGyroEulerAngles* CSteamInputService_GyroSpeedChanged_Notification::mutable_gyro_filtered_speed() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed)
  return _internal_mutable_gyro_filtered_speed();
}
inline void CSteamInputService_GyroSpeedChanged_Notification::set_allocated_gyro_filtered_speed(::ControllerGyroEulerAngles* gyro_filtered_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gyro_filtered_speed_;
  }
  if (gyro_filtered_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gyro_filtered_speed);
    if (message_arena != submessage_arena) {
      gyro_filtered_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro_filtered_speed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gyro_filtered_speed_ = gyro_filtered_speed;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed)
}

// -------------------------------------------------------------------

// CSteamInputService_GyroAccelerometerChanged_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroAccelerometerChanged_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroAccelerometerChanged_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroAccelerometerChanged_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  controller_index_ = value;
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroAccelerometerChanged_Notification.controller_index)
}

// optional uint32 imu_index = 2;
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::_internal_has_imu_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::has_imu_index() const {
  return _internal_has_imu_index();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::clear_imu_index() {
  imu_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroAccelerometerChanged_Notification::_internal_imu_index() const {
  return imu_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroAccelerometerChanged_Notification::imu_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroAccelerometerChanged_Notification.imu_index)
  return _internal_imu_index();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::_internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  imu_index_ = value;
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imu_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroAccelerometerChanged_Notification.imu_index)
}

// optional .ControllerVector3 acceleromter_1g = 4;
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::_internal_has_acceleromter_1g() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || acceleromter_1g_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::has_acceleromter_1g() const {
  return _internal_has_acceleromter_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::clear_acceleromter_1g() {
  if (acceleromter_1g_ != nullptr) acceleromter_1g_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ControllerVector3& CSteamInputService_GyroAccelerometerChanged_Notification::_internal_acceleromter_1g() const {
  const ::ControllerVector3* p = acceleromter_1g_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector3&>(
      ::_ControllerVector3_default_instance_);
}
inline const ::ControllerVector3& CSteamInputService_GyroAccelerometerChanged_Notification::acceleromter_1g() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g)
  return _internal_acceleromter_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::unsafe_arena_set_allocated_acceleromter_1g(
    ::ControllerVector3* acceleromter_1g) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleromter_1g_);
  }
  acceleromter_1g_ = acceleromter_1g;
  if (acceleromter_1g) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g)
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::release_acceleromter_1g() {
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerVector3* temp = acceleromter_1g_;
  acceleromter_1g_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::unsafe_arena_release_acceleromter_1g() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g)
  _has_bits_[0] &= ~0x00000001u;
  ::ControllerVector3* temp = acceleromter_1g_;
  acceleromter_1g_ = nullptr;
  return temp;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::_internal_mutable_acceleromter_1g() {
  _has_bits_[0] |= 0x00000001u;
  if (acceleromter_1g_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector3>(GetArena());
    acceleromter_1g_ = p;
  }
  return acceleromter_1g_;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::mutable_acceleromter_1g() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g)
  return _internal_mutable_acceleromter_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::set_allocated_acceleromter_1g(::ControllerVector3* acceleromter_1g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acceleromter_1g_;
  }
  if (acceleromter_1g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acceleromter_1g);
    if (message_arena != submessage_arena) {
      acceleromter_1g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleromter_1g, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  acceleromter_1g_ = acceleromter_1g;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g)
}

// optional .ControllerVector3 trusted_gravity_1g = 5;
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::_internal_has_trusted_gravity_1g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || trusted_gravity_1g_ != nullptr);
  return value;
}
inline bool CSteamInputService_GyroAccelerometerChanged_Notification::has_trusted_gravity_1g() const {
  return _internal_has_trusted_gravity_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::clear_trusted_gravity_1g() {
  if (trusted_gravity_1g_ != nullptr) trusted_gravity_1g_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ControllerVector3& CSteamInputService_GyroAccelerometerChanged_Notification::_internal_trusted_gravity_1g() const {
  const ::ControllerVector3* p = trusted_gravity_1g_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerVector3&>(
      ::_ControllerVector3_default_instance_);
}
inline const ::ControllerVector3& CSteamInputService_GyroAccelerometerChanged_Notification::trusted_gravity_1g() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g)
  return _internal_trusted_gravity_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::unsafe_arena_set_allocated_trusted_gravity_1g(
    ::ControllerVector3* trusted_gravity_1g) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_gravity_1g_);
  }
  trusted_gravity_1g_ = trusted_gravity_1g;
  if (trusted_gravity_1g) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g)
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::release_trusted_gravity_1g() {
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerVector3* temp = trusted_gravity_1g_;
  trusted_gravity_1g_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::unsafe_arena_release_trusted_gravity_1g() {
  // @@protoc_insertion_point(field_release:CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g)
  _has_bits_[0] &= ~0x00000002u;
  ::ControllerVector3* temp = trusted_gravity_1g_;
  trusted_gravity_1g_ = nullptr;
  return temp;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::_internal_mutable_trusted_gravity_1g() {
  _has_bits_[0] |= 0x00000002u;
  if (trusted_gravity_1g_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerVector3>(GetArena());
    trusted_gravity_1g_ = p;
  }
  return trusted_gravity_1g_;
}
inline ::ControllerVector3* CSteamInputService_GyroAccelerometerChanged_Notification::mutable_trusted_gravity_1g() {
  // @@protoc_insertion_point(field_mutable:CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g)
  return _internal_mutable_trusted_gravity_1g();
}
inline void CSteamInputService_GyroAccelerometerChanged_Notification::set_allocated_trusted_gravity_1g(::ControllerVector3* trusted_gravity_1g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trusted_gravity_1g_;
  }
  if (trusted_gravity_1g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trusted_gravity_1g);
    if (message_arena != submessage_arena) {
      trusted_gravity_1g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted_gravity_1g, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trusted_gravity_1g_ = trusted_gravity_1g;
  // @@protoc_insertion_point(field_set_allocated:CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g)
}

// -------------------------------------------------------------------

// CSteamInputService_GyroCalibration_Notification

// optional uint32 controller_index = 1;
inline bool CSteamInputService_GyroCalibration_Notification::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamInputService_GyroCalibration_Notification::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_GyroCalibration_Notification::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroCalibration_Notification::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroCalibration_Notification::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroCalibration_Notification.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_GyroCalibration_Notification::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  controller_index_ = value;
}
inline void CSteamInputService_GyroCalibration_Notification::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroCalibration_Notification.controller_index)
}

// optional uint32 imu_index = 2;
inline bool CSteamInputService_GyroCalibration_Notification::_internal_has_imu_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamInputService_GyroCalibration_Notification::has_imu_index() const {
  return _internal_has_imu_index();
}
inline void CSteamInputService_GyroCalibration_Notification::clear_imu_index() {
  imu_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroCalibration_Notification::_internal_imu_index() const {
  return imu_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_GyroCalibration_Notification::imu_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroCalibration_Notification.imu_index)
  return _internal_imu_index();
}
inline void CSteamInputService_GyroCalibration_Notification::_internal_set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  imu_index_ = value;
}
inline void CSteamInputService_GyroCalibration_Notification::set_imu_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imu_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroCalibration_Notification.imu_index)
}

// optional float acceleromter_noise = 3;
inline bool CSteamInputService_GyroCalibration_Notification::_internal_has_acceleromter_noise() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamInputService_GyroCalibration_Notification::has_acceleromter_noise() const {
  return _internal_has_acceleromter_noise();
}
inline void CSteamInputService_GyroCalibration_Notification::clear_acceleromter_noise() {
  acceleromter_noise_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CSteamInputService_GyroCalibration_Notification::_internal_acceleromter_noise() const {
  return acceleromter_noise_;
}
inline float CSteamInputService_GyroCalibration_Notification::acceleromter_noise() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroCalibration_Notification.acceleromter_noise)
  return _internal_acceleromter_noise();
}
inline void CSteamInputService_GyroCalibration_Notification::_internal_set_acceleromter_noise(float value) {
  _has_bits_[0] |= 0x00000004u;
  acceleromter_noise_ = value;
}
inline void CSteamInputService_GyroCalibration_Notification::set_acceleromter_noise(float value) {
  _internal_set_acceleromter_noise(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroCalibration_Notification.acceleromter_noise)
}

// optional float gyroscope_noise = 4;
inline bool CSteamInputService_GyroCalibration_Notification::_internal_has_gyroscope_noise() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamInputService_GyroCalibration_Notification::has_gyroscope_noise() const {
  return _internal_has_gyroscope_noise();
}
inline void CSteamInputService_GyroCalibration_Notification::clear_gyroscope_noise() {
  gyroscope_noise_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CSteamInputService_GyroCalibration_Notification::_internal_gyroscope_noise() const {
  return gyroscope_noise_;
}
inline float CSteamInputService_GyroCalibration_Notification::gyroscope_noise() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroCalibration_Notification.gyroscope_noise)
  return _internal_gyroscope_noise();
}
inline void CSteamInputService_GyroCalibration_Notification::_internal_set_gyroscope_noise(float value) {
  _has_bits_[0] |= 0x00000008u;
  gyroscope_noise_ = value;
}
inline void CSteamInputService_GyroCalibration_Notification::set_gyroscope_noise(float value) {
  _internal_set_gyroscope_noise(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroCalibration_Notification.gyroscope_noise)
}

// optional float calibration_progress = 5;
inline bool CSteamInputService_GyroCalibration_Notification::_internal_has_calibration_progress() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSteamInputService_GyroCalibration_Notification::has_calibration_progress() const {
  return _internal_has_calibration_progress();
}
inline void CSteamInputService_GyroCalibration_Notification::clear_calibration_progress() {
  calibration_progress_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CSteamInputService_GyroCalibration_Notification::_internal_calibration_progress() const {
  return calibration_progress_;
}
inline float CSteamInputService_GyroCalibration_Notification::calibration_progress() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_GyroCalibration_Notification.calibration_progress)
  return _internal_calibration_progress();
}
inline void CSteamInputService_GyroCalibration_Notification::_internal_set_calibration_progress(float value) {
  _has_bits_[0] |= 0x00000010u;
  calibration_progress_ = value;
}
inline void CSteamInputService_GyroCalibration_Notification::set_calibration_progress(float value) {
  _internal_set_calibration_progress(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_GyroCalibration_Notification.calibration_progress)
}

// -------------------------------------------------------------------

// CSteamInputService_ControllerStateFlow_Request

// optional uint32 controller_index = 1;
inline bool CSteamInputService_ControllerStateFlow_Request::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerStateFlow_Request::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CSteamInputService_ControllerStateFlow_Request::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerStateFlow_Request::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerStateFlow_Request::controller_index() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerStateFlow_Request.controller_index)
  return _internal_controller_index();
}
inline void CSteamInputService_ControllerStateFlow_Request::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  controller_index_ = value;
}
inline void CSteamInputService_ControllerStateFlow_Request::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerStateFlow_Request.controller_index)
}

// optional uint32 flow_mode = 2;
inline bool CSteamInputService_ControllerStateFlow_Request::_internal_has_flow_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamInputService_ControllerStateFlow_Request::has_flow_mode() const {
  return _internal_has_flow_mode();
}
inline void CSteamInputService_ControllerStateFlow_Request::clear_flow_mode() {
  flow_mode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerStateFlow_Request::_internal_flow_mode() const {
  return flow_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamInputService_ControllerStateFlow_Request::flow_mode() const {
  // @@protoc_insertion_point(field_get:CSteamInputService_ControllerStateFlow_Request.flow_mode)
  return _internal_flow_mode();
}
inline void CSteamInputService_ControllerStateFlow_Request::_internal_set_flow_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flow_mode_ = value;
}
inline void CSteamInputService_ControllerStateFlow_Request::set_flow_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flow_mode(value);
  // @@protoc_insertion_point(field_set:CSteamInputService_ControllerStateFlow_Request.flow_mode)
}

// -------------------------------------------------------------------

// CSteamInputService_ControllerStateFlow_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteaminput_2eproto
