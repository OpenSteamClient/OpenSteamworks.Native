// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steamos.proto

#include "webuimessages_steamos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgFactoryResetState::CMsgFactoryResetState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : progress_(0)
  , is_running_(false)
  , is_restart_pending_(false)
  , rtime_estimated_completion_(0u){}
struct CMsgFactoryResetStateDefaultTypeInternal {
  constexpr CMsgFactoryResetStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFactoryResetStateDefaultTypeInternal() {}
  union {
    CMsgFactoryResetState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFactoryResetStateDefaultTypeInternal _CMsgFactoryResetState_default_instance_;
constexpr CSteamOSManagerState::CSteamOSManagerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : os_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , factory_reset_state_(nullptr)
  , startup_movie_variant_(0)

  , is_service_available_(false)
  , is_mandatory_update_available_(false)
  , is_status_led_control_available_(false)
  , is_tdp_limit_available_(false)
  , tdp_limit_min_(0)
  , tdp_limit_max_(0)
  , is_cec_available_(false)
  , is_wifi_debug_supported_(false)
  , is_wifi_debug_force_disabled_(false)
  , is_wifi_force_wpa_supplicant_supported_(false)
  , is_manual_gpu_clocavailable_(false)
  , manual_gpu_clocmin_(0)
  , manual_gpu_clocmax_(0){}
struct CSteamOSManagerStateDefaultTypeInternal {
  constexpr CSteamOSManagerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManagerStateDefaultTypeInternal() {}
  union {
    CSteamOSManagerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManagerStateDefaultTypeInternal _CSteamOSManagerState_default_instance_;
constexpr CSteamOSManager_GetState_Request::CSteamOSManager_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_GetState_RequestDefaultTypeInternal {
  constexpr CSteamOSManager_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_GetState_RequestDefaultTypeInternal() {}
  union {
    CSteamOSManager_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_GetState_RequestDefaultTypeInternal _CSteamOSManager_GetState_Request_default_instance_;
constexpr CSteamOSManager_GetState_Response::CSteamOSManager_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct CSteamOSManager_GetState_ResponseDefaultTypeInternal {
  constexpr CSteamOSManager_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_GetState_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSManager_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_GetState_ResponseDefaultTypeInternal _CSteamOSManager_GetState_Response_default_instance_;
constexpr CSteamOSManager_StateChanged_Notification::CSteamOSManager_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_StateChanged_NotificationDefaultTypeInternal {
  constexpr CSteamOSManager_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamOSManager_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_StateChanged_NotificationDefaultTypeInternal _CSteamOSManager_StateChanged_Notification_default_instance_;
constexpr CSteamOSManager_IsTelemetryHelperAvailable_Request::CSteamOSManager_IsTelemetryHelperAvailable_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : etype_(0)
{}
struct CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal {
  constexpr CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal() {}
  union {
    CSteamOSManager_IsTelemetryHelperAvailable_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal _CSteamOSManager_IsTelemetryHelperAvailable_Request_default_instance_;
constexpr CSteamOSManager_IsTelemetryHelperAvailable_Response::CSteamOSManager_IsTelemetryHelperAvailable_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_(false){}
struct CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal {
  constexpr CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSManager_IsTelemetryHelperAvailable_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal _CSteamOSManager_IsTelemetryHelperAvailable_Response_default_instance_;
constexpr CSteamOSManager_OptOutOfSideloadedClient_Request::CSteamOSManager_OptOutOfSideloadedClient_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal {
  constexpr CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal() {}
  union {
    CSteamOSManager_OptOutOfSideloadedClient_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal _CSteamOSManager_OptOutOfSideloadedClient_Request_default_instance_;
constexpr CSteamOSManager_OptOutOfSideloadedClient_Response::CSteamOSManager_OptOutOfSideloadedClient_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal {
  constexpr CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSManager_OptOutOfSideloadedClient_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal _CSteamOSManager_OptOutOfSideloadedClient_Response_default_instance_;
constexpr CSteamOSManager_ApplyMandatoryUpdate_Request::CSteamOSManager_ApplyMandatoryUpdate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal {
  constexpr CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal() {}
  union {
    CSteamOSManager_ApplyMandatoryUpdate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal _CSteamOSManager_ApplyMandatoryUpdate_Request_default_instance_;
constexpr CSteamOSManager_ApplyMandatoryUpdate_Response::CSteamOSManager_ApplyMandatoryUpdate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal {
  constexpr CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSManager_ApplyMandatoryUpdate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal _CSteamOSManager_ApplyMandatoryUpdate_Response_default_instance_;
constexpr CSteamOSManager_FactoryReset_Request::CSteamOSManager_FactoryReset_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reset_os_(false)
  , reset_user_data_(false){}
struct CSteamOSManager_FactoryReset_RequestDefaultTypeInternal {
  constexpr CSteamOSManager_FactoryReset_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_FactoryReset_RequestDefaultTypeInternal() {}
  union {
    CSteamOSManager_FactoryReset_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_FactoryReset_RequestDefaultTypeInternal _CSteamOSManager_FactoryReset_Request_default_instance_;
constexpr CSteamOSManager_FactoryReset_Response::CSteamOSManager_FactoryReset_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSManager_FactoryReset_ResponseDefaultTypeInternal {
  constexpr CSteamOSManager_FactoryReset_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSManager_FactoryReset_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSManager_FactoryReset_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSManager_FactoryReset_ResponseDefaultTypeInternal _CSteamOSManager_FactoryReset_Response_default_instance_;
constexpr CSteamOSSLSPlugin::CSteamOSSLSPlugin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : etype_(0)

  , is_available_(false)
  , is_enabled_(false){}
struct CSteamOSSLSPluginDefaultTypeInternal {
  constexpr CSteamOSSLSPluginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLSPluginDefaultTypeInternal() {}
  union {
    CSteamOSSLSPlugin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLSPluginDefaultTypeInternal _CSteamOSSLSPlugin_default_instance_;
constexpr CSteamOSSLSState::CSteamOSSLSState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plugins_()
  , is_available_(false)
  , is_enabled_(false){}
struct CSteamOSSLSStateDefaultTypeInternal {
  constexpr CSteamOSSLSStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLSStateDefaultTypeInternal() {}
  union {
    CSteamOSSLSState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLSStateDefaultTypeInternal _CSteamOSSLSState_default_instance_;
constexpr CSteamOSSLS_GetState_Request::CSteamOSSLS_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSSLS_GetState_RequestDefaultTypeInternal {
  constexpr CSteamOSSLS_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_GetState_RequestDefaultTypeInternal() {}
  union {
    CSteamOSSLS_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_GetState_RequestDefaultTypeInternal _CSteamOSSLS_GetState_Request_default_instance_;
constexpr CSteamOSSLS_GetState_Response::CSteamOSSLS_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct CSteamOSSLS_GetState_ResponseDefaultTypeInternal {
  constexpr CSteamOSSLS_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_GetState_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSSLS_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_GetState_ResponseDefaultTypeInternal _CSteamOSSLS_GetState_Response_default_instance_;
constexpr CSteamOSSLS_StateChanged_Notification::CSteamOSSLS_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal {
  constexpr CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CSteamOSSLS_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal _CSteamOSSLS_StateChanged_Notification_default_instance_;
constexpr CSteamOSSLS_SetEnabled_Request::CSteamOSSLS_SetEnabled_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal {
  constexpr CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal() {}
  union {
    CSteamOSSLS_SetEnabled_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal _CSteamOSSLS_SetEnabled_Request_default_instance_;
constexpr CSteamOSSLS_SetEnabled_Response::CSteamOSSLS_SetEnabled_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal {
  constexpr CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSSLS_SetEnabled_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal _CSteamOSSLS_SetEnabled_Response_default_instance_;
constexpr CSteamOSSLS_SetPluginEnabled_Request::CSteamOSSLS_SetPluginEnabled_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : etype_(0)

  , enabled_(false){}
struct CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal {
  constexpr CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal() {}
  union {
    CSteamOSSLS_SetPluginEnabled_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal _CSteamOSSLS_SetPluginEnabled_Request_default_instance_;
constexpr CSteamOSSLS_SetPluginEnabled_Response::CSteamOSSLS_SetPluginEnabled_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal {
  constexpr CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal() {}
  union {
    CSteamOSSLS_SetPluginEnabled_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal _CSteamOSSLS_SetPluginEnabled_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fsteamos_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fsteamos_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fsteamos_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fsteamos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, is_running_),
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, is_restart_pending_),
  PROTOBUF_FIELD_OFFSET(::CMsgFactoryResetState, rtime_estimated_completion_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_service_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, os_version_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_mandatory_update_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, startup_movie_variant_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_status_led_control_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, factory_reset_state_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_tdp_limit_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, tdp_limit_min_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, tdp_limit_max_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_cec_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_wifi_debug_supported_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_wifi_debug_force_disabled_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_wifi_force_wpa_supplicant_supported_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, is_manual_gpu_clocavailable_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, manual_gpu_clocmin_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManagerState, manual_gpu_clocmax_),
  3,
  0,
  4,
  2,
  5,
  1,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_GetState_Response, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Request, etype_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_IsTelemetryHelperAvailable_Response, available_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_OptOutOfSideloadedClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_OptOutOfSideloadedClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_ApplyMandatoryUpdate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_ApplyMandatoryUpdate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_FactoryReset_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_FactoryReset_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_FactoryReset_Request, reset_os_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_FactoryReset_Request, reset_user_data_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSManager_FactoryReset_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSPlugin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSPlugin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSPlugin, etype_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSPlugin, is_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSPlugin, is_enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSState, is_available_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSState, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLSState, plugins_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_GetState_Response, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetEnabled_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetEnabled_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetEnabled_Request, enabled_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetEnabled_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetPluginEnabled_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetPluginEnabled_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetPluginEnabled_Request, etype_),
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetPluginEnabled_Request, enabled_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamOSSLS_SetPluginEnabled_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgFactoryResetState)},
  { 13, 34, sizeof(::CSteamOSManagerState)},
  { 50, -1, sizeof(::CSteamOSManager_GetState_Request)},
  { 55, 61, sizeof(::CSteamOSManager_GetState_Response)},
  { 62, -1, sizeof(::CSteamOSManager_StateChanged_Notification)},
  { 67, 73, sizeof(::CSteamOSManager_IsTelemetryHelperAvailable_Request)},
  { 74, 80, sizeof(::CSteamOSManager_IsTelemetryHelperAvailable_Response)},
  { 81, -1, sizeof(::CSteamOSManager_OptOutOfSideloadedClient_Request)},
  { 86, -1, sizeof(::CSteamOSManager_OptOutOfSideloadedClient_Response)},
  { 91, -1, sizeof(::CSteamOSManager_ApplyMandatoryUpdate_Request)},
  { 96, -1, sizeof(::CSteamOSManager_ApplyMandatoryUpdate_Response)},
  { 101, 108, sizeof(::CSteamOSManager_FactoryReset_Request)},
  { 110, -1, sizeof(::CSteamOSManager_FactoryReset_Response)},
  { 115, 123, sizeof(::CSteamOSSLSPlugin)},
  { 126, 134, sizeof(::CSteamOSSLSState)},
  { 137, -1, sizeof(::CSteamOSSLS_GetState_Request)},
  { 142, 148, sizeof(::CSteamOSSLS_GetState_Response)},
  { 149, -1, sizeof(::CSteamOSSLS_StateChanged_Notification)},
  { 154, 160, sizeof(::CSteamOSSLS_SetEnabled_Request)},
  { 161, -1, sizeof(::CSteamOSSLS_SetEnabled_Response)},
  { 166, 173, sizeof(::CSteamOSSLS_SetPluginEnabled_Request)},
  { 175, -1, sizeof(::CSteamOSSLS_SetPluginEnabled_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFactoryResetState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManagerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_IsTelemetryHelperAvailable_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_IsTelemetryHelperAvailable_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_OptOutOfSideloadedClient_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_OptOutOfSideloadedClient_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_ApplyMandatoryUpdate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_ApplyMandatoryUpdate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_FactoryReset_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSManager_FactoryReset_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLSPlugin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLSState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_SetEnabled_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_SetEnabled_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_SetPluginEnabled_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamOSSLS_SetPluginEnabled_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fsteamos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033webuimessages_steamos.proto\032 google/pr"
  "otobuf/descriptor.proto\032\013enums.proto\032\030st"
  "eammessages_base.proto\032\030webuimessages_ba"
  "se.proto\"}\n\025CMsgFactoryResetState\022\022\n\nis_"
  "running\030\001 \001(\010\022\020\n\010progress\030\002 \001(\005\022\032\n\022is_re"
  "start_pending\030\003 \001(\010\022\"\n\032rtime_estimated_c"
  "ompletion\030\004 \001(\007\"\335\004\n\024CSteamOSManagerState"
  "\022\034\n\024is_service_available\030\001 \001(\010\022\022\n\nos_ver"
  "sion\030\002 \001(\t\022%\n\035is_mandatory_update_availa"
  "ble\030\003 \001(\010\022R\n\025startup_movie_variant\030\004 \001(\016"
  "2\025.EStartupMovieVariant:\034EStartupMovieVa"
  "riant_Invalid\022\'\n\037is_status_led_control_a"
  "vailable\030\005 \001(\010\0223\n\023factory_reset_state\030\006 "
  "\001(\0132\026.CMsgFactoryResetState\022\036\n\026is_tdp_li"
  "mit_available\030\007 \001(\010\022\025\n\rtdp_limit_min\030\010 \001"
  "(\005\022\025\n\rtdp_limit_max\030\t \001(\005\022\030\n\020is_cec_avai"
  "lable\030\n \001(\010\022\037\n\027is_wifi_debug_supported\030\013"
  " \001(\010\022$\n\034is_wifi_debug_force_disabled\030\014 \001"
  "(\010\022.\n&is_wifi_force_wpa_supplicant_suppo"
  "rted\030\r \001(\010\022#\n\033is_manual_gpu_clocavailabl"
  "e\030\016 \001(\010\022\032\n\022manual_gpu_clocmin\030\017 \001(\005\022\032\n\022m"
  "anual_gpu_clocmax\030\020 \001(\005\"\"\n CSteamOSManag"
  "er_GetState_Request\"I\n!CSteamOSManager_G"
  "etState_Response\022$\n\005state\030\001 \001(\0132\025.CSteam"
  "OSManagerState\"+\n)CSteamOSManager_StateC"
  "hanged_Notification\"d\n2CSteamOSManager_I"
  "sTelemetryHelperAvailable_Request\022.\n\005ety"
  "pe\030\001 \001(\0162\013.ESLSHelper:\022ESLSHelper_Invali"
  "d\"H\n3CSteamOSManager_IsTelemetryHelperAv"
  "ailable_Response\022\021\n\tavailable\030\001 \001(\010\"2\n0C"
  "SteamOSManager_OptOutOfSideloadedClient_"
  "Request\"3\n1CSteamOSManager_OptOutOfSidel"
  "oadedClient_Response\".\n,CSteamOSManager_"
  "ApplyMandatoryUpdate_Request\"/\n-CSteamOS"
  "Manager_ApplyMandatoryUpdate_Response\"Q\n"
  "$CSteamOSManager_FactoryReset_Request\022\020\n"
  "\010reset_os\030\001 \001(\010\022\027\n\017reset_user_data\030\002 \001(\010"
  "\"\'\n%CSteamOSManager_FactoryReset_Respons"
  "e\"m\n\021CSteamOSSLSPlugin\022.\n\005etype\030\001 \001(\0162\013."
  "ESLSHelper:\022ESLSHelper_Invalid\022\024\n\014is_ava"
  "ilable\030\002 \001(\010\022\022\n\nis_enabled\030\003 \001(\010\"a\n\020CSte"
  "amOSSLSState\022\024\n\014is_available\030\001 \001(\010\022\022\n\nis"
  "_enabled\030\002 \001(\010\022#\n\007plugins\030\003 \003(\0132\022.CSteam"
  "OSSLSPlugin\"\036\n\034CSteamOSSLS_GetState_Requ"
  "est\"A\n\035CSteamOSSLS_GetState_Response\022 \n\005"
  "state\030\001 \001(\0132\021.CSteamOSSLSState\"\'\n%CSteam"
  "OSSLS_StateChanged_Notification\"1\n\036CStea"
  "mOSSLS_SetEnabled_Request\022\017\n\007enabled\030\001 \001"
  "(\010\"!\n\037CSteamOSSLS_SetEnabled_Response\"g\n"
  "$CSteamOSSLS_SetPluginEnabled_Request\022.\n"
  "\005etype\030\001 \001(\0162\013.ESLSHelper:\022ESLSHelper_In"
  "valid\022\017\n\007enabled\030\002 \001(\010\"\'\n%CSteamOSSLS_Se"
  "tPluginEnabled_Response2\227\004\n\016SteamOSManag"
  "er\022Q\n\010GetState\022!.CSteamOSManager_GetStat"
  "e_Request\032\".CSteamOSManager_GetState_Res"
  "ponse\022R\n\022NotifyStateChanged\022*.CSteamOSMa"
  "nager_StateChanged_Notification\032\020.WebUIN"
  "oResponse\022\201\001\n\030OptOutOfSideloadedClient\0221"
  ".CSteamOSManager_OptOutOfSideloadedClien"
  "t_Request\0322.CSteamOSManager_OptOutOfSide"
  "loadedClient_Response\022u\n\024ApplyMandatoryU"
  "pdate\022-.CSteamOSManager_ApplyMandatoryUp"
  "date_Request\032..CSteamOSManager_ApplyMand"
  "atoryUpdate_Response\022]\n\014FactoryReset\022%.C"
  "SteamOSManager_FactoryReset_Request\032&.CS"
  "teamOSManager_FactoryReset_Response\032\004\200\227\""
  "\0012\341\002\n\nSteamOSSLS\022I\n\010GetState\022\035.CSteamOSS"
  "LS_GetState_Request\032\036.CSteamOSSLS_GetSta"
  "te_Response\022N\n\022NotifyStateChanged\022&.CSte"
  "amOSSLS_StateChanged_Notification\032\020.WebU"
  "INoResponse\022O\n\nSetEnabled\022\037.CSteamOSSLS_"
  "SetEnabled_Request\032 .CSteamOSSLS_SetEnab"
  "led_Response\022a\n\020SetPluginEnabled\022%.CStea"
  "mOSSLS_SetPluginEnabled_Request\032&.CSteam"
  "OSSLS_SetPluginEnabled_Response\032\004\200\227\"\001B\037H"
  "\001\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fsteamos_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fsteamos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteamos_2eproto = {
  false, false, 3030, descriptor_table_protodef_webuimessages_5fsteamos_2eproto, "webuimessages_steamos.proto", 
  &descriptor_table_webuimessages_5fsteamos_2eproto_once, descriptor_table_webuimessages_5fsteamos_2eproto_deps, 4, 22,
  schemas, file_default_instances, TableStruct_webuimessages_5fsteamos_2eproto::offsets,
  file_level_metadata_webuimessages_5fsteamos_2eproto, file_level_enum_descriptors_webuimessages_5fsteamos_2eproto, file_level_service_descriptors_webuimessages_5fsteamos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteamos_2eproto);
  return descriptor_table_webuimessages_5fsteamos_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fsteamos_2eproto(&descriptor_table_webuimessages_5fsteamos_2eproto);

// ===================================================================

class CMsgFactoryResetState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFactoryResetState>()._has_bits_);
  static void set_has_is_running(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_restart_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtime_estimated_completion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgFactoryResetState::CMsgFactoryResetState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFactoryResetState)
}
CMsgFactoryResetState::CMsgFactoryResetState(const CMsgFactoryResetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_estimated_completion_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(rtime_estimated_completion_));
  // @@protoc_insertion_point(copy_constructor:CMsgFactoryResetState)
}

void CMsgFactoryResetState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_estimated_completion_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(rtime_estimated_completion_));
}

CMsgFactoryResetState::~CMsgFactoryResetState() {
  // @@protoc_insertion_point(destructor:CMsgFactoryResetState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFactoryResetState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFactoryResetState::ArenaDtor(void* object) {
  CMsgFactoryResetState* _this = reinterpret_cast< CMsgFactoryResetState* >(object);
  (void)_this;
}
void CMsgFactoryResetState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFactoryResetState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFactoryResetState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFactoryResetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_estimated_completion_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(rtime_estimated_completion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFactoryResetState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_running = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_running(&has_bits);
          is_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_restart_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_restart_pending(&has_bits);
          is_restart_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 rtime_estimated_completion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rtime_estimated_completion(&has_bits);
          rtime_estimated_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFactoryResetState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFactoryResetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_running = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_running(), target);
  }

  // optional int32 progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  // optional bool is_restart_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_restart_pending(), target);
  }

  // optional fixed32 rtime_estimated_completion = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_rtime_estimated_completion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFactoryResetState)
  return target;
}

size_t CMsgFactoryResetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFactoryResetState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_progress());
    }

    // optional bool is_running = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_restart_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed32 rtime_estimated_completion = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFactoryResetState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFactoryResetState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFactoryResetState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFactoryResetState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFactoryResetState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFactoryResetState)
    MergeFrom(*source);
  }
}

void CMsgFactoryResetState::MergeFrom(const CMsgFactoryResetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFactoryResetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_running_ = from.is_running_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_restart_pending_ = from.is_restart_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime_estimated_completion_ = from.rtime_estimated_completion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFactoryResetState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFactoryResetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFactoryResetState::CopyFrom(const CMsgFactoryResetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFactoryResetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFactoryResetState::IsInitialized() const {
  return true;
}

void CMsgFactoryResetState::InternalSwap(CMsgFactoryResetState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFactoryResetState, rtime_estimated_completion_)
      + sizeof(CMsgFactoryResetState::rtime_estimated_completion_)
      - PROTOBUF_FIELD_OFFSET(CMsgFactoryResetState, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFactoryResetState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManagerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSManagerState>()._has_bits_);
  static void set_has_is_service_available(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_mandatory_update_available(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startup_movie_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_status_led_control_available(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgFactoryResetState& factory_reset_state(const CSteamOSManagerState* msg);
  static void set_has_factory_reset_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_tdp_limit_available(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tdp_limit_min(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tdp_limit_max(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_cec_available(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_wifi_debug_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_wifi_debug_force_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_wifi_force_wpa_supplicant_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_manual_gpu_clocavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_manual_gpu_clocmin(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_manual_gpu_clocmax(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgFactoryResetState&
CSteamOSManagerState::_Internal::factory_reset_state(const CSteamOSManagerState* msg) {
  return *msg->factory_reset_state_;
}
CSteamOSManagerState::CSteamOSManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManagerState)
}
CSteamOSManagerState::CSteamOSManagerState(const CSteamOSManagerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_os_version()) {
    os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_version(), 
      GetArena());
  }
  if (from._internal_has_factory_reset_state()) {
    factory_reset_state_ = new ::CMsgFactoryResetState(*from.factory_reset_state_);
  } else {
    factory_reset_state_ = nullptr;
  }
  ::memcpy(&startup_movie_variant_, &from.startup_movie_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_gpu_clocmax_) -
    reinterpret_cast<char*>(&startup_movie_variant_)) + sizeof(manual_gpu_clocmax_));
  // @@protoc_insertion_point(copy_constructor:CSteamOSManagerState)
}

void CSteamOSManagerState::SharedCtor() {
os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&factory_reset_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&manual_gpu_clocmax_) -
    reinterpret_cast<char*>(&factory_reset_state_)) + sizeof(manual_gpu_clocmax_));
}

CSteamOSManagerState::~CSteamOSManagerState() {
  // @@protoc_insertion_point(destructor:CSteamOSManagerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManagerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete factory_reset_state_;
}

void CSteamOSManagerState::ArenaDtor(void* object) {
  CSteamOSManagerState* _this = reinterpret_cast< CSteamOSManagerState* >(object);
  (void)_this;
}
void CSteamOSManagerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManagerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManagerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManagerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      os_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(factory_reset_state_ != nullptr);
      factory_reset_state_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&startup_movie_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tdp_limit_min_) -
        reinterpret_cast<char*>(&startup_movie_variant_)) + sizeof(tdp_limit_min_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tdp_limit_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_gpu_clocmax_) -
        reinterpret_cast<char*>(&tdp_limit_max_)) + sizeof(manual_gpu_clocmax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManagerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_service_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_service_available(&has_bits);
          is_service_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_os_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSteamOSManagerState.os_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_mandatory_update_available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_mandatory_update_available(&has_bits);
          is_mandatory_update_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EStartupMovieVariant startup_movie_variant = 4 [default = EStartupMovieVariant_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStartupMovieVariant_IsValid(val))) {
            _internal_set_startup_movie_variant(static_cast<::EStartupMovieVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_status_led_control_available = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_status_led_control_available(&has_bits);
          is_status_led_control_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgFactoryResetState factory_reset_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_factory_reset_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_tdp_limit_available = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_tdp_limit_available(&has_bits);
          is_tdp_limit_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tdp_limit_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tdp_limit_min(&has_bits);
          tdp_limit_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tdp_limit_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tdp_limit_max(&has_bits);
          tdp_limit_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_cec_available = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_cec_available(&has_bits);
          is_cec_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wifi_debug_supported = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_wifi_debug_supported(&has_bits);
          is_wifi_debug_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wifi_debug_force_disabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_wifi_debug_force_disabled(&has_bits);
          is_wifi_debug_force_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wifi_force_wpa_supplicant_supported = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_wifi_force_wpa_supplicant_supported(&has_bits);
          is_wifi_force_wpa_supplicant_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_manual_gpu_clocavailable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_manual_gpu_clocavailable(&has_bits);
          is_manual_gpu_clocavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 manual_gpu_clocmin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_manual_gpu_clocmin(&has_bits);
          manual_gpu_clocmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 manual_gpu_clocmax = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_manual_gpu_clocmax(&has_bits);
          manual_gpu_clocmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManagerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManagerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_service_available = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_service_available(), target);
  }

  // optional string os_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSteamOSManagerState.os_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_os_version(), target);
  }

  // optional bool is_mandatory_update_available = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_mandatory_update_available(), target);
  }

  // optional .EStartupMovieVariant startup_movie_variant = 4 [default = EStartupMovieVariant_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_startup_movie_variant(), target);
  }

  // optional bool is_status_led_control_available = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_status_led_control_available(), target);
  }

  // optional .CMsgFactoryResetState factory_reset_state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::factory_reset_state(this), target, stream);
  }

  // optional bool is_tdp_limit_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_tdp_limit_available(), target);
  }

  // optional int32 tdp_limit_min = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tdp_limit_min(), target);
  }

  // optional int32 tdp_limit_max = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tdp_limit_max(), target);
  }

  // optional bool is_cec_available = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_cec_available(), target);
  }

  // optional bool is_wifi_debug_supported = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_wifi_debug_supported(), target);
  }

  // optional bool is_wifi_debug_force_disabled = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_wifi_debug_force_disabled(), target);
  }

  // optional bool is_wifi_force_wpa_supplicant_supported = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_wifi_force_wpa_supplicant_supported(), target);
  }

  // optional bool is_manual_gpu_clocavailable = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_manual_gpu_clocavailable(), target);
  }

  // optional int32 manual_gpu_clocmin = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_manual_gpu_clocmin(), target);
  }

  // optional int32 manual_gpu_clocmax = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_manual_gpu_clocmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManagerState)
  return target;
}

size_t CSteamOSManagerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManagerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string os_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os_version());
    }

    // optional .CMsgFactoryResetState factory_reset_state = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *factory_reset_state_);
    }

    // optional .EStartupMovieVariant startup_movie_variant = 4 [default = EStartupMovieVariant_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_startup_movie_variant());
    }

    // optional bool is_service_available = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_mandatory_update_available = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_status_led_control_available = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_tdp_limit_available = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 tdp_limit_min = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tdp_limit_min());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tdp_limit_max = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tdp_limit_max());
    }

    // optional bool is_cec_available = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_debug_supported = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_debug_force_disabled = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_force_wpa_supplicant_supported = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_manual_gpu_clocavailable = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 manual_gpu_clocmin = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_manual_gpu_clocmin());
    }

    // optional int32 manual_gpu_clocmax = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_manual_gpu_clocmax());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManagerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManagerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManagerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManagerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManagerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManagerState)
    MergeFrom(*source);
  }
}

void CSteamOSManagerState::MergeFrom(const CSteamOSManagerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManagerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_os_version(from._internal_os_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_factory_reset_state()->::CMsgFactoryResetState::MergeFrom(from._internal_factory_reset_state());
    }
    if (cached_has_bits & 0x00000004u) {
      startup_movie_variant_ = from.startup_movie_variant_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_service_available_ = from.is_service_available_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_mandatory_update_available_ = from.is_mandatory_update_available_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_status_led_control_available_ = from.is_status_led_control_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_tdp_limit_available_ = from.is_tdp_limit_available_;
    }
    if (cached_has_bits & 0x00000080u) {
      tdp_limit_min_ = from.tdp_limit_min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tdp_limit_max_ = from.tdp_limit_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_cec_available_ = from.is_cec_available_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_wifi_debug_supported_ = from.is_wifi_debug_supported_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_wifi_debug_force_disabled_ = from.is_wifi_debug_force_disabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_wifi_force_wpa_supplicant_supported_ = from.is_wifi_force_wpa_supplicant_supported_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_manual_gpu_clocavailable_ = from.is_manual_gpu_clocavailable_;
    }
    if (cached_has_bits & 0x00004000u) {
      manual_gpu_clocmin_ = from.manual_gpu_clocmin_;
    }
    if (cached_has_bits & 0x00008000u) {
      manual_gpu_clocmax_ = from.manual_gpu_clocmax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamOSManagerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManagerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManagerState::CopyFrom(const CSteamOSManagerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManagerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManagerState::IsInitialized() const {
  return true;
}

void CSteamOSManagerState::InternalSwap(CSteamOSManagerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamOSManagerState, manual_gpu_clocmax_)
      + sizeof(CSteamOSManagerState::manual_gpu_clocmax_)
      - PROTOBUF_FIELD_OFFSET(CSteamOSManagerState, factory_reset_state_)>(
          reinterpret_cast<char*>(&factory_reset_state_),
          reinterpret_cast<char*>(&other->factory_reset_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManagerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_GetState_Request::_Internal {
 public:
};

CSteamOSManager_GetState_Request::CSteamOSManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_GetState_Request)
}
CSteamOSManager_GetState_Request::CSteamOSManager_GetState_Request(const CSteamOSManager_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_GetState_Request)
}

void CSteamOSManager_GetState_Request::SharedCtor() {
}

CSteamOSManager_GetState_Request::~CSteamOSManager_GetState_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_GetState_Request::ArenaDtor(void* object) {
  CSteamOSManager_GetState_Request* _this = reinterpret_cast< CSteamOSManager_GetState_Request* >(object);
  (void)_this;
}
void CSteamOSManager_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_GetState_Request)
  return target;
}

size_t CSteamOSManager_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_GetState_Request)
    MergeFrom(*source);
  }
}

void CSteamOSManager_GetState_Request::MergeFrom(const CSteamOSManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_GetState_Request::CopyFrom(const CSteamOSManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_GetState_Request::IsInitialized() const {
  return true;
}

void CSteamOSManager_GetState_Request::InternalSwap(CSteamOSManager_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSManager_GetState_Response>()._has_bits_);
  static const ::CSteamOSManagerState& state(const CSteamOSManager_GetState_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSteamOSManagerState&
CSteamOSManager_GetState_Response::_Internal::state(const CSteamOSManager_GetState_Response* msg) {
  return *msg->state_;
}
CSteamOSManager_GetState_Response::CSteamOSManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_GetState_Response)
}
CSteamOSManager_GetState_Response::CSteamOSManager_GetState_Response(const CSteamOSManager_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CSteamOSManagerState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_GetState_Response)
}

void CSteamOSManager_GetState_Response::SharedCtor() {
state_ = nullptr;
}

CSteamOSManager_GetState_Response::~CSteamOSManager_GetState_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void CSteamOSManager_GetState_Response::ArenaDtor(void* object) {
  CSteamOSManager_GetState_Response* _this = reinterpret_cast< CSteamOSManager_GetState_Response* >(object);
  (void)_this;
}
void CSteamOSManager_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CSteamOSManagerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSteamOSManagerState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_GetState_Response)
  return target;
}

size_t CSteamOSManager_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSteamOSManagerState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_GetState_Response)
    MergeFrom(*source);
  }
}

void CSteamOSManager_GetState_Response::MergeFrom(const CSteamOSManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CSteamOSManagerState::MergeFrom(from._internal_state());
  }
}

void CSteamOSManager_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_GetState_Response::CopyFrom(const CSteamOSManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_GetState_Response::IsInitialized() const {
  return true;
}

void CSteamOSManager_GetState_Response::InternalSwap(CSteamOSManager_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_StateChanged_Notification::_Internal {
 public:
};

CSteamOSManager_StateChanged_Notification::CSteamOSManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_StateChanged_Notification)
}
CSteamOSManager_StateChanged_Notification::CSteamOSManager_StateChanged_Notification(const CSteamOSManager_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_StateChanged_Notification)
}

void CSteamOSManager_StateChanged_Notification::SharedCtor() {
}

CSteamOSManager_StateChanged_Notification::~CSteamOSManager_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_StateChanged_Notification::ArenaDtor(void* object) {
  CSteamOSManager_StateChanged_Notification* _this = reinterpret_cast< CSteamOSManager_StateChanged_Notification* >(object);
  (void)_this;
}
void CSteamOSManager_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_StateChanged_Notification)
  return target;
}

size_t CSteamOSManager_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamOSManager_StateChanged_Notification::MergeFrom(const CSteamOSManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_StateChanged_Notification::CopyFrom(const CSteamOSManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamOSManager_StateChanged_Notification::InternalSwap(CSteamOSManager_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_IsTelemetryHelperAvailable_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSManager_IsTelemetryHelperAvailable_Request>()._has_bits_);
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamOSManager_IsTelemetryHelperAvailable_Request::CSteamOSManager_IsTelemetryHelperAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_IsTelemetryHelperAvailable_Request)
}
CSteamOSManager_IsTelemetryHelperAvailable_Request::CSteamOSManager_IsTelemetryHelperAvailable_Request(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etype_ = from.etype_;
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_IsTelemetryHelperAvailable_Request)
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::SharedCtor() {
etype_ = 0;
}

CSteamOSManager_IsTelemetryHelperAvailable_Request::~CSteamOSManager_IsTelemetryHelperAvailable_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::ArenaDtor(void* object) {
  CSteamOSManager_IsTelemetryHelperAvailable_Request* _this = reinterpret_cast< CSteamOSManager_IsTelemetryHelperAvailable_Request* >(object);
  (void)_this;
}
void CSteamOSManager_IsTelemetryHelperAvailable_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_IsTelemetryHelperAvailable_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  etype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_IsTelemetryHelperAvailable_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESLSHelper_IsValid(val))) {
            _internal_set_etype(static_cast<::ESLSHelper>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_IsTelemetryHelperAvailable_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_etype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  return target;
}

size_t CSteamOSManager_IsTelemetryHelperAvailable_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_IsTelemetryHelperAvailable_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_IsTelemetryHelperAvailable_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_IsTelemetryHelperAvailable_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_IsTelemetryHelperAvailable_Request)
    MergeFrom(*source);
  }
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::MergeFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_etype()) {
    _internal_set_etype(from._internal_etype());
  }
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::CopyFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_IsTelemetryHelperAvailable_Request::IsInitialized() const {
  return true;
}

void CSteamOSManager_IsTelemetryHelperAvailable_Request::InternalSwap(CSteamOSManager_IsTelemetryHelperAvailable_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(etype_, other->etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_IsTelemetryHelperAvailable_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_IsTelemetryHelperAvailable_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSManager_IsTelemetryHelperAvailable_Response>()._has_bits_);
  static void set_has_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamOSManager_IsTelemetryHelperAvailable_Response::CSteamOSManager_IsTelemetryHelperAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_IsTelemetryHelperAvailable_Response)
}
CSteamOSManager_IsTelemetryHelperAvailable_Response::CSteamOSManager_IsTelemetryHelperAvailable_Response(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  available_ = from.available_;
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_IsTelemetryHelperAvailable_Response)
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::SharedCtor() {
available_ = false;
}

CSteamOSManager_IsTelemetryHelperAvailable_Response::~CSteamOSManager_IsTelemetryHelperAvailable_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::ArenaDtor(void* object) {
  CSteamOSManager_IsTelemetryHelperAvailable_Response* _this = reinterpret_cast< CSteamOSManager_IsTelemetryHelperAvailable_Response* >(object);
  (void)_this;
}
void CSteamOSManager_IsTelemetryHelperAvailable_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_IsTelemetryHelperAvailable_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_IsTelemetryHelperAvailable_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_available(&has_bits);
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_IsTelemetryHelperAvailable_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool available = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  return target;
}

size_t CSteamOSManager_IsTelemetryHelperAvailable_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool available = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_IsTelemetryHelperAvailable_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_IsTelemetryHelperAvailable_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_IsTelemetryHelperAvailable_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_IsTelemetryHelperAvailable_Response)
    MergeFrom(*source);
  }
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::MergeFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_available()) {
    _internal_set_available(from._internal_available());
  }
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::CopyFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_IsTelemetryHelperAvailable_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_IsTelemetryHelperAvailable_Response::IsInitialized() const {
  return true;
}

void CSteamOSManager_IsTelemetryHelperAvailable_Response::InternalSwap(CSteamOSManager_IsTelemetryHelperAvailable_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_, other->available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_IsTelemetryHelperAvailable_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_OptOutOfSideloadedClient_Request::_Internal {
 public:
};

CSteamOSManager_OptOutOfSideloadedClient_Request::CSteamOSManager_OptOutOfSideloadedClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_OptOutOfSideloadedClient_Request)
}
CSteamOSManager_OptOutOfSideloadedClient_Request::CSteamOSManager_OptOutOfSideloadedClient_Request(const CSteamOSManager_OptOutOfSideloadedClient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_OptOutOfSideloadedClient_Request)
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::SharedCtor() {
}

CSteamOSManager_OptOutOfSideloadedClient_Request::~CSteamOSManager_OptOutOfSideloadedClient_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_OptOutOfSideloadedClient_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::ArenaDtor(void* object) {
  CSteamOSManager_OptOutOfSideloadedClient_Request* _this = reinterpret_cast< CSteamOSManager_OptOutOfSideloadedClient_Request* >(object);
  (void)_this;
}
void CSteamOSManager_OptOutOfSideloadedClient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_OptOutOfSideloadedClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_OptOutOfSideloadedClient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_OptOutOfSideloadedClient_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_OptOutOfSideloadedClient_Request)
  return target;
}

size_t CSteamOSManager_OptOutOfSideloadedClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_OptOutOfSideloadedClient_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_OptOutOfSideloadedClient_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_OptOutOfSideloadedClient_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_OptOutOfSideloadedClient_Request)
    MergeFrom(*source);
  }
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::MergeFrom(const CSteamOSManager_OptOutOfSideloadedClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_OptOutOfSideloadedClient_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::CopyFrom(const CSteamOSManager_OptOutOfSideloadedClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_OptOutOfSideloadedClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_OptOutOfSideloadedClient_Request::IsInitialized() const {
  return true;
}

void CSteamOSManager_OptOutOfSideloadedClient_Request::InternalSwap(CSteamOSManager_OptOutOfSideloadedClient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_OptOutOfSideloadedClient_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_OptOutOfSideloadedClient_Response::_Internal {
 public:
};

CSteamOSManager_OptOutOfSideloadedClient_Response::CSteamOSManager_OptOutOfSideloadedClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_OptOutOfSideloadedClient_Response)
}
CSteamOSManager_OptOutOfSideloadedClient_Response::CSteamOSManager_OptOutOfSideloadedClient_Response(const CSteamOSManager_OptOutOfSideloadedClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_OptOutOfSideloadedClient_Response)
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::SharedCtor() {
}

CSteamOSManager_OptOutOfSideloadedClient_Response::~CSteamOSManager_OptOutOfSideloadedClient_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_OptOutOfSideloadedClient_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::ArenaDtor(void* object) {
  CSteamOSManager_OptOutOfSideloadedClient_Response* _this = reinterpret_cast< CSteamOSManager_OptOutOfSideloadedClient_Response* >(object);
  (void)_this;
}
void CSteamOSManager_OptOutOfSideloadedClient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_OptOutOfSideloadedClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_OptOutOfSideloadedClient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_OptOutOfSideloadedClient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_OptOutOfSideloadedClient_Response)
  return target;
}

size_t CSteamOSManager_OptOutOfSideloadedClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_OptOutOfSideloadedClient_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_OptOutOfSideloadedClient_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_OptOutOfSideloadedClient_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_OptOutOfSideloadedClient_Response)
    MergeFrom(*source);
  }
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::MergeFrom(const CSteamOSManager_OptOutOfSideloadedClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_OptOutOfSideloadedClient_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::CopyFrom(const CSteamOSManager_OptOutOfSideloadedClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_OptOutOfSideloadedClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_OptOutOfSideloadedClient_Response::IsInitialized() const {
  return true;
}

void CSteamOSManager_OptOutOfSideloadedClient_Response::InternalSwap(CSteamOSManager_OptOutOfSideloadedClient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_OptOutOfSideloadedClient_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_ApplyMandatoryUpdate_Request::_Internal {
 public:
};

CSteamOSManager_ApplyMandatoryUpdate_Request::CSteamOSManager_ApplyMandatoryUpdate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_ApplyMandatoryUpdate_Request)
}
CSteamOSManager_ApplyMandatoryUpdate_Request::CSteamOSManager_ApplyMandatoryUpdate_Request(const CSteamOSManager_ApplyMandatoryUpdate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_ApplyMandatoryUpdate_Request)
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::SharedCtor() {
}

CSteamOSManager_ApplyMandatoryUpdate_Request::~CSteamOSManager_ApplyMandatoryUpdate_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_ApplyMandatoryUpdate_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::ArenaDtor(void* object) {
  CSteamOSManager_ApplyMandatoryUpdate_Request* _this = reinterpret_cast< CSteamOSManager_ApplyMandatoryUpdate_Request* >(object);
  (void)_this;
}
void CSteamOSManager_ApplyMandatoryUpdate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_ApplyMandatoryUpdate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_ApplyMandatoryUpdate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_ApplyMandatoryUpdate_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_ApplyMandatoryUpdate_Request)
  return target;
}

size_t CSteamOSManager_ApplyMandatoryUpdate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_ApplyMandatoryUpdate_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_ApplyMandatoryUpdate_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_ApplyMandatoryUpdate_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_ApplyMandatoryUpdate_Request)
    MergeFrom(*source);
  }
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::MergeFrom(const CSteamOSManager_ApplyMandatoryUpdate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_ApplyMandatoryUpdate_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::CopyFrom(const CSteamOSManager_ApplyMandatoryUpdate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_ApplyMandatoryUpdate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_ApplyMandatoryUpdate_Request::IsInitialized() const {
  return true;
}

void CSteamOSManager_ApplyMandatoryUpdate_Request::InternalSwap(CSteamOSManager_ApplyMandatoryUpdate_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_ApplyMandatoryUpdate_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_ApplyMandatoryUpdate_Response::_Internal {
 public:
};

CSteamOSManager_ApplyMandatoryUpdate_Response::CSteamOSManager_ApplyMandatoryUpdate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_ApplyMandatoryUpdate_Response)
}
CSteamOSManager_ApplyMandatoryUpdate_Response::CSteamOSManager_ApplyMandatoryUpdate_Response(const CSteamOSManager_ApplyMandatoryUpdate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_ApplyMandatoryUpdate_Response)
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::SharedCtor() {
}

CSteamOSManager_ApplyMandatoryUpdate_Response::~CSteamOSManager_ApplyMandatoryUpdate_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_ApplyMandatoryUpdate_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::ArenaDtor(void* object) {
  CSteamOSManager_ApplyMandatoryUpdate_Response* _this = reinterpret_cast< CSteamOSManager_ApplyMandatoryUpdate_Response* >(object);
  (void)_this;
}
void CSteamOSManager_ApplyMandatoryUpdate_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_ApplyMandatoryUpdate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_ApplyMandatoryUpdate_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_ApplyMandatoryUpdate_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_ApplyMandatoryUpdate_Response)
  return target;
}

size_t CSteamOSManager_ApplyMandatoryUpdate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_ApplyMandatoryUpdate_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_ApplyMandatoryUpdate_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_ApplyMandatoryUpdate_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_ApplyMandatoryUpdate_Response)
    MergeFrom(*source);
  }
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::MergeFrom(const CSteamOSManager_ApplyMandatoryUpdate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_ApplyMandatoryUpdate_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::CopyFrom(const CSteamOSManager_ApplyMandatoryUpdate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_ApplyMandatoryUpdate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_ApplyMandatoryUpdate_Response::IsInitialized() const {
  return true;
}

void CSteamOSManager_ApplyMandatoryUpdate_Response::InternalSwap(CSteamOSManager_ApplyMandatoryUpdate_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_ApplyMandatoryUpdate_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_FactoryReset_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSManager_FactoryReset_Request>()._has_bits_);
  static void set_has_reset_os(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamOSManager_FactoryReset_Request::CSteamOSManager_FactoryReset_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_FactoryReset_Request)
}
CSteamOSManager_FactoryReset_Request::CSteamOSManager_FactoryReset_Request(const CSteamOSManager_FactoryReset_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reset_os_, &from.reset_os_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_user_data_) -
    reinterpret_cast<char*>(&reset_os_)) + sizeof(reset_user_data_));
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_FactoryReset_Request)
}

void CSteamOSManager_FactoryReset_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reset_os_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reset_user_data_) -
    reinterpret_cast<char*>(&reset_os_)) + sizeof(reset_user_data_));
}

CSteamOSManager_FactoryReset_Request::~CSteamOSManager_FactoryReset_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_FactoryReset_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_FactoryReset_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_FactoryReset_Request::ArenaDtor(void* object) {
  CSteamOSManager_FactoryReset_Request* _this = reinterpret_cast< CSteamOSManager_FactoryReset_Request* >(object);
  (void)_this;
}
void CSteamOSManager_FactoryReset_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_FactoryReset_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_FactoryReset_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_FactoryReset_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reset_os_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_user_data_) -
      reinterpret_cast<char*>(&reset_os_)) + sizeof(reset_user_data_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_FactoryReset_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool reset_os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reset_os(&has_bits);
          reset_os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset_user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reset_user_data(&has_bits);
          reset_user_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_FactoryReset_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_FactoryReset_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reset_os = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reset_os(), target);
  }

  // optional bool reset_user_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reset_user_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_FactoryReset_Request)
  return target;
}

size_t CSteamOSManager_FactoryReset_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_FactoryReset_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool reset_os = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool reset_user_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_FactoryReset_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_FactoryReset_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_FactoryReset_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_FactoryReset_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_FactoryReset_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_FactoryReset_Request)
    MergeFrom(*source);
  }
}

void CSteamOSManager_FactoryReset_Request::MergeFrom(const CSteamOSManager_FactoryReset_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_FactoryReset_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reset_os_ = from.reset_os_;
    }
    if (cached_has_bits & 0x00000002u) {
      reset_user_data_ = from.reset_user_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamOSManager_FactoryReset_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_FactoryReset_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_FactoryReset_Request::CopyFrom(const CSteamOSManager_FactoryReset_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_FactoryReset_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_FactoryReset_Request::IsInitialized() const {
  return true;
}

void CSteamOSManager_FactoryReset_Request::InternalSwap(CSteamOSManager_FactoryReset_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamOSManager_FactoryReset_Request, reset_user_data_)
      + sizeof(CSteamOSManager_FactoryReset_Request::reset_user_data_)
      - PROTOBUF_FIELD_OFFSET(CSteamOSManager_FactoryReset_Request, reset_os_)>(
          reinterpret_cast<char*>(&reset_os_),
          reinterpret_cast<char*>(&other->reset_os_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_FactoryReset_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSManager_FactoryReset_Response::_Internal {
 public:
};

CSteamOSManager_FactoryReset_Response::CSteamOSManager_FactoryReset_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSManager_FactoryReset_Response)
}
CSteamOSManager_FactoryReset_Response::CSteamOSManager_FactoryReset_Response(const CSteamOSManager_FactoryReset_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSManager_FactoryReset_Response)
}

void CSteamOSManager_FactoryReset_Response::SharedCtor() {
}

CSteamOSManager_FactoryReset_Response::~CSteamOSManager_FactoryReset_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSManager_FactoryReset_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSManager_FactoryReset_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSManager_FactoryReset_Response::ArenaDtor(void* object) {
  CSteamOSManager_FactoryReset_Response* _this = reinterpret_cast< CSteamOSManager_FactoryReset_Response* >(object);
  (void)_this;
}
void CSteamOSManager_FactoryReset_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSManager_FactoryReset_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSManager_FactoryReset_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSManager_FactoryReset_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSManager_FactoryReset_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSManager_FactoryReset_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSManager_FactoryReset_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSManager_FactoryReset_Response)
  return target;
}

size_t CSteamOSManager_FactoryReset_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSManager_FactoryReset_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSManager_FactoryReset_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSManager_FactoryReset_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSManager_FactoryReset_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSManager_FactoryReset_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSManager_FactoryReset_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSManager_FactoryReset_Response)
    MergeFrom(*source);
  }
}

void CSteamOSManager_FactoryReset_Response::MergeFrom(const CSteamOSManager_FactoryReset_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSManager_FactoryReset_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSManager_FactoryReset_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSManager_FactoryReset_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSManager_FactoryReset_Response::CopyFrom(const CSteamOSManager_FactoryReset_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSManager_FactoryReset_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSManager_FactoryReset_Response::IsInitialized() const {
  return true;
}

void CSteamOSManager_FactoryReset_Response::InternalSwap(CSteamOSManager_FactoryReset_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSManager_FactoryReset_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLSPlugin::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSSLSPlugin>()._has_bits_);
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_available(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamOSSLSPlugin::CSteamOSSLSPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLSPlugin)
}
CSteamOSSLSPlugin::CSteamOSSLSPlugin(const CSteamOSSLSPlugin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&etype_, &from.etype_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLSPlugin)
}

void CSteamOSSLSPlugin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&etype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(is_enabled_));
}

CSteamOSSLSPlugin::~CSteamOSSLSPlugin() {
  // @@protoc_insertion_point(destructor:CSteamOSSLSPlugin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLSPlugin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLSPlugin::ArenaDtor(void* object) {
  CSteamOSSLSPlugin* _this = reinterpret_cast< CSteamOSSLSPlugin* >(object);
  (void)_this;
}
void CSteamOSSLSPlugin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLSPlugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLSPlugin::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLSPlugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&etype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_enabled_) -
        reinterpret_cast<char*>(&etype_)) + sizeof(is_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLSPlugin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESLSHelper_IsValid(val))) {
            _internal_set_etype(static_cast<::ESLSHelper>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_available(&has_bits);
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLSPlugin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLSPlugin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_etype(), target);
  }

  // optional bool is_available = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_available(), target);
  }

  // optional bool is_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLSPlugin)
  return target;
}

size_t CSteamOSSLSPlugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLSPlugin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
    }

    // optional bool is_available = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLSPlugin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLSPlugin)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLSPlugin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLSPlugin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLSPlugin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLSPlugin)
    MergeFrom(*source);
  }
}

void CSteamOSSLSPlugin::MergeFrom(const CSteamOSSLSPlugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLSPlugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      etype_ = from.etype_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_available_ = from.is_available_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamOSSLSPlugin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLSPlugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLSPlugin::CopyFrom(const CSteamOSSLSPlugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLSPlugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLSPlugin::IsInitialized() const {
  return true;
}

void CSteamOSSLSPlugin::InternalSwap(CSteamOSSLSPlugin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamOSSLSPlugin, is_enabled_)
      + sizeof(CSteamOSSLSPlugin::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(CSteamOSSLSPlugin, etype_)>(
          reinterpret_cast<char*>(&etype_),
          reinterpret_cast<char*>(&other->etype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLSPlugin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLSState::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSSLSState>()._has_bits_);
  static void set_has_is_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamOSSLSState::CSteamOSSLSState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  plugins_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLSState)
}
CSteamOSSLSState::CSteamOSSLSState(const CSteamOSSLSState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      plugins_(from.plugins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_available_, &from.is_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&is_available_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLSState)
}

void CSteamOSSLSState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&is_available_)) + sizeof(is_enabled_));
}

CSteamOSSLSState::~CSteamOSSLSState() {
  // @@protoc_insertion_point(destructor:CSteamOSSLSState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLSState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLSState::ArenaDtor(void* object) {
  CSteamOSSLSState* _this = reinterpret_cast< CSteamOSSLSState* >(object);
  (void)_this;
}
void CSteamOSSLSState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLSState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLSState::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLSState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugins_.Clear();
  ::memset(&is_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&is_available_)) + sizeof(is_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLSState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_available(&has_bits);
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSteamOSSLSPlugin plugins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plugins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLSState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLSState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_available = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_available(), target);
  }

  // optional bool is_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // repeated .CSteamOSSLSPlugin plugins = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plugins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_plugins(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLSState)
  return target;
}

size_t CSteamOSSLSState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLSState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSteamOSSLSPlugin plugins = 3;
  total_size += 1UL * this->_internal_plugins_size();
  for (const auto& msg : this->plugins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_available = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLSState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLSState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLSState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLSState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLSState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLSState)
    MergeFrom(*source);
  }
}

void CSteamOSSLSState::MergeFrom(const CSteamOSSLSState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLSState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugins_.MergeFrom(from.plugins_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_available_ = from.is_available_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamOSSLSState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLSState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLSState::CopyFrom(const CSteamOSSLSState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLSState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLSState::IsInitialized() const {
  return true;
}

void CSteamOSSLSState::InternalSwap(CSteamOSSLSState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plugins_.InternalSwap(&other->plugins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamOSSLSState, is_enabled_)
      + sizeof(CSteamOSSLSState::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(CSteamOSSLSState, is_available_)>(
          reinterpret_cast<char*>(&is_available_),
          reinterpret_cast<char*>(&other->is_available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLSState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_GetState_Request::_Internal {
 public:
};

CSteamOSSLS_GetState_Request::CSteamOSSLS_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_GetState_Request)
}
CSteamOSSLS_GetState_Request::CSteamOSSLS_GetState_Request(const CSteamOSSLS_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_GetState_Request)
}

void CSteamOSSLS_GetState_Request::SharedCtor() {
}

CSteamOSSLS_GetState_Request::~CSteamOSSLS_GetState_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_GetState_Request::ArenaDtor(void* object) {
  CSteamOSSLS_GetState_Request* _this = reinterpret_cast< CSteamOSSLS_GetState_Request* >(object);
  (void)_this;
}
void CSteamOSSLS_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_GetState_Request)
  return target;
}

size_t CSteamOSSLS_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_GetState_Request)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_GetState_Request::MergeFrom(const CSteamOSSLS_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSSLS_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_GetState_Request::CopyFrom(const CSteamOSSLS_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_GetState_Request::IsInitialized() const {
  return true;
}

void CSteamOSSLS_GetState_Request::InternalSwap(CSteamOSSLS_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSSLS_GetState_Response>()._has_bits_);
  static const ::CSteamOSSLSState& state(const CSteamOSSLS_GetState_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSteamOSSLSState&
CSteamOSSLS_GetState_Response::_Internal::state(const CSteamOSSLS_GetState_Response* msg) {
  return *msg->state_;
}
CSteamOSSLS_GetState_Response::CSteamOSSLS_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_GetState_Response)
}
CSteamOSSLS_GetState_Response::CSteamOSSLS_GetState_Response(const CSteamOSSLS_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CSteamOSSLSState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_GetState_Response)
}

void CSteamOSSLS_GetState_Response::SharedCtor() {
state_ = nullptr;
}

CSteamOSSLS_GetState_Response::~CSteamOSSLS_GetState_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void CSteamOSSLS_GetState_Response::ArenaDtor(void* object) {
  CSteamOSSLS_GetState_Response* _this = reinterpret_cast< CSteamOSSLS_GetState_Response* >(object);
  (void)_this;
}
void CSteamOSSLS_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CSteamOSSLSState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSteamOSSLSState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_GetState_Response)
  return target;
}

size_t CSteamOSSLS_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSteamOSSLSState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_GetState_Response)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_GetState_Response::MergeFrom(const CSteamOSSLS_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CSteamOSSLSState::MergeFrom(from._internal_state());
  }
}

void CSteamOSSLS_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_GetState_Response::CopyFrom(const CSteamOSSLS_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_GetState_Response::IsInitialized() const {
  return true;
}

void CSteamOSSLS_GetState_Response::InternalSwap(CSteamOSSLS_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_StateChanged_Notification::_Internal {
 public:
};

CSteamOSSLS_StateChanged_Notification::CSteamOSSLS_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_StateChanged_Notification)
}
CSteamOSSLS_StateChanged_Notification::CSteamOSSLS_StateChanged_Notification(const CSteamOSSLS_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_StateChanged_Notification)
}

void CSteamOSSLS_StateChanged_Notification::SharedCtor() {
}

CSteamOSSLS_StateChanged_Notification::~CSteamOSSLS_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_StateChanged_Notification::ArenaDtor(void* object) {
  CSteamOSSLS_StateChanged_Notification* _this = reinterpret_cast< CSteamOSSLS_StateChanged_Notification* >(object);
  (void)_this;
}
void CSteamOSSLS_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_StateChanged_Notification)
  return target;
}

size_t CSteamOSSLS_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_StateChanged_Notification::MergeFrom(const CSteamOSSLS_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSSLS_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_StateChanged_Notification::CopyFrom(const CSteamOSSLS_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CSteamOSSLS_StateChanged_Notification::InternalSwap(CSteamOSSLS_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_SetEnabled_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSSLS_SetEnabled_Request>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteamOSSLS_SetEnabled_Request::CSteamOSSLS_SetEnabled_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_SetEnabled_Request)
}
CSteamOSSLS_SetEnabled_Request::CSteamOSSLS_SetEnabled_Request(const CSteamOSSLS_SetEnabled_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_SetEnabled_Request)
}

void CSteamOSSLS_SetEnabled_Request::SharedCtor() {
enabled_ = false;
}

CSteamOSSLS_SetEnabled_Request::~CSteamOSSLS_SetEnabled_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_SetEnabled_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_SetEnabled_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_SetEnabled_Request::ArenaDtor(void* object) {
  CSteamOSSLS_SetEnabled_Request* _this = reinterpret_cast< CSteamOSSLS_SetEnabled_Request* >(object);
  (void)_this;
}
void CSteamOSSLS_SetEnabled_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_SetEnabled_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_SetEnabled_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_SetEnabled_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_SetEnabled_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_SetEnabled_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_SetEnabled_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_SetEnabled_Request)
  return target;
}

size_t CSteamOSSLS_SetEnabled_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_SetEnabled_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_SetEnabled_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_SetEnabled_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_SetEnabled_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_SetEnabled_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_SetEnabled_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_SetEnabled_Request)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_SetEnabled_Request::MergeFrom(const CSteamOSSLS_SetEnabled_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_SetEnabled_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CSteamOSSLS_SetEnabled_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_SetEnabled_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_SetEnabled_Request::CopyFrom(const CSteamOSSLS_SetEnabled_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_SetEnabled_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_SetEnabled_Request::IsInitialized() const {
  return true;
}

void CSteamOSSLS_SetEnabled_Request::InternalSwap(CSteamOSSLS_SetEnabled_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_SetEnabled_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_SetEnabled_Response::_Internal {
 public:
};

CSteamOSSLS_SetEnabled_Response::CSteamOSSLS_SetEnabled_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_SetEnabled_Response)
}
CSteamOSSLS_SetEnabled_Response::CSteamOSSLS_SetEnabled_Response(const CSteamOSSLS_SetEnabled_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_SetEnabled_Response)
}

void CSteamOSSLS_SetEnabled_Response::SharedCtor() {
}

CSteamOSSLS_SetEnabled_Response::~CSteamOSSLS_SetEnabled_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_SetEnabled_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_SetEnabled_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_SetEnabled_Response::ArenaDtor(void* object) {
  CSteamOSSLS_SetEnabled_Response* _this = reinterpret_cast< CSteamOSSLS_SetEnabled_Response* >(object);
  (void)_this;
}
void CSteamOSSLS_SetEnabled_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_SetEnabled_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_SetEnabled_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_SetEnabled_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_SetEnabled_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_SetEnabled_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_SetEnabled_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_SetEnabled_Response)
  return target;
}

size_t CSteamOSSLS_SetEnabled_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_SetEnabled_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_SetEnabled_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_SetEnabled_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_SetEnabled_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_SetEnabled_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_SetEnabled_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_SetEnabled_Response)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_SetEnabled_Response::MergeFrom(const CSteamOSSLS_SetEnabled_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_SetEnabled_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSSLS_SetEnabled_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_SetEnabled_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_SetEnabled_Response::CopyFrom(const CSteamOSSLS_SetEnabled_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_SetEnabled_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_SetEnabled_Response::IsInitialized() const {
  return true;
}

void CSteamOSSLS_SetEnabled_Response::InternalSwap(CSteamOSSLS_SetEnabled_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_SetEnabled_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_SetPluginEnabled_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamOSSLS_SetPluginEnabled_Request>()._has_bits_);
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSteamOSSLS_SetPluginEnabled_Request::CSteamOSSLS_SetPluginEnabled_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_SetPluginEnabled_Request)
}
CSteamOSSLS_SetPluginEnabled_Request::CSteamOSSLS_SetPluginEnabled_Request(const CSteamOSSLS_SetPluginEnabled_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&etype_, &from.etype_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_SetPluginEnabled_Request)
}

void CSteamOSSLS_SetPluginEnabled_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&etype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(enabled_));
}

CSteamOSSLS_SetPluginEnabled_Request::~CSteamOSSLS_SetPluginEnabled_Request() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_SetPluginEnabled_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_SetPluginEnabled_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_SetPluginEnabled_Request::ArenaDtor(void* object) {
  CSteamOSSLS_SetPluginEnabled_Request* _this = reinterpret_cast< CSteamOSSLS_SetPluginEnabled_Request* >(object);
  (void)_this;
}
void CSteamOSSLS_SetPluginEnabled_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_SetPluginEnabled_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_SetPluginEnabled_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_SetPluginEnabled_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&etype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&etype_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_SetPluginEnabled_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESLSHelper_IsValid(val))) {
            _internal_set_etype(static_cast<::ESLSHelper>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_SetPluginEnabled_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_SetPluginEnabled_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_etype(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_SetPluginEnabled_Request)
  return target;
}

size_t CSteamOSSLS_SetPluginEnabled_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_SetPluginEnabled_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
    }

    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_SetPluginEnabled_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_SetPluginEnabled_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_SetPluginEnabled_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_SetPluginEnabled_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_SetPluginEnabled_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_SetPluginEnabled_Request)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_SetPluginEnabled_Request::MergeFrom(const CSteamOSSLS_SetPluginEnabled_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_SetPluginEnabled_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      etype_ = from.etype_;
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamOSSLS_SetPluginEnabled_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_SetPluginEnabled_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_SetPluginEnabled_Request::CopyFrom(const CSteamOSSLS_SetPluginEnabled_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_SetPluginEnabled_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_SetPluginEnabled_Request::IsInitialized() const {
  return true;
}

void CSteamOSSLS_SetPluginEnabled_Request::InternalSwap(CSteamOSSLS_SetPluginEnabled_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamOSSLS_SetPluginEnabled_Request, enabled_)
      + sizeof(CSteamOSSLS_SetPluginEnabled_Request::enabled_)
      - PROTOBUF_FIELD_OFFSET(CSteamOSSLS_SetPluginEnabled_Request, etype_)>(
          reinterpret_cast<char*>(&etype_),
          reinterpret_cast<char*>(&other->etype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_SetPluginEnabled_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamOSSLS_SetPluginEnabled_Response::_Internal {
 public:
};

CSteamOSSLS_SetPluginEnabled_Response::CSteamOSSLS_SetPluginEnabled_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamOSSLS_SetPluginEnabled_Response)
}
CSteamOSSLS_SetPluginEnabled_Response::CSteamOSSLS_SetPluginEnabled_Response(const CSteamOSSLS_SetPluginEnabled_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamOSSLS_SetPluginEnabled_Response)
}

void CSteamOSSLS_SetPluginEnabled_Response::SharedCtor() {
}

CSteamOSSLS_SetPluginEnabled_Response::~CSteamOSSLS_SetPluginEnabled_Response() {
  // @@protoc_insertion_point(destructor:CSteamOSSLS_SetPluginEnabled_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamOSSLS_SetPluginEnabled_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamOSSLS_SetPluginEnabled_Response::ArenaDtor(void* object) {
  CSteamOSSLS_SetPluginEnabled_Response* _this = reinterpret_cast< CSteamOSSLS_SetPluginEnabled_Response* >(object);
  (void)_this;
}
void CSteamOSSLS_SetPluginEnabled_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamOSSLS_SetPluginEnabled_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamOSSLS_SetPluginEnabled_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamOSSLS_SetPluginEnabled_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamOSSLS_SetPluginEnabled_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamOSSLS_SetPluginEnabled_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamOSSLS_SetPluginEnabled_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamOSSLS_SetPluginEnabled_Response)
  return target;
}

size_t CSteamOSSLS_SetPluginEnabled_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamOSSLS_SetPluginEnabled_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamOSSLS_SetPluginEnabled_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamOSSLS_SetPluginEnabled_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamOSSLS_SetPluginEnabled_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamOSSLS_SetPluginEnabled_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamOSSLS_SetPluginEnabled_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamOSSLS_SetPluginEnabled_Response)
    MergeFrom(*source);
  }
}

void CSteamOSSLS_SetPluginEnabled_Response::MergeFrom(const CSteamOSSLS_SetPluginEnabled_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamOSSLS_SetPluginEnabled_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSteamOSSLS_SetPluginEnabled_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamOSSLS_SetPluginEnabled_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamOSSLS_SetPluginEnabled_Response::CopyFrom(const CSteamOSSLS_SetPluginEnabled_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamOSSLS_SetPluginEnabled_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamOSSLS_SetPluginEnabled_Response::IsInitialized() const {
  return true;
}

void CSteamOSSLS_SetPluginEnabled_Response::InternalSwap(CSteamOSSLS_SetPluginEnabled_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamOSSLS_SetPluginEnabled_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SteamOSManager::~SteamOSManager() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamOSManager::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteamos_2eproto);
  return file_level_service_descriptors_webuimessages_5fsteamos_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamOSManager::GetDescriptor() {
  return descriptor();
}

void SteamOSManager::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSManager_GetState_Request*,
                         ::CSteamOSManager_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void SteamOSManager::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSManager_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void SteamOSManager::OptOutOfSideloadedClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSManager_OptOutOfSideloadedClient_Request*,
                         ::CSteamOSManager_OptOutOfSideloadedClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OptOutOfSideloadedClient() not implemented.");
  done->Run();
}

void SteamOSManager::ApplyMandatoryUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSManager_ApplyMandatoryUpdate_Request*,
                         ::CSteamOSManager_ApplyMandatoryUpdate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ApplyMandatoryUpdate() not implemented.");
  done->Run();
}

void SteamOSManager::FactoryReset(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSManager_FactoryReset_Request*,
                         ::CSteamOSManager_FactoryReset_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FactoryReset() not implemented.");
  done->Run();
}

void SteamOSManager::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fsteamos_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSManager_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSManager_GetState_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSManager_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 2:
      OptOutOfSideloadedClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSManager_OptOutOfSideloadedClient_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSManager_OptOutOfSideloadedClient_Response*>(
                 response),
             done);
      break;
    case 3:
      ApplyMandatoryUpdate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSManager_ApplyMandatoryUpdate_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSManager_ApplyMandatoryUpdate_Response*>(
                 response),
             done);
      break;
    case 4:
      FactoryReset(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSManager_FactoryReset_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSManager_FactoryReset_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamOSManager::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamOSManager_GetState_Request::default_instance();
    case 1:
      return ::CSteamOSManager_StateChanged_Notification::default_instance();
    case 2:
      return ::CSteamOSManager_OptOutOfSideloadedClient_Request::default_instance();
    case 3:
      return ::CSteamOSManager_ApplyMandatoryUpdate_Request::default_instance();
    case 4:
      return ::CSteamOSManager_FactoryReset_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamOSManager::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamOSManager_GetState_Response::default_instance();
    case 1:
      return ::WebUINoResponse::default_instance();
    case 2:
      return ::CSteamOSManager_OptOutOfSideloadedClient_Response::default_instance();
    case 3:
      return ::CSteamOSManager_ApplyMandatoryUpdate_Response::default_instance();
    case 4:
      return ::CSteamOSManager_FactoryReset_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamOSManager_Stub::SteamOSManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamOSManager_Stub::SteamOSManager_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamOSManager_Stub::~SteamOSManager_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamOSManager_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSManager_GetState_Request* request,
                              ::CSteamOSManager_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamOSManager_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSManager_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SteamOSManager_Stub::OptOutOfSideloadedClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSManager_OptOutOfSideloadedClient_Request* request,
                              ::CSteamOSManager_OptOutOfSideloadedClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SteamOSManager_Stub::ApplyMandatoryUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSManager_ApplyMandatoryUpdate_Request* request,
                              ::CSteamOSManager_ApplyMandatoryUpdate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SteamOSManager_Stub::FactoryReset(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSManager_FactoryReset_Request* request,
                              ::CSteamOSManager_FactoryReset_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

SteamOSSLS::~SteamOSSLS() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamOSSLS::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fsteamos_2eproto);
  return file_level_service_descriptors_webuimessages_5fsteamos_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamOSSLS::GetDescriptor() {
  return descriptor();
}

void SteamOSSLS::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSSLS_GetState_Request*,
                         ::CSteamOSSLS_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void SteamOSSLS::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSSLS_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void SteamOSSLS::SetEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSSLS_SetEnabled_Request*,
                         ::CSteamOSSLS_SetEnabled_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetEnabled() not implemented.");
  done->Run();
}

void SteamOSSLS::SetPluginEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamOSSLS_SetPluginEnabled_Request*,
                         ::CSteamOSSLS_SetPluginEnabled_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPluginEnabled() not implemented.");
  done->Run();
}

void SteamOSSLS::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fsteamos_2eproto[1]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSSLS_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSSLS_GetState_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSSLS_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 2:
      SetEnabled(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSSLS_SetEnabled_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSSLS_SetEnabled_Response*>(
                 response),
             done);
      break;
    case 3:
      SetPluginEnabled(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamOSSLS_SetPluginEnabled_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSteamOSSLS_SetPluginEnabled_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamOSSLS::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamOSSLS_GetState_Request::default_instance();
    case 1:
      return ::CSteamOSSLS_StateChanged_Notification::default_instance();
    case 2:
      return ::CSteamOSSLS_SetEnabled_Request::default_instance();
    case 3:
      return ::CSteamOSSLS_SetPluginEnabled_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamOSSLS::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamOSSLS_GetState_Response::default_instance();
    case 1:
      return ::WebUINoResponse::default_instance();
    case 2:
      return ::CSteamOSSLS_SetEnabled_Response::default_instance();
    case 3:
      return ::CSteamOSSLS_SetPluginEnabled_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamOSSLS_Stub::SteamOSSLS_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamOSSLS_Stub::SteamOSSLS_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamOSSLS_Stub::~SteamOSSLS_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamOSSLS_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSSLS_GetState_Request* request,
                              ::CSteamOSSLS_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamOSSLS_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSSLS_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SteamOSSLS_Stub::SetEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSSLS_SetEnabled_Request* request,
                              ::CSteamOSSLS_SetEnabled_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SteamOSSLS_Stub::SetPluginEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamOSSLS_SetPluginEnabled_Request* request,
                              ::CSteamOSSLS_SetPluginEnabled_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgFactoryResetState* Arena::CreateMaybeMessage< ::CMsgFactoryResetState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFactoryResetState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManagerState* Arena::CreateMaybeMessage< ::CSteamOSManagerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManagerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_GetState_Request* Arena::CreateMaybeMessage< ::CSteamOSManager_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_GetState_Response* Arena::CreateMaybeMessage< ::CSteamOSManager_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_StateChanged_Notification* Arena::CreateMaybeMessage< ::CSteamOSManager_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_IsTelemetryHelperAvailable_Request* Arena::CreateMaybeMessage< ::CSteamOSManager_IsTelemetryHelperAvailable_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_IsTelemetryHelperAvailable_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_IsTelemetryHelperAvailable_Response* Arena::CreateMaybeMessage< ::CSteamOSManager_IsTelemetryHelperAvailable_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_IsTelemetryHelperAvailable_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_OptOutOfSideloadedClient_Request* Arena::CreateMaybeMessage< ::CSteamOSManager_OptOutOfSideloadedClient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_OptOutOfSideloadedClient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_OptOutOfSideloadedClient_Response* Arena::CreateMaybeMessage< ::CSteamOSManager_OptOutOfSideloadedClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_OptOutOfSideloadedClient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_ApplyMandatoryUpdate_Request* Arena::CreateMaybeMessage< ::CSteamOSManager_ApplyMandatoryUpdate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_ApplyMandatoryUpdate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_ApplyMandatoryUpdate_Response* Arena::CreateMaybeMessage< ::CSteamOSManager_ApplyMandatoryUpdate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_ApplyMandatoryUpdate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_FactoryReset_Request* Arena::CreateMaybeMessage< ::CSteamOSManager_FactoryReset_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_FactoryReset_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSManager_FactoryReset_Response* Arena::CreateMaybeMessage< ::CSteamOSManager_FactoryReset_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSManager_FactoryReset_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLSPlugin* Arena::CreateMaybeMessage< ::CSteamOSSLSPlugin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLSPlugin >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLSState* Arena::CreateMaybeMessage< ::CSteamOSSLSState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLSState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_GetState_Request* Arena::CreateMaybeMessage< ::CSteamOSSLS_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_GetState_Response* Arena::CreateMaybeMessage< ::CSteamOSSLS_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_StateChanged_Notification* Arena::CreateMaybeMessage< ::CSteamOSSLS_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_SetEnabled_Request* Arena::CreateMaybeMessage< ::CSteamOSSLS_SetEnabled_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_SetEnabled_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_SetEnabled_Response* Arena::CreateMaybeMessage< ::CSteamOSSLS_SetEnabled_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_SetEnabled_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_SetPluginEnabled_Request* Arena::CreateMaybeMessage< ::CSteamOSSLS_SetPluginEnabled_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_SetPluginEnabled_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamOSSLS_SetPluginEnabled_Response* Arena::CreateMaybeMessage< ::CSteamOSSLS_SetPluginEnabled_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamOSSLS_SetPluginEnabled_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
