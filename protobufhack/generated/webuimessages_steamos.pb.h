// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_steamos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fsteamos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fsteamos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fsteamos_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(int index);
class CSteamOSManagerState;
struct CSteamOSManagerStateDefaultTypeInternal;
extern CSteamOSManagerStateDefaultTypeInternal _CSteamOSManagerState_default_instance_;
class CSteamOSManager_ApplyMandatoryUpdate_Request;
struct CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal;
extern CSteamOSManager_ApplyMandatoryUpdate_RequestDefaultTypeInternal _CSteamOSManager_ApplyMandatoryUpdate_Request_default_instance_;
class CSteamOSManager_ApplyMandatoryUpdate_Response;
struct CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal;
extern CSteamOSManager_ApplyMandatoryUpdate_ResponseDefaultTypeInternal _CSteamOSManager_ApplyMandatoryUpdate_Response_default_instance_;
class CSteamOSManager_GetState_Request;
struct CSteamOSManager_GetState_RequestDefaultTypeInternal;
extern CSteamOSManager_GetState_RequestDefaultTypeInternal _CSteamOSManager_GetState_Request_default_instance_;
class CSteamOSManager_GetState_Response;
struct CSteamOSManager_GetState_ResponseDefaultTypeInternal;
extern CSteamOSManager_GetState_ResponseDefaultTypeInternal _CSteamOSManager_GetState_Response_default_instance_;
class CSteamOSManager_IsTelemetryHelperAvailable_Request;
struct CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal;
extern CSteamOSManager_IsTelemetryHelperAvailable_RequestDefaultTypeInternal _CSteamOSManager_IsTelemetryHelperAvailable_Request_default_instance_;
class CSteamOSManager_IsTelemetryHelperAvailable_Response;
struct CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal;
extern CSteamOSManager_IsTelemetryHelperAvailable_ResponseDefaultTypeInternal _CSteamOSManager_IsTelemetryHelperAvailable_Response_default_instance_;
class CSteamOSManager_OptOutOfSideloadedClient_Request;
struct CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal;
extern CSteamOSManager_OptOutOfSideloadedClient_RequestDefaultTypeInternal _CSteamOSManager_OptOutOfSideloadedClient_Request_default_instance_;
class CSteamOSManager_OptOutOfSideloadedClient_Response;
struct CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal;
extern CSteamOSManager_OptOutOfSideloadedClient_ResponseDefaultTypeInternal _CSteamOSManager_OptOutOfSideloadedClient_Response_default_instance_;
class CSteamOSManager_StateChanged_Notification;
struct CSteamOSManager_StateChanged_NotificationDefaultTypeInternal;
extern CSteamOSManager_StateChanged_NotificationDefaultTypeInternal _CSteamOSManager_StateChanged_Notification_default_instance_;
class CSteamOSSLSPlugin;
struct CSteamOSSLSPluginDefaultTypeInternal;
extern CSteamOSSLSPluginDefaultTypeInternal _CSteamOSSLSPlugin_default_instance_;
class CSteamOSSLSState;
struct CSteamOSSLSStateDefaultTypeInternal;
extern CSteamOSSLSStateDefaultTypeInternal _CSteamOSSLSState_default_instance_;
class CSteamOSSLS_GetState_Request;
struct CSteamOSSLS_GetState_RequestDefaultTypeInternal;
extern CSteamOSSLS_GetState_RequestDefaultTypeInternal _CSteamOSSLS_GetState_Request_default_instance_;
class CSteamOSSLS_GetState_Response;
struct CSteamOSSLS_GetState_ResponseDefaultTypeInternal;
extern CSteamOSSLS_GetState_ResponseDefaultTypeInternal _CSteamOSSLS_GetState_Response_default_instance_;
class CSteamOSSLS_SetEnabled_Request;
struct CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal;
extern CSteamOSSLS_SetEnabled_RequestDefaultTypeInternal _CSteamOSSLS_SetEnabled_Request_default_instance_;
class CSteamOSSLS_SetEnabled_Response;
struct CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal;
extern CSteamOSSLS_SetEnabled_ResponseDefaultTypeInternal _CSteamOSSLS_SetEnabled_Response_default_instance_;
class CSteamOSSLS_SetPluginEnabled_Request;
struct CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal;
extern CSteamOSSLS_SetPluginEnabled_RequestDefaultTypeInternal _CSteamOSSLS_SetPluginEnabled_Request_default_instance_;
class CSteamOSSLS_SetPluginEnabled_Response;
struct CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal;
extern CSteamOSSLS_SetPluginEnabled_ResponseDefaultTypeInternal _CSteamOSSLS_SetPluginEnabled_Response_default_instance_;
class CSteamOSSLS_StateChanged_Notification;
struct CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal;
extern CSteamOSSLS_StateChanged_NotificationDefaultTypeInternal _CSteamOSSLS_StateChanged_Notification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSteamOSManagerState* Arena::CreateMaybeMessage<::CSteamOSManagerState>(Arena*);
template<> ::CSteamOSManager_ApplyMandatoryUpdate_Request* Arena::CreateMaybeMessage<::CSteamOSManager_ApplyMandatoryUpdate_Request>(Arena*);
template<> ::CSteamOSManager_ApplyMandatoryUpdate_Response* Arena::CreateMaybeMessage<::CSteamOSManager_ApplyMandatoryUpdate_Response>(Arena*);
template<> ::CSteamOSManager_GetState_Request* Arena::CreateMaybeMessage<::CSteamOSManager_GetState_Request>(Arena*);
template<> ::CSteamOSManager_GetState_Response* Arena::CreateMaybeMessage<::CSteamOSManager_GetState_Response>(Arena*);
template<> ::CSteamOSManager_IsTelemetryHelperAvailable_Request* Arena::CreateMaybeMessage<::CSteamOSManager_IsTelemetryHelperAvailable_Request>(Arena*);
template<> ::CSteamOSManager_IsTelemetryHelperAvailable_Response* Arena::CreateMaybeMessage<::CSteamOSManager_IsTelemetryHelperAvailable_Response>(Arena*);
template<> ::CSteamOSManager_OptOutOfSideloadedClient_Request* Arena::CreateMaybeMessage<::CSteamOSManager_OptOutOfSideloadedClient_Request>(Arena*);
template<> ::CSteamOSManager_OptOutOfSideloadedClient_Response* Arena::CreateMaybeMessage<::CSteamOSManager_OptOutOfSideloadedClient_Response>(Arena*);
template<> ::CSteamOSManager_StateChanged_Notification* Arena::CreateMaybeMessage<::CSteamOSManager_StateChanged_Notification>(Arena*);
template<> ::CSteamOSSLSPlugin* Arena::CreateMaybeMessage<::CSteamOSSLSPlugin>(Arena*);
template<> ::CSteamOSSLSState* Arena::CreateMaybeMessage<::CSteamOSSLSState>(Arena*);
template<> ::CSteamOSSLS_GetState_Request* Arena::CreateMaybeMessage<::CSteamOSSLS_GetState_Request>(Arena*);
template<> ::CSteamOSSLS_GetState_Response* Arena::CreateMaybeMessage<::CSteamOSSLS_GetState_Response>(Arena*);
template<> ::CSteamOSSLS_SetEnabled_Request* Arena::CreateMaybeMessage<::CSteamOSSLS_SetEnabled_Request>(Arena*);
template<> ::CSteamOSSLS_SetEnabled_Response* Arena::CreateMaybeMessage<::CSteamOSSLS_SetEnabled_Response>(Arena*);
template<> ::CSteamOSSLS_SetPluginEnabled_Request* Arena::CreateMaybeMessage<::CSteamOSSLS_SetPluginEnabled_Request>(Arena*);
template<> ::CSteamOSSLS_SetPluginEnabled_Response* Arena::CreateMaybeMessage<::CSteamOSSLS_SetPluginEnabled_Response>(Arena*);
template<> ::CSteamOSSLS_StateChanged_Notification* Arena::CreateMaybeMessage<::CSteamOSSLS_StateChanged_Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSteamOSManagerState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManagerState) */ {
 public:
  inline CSteamOSManagerState() : CSteamOSManagerState(nullptr) {}
  virtual ~CSteamOSManagerState();
  explicit constexpr CSteamOSManagerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManagerState(const CSteamOSManagerState& from);
  CSteamOSManagerState(CSteamOSManagerState&& from) noexcept
    : CSteamOSManagerState() {
    *this = ::std::move(from);
  }

  inline CSteamOSManagerState& operator=(const CSteamOSManagerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManagerState& operator=(CSteamOSManagerState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManagerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManagerState* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManagerState*>(
               &_CSteamOSManagerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSteamOSManagerState& a, CSteamOSManagerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManagerState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManagerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManagerState* New() const final {
    return CreateMaybeMessage<CSteamOSManagerState>(nullptr);
  }

  CSteamOSManagerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManagerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManagerState& from);
  void MergeFrom(const CSteamOSManagerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManagerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManagerState";
  }
  protected:
  explicit CSteamOSManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsVersionFieldNumber = 2,
    kIsServiceAvailableFieldNumber = 1,
    kIsMandatoryUpdateAvailableFieldNumber = 3,
    kIsStatusLedControlAvailableFieldNumber = 5,
    kStartupMovieVariantFieldNumber = 4,
  };
  // optional string os_version = 2;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  const std::string& os_version() const;
  void set_os_version(const std::string& value);
  void set_os_version(std::string&& value);
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  std::string* mutable_os_version();
  std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // optional bool is_service_available = 1;
  bool has_is_service_available() const;
  private:
  bool _internal_has_is_service_available() const;
  public:
  void clear_is_service_available();
  bool is_service_available() const;
  void set_is_service_available(bool value);
  private:
  bool _internal_is_service_available() const;
  void _internal_set_is_service_available(bool value);
  public:

  // optional bool is_mandatory_update_available = 3;
  bool has_is_mandatory_update_available() const;
  private:
  bool _internal_has_is_mandatory_update_available() const;
  public:
  void clear_is_mandatory_update_available();
  bool is_mandatory_update_available() const;
  void set_is_mandatory_update_available(bool value);
  private:
  bool _internal_is_mandatory_update_available() const;
  void _internal_set_is_mandatory_update_available(bool value);
  public:

  // optional bool is_status_led_control_available = 5;
  bool has_is_status_led_control_available() const;
  private:
  bool _internal_has_is_status_led_control_available() const;
  public:
  void clear_is_status_led_control_available();
  bool is_status_led_control_available() const;
  void set_is_status_led_control_available(bool value);
  private:
  bool _internal_is_status_led_control_available() const;
  void _internal_set_is_status_led_control_available(bool value);
  public:

  // optional .EStartupMovieVariant startup_movie_variant = 4 [default = EStartupMovieVariant_Invalid];
  bool has_startup_movie_variant() const;
  private:
  bool _internal_has_startup_movie_variant() const;
  public:
  void clear_startup_movie_variant();
  ::EStartupMovieVariant startup_movie_variant() const;
  void set_startup_movie_variant(::EStartupMovieVariant value);
  private:
  ::EStartupMovieVariant _internal_startup_movie_variant() const;
  void _internal_set_startup_movie_variant(::EStartupMovieVariant value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSManagerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  bool is_service_available_;
  bool is_mandatory_update_available_;
  bool is_status_led_control_available_;
  int startup_movie_variant_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_GetState_Request) */ {
 public:
  inline CSteamOSManager_GetState_Request() : CSteamOSManager_GetState_Request(nullptr) {}
  virtual ~CSteamOSManager_GetState_Request();
  explicit constexpr CSteamOSManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_GetState_Request(const CSteamOSManager_GetState_Request& from);
  CSteamOSManager_GetState_Request(CSteamOSManager_GetState_Request&& from) noexcept
    : CSteamOSManager_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_GetState_Request& operator=(const CSteamOSManager_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_GetState_Request& operator=(CSteamOSManager_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_GetState_Request*>(
               &_CSteamOSManager_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSteamOSManager_GetState_Request& a, CSteamOSManager_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_GetState_Request* New() const final {
    return CreateMaybeMessage<CSteamOSManager_GetState_Request>(nullptr);
  }

  CSteamOSManager_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_GetState_Request& from);
  void MergeFrom(const CSteamOSManager_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_GetState_Request";
  }
  protected:
  explicit CSteamOSManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_GetState_Response) */ {
 public:
  inline CSteamOSManager_GetState_Response() : CSteamOSManager_GetState_Response(nullptr) {}
  virtual ~CSteamOSManager_GetState_Response();
  explicit constexpr CSteamOSManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_GetState_Response(const CSteamOSManager_GetState_Response& from);
  CSteamOSManager_GetState_Response(CSteamOSManager_GetState_Response&& from) noexcept
    : CSteamOSManager_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_GetState_Response& operator=(const CSteamOSManager_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_GetState_Response& operator=(CSteamOSManager_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_GetState_Response*>(
               &_CSteamOSManager_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSteamOSManager_GetState_Response& a, CSteamOSManager_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_GetState_Response* New() const final {
    return CreateMaybeMessage<CSteamOSManager_GetState_Response>(nullptr);
  }

  CSteamOSManager_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_GetState_Response& from);
  void MergeFrom(const CSteamOSManager_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_GetState_Response";
  }
  protected:
  explicit CSteamOSManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .CSteamOSManagerState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::CSteamOSManagerState& state() const;
  ::CSteamOSManagerState* release_state();
  ::CSteamOSManagerState* mutable_state();
  void set_allocated_state(::CSteamOSManagerState* state);
  private:
  const ::CSteamOSManagerState& _internal_state() const;
  ::CSteamOSManagerState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::CSteamOSManagerState* state);
  ::CSteamOSManagerState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:CSteamOSManager_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSteamOSManagerState* state_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_StateChanged_Notification) */ {
 public:
  inline CSteamOSManager_StateChanged_Notification() : CSteamOSManager_StateChanged_Notification(nullptr) {}
  virtual ~CSteamOSManager_StateChanged_Notification();
  explicit constexpr CSteamOSManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_StateChanged_Notification(const CSteamOSManager_StateChanged_Notification& from);
  CSteamOSManager_StateChanged_Notification(CSteamOSManager_StateChanged_Notification&& from) noexcept
    : CSteamOSManager_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_StateChanged_Notification& operator=(const CSteamOSManager_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_StateChanged_Notification& operator=(CSteamOSManager_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_StateChanged_Notification*>(
               &_CSteamOSManager_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSteamOSManager_StateChanged_Notification& a, CSteamOSManager_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamOSManager_StateChanged_Notification>(nullptr);
  }

  CSteamOSManager_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_StateChanged_Notification& from);
  void MergeFrom(const CSteamOSManager_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_StateChanged_Notification";
  }
  protected:
  explicit CSteamOSManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_IsTelemetryHelperAvailable_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_IsTelemetryHelperAvailable_Request) */ {
 public:
  inline CSteamOSManager_IsTelemetryHelperAvailable_Request() : CSteamOSManager_IsTelemetryHelperAvailable_Request(nullptr) {}
  virtual ~CSteamOSManager_IsTelemetryHelperAvailable_Request();
  explicit constexpr CSteamOSManager_IsTelemetryHelperAvailable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_IsTelemetryHelperAvailable_Request(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from);
  CSteamOSManager_IsTelemetryHelperAvailable_Request(CSteamOSManager_IsTelemetryHelperAvailable_Request&& from) noexcept
    : CSteamOSManager_IsTelemetryHelperAvailable_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_IsTelemetryHelperAvailable_Request& operator=(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_IsTelemetryHelperAvailable_Request& operator=(CSteamOSManager_IsTelemetryHelperAvailable_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_IsTelemetryHelperAvailable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_IsTelemetryHelperAvailable_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_IsTelemetryHelperAvailable_Request*>(
               &_CSteamOSManager_IsTelemetryHelperAvailable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSteamOSManager_IsTelemetryHelperAvailable_Request& a, CSteamOSManager_IsTelemetryHelperAvailable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_IsTelemetryHelperAvailable_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_IsTelemetryHelperAvailable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_IsTelemetryHelperAvailable_Request* New() const final {
    return CreateMaybeMessage<CSteamOSManager_IsTelemetryHelperAvailable_Request>(nullptr);
  }

  CSteamOSManager_IsTelemetryHelperAvailable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_IsTelemetryHelperAvailable_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from);
  void MergeFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_IsTelemetryHelperAvailable_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_IsTelemetryHelperAvailable_Request";
  }
  protected:
  explicit CSteamOSManager_IsTelemetryHelperAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtypeFieldNumber = 1,
  };
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::ESLSHelper etype() const;
  void set_etype(::ESLSHelper value);
  private:
  ::ESLSHelper _internal_etype() const;
  void _internal_set_etype(::ESLSHelper value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSManager_IsTelemetryHelperAvailable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int etype_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_IsTelemetryHelperAvailable_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_IsTelemetryHelperAvailable_Response) */ {
 public:
  inline CSteamOSManager_IsTelemetryHelperAvailable_Response() : CSteamOSManager_IsTelemetryHelperAvailable_Response(nullptr) {}
  virtual ~CSteamOSManager_IsTelemetryHelperAvailable_Response();
  explicit constexpr CSteamOSManager_IsTelemetryHelperAvailable_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_IsTelemetryHelperAvailable_Response(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from);
  CSteamOSManager_IsTelemetryHelperAvailable_Response(CSteamOSManager_IsTelemetryHelperAvailable_Response&& from) noexcept
    : CSteamOSManager_IsTelemetryHelperAvailable_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_IsTelemetryHelperAvailable_Response& operator=(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_IsTelemetryHelperAvailable_Response& operator=(CSteamOSManager_IsTelemetryHelperAvailable_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_IsTelemetryHelperAvailable_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_IsTelemetryHelperAvailable_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_IsTelemetryHelperAvailable_Response*>(
               &_CSteamOSManager_IsTelemetryHelperAvailable_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSteamOSManager_IsTelemetryHelperAvailable_Response& a, CSteamOSManager_IsTelemetryHelperAvailable_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_IsTelemetryHelperAvailable_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_IsTelemetryHelperAvailable_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_IsTelemetryHelperAvailable_Response* New() const final {
    return CreateMaybeMessage<CSteamOSManager_IsTelemetryHelperAvailable_Response>(nullptr);
  }

  CSteamOSManager_IsTelemetryHelperAvailable_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_IsTelemetryHelperAvailable_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from);
  void MergeFrom(const CSteamOSManager_IsTelemetryHelperAvailable_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_IsTelemetryHelperAvailable_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_IsTelemetryHelperAvailable_Response";
  }
  protected:
  explicit CSteamOSManager_IsTelemetryHelperAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableFieldNumber = 1,
  };
  // optional bool available = 1;
  bool has_available() const;
  private:
  bool _internal_has_available() const;
  public:
  void clear_available();
  bool available() const;
  void set_available(bool value);
  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSManager_IsTelemetryHelperAvailable_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool available_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_OptOutOfSideloadedClient_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_OptOutOfSideloadedClient_Request) */ {
 public:
  inline CSteamOSManager_OptOutOfSideloadedClient_Request() : CSteamOSManager_OptOutOfSideloadedClient_Request(nullptr) {}
  virtual ~CSteamOSManager_OptOutOfSideloadedClient_Request();
  explicit constexpr CSteamOSManager_OptOutOfSideloadedClient_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_OptOutOfSideloadedClient_Request(const CSteamOSManager_OptOutOfSideloadedClient_Request& from);
  CSteamOSManager_OptOutOfSideloadedClient_Request(CSteamOSManager_OptOutOfSideloadedClient_Request&& from) noexcept
    : CSteamOSManager_OptOutOfSideloadedClient_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_OptOutOfSideloadedClient_Request& operator=(const CSteamOSManager_OptOutOfSideloadedClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_OptOutOfSideloadedClient_Request& operator=(CSteamOSManager_OptOutOfSideloadedClient_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_OptOutOfSideloadedClient_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_OptOutOfSideloadedClient_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_OptOutOfSideloadedClient_Request*>(
               &_CSteamOSManager_OptOutOfSideloadedClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSteamOSManager_OptOutOfSideloadedClient_Request& a, CSteamOSManager_OptOutOfSideloadedClient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_OptOutOfSideloadedClient_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_OptOutOfSideloadedClient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_OptOutOfSideloadedClient_Request* New() const final {
    return CreateMaybeMessage<CSteamOSManager_OptOutOfSideloadedClient_Request>(nullptr);
  }

  CSteamOSManager_OptOutOfSideloadedClient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_OptOutOfSideloadedClient_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_OptOutOfSideloadedClient_Request& from);
  void MergeFrom(const CSteamOSManager_OptOutOfSideloadedClient_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_OptOutOfSideloadedClient_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_OptOutOfSideloadedClient_Request";
  }
  protected:
  explicit CSteamOSManager_OptOutOfSideloadedClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_OptOutOfSideloadedClient_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_OptOutOfSideloadedClient_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_OptOutOfSideloadedClient_Response) */ {
 public:
  inline CSteamOSManager_OptOutOfSideloadedClient_Response() : CSteamOSManager_OptOutOfSideloadedClient_Response(nullptr) {}
  virtual ~CSteamOSManager_OptOutOfSideloadedClient_Response();
  explicit constexpr CSteamOSManager_OptOutOfSideloadedClient_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_OptOutOfSideloadedClient_Response(const CSteamOSManager_OptOutOfSideloadedClient_Response& from);
  CSteamOSManager_OptOutOfSideloadedClient_Response(CSteamOSManager_OptOutOfSideloadedClient_Response&& from) noexcept
    : CSteamOSManager_OptOutOfSideloadedClient_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_OptOutOfSideloadedClient_Response& operator=(const CSteamOSManager_OptOutOfSideloadedClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_OptOutOfSideloadedClient_Response& operator=(CSteamOSManager_OptOutOfSideloadedClient_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_OptOutOfSideloadedClient_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_OptOutOfSideloadedClient_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_OptOutOfSideloadedClient_Response*>(
               &_CSteamOSManager_OptOutOfSideloadedClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSteamOSManager_OptOutOfSideloadedClient_Response& a, CSteamOSManager_OptOutOfSideloadedClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_OptOutOfSideloadedClient_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_OptOutOfSideloadedClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_OptOutOfSideloadedClient_Response* New() const final {
    return CreateMaybeMessage<CSteamOSManager_OptOutOfSideloadedClient_Response>(nullptr);
  }

  CSteamOSManager_OptOutOfSideloadedClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_OptOutOfSideloadedClient_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_OptOutOfSideloadedClient_Response& from);
  void MergeFrom(const CSteamOSManager_OptOutOfSideloadedClient_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_OptOutOfSideloadedClient_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_OptOutOfSideloadedClient_Response";
  }
  protected:
  explicit CSteamOSManager_OptOutOfSideloadedClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_OptOutOfSideloadedClient_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_ApplyMandatoryUpdate_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_ApplyMandatoryUpdate_Request) */ {
 public:
  inline CSteamOSManager_ApplyMandatoryUpdate_Request() : CSteamOSManager_ApplyMandatoryUpdate_Request(nullptr) {}
  virtual ~CSteamOSManager_ApplyMandatoryUpdate_Request();
  explicit constexpr CSteamOSManager_ApplyMandatoryUpdate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_ApplyMandatoryUpdate_Request(const CSteamOSManager_ApplyMandatoryUpdate_Request& from);
  CSteamOSManager_ApplyMandatoryUpdate_Request(CSteamOSManager_ApplyMandatoryUpdate_Request&& from) noexcept
    : CSteamOSManager_ApplyMandatoryUpdate_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_ApplyMandatoryUpdate_Request& operator=(const CSteamOSManager_ApplyMandatoryUpdate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_ApplyMandatoryUpdate_Request& operator=(CSteamOSManager_ApplyMandatoryUpdate_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_ApplyMandatoryUpdate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_ApplyMandatoryUpdate_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_ApplyMandatoryUpdate_Request*>(
               &_CSteamOSManager_ApplyMandatoryUpdate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSteamOSManager_ApplyMandatoryUpdate_Request& a, CSteamOSManager_ApplyMandatoryUpdate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_ApplyMandatoryUpdate_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_ApplyMandatoryUpdate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_ApplyMandatoryUpdate_Request* New() const final {
    return CreateMaybeMessage<CSteamOSManager_ApplyMandatoryUpdate_Request>(nullptr);
  }

  CSteamOSManager_ApplyMandatoryUpdate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_ApplyMandatoryUpdate_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_ApplyMandatoryUpdate_Request& from);
  void MergeFrom(const CSteamOSManager_ApplyMandatoryUpdate_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_ApplyMandatoryUpdate_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_ApplyMandatoryUpdate_Request";
  }
  protected:
  explicit CSteamOSManager_ApplyMandatoryUpdate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_ApplyMandatoryUpdate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSManager_ApplyMandatoryUpdate_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSManager_ApplyMandatoryUpdate_Response) */ {
 public:
  inline CSteamOSManager_ApplyMandatoryUpdate_Response() : CSteamOSManager_ApplyMandatoryUpdate_Response(nullptr) {}
  virtual ~CSteamOSManager_ApplyMandatoryUpdate_Response();
  explicit constexpr CSteamOSManager_ApplyMandatoryUpdate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSManager_ApplyMandatoryUpdate_Response(const CSteamOSManager_ApplyMandatoryUpdate_Response& from);
  CSteamOSManager_ApplyMandatoryUpdate_Response(CSteamOSManager_ApplyMandatoryUpdate_Response&& from) noexcept
    : CSteamOSManager_ApplyMandatoryUpdate_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSManager_ApplyMandatoryUpdate_Response& operator=(const CSteamOSManager_ApplyMandatoryUpdate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSManager_ApplyMandatoryUpdate_Response& operator=(CSteamOSManager_ApplyMandatoryUpdate_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSManager_ApplyMandatoryUpdate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSManager_ApplyMandatoryUpdate_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSManager_ApplyMandatoryUpdate_Response*>(
               &_CSteamOSManager_ApplyMandatoryUpdate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSteamOSManager_ApplyMandatoryUpdate_Response& a, CSteamOSManager_ApplyMandatoryUpdate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSManager_ApplyMandatoryUpdate_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSManager_ApplyMandatoryUpdate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSManager_ApplyMandatoryUpdate_Response* New() const final {
    return CreateMaybeMessage<CSteamOSManager_ApplyMandatoryUpdate_Response>(nullptr);
  }

  CSteamOSManager_ApplyMandatoryUpdate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSManager_ApplyMandatoryUpdate_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSManager_ApplyMandatoryUpdate_Response& from);
  void MergeFrom(const CSteamOSManager_ApplyMandatoryUpdate_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSManager_ApplyMandatoryUpdate_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSManager_ApplyMandatoryUpdate_Response";
  }
  protected:
  explicit CSteamOSManager_ApplyMandatoryUpdate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSManager_ApplyMandatoryUpdate_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLSPlugin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLSPlugin) */ {
 public:
  inline CSteamOSSLSPlugin() : CSteamOSSLSPlugin(nullptr) {}
  virtual ~CSteamOSSLSPlugin();
  explicit constexpr CSteamOSSLSPlugin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLSPlugin(const CSteamOSSLSPlugin& from);
  CSteamOSSLSPlugin(CSteamOSSLSPlugin&& from) noexcept
    : CSteamOSSLSPlugin() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLSPlugin& operator=(const CSteamOSSLSPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLSPlugin& operator=(CSteamOSSLSPlugin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLSPlugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLSPlugin* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLSPlugin*>(
               &_CSteamOSSLSPlugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CSteamOSSLSPlugin& a, CSteamOSSLSPlugin& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLSPlugin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLSPlugin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLSPlugin* New() const final {
    return CreateMaybeMessage<CSteamOSSLSPlugin>(nullptr);
  }

  CSteamOSSLSPlugin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLSPlugin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLSPlugin& from);
  void MergeFrom(const CSteamOSSLSPlugin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLSPlugin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLSPlugin";
  }
  protected:
  explicit CSteamOSSLSPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtypeFieldNumber = 1,
    kIsAvailableFieldNumber = 2,
    kIsEnabledFieldNumber = 3,
  };
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::ESLSHelper etype() const;
  void set_etype(::ESLSHelper value);
  private:
  ::ESLSHelper _internal_etype() const;
  void _internal_set_etype(::ESLSHelper value);
  public:

  // optional bool is_available = 2;
  bool has_is_available() const;
  private:
  bool _internal_has_is_available() const;
  public:
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // optional bool is_enabled = 3;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSSLSPlugin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int etype_;
  bool is_available_;
  bool is_enabled_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLSState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLSState) */ {
 public:
  inline CSteamOSSLSState() : CSteamOSSLSState(nullptr) {}
  virtual ~CSteamOSSLSState();
  explicit constexpr CSteamOSSLSState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLSState(const CSteamOSSLSState& from);
  CSteamOSSLSState(CSteamOSSLSState&& from) noexcept
    : CSteamOSSLSState() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLSState& operator=(const CSteamOSSLSState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLSState& operator=(CSteamOSSLSState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLSState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLSState* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLSState*>(
               &_CSteamOSSLSState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CSteamOSSLSState& a, CSteamOSSLSState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLSState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLSState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLSState* New() const final {
    return CreateMaybeMessage<CSteamOSSLSState>(nullptr);
  }

  CSteamOSSLSState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLSState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLSState& from);
  void MergeFrom(const CSteamOSSLSState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLSState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLSState";
  }
  protected:
  explicit CSteamOSSLSState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginsFieldNumber = 3,
    kIsAvailableFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // repeated .CSteamOSSLSPlugin plugins = 3;
  int plugins_size() const;
  private:
  int _internal_plugins_size() const;
  public:
  void clear_plugins();
  ::CSteamOSSLSPlugin* mutable_plugins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSteamOSSLSPlugin >*
      mutable_plugins();
  private:
  const ::CSteamOSSLSPlugin& _internal_plugins(int index) const;
  ::CSteamOSSLSPlugin* _internal_add_plugins();
  public:
  const ::CSteamOSSLSPlugin& plugins(int index) const;
  ::CSteamOSSLSPlugin* add_plugins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSteamOSSLSPlugin >&
      plugins() const;

  // optional bool is_available = 1;
  bool has_is_available() const;
  private:
  bool _internal_has_is_available() const;
  public:
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // optional bool is_enabled = 2;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSSLSState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSteamOSSLSPlugin > plugins_;
  bool is_available_;
  bool is_enabled_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_GetState_Request) */ {
 public:
  inline CSteamOSSLS_GetState_Request() : CSteamOSSLS_GetState_Request(nullptr) {}
  virtual ~CSteamOSSLS_GetState_Request();
  explicit constexpr CSteamOSSLS_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_GetState_Request(const CSteamOSSLS_GetState_Request& from);
  CSteamOSSLS_GetState_Request(CSteamOSSLS_GetState_Request&& from) noexcept
    : CSteamOSSLS_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_GetState_Request& operator=(const CSteamOSSLS_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_GetState_Request& operator=(CSteamOSSLS_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_GetState_Request*>(
               &_CSteamOSSLS_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CSteamOSSLS_GetState_Request& a, CSteamOSSLS_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_GetState_Request* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_GetState_Request>(nullptr);
  }

  CSteamOSSLS_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_GetState_Request& from);
  void MergeFrom(const CSteamOSSLS_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_GetState_Request";
  }
  protected:
  explicit CSteamOSSLS_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_GetState_Response) */ {
 public:
  inline CSteamOSSLS_GetState_Response() : CSteamOSSLS_GetState_Response(nullptr) {}
  virtual ~CSteamOSSLS_GetState_Response();
  explicit constexpr CSteamOSSLS_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_GetState_Response(const CSteamOSSLS_GetState_Response& from);
  CSteamOSSLS_GetState_Response(CSteamOSSLS_GetState_Response&& from) noexcept
    : CSteamOSSLS_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_GetState_Response& operator=(const CSteamOSSLS_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_GetState_Response& operator=(CSteamOSSLS_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_GetState_Response*>(
               &_CSteamOSSLS_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CSteamOSSLS_GetState_Response& a, CSteamOSSLS_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_GetState_Response* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_GetState_Response>(nullptr);
  }

  CSteamOSSLS_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_GetState_Response& from);
  void MergeFrom(const CSteamOSSLS_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_GetState_Response";
  }
  protected:
  explicit CSteamOSSLS_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .CSteamOSSLSState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::CSteamOSSLSState& state() const;
  ::CSteamOSSLSState* release_state();
  ::CSteamOSSLSState* mutable_state();
  void set_allocated_state(::CSteamOSSLSState* state);
  private:
  const ::CSteamOSSLSState& _internal_state() const;
  ::CSteamOSSLSState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::CSteamOSSLSState* state);
  ::CSteamOSSLSState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSteamOSSLSState* state_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_StateChanged_Notification) */ {
 public:
  inline CSteamOSSLS_StateChanged_Notification() : CSteamOSSLS_StateChanged_Notification(nullptr) {}
  virtual ~CSteamOSSLS_StateChanged_Notification();
  explicit constexpr CSteamOSSLS_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_StateChanged_Notification(const CSteamOSSLS_StateChanged_Notification& from);
  CSteamOSSLS_StateChanged_Notification(CSteamOSSLS_StateChanged_Notification&& from) noexcept
    : CSteamOSSLS_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_StateChanged_Notification& operator=(const CSteamOSSLS_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_StateChanged_Notification& operator=(CSteamOSSLS_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_StateChanged_Notification*>(
               &_CSteamOSSLS_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CSteamOSSLS_StateChanged_Notification& a, CSteamOSSLS_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_StateChanged_Notification>(nullptr);
  }

  CSteamOSSLS_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_StateChanged_Notification& from);
  void MergeFrom(const CSteamOSSLS_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_StateChanged_Notification";
  }
  protected:
  explicit CSteamOSSLS_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_SetEnabled_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_SetEnabled_Request) */ {
 public:
  inline CSteamOSSLS_SetEnabled_Request() : CSteamOSSLS_SetEnabled_Request(nullptr) {}
  virtual ~CSteamOSSLS_SetEnabled_Request();
  explicit constexpr CSteamOSSLS_SetEnabled_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_SetEnabled_Request(const CSteamOSSLS_SetEnabled_Request& from);
  CSteamOSSLS_SetEnabled_Request(CSteamOSSLS_SetEnabled_Request&& from) noexcept
    : CSteamOSSLS_SetEnabled_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_SetEnabled_Request& operator=(const CSteamOSSLS_SetEnabled_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_SetEnabled_Request& operator=(CSteamOSSLS_SetEnabled_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_SetEnabled_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_SetEnabled_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_SetEnabled_Request*>(
               &_CSteamOSSLS_SetEnabled_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CSteamOSSLS_SetEnabled_Request& a, CSteamOSSLS_SetEnabled_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_SetEnabled_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_SetEnabled_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_SetEnabled_Request* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_SetEnabled_Request>(nullptr);
  }

  CSteamOSSLS_SetEnabled_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_SetEnabled_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_SetEnabled_Request& from);
  void MergeFrom(const CSteamOSSLS_SetEnabled_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_SetEnabled_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_SetEnabled_Request";
  }
  protected:
  explicit CSteamOSSLS_SetEnabled_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_SetEnabled_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_SetEnabled_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_SetEnabled_Response) */ {
 public:
  inline CSteamOSSLS_SetEnabled_Response() : CSteamOSSLS_SetEnabled_Response(nullptr) {}
  virtual ~CSteamOSSLS_SetEnabled_Response();
  explicit constexpr CSteamOSSLS_SetEnabled_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_SetEnabled_Response(const CSteamOSSLS_SetEnabled_Response& from);
  CSteamOSSLS_SetEnabled_Response(CSteamOSSLS_SetEnabled_Response&& from) noexcept
    : CSteamOSSLS_SetEnabled_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_SetEnabled_Response& operator=(const CSteamOSSLS_SetEnabled_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_SetEnabled_Response& operator=(CSteamOSSLS_SetEnabled_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_SetEnabled_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_SetEnabled_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_SetEnabled_Response*>(
               &_CSteamOSSLS_SetEnabled_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CSteamOSSLS_SetEnabled_Response& a, CSteamOSSLS_SetEnabled_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_SetEnabled_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_SetEnabled_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_SetEnabled_Response* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_SetEnabled_Response>(nullptr);
  }

  CSteamOSSLS_SetEnabled_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_SetEnabled_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_SetEnabled_Response& from);
  void MergeFrom(const CSteamOSSLS_SetEnabled_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_SetEnabled_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_SetEnabled_Response";
  }
  protected:
  explicit CSteamOSSLS_SetEnabled_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_SetEnabled_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_SetPluginEnabled_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_SetPluginEnabled_Request) */ {
 public:
  inline CSteamOSSLS_SetPluginEnabled_Request() : CSteamOSSLS_SetPluginEnabled_Request(nullptr) {}
  virtual ~CSteamOSSLS_SetPluginEnabled_Request();
  explicit constexpr CSteamOSSLS_SetPluginEnabled_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_SetPluginEnabled_Request(const CSteamOSSLS_SetPluginEnabled_Request& from);
  CSteamOSSLS_SetPluginEnabled_Request(CSteamOSSLS_SetPluginEnabled_Request&& from) noexcept
    : CSteamOSSLS_SetPluginEnabled_Request() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_SetPluginEnabled_Request& operator=(const CSteamOSSLS_SetPluginEnabled_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_SetPluginEnabled_Request& operator=(CSteamOSSLS_SetPluginEnabled_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_SetPluginEnabled_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_SetPluginEnabled_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_SetPluginEnabled_Request*>(
               &_CSteamOSSLS_SetPluginEnabled_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSteamOSSLS_SetPluginEnabled_Request& a, CSteamOSSLS_SetPluginEnabled_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_SetPluginEnabled_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_SetPluginEnabled_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_SetPluginEnabled_Request* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_SetPluginEnabled_Request>(nullptr);
  }

  CSteamOSSLS_SetPluginEnabled_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_SetPluginEnabled_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_SetPluginEnabled_Request& from);
  void MergeFrom(const CSteamOSSLS_SetPluginEnabled_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_SetPluginEnabled_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_SetPluginEnabled_Request";
  }
  protected:
  explicit CSteamOSSLS_SetPluginEnabled_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtypeFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::ESLSHelper etype() const;
  void set_etype(::ESLSHelper value);
  private:
  ::ESLSHelper _internal_etype() const;
  void _internal_set_etype(::ESLSHelper value);
  public:

  // optional bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_SetPluginEnabled_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int etype_;
  bool enabled_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// -------------------------------------------------------------------

class CSteamOSSLS_SetPluginEnabled_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamOSSLS_SetPluginEnabled_Response) */ {
 public:
  inline CSteamOSSLS_SetPluginEnabled_Response() : CSteamOSSLS_SetPluginEnabled_Response(nullptr) {}
  virtual ~CSteamOSSLS_SetPluginEnabled_Response();
  explicit constexpr CSteamOSSLS_SetPluginEnabled_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamOSSLS_SetPluginEnabled_Response(const CSteamOSSLS_SetPluginEnabled_Response& from);
  CSteamOSSLS_SetPluginEnabled_Response(CSteamOSSLS_SetPluginEnabled_Response&& from) noexcept
    : CSteamOSSLS_SetPluginEnabled_Response() {
    *this = ::std::move(from);
  }

  inline CSteamOSSLS_SetPluginEnabled_Response& operator=(const CSteamOSSLS_SetPluginEnabled_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamOSSLS_SetPluginEnabled_Response& operator=(CSteamOSSLS_SetPluginEnabled_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamOSSLS_SetPluginEnabled_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamOSSLS_SetPluginEnabled_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamOSSLS_SetPluginEnabled_Response*>(
               &_CSteamOSSLS_SetPluginEnabled_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CSteamOSSLS_SetPluginEnabled_Response& a, CSteamOSSLS_SetPluginEnabled_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamOSSLS_SetPluginEnabled_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamOSSLS_SetPluginEnabled_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamOSSLS_SetPluginEnabled_Response* New() const final {
    return CreateMaybeMessage<CSteamOSSLS_SetPluginEnabled_Response>(nullptr);
  }

  CSteamOSSLS_SetPluginEnabled_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamOSSLS_SetPluginEnabled_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamOSSLS_SetPluginEnabled_Response& from);
  void MergeFrom(const CSteamOSSLS_SetPluginEnabled_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamOSSLS_SetPluginEnabled_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamOSSLS_SetPluginEnabled_Response";
  }
  protected:
  explicit CSteamOSSLS_SetPluginEnabled_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fsteamos_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamOSSLS_SetPluginEnabled_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fsteamos_2eproto;
};
// ===================================================================

class SteamOSManager_Stub;

class SteamOSManager : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SteamOSManager() {};
 public:
  virtual ~SteamOSManager();

  typedef SteamOSManager_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_GetState_Request* request,
                       ::CSteamOSManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OptOutOfSideloadedClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_OptOutOfSideloadedClient_Request* request,
                       ::CSteamOSManager_OptOutOfSideloadedClient_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ApplyMandatoryUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_ApplyMandatoryUpdate_Request* request,
                       ::CSteamOSManager_ApplyMandatoryUpdate_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamOSManager);
};

class SteamOSManager_Stub : public SteamOSManager {
 public:
  SteamOSManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SteamOSManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SteamOSManager_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SteamOSManager ------------------------------------------

  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_GetState_Request* request,
                       ::CSteamOSManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void OptOutOfSideloadedClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_OptOutOfSideloadedClient_Request* request,
                       ::CSteamOSManager_OptOutOfSideloadedClient_Response* response,
                       ::google::protobuf::Closure* done);
  void ApplyMandatoryUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSManager_ApplyMandatoryUpdate_Request* request,
                       ::CSteamOSManager_ApplyMandatoryUpdate_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamOSManager_Stub);
};


// -------------------------------------------------------------------

class SteamOSSLS_Stub;

class SteamOSSLS : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SteamOSSLS() {};
 public:
  virtual ~SteamOSSLS();

  typedef SteamOSSLS_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_GetState_Request* request,
                       ::CSteamOSSLS_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_SetEnabled_Request* request,
                       ::CSteamOSSLS_SetEnabled_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetPluginEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_SetPluginEnabled_Request* request,
                       ::CSteamOSSLS_SetPluginEnabled_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamOSSLS);
};

class SteamOSSLS_Stub : public SteamOSSLS {
 public:
  SteamOSSLS_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SteamOSSLS_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SteamOSSLS_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SteamOSSLS ------------------------------------------

  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_GetState_Request* request,
                       ::CSteamOSSLS_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void SetEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_SetEnabled_Request* request,
                       ::CSteamOSSLS_SetEnabled_Response* response,
                       ::google::protobuf::Closure* done);
  void SetPluginEnabled(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamOSSLS_SetPluginEnabled_Request* request,
                       ::CSteamOSSLS_SetPluginEnabled_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamOSSLS_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSteamOSManagerState

// optional bool is_service_available = 1;
inline bool CSteamOSManagerState::_internal_has_is_service_available() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamOSManagerState::has_is_service_available() const {
  return _internal_has_is_service_available();
}
inline void CSteamOSManagerState::clear_is_service_available() {
  is_service_available_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamOSManagerState::_internal_is_service_available() const {
  return is_service_available_;
}
inline bool CSteamOSManagerState::is_service_available() const {
  // @@protoc_insertion_point(field_get:CSteamOSManagerState.is_service_available)
  return _internal_is_service_available();
}
inline void CSteamOSManagerState::_internal_set_is_service_available(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_service_available_ = value;
}
inline void CSteamOSManagerState::set_is_service_available(bool value) {
  _internal_set_is_service_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSManagerState.is_service_available)
}

// optional string os_version = 2;
inline bool CSteamOSManagerState::_internal_has_os_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSManagerState::has_os_version() const {
  return _internal_has_os_version();
}
inline void CSteamOSManagerState::clear_os_version() {
  os_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteamOSManagerState::os_version() const {
  // @@protoc_insertion_point(field_get:CSteamOSManagerState.os_version)
  return _internal_os_version();
}
inline void CSteamOSManagerState::set_os_version(const std::string& value) {
  _internal_set_os_version(value);
  // @@protoc_insertion_point(field_set:CSteamOSManagerState.os_version)
}
inline std::string* CSteamOSManagerState::mutable_os_version() {
  // @@protoc_insertion_point(field_mutable:CSteamOSManagerState.os_version)
  return _internal_mutable_os_version();
}
inline const std::string& CSteamOSManagerState::_internal_os_version() const {
  return os_version_.Get();
}
inline void CSteamOSManagerState::_internal_set_os_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteamOSManagerState::set_os_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  os_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteamOSManagerState.os_version)
}
inline void CSteamOSManagerState::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteamOSManagerState.os_version)
}
inline void CSteamOSManagerState::set_os_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteamOSManagerState.os_version)
}
inline std::string* CSteamOSManagerState::_internal_mutable_os_version() {
  _has_bits_[0] |= 0x00000001u;
  return os_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteamOSManagerState::release_os_version() {
  // @@protoc_insertion_point(field_release:CSteamOSManagerState.os_version)
  if (!_internal_has_os_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return os_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteamOSManagerState::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  os_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteamOSManagerState.os_version)
}

// optional bool is_mandatory_update_available = 3;
inline bool CSteamOSManagerState::_internal_has_is_mandatory_update_available() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamOSManagerState::has_is_mandatory_update_available() const {
  return _internal_has_is_mandatory_update_available();
}
inline void CSteamOSManagerState::clear_is_mandatory_update_available() {
  is_mandatory_update_available_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSteamOSManagerState::_internal_is_mandatory_update_available() const {
  return is_mandatory_update_available_;
}
inline bool CSteamOSManagerState::is_mandatory_update_available() const {
  // @@protoc_insertion_point(field_get:CSteamOSManagerState.is_mandatory_update_available)
  return _internal_is_mandatory_update_available();
}
inline void CSteamOSManagerState::_internal_set_is_mandatory_update_available(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_mandatory_update_available_ = value;
}
inline void CSteamOSManagerState::set_is_mandatory_update_available(bool value) {
  _internal_set_is_mandatory_update_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSManagerState.is_mandatory_update_available)
}

// optional .EStartupMovieVariant startup_movie_variant = 4 [default = EStartupMovieVariant_Invalid];
inline bool CSteamOSManagerState::_internal_has_startup_movie_variant() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSteamOSManagerState::has_startup_movie_variant() const {
  return _internal_has_startup_movie_variant();
}
inline void CSteamOSManagerState::clear_startup_movie_variant() {
  startup_movie_variant_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EStartupMovieVariant CSteamOSManagerState::_internal_startup_movie_variant() const {
  return static_cast< ::EStartupMovieVariant >(startup_movie_variant_);
}
inline ::EStartupMovieVariant CSteamOSManagerState::startup_movie_variant() const {
  // @@protoc_insertion_point(field_get:CSteamOSManagerState.startup_movie_variant)
  return _internal_startup_movie_variant();
}
inline void CSteamOSManagerState::_internal_set_startup_movie_variant(::EStartupMovieVariant value) {
  assert(::EStartupMovieVariant_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  startup_movie_variant_ = value;
}
inline void CSteamOSManagerState::set_startup_movie_variant(::EStartupMovieVariant value) {
  _internal_set_startup_movie_variant(value);
  // @@protoc_insertion_point(field_set:CSteamOSManagerState.startup_movie_variant)
}

// optional bool is_status_led_control_available = 5;
inline bool CSteamOSManagerState::_internal_has_is_status_led_control_available() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSteamOSManagerState::has_is_status_led_control_available() const {
  return _internal_has_is_status_led_control_available();
}
inline void CSteamOSManagerState::clear_is_status_led_control_available() {
  is_status_led_control_available_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSteamOSManagerState::_internal_is_status_led_control_available() const {
  return is_status_led_control_available_;
}
inline bool CSteamOSManagerState::is_status_led_control_available() const {
  // @@protoc_insertion_point(field_get:CSteamOSManagerState.is_status_led_control_available)
  return _internal_is_status_led_control_available();
}
inline void CSteamOSManagerState::_internal_set_is_status_led_control_available(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_status_led_control_available_ = value;
}
inline void CSteamOSManagerState::set_is_status_led_control_available(bool value) {
  _internal_set_is_status_led_control_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSManagerState.is_status_led_control_available)
}

// -------------------------------------------------------------------

// CSteamOSManager_GetState_Request

// -------------------------------------------------------------------

// CSteamOSManager_GetState_Response

// optional .CSteamOSManagerState state = 1;
inline bool CSteamOSManager_GetState_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool CSteamOSManager_GetState_Response::has_state() const {
  return _internal_has_state();
}
inline void CSteamOSManager_GetState_Response::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSteamOSManagerState& CSteamOSManager_GetState_Response::_internal_state() const {
  const ::CSteamOSManagerState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSteamOSManagerState&>(
      ::_CSteamOSManagerState_default_instance_);
}
inline const ::CSteamOSManagerState& CSteamOSManager_GetState_Response::state() const {
  // @@protoc_insertion_point(field_get:CSteamOSManager_GetState_Response.state)
  return _internal_state();
}
inline void CSteamOSManager_GetState_Response::unsafe_arena_set_allocated_state(
    ::CSteamOSManagerState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamOSManager_GetState_Response.state)
}
inline ::CSteamOSManagerState* CSteamOSManager_GetState_Response::release_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSteamOSManagerState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSteamOSManagerState* CSteamOSManager_GetState_Response::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:CSteamOSManager_GetState_Response.state)
  _has_bits_[0] &= ~0x00000001u;
  ::CSteamOSManagerState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::CSteamOSManagerState* CSteamOSManager_GetState_Response::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSteamOSManagerState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::CSteamOSManagerState* CSteamOSManager_GetState_Response::mutable_state() {
  // @@protoc_insertion_point(field_mutable:CSteamOSManager_GetState_Response.state)
  return _internal_mutable_state();
}
inline void CSteamOSManager_GetState_Response::set_allocated_state(::CSteamOSManagerState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:CSteamOSManager_GetState_Response.state)
}

// -------------------------------------------------------------------

// CSteamOSManager_StateChanged_Notification

// -------------------------------------------------------------------

// CSteamOSManager_IsTelemetryHelperAvailable_Request

// optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Request::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Request::has_etype() const {
  return _internal_has_etype();
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Request::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESLSHelper CSteamOSManager_IsTelemetryHelperAvailable_Request::_internal_etype() const {
  return static_cast< ::ESLSHelper >(etype_);
}
inline ::ESLSHelper CSteamOSManager_IsTelemetryHelperAvailable_Request::etype() const {
  // @@protoc_insertion_point(field_get:CSteamOSManager_IsTelemetryHelperAvailable_Request.etype)
  return _internal_etype();
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Request::_internal_set_etype(::ESLSHelper value) {
  assert(::ESLSHelper_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  etype_ = value;
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Request::set_etype(::ESLSHelper value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CSteamOSManager_IsTelemetryHelperAvailable_Request.etype)
}

// -------------------------------------------------------------------

// CSteamOSManager_IsTelemetryHelperAvailable_Response

// optional bool available = 1;
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Response::_internal_has_available() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Response::has_available() const {
  return _internal_has_available();
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Response::clear_available() {
  available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Response::_internal_available() const {
  return available_;
}
inline bool CSteamOSManager_IsTelemetryHelperAvailable_Response::available() const {
  // @@protoc_insertion_point(field_get:CSteamOSManager_IsTelemetryHelperAvailable_Response.available)
  return _internal_available();
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Response::_internal_set_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  available_ = value;
}
inline void CSteamOSManager_IsTelemetryHelperAvailable_Response::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSManager_IsTelemetryHelperAvailable_Response.available)
}

// -------------------------------------------------------------------

// CSteamOSManager_OptOutOfSideloadedClient_Request

// -------------------------------------------------------------------

// CSteamOSManager_OptOutOfSideloadedClient_Response

// -------------------------------------------------------------------

// CSteamOSManager_ApplyMandatoryUpdate_Request

// -------------------------------------------------------------------

// CSteamOSManager_ApplyMandatoryUpdate_Response

// -------------------------------------------------------------------

// CSteamOSSLSPlugin

// optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
inline bool CSteamOSSLSPlugin::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSSLSPlugin::has_etype() const {
  return _internal_has_etype();
}
inline void CSteamOSSLSPlugin::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESLSHelper CSteamOSSLSPlugin::_internal_etype() const {
  return static_cast< ::ESLSHelper >(etype_);
}
inline ::ESLSHelper CSteamOSSLSPlugin::etype() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSPlugin.etype)
  return _internal_etype();
}
inline void CSteamOSSLSPlugin::_internal_set_etype(::ESLSHelper value) {
  assert(::ESLSHelper_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  etype_ = value;
}
inline void CSteamOSSLSPlugin::set_etype(::ESLSHelper value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLSPlugin.etype)
}

// optional bool is_available = 2;
inline bool CSteamOSSLSPlugin::_internal_has_is_available() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamOSSLSPlugin::has_is_available() const {
  return _internal_has_is_available();
}
inline void CSteamOSSLSPlugin::clear_is_available() {
  is_available_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamOSSLSPlugin::_internal_is_available() const {
  return is_available_;
}
inline bool CSteamOSSLSPlugin::is_available() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSPlugin.is_available)
  return _internal_is_available();
}
inline void CSteamOSSLSPlugin::_internal_set_is_available(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_available_ = value;
}
inline void CSteamOSSLSPlugin::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLSPlugin.is_available)
}

// optional bool is_enabled = 3;
inline bool CSteamOSSLSPlugin::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamOSSLSPlugin::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CSteamOSSLSPlugin::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSteamOSSLSPlugin::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CSteamOSSLSPlugin::is_enabled() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSPlugin.is_enabled)
  return _internal_is_enabled();
}
inline void CSteamOSSLSPlugin::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_enabled_ = value;
}
inline void CSteamOSSLSPlugin::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLSPlugin.is_enabled)
}

// -------------------------------------------------------------------

// CSteamOSSLSState

// optional bool is_available = 1;
inline bool CSteamOSSLSState::_internal_has_is_available() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSSLSState::has_is_available() const {
  return _internal_has_is_available();
}
inline void CSteamOSSLSState::clear_is_available() {
  is_available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSteamOSSLSState::_internal_is_available() const {
  return is_available_;
}
inline bool CSteamOSSLSState::is_available() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSState.is_available)
  return _internal_is_available();
}
inline void CSteamOSSLSState::_internal_set_is_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_available_ = value;
}
inline void CSteamOSSLSState::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLSState.is_available)
}

// optional bool is_enabled = 2;
inline bool CSteamOSSLSState::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamOSSLSState::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CSteamOSSLSState::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamOSSLSState::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CSteamOSSLSState::is_enabled() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSState.is_enabled)
  return _internal_is_enabled();
}
inline void CSteamOSSLSState::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_enabled_ = value;
}
inline void CSteamOSSLSState::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLSState.is_enabled)
}

// repeated .CSteamOSSLSPlugin plugins = 3;
inline int CSteamOSSLSState::_internal_plugins_size() const {
  return plugins_.size();
}
inline int CSteamOSSLSState::plugins_size() const {
  return _internal_plugins_size();
}
inline void CSteamOSSLSState::clear_plugins() {
  plugins_.Clear();
}
inline ::CSteamOSSLSPlugin* CSteamOSSLSState::mutable_plugins(int index) {
  // @@protoc_insertion_point(field_mutable:CSteamOSSLSState.plugins)
  return plugins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSteamOSSLSPlugin >*
CSteamOSSLSState::mutable_plugins() {
  // @@protoc_insertion_point(field_mutable_list:CSteamOSSLSState.plugins)
  return &plugins_;
}
inline const ::CSteamOSSLSPlugin& CSteamOSSLSState::_internal_plugins(int index) const {
  return plugins_.Get(index);
}
inline const ::CSteamOSSLSPlugin& CSteamOSSLSState::plugins(int index) const {
  // @@protoc_insertion_point(field_get:CSteamOSSLSState.plugins)
  return _internal_plugins(index);
}
inline ::CSteamOSSLSPlugin* CSteamOSSLSState::_internal_add_plugins() {
  return plugins_.Add();
}
inline ::CSteamOSSLSPlugin* CSteamOSSLSState::add_plugins() {
  // @@protoc_insertion_point(field_add:CSteamOSSLSState.plugins)
  return _internal_add_plugins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSteamOSSLSPlugin >&
CSteamOSSLSState::plugins() const {
  // @@protoc_insertion_point(field_list:CSteamOSSLSState.plugins)
  return plugins_;
}

// -------------------------------------------------------------------

// CSteamOSSLS_GetState_Request

// -------------------------------------------------------------------

// CSteamOSSLS_GetState_Response

// optional .CSteamOSSLSState state = 1;
inline bool CSteamOSSLS_GetState_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool CSteamOSSLS_GetState_Response::has_state() const {
  return _internal_has_state();
}
inline void CSteamOSSLS_GetState_Response::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSteamOSSLSState& CSteamOSSLS_GetState_Response::_internal_state() const {
  const ::CSteamOSSLSState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSteamOSSLSState&>(
      ::_CSteamOSSLSState_default_instance_);
}
inline const ::CSteamOSSLSState& CSteamOSSLS_GetState_Response::state() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLS_GetState_Response.state)
  return _internal_state();
}
inline void CSteamOSSLS_GetState_Response::unsafe_arena_set_allocated_state(
    ::CSteamOSSLSState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSteamOSSLS_GetState_Response.state)
}
inline ::CSteamOSSLSState* CSteamOSSLS_GetState_Response::release_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSteamOSSLSState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSteamOSSLSState* CSteamOSSLS_GetState_Response::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:CSteamOSSLS_GetState_Response.state)
  _has_bits_[0] &= ~0x00000001u;
  ::CSteamOSSLSState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::CSteamOSSLSState* CSteamOSSLS_GetState_Response::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSteamOSSLSState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::CSteamOSSLSState* CSteamOSSLS_GetState_Response::mutable_state() {
  // @@protoc_insertion_point(field_mutable:CSteamOSSLS_GetState_Response.state)
  return _internal_mutable_state();
}
inline void CSteamOSSLS_GetState_Response::set_allocated_state(::CSteamOSSLSState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:CSteamOSSLS_GetState_Response.state)
}

// -------------------------------------------------------------------

// CSteamOSSLS_StateChanged_Notification

// -------------------------------------------------------------------

// CSteamOSSLS_SetEnabled_Request

// optional bool enabled = 1;
inline bool CSteamOSSLS_SetEnabled_Request::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSSLS_SetEnabled_Request::has_enabled() const {
  return _internal_has_enabled();
}
inline void CSteamOSSLS_SetEnabled_Request::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSteamOSSLS_SetEnabled_Request::_internal_enabled() const {
  return enabled_;
}
inline bool CSteamOSSLS_SetEnabled_Request::enabled() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLS_SetEnabled_Request.enabled)
  return _internal_enabled();
}
inline void CSteamOSSLS_SetEnabled_Request::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void CSteamOSSLS_SetEnabled_Request::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLS_SetEnabled_Request.enabled)
}

// -------------------------------------------------------------------

// CSteamOSSLS_SetEnabled_Response

// -------------------------------------------------------------------

// CSteamOSSLS_SetPluginEnabled_Request

// optional .ESLSHelper etype = 1 [default = ESLSHelper_Invalid];
inline bool CSteamOSSLS_SetPluginEnabled_Request::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamOSSLS_SetPluginEnabled_Request::has_etype() const {
  return _internal_has_etype();
}
inline void CSteamOSSLS_SetPluginEnabled_Request::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESLSHelper CSteamOSSLS_SetPluginEnabled_Request::_internal_etype() const {
  return static_cast< ::ESLSHelper >(etype_);
}
inline ::ESLSHelper CSteamOSSLS_SetPluginEnabled_Request::etype() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLS_SetPluginEnabled_Request.etype)
  return _internal_etype();
}
inline void CSteamOSSLS_SetPluginEnabled_Request::_internal_set_etype(::ESLSHelper value) {
  assert(::ESLSHelper_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  etype_ = value;
}
inline void CSteamOSSLS_SetPluginEnabled_Request::set_etype(::ESLSHelper value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLS_SetPluginEnabled_Request.etype)
}

// optional bool enabled = 2;
inline bool CSteamOSSLS_SetPluginEnabled_Request::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamOSSLS_SetPluginEnabled_Request::has_enabled() const {
  return _internal_has_enabled();
}
inline void CSteamOSSLS_SetPluginEnabled_Request::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamOSSLS_SetPluginEnabled_Request::_internal_enabled() const {
  return enabled_;
}
inline bool CSteamOSSLS_SetPluginEnabled_Request::enabled() const {
  // @@protoc_insertion_point(field_get:CSteamOSSLS_SetPluginEnabled_Request.enabled)
  return _internal_enabled();
}
inline void CSteamOSSLS_SetPluginEnabled_Request::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
}
inline void CSteamOSSLS_SetPluginEnabled_Request::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CSteamOSSLS_SetPluginEnabled_Request.enabled)
}

// -------------------------------------------------------------------

// CSteamOSSLS_SetPluginEnabled_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fsteamos_2eproto
