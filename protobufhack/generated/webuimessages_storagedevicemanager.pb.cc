// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_storagedevicemanager.proto

#include "webuimessages_storagedevicemanager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CStorageDeviceManager_IsServiceAvailable_Request::CStorageDeviceManager_IsServiceAvailable_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_IsServiceAvailable_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal _CStorageDeviceManager_IsServiceAvailable_Request_default_instance_;
constexpr CStorageDeviceManager_IsServiceAvailable_Response::CStorageDeviceManager_IsServiceAvailable_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_available_(false){}
struct CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_IsServiceAvailable_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal _CStorageDeviceManager_IsServiceAvailable_Response_default_instance_;
constexpr CStorageDeviceManagerDrive::CStorageDeviceManagerDrive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , media_type_(0)

  , size_bytes_(PROTOBUF_ULONGLONG(0))
  , is_ejectable_(false)
  , is_unformatted_(false)
  , is_formattable_(false)
  , is_media_available_(false)
  , adopt_stage_(0)
{}
struct CStorageDeviceManagerDriveDefaultTypeInternal {
  constexpr CStorageDeviceManagerDriveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManagerDriveDefaultTypeInternal() {}
  union {
    CStorageDeviceManagerDrive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManagerDriveDefaultTypeInternal _CStorageDeviceManagerDrive_default_instance_;
constexpr CStorageDeviceManagerBlockDevice::CStorageDeviceManagerBlockDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mount_paths_()
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , friendly_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , drive_id_(0u)
  , size_bytes_(PROTOBUF_ULONGLONG(0))
  , is_formattable_(false)
  , is_read_only_(false)
  , is_root_device_(false)
  , is_unmounting_(false)
  , content_type_(0)

  , filesystem_type_(0)
{}
struct CStorageDeviceManagerBlockDeviceDefaultTypeInternal {
  constexpr CStorageDeviceManagerBlockDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManagerBlockDeviceDefaultTypeInternal() {}
  union {
    CStorageDeviceManagerBlockDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManagerBlockDeviceDefaultTypeInternal _CStorageDeviceManagerBlockDevice_default_instance_;
constexpr CStorageDeviceManagerState::CStorageDeviceManagerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drives_()
  , blocdevices_()
  , is_unmount_supported_(false)
  , is_trim_supported_(false)
  , is_trim_running_(false)
  , is_adopt_supported_(false){}
struct CStorageDeviceManagerStateDefaultTypeInternal {
  constexpr CStorageDeviceManagerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManagerStateDefaultTypeInternal() {}
  union {
    CStorageDeviceManagerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManagerStateDefaultTypeInternal _CStorageDeviceManagerState_default_instance_;
constexpr CStorageDeviceManager_GetState_Request::CStorageDeviceManager_GetState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_GetState_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_GetState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_GetState_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_GetState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_GetState_RequestDefaultTypeInternal _CStorageDeviceManager_GetState_Request_default_instance_;
constexpr CStorageDeviceManager_GetState_Response::CStorageDeviceManager_GetState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct CStorageDeviceManager_GetState_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_GetState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_GetState_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_GetState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_GetState_ResponseDefaultTypeInternal _CStorageDeviceManager_GetState_Response_default_instance_;
constexpr CStorageDeviceManager_StateChanged_Notification::CStorageDeviceManager_StateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal {
  constexpr CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_StateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal _CStorageDeviceManager_StateChanged_Notification_default_instance_;
constexpr CStorageDeviceManager_Eject_Request::CStorageDeviceManager_Eject_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drive_id_(0u){}
struct CStorageDeviceManager_Eject_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_Eject_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Eject_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Eject_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Eject_RequestDefaultTypeInternal _CStorageDeviceManager_Eject_Request_default_instance_;
constexpr CStorageDeviceManager_Eject_Response::CStorageDeviceManager_Eject_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_Eject_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_Eject_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Eject_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Eject_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Eject_ResponseDefaultTypeInternal _CStorageDeviceManager_Eject_Response_default_instance_;
constexpr CStorageDeviceManager_Adopt_Request::CStorageDeviceManager_Adopt_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , drive_id_(0u){}
struct CStorageDeviceManager_Adopt_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_Adopt_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Adopt_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Adopt_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Adopt_RequestDefaultTypeInternal _CStorageDeviceManager_Adopt_Request_default_instance_;
constexpr CStorageDeviceManager_Adopt_Response::CStorageDeviceManager_Adopt_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Adopt_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal _CStorageDeviceManager_Adopt_Response_default_instance_;
constexpr CStorageDeviceManager_Format_Request::CStorageDeviceManager_Format_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocdevice_id_(0u){}
struct CStorageDeviceManager_Format_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_Format_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Format_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Format_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Format_RequestDefaultTypeInternal _CStorageDeviceManager_Format_Request_default_instance_;
constexpr CStorageDeviceManager_Format_Response::CStorageDeviceManager_Format_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_Format_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_Format_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Format_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Format_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Format_ResponseDefaultTypeInternal _CStorageDeviceManager_Format_Response_default_instance_;
constexpr CStorageDeviceManager_Unmount_Request::CStorageDeviceManager_Unmount_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocdevice_id_(0u){}
struct CStorageDeviceManager_Unmount_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_Unmount_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Unmount_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Unmount_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Unmount_RequestDefaultTypeInternal _CStorageDeviceManager_Unmount_Request_default_instance_;
constexpr CStorageDeviceManager_Unmount_Response::CStorageDeviceManager_Unmount_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_Unmount_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal _CStorageDeviceManager_Unmount_Response_default_instance_;
constexpr CStorageDeviceManager_TrimAll_Request::CStorageDeviceManager_TrimAll_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal {
  constexpr CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_TrimAll_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal _CStorageDeviceManager_TrimAll_Request_default_instance_;
constexpr CStorageDeviceManager_TrimAll_Response::CStorageDeviceManager_TrimAll_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal {
  constexpr CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal() {}
  union {
    CStorageDeviceManager_TrimAll_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal _CStorageDeviceManager_TrimAll_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_webuimessages_5fstoragedevicemanager_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_webuimessages_5fstoragedevicemanager_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_webuimessages_5fstoragedevicemanager_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_webuimessages_5fstoragedevicemanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_IsServiceAvailable_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_IsServiceAvailable_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_IsServiceAvailable_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_IsServiceAvailable_Response, is_available_),
  0,
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, id_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, model_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, vendor_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, serial_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, is_ejectable_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, size_bytes_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, media_type_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, is_unformatted_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, adopt_stage_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, is_formattable_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerDrive, is_media_available_),
  3,
  0,
  1,
  2,
  6,
  5,
  4,
  7,
  10,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, id_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, drive_id_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, path_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, friendly_path_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, label_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, size_bytes_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, is_formattable_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, is_read_only_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, is_root_device_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, content_type_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, filesystem_type_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, mount_paths_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerBlockDevice, is_unmounting_),
  3,
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  10,
  11,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, drives_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, blocdevices_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, is_unmount_supported_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, is_trim_supported_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, is_trim_running_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManagerState, is_adopt_supported_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_GetState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_GetState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_GetState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_GetState_Response, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_StateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Eject_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Eject_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Eject_Request, drive_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Eject_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Adopt_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Adopt_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Adopt_Request, drive_id_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Adopt_Request, label_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Adopt_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Format_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Format_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Format_Request, blocdevice_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Format_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Unmount_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Unmount_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Unmount_Request, blocdevice_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_Unmount_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_TrimAll_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CStorageDeviceManager_TrimAll_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CStorageDeviceManager_IsServiceAvailable_Request)},
  { 5, 11, sizeof(::CStorageDeviceManager_IsServiceAvailable_Response)},
  { 12, 28, sizeof(::CStorageDeviceManagerDrive)},
  { 39, 57, sizeof(::CStorageDeviceManagerBlockDevice)},
  { 70, 81, sizeof(::CStorageDeviceManagerState)},
  { 87, -1, sizeof(::CStorageDeviceManager_GetState_Request)},
  { 92, 98, sizeof(::CStorageDeviceManager_GetState_Response)},
  { 99, -1, sizeof(::CStorageDeviceManager_StateChanged_Notification)},
  { 104, 110, sizeof(::CStorageDeviceManager_Eject_Request)},
  { 111, -1, sizeof(::CStorageDeviceManager_Eject_Response)},
  { 116, 123, sizeof(::CStorageDeviceManager_Adopt_Request)},
  { 125, -1, sizeof(::CStorageDeviceManager_Adopt_Response)},
  { 130, 136, sizeof(::CStorageDeviceManager_Format_Request)},
  { 137, -1, sizeof(::CStorageDeviceManager_Format_Response)},
  { 142, 148, sizeof(::CStorageDeviceManager_Unmount_Request)},
  { 149, -1, sizeof(::CStorageDeviceManager_Unmount_Response)},
  { 154, -1, sizeof(::CStorageDeviceManager_TrimAll_Request)},
  { 159, -1, sizeof(::CStorageDeviceManager_TrimAll_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_IsServiceAvailable_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_IsServiceAvailable_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManagerDrive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManagerBlockDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManagerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_GetState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_GetState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_StateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Eject_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Eject_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Adopt_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Adopt_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Format_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Format_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Unmount_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_Unmount_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_TrimAll_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorageDeviceManager_TrimAll_Response_default_instance_),
};

const char descriptor_table_protodef_webuimessages_5fstoragedevicemanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(webuimessages_storagedevicemanager.pro"
  "to\032 google/protobuf/descriptor.proto\032\013en"
  "ums.proto\032\030steammessages_base.proto\032\030web"
  "uimessages_base.proto\"2\n0CStorageDeviceM"
  "anager_IsServiceAvailable_Request\"I\n1CSt"
  "orageDeviceManager_IsServiceAvailable_Re"
  "sponse\022\024\n\014is_available\030\001 \001(\010\"\345\002\n\032CStorag"
  "eDeviceManagerDrive\022\r\n\002id\030\001 \001(\r:\0010\022\r\n\005mo"
  "del\030\002 \001(\t\022\016\n\006vendor\030\003 \001(\t\022\016\n\006serial\030\004 \001("
  "\t\022\024\n\014is_ejectable\030\005 \001(\010\022\022\n\nsize_bytes\030\006 "
  "\001(\004\022K\n\nmedia_type\030\007 \001(\0162\027.EStorageDriveM"
  "ediaType:\036EStorageDriveMediaType_Invalid"
  "\022\026\n\016is_unformatted\030\010 \001(\010\022F\n\013adopt_stage\030"
  "\t \001(\0162\024.EStorageFormatStage:\033EStorageFor"
  "matStage_Invalid\022\026\n\016is_formattable\030\n \001(\010"
  "\022\032\n\022is_media_available\030\013 \001(\010\"\257\003\n CStorag"
  "eDeviceManagerBlockDevice\022\r\n\002id\030\001 \001(\r:\0010"
  "\022\023\n\010drive_id\030\002 \001(\r:\0010\022\014\n\004path\030\003 \001(\t\022\025\n\rf"
  "riendly_path\030\004 \001(\t\022\r\n\005label\030\005 \001(\t\022\022\n\nsiz"
  "e_bytes\030\006 \001(\004\022\026\n\016is_formattable\030\007 \001(\010\022\024\n"
  "\014is_read_only\030\010 \001(\010\022\026\n\016is_root_device\030\t "
  "\001(\010\022Q\n\014content_type\030\n \001(\0162\031.EStorageBloc"
  "kContentType: EStorageBlockContentType_I"
  "nvalid\022Z\n\017filesystem_type\030\013 \001(\0162\034.EStora"
  "geBlockFileSystemType:#EStorageBlockFile"
  "SystemType_Invalid\022\023\n\013mount_paths\030\014 \003(\t\022"
  "\025\n\ris_unmounting\030\r \001(\010\"\357\001\n\032CStorageDevic"
  "eManagerState\022+\n\006drives\030\001 \003(\0132\033.CStorage"
  "DeviceManagerDrive\0226\n\013blocdevices\030\002 \003(\0132"
  "!.CStorageDeviceManagerBlockDevice\022\034\n\024is"
  "_unmount_supported\030\003 \001(\010\022\031\n\021is_trim_supp"
  "orted\030\004 \001(\010\022\027\n\017is_trim_running\030\005 \001(\010\022\032\n\022"
  "is_adopt_supported\030\006 \001(\010\"(\n&CStorageDevi"
  "ceManager_GetState_Request\"U\n\'CStorageDe"
  "viceManager_GetState_Response\022*\n\005state\030\001"
  " \001(\0132\033.CStorageDeviceManagerState\"1\n/CSt"
  "orageDeviceManager_StateChanged_Notifica"
  "tion\"7\n#CStorageDeviceManager_Eject_Requ"
  "est\022\020\n\010drive_id\030\001 \001(\r\"&\n$CStorageDeviceM"
  "anager_Eject_Response\"F\n#CStorageDeviceM"
  "anager_Adopt_Request\022\020\n\010drive_id\030\001 \001(\r\022\r"
  "\n\005label\030\002 \001(\t\"&\n$CStorageDeviceManager_A"
  "dopt_Response\"=\n$CStorageDeviceManager_F"
  "ormat_Request\022\025\n\rblocdevice_id\030\001 \001(\r\"\'\n%"
  "CStorageDeviceManager_Format_Response\">\n"
  "%CStorageDeviceManager_Unmount_Request\022\025"
  "\n\rblocdevice_id\030\001 \001(\r\"(\n&CStorageDeviceM"
  "anager_Unmount_Response\"\'\n%CStorageDevic"
  "eManager_TrimAll_Request\"(\n&CStorageDevi"
  "ceManager_TrimAll_Response2\217\006\n\024StorageDe"
  "viceManager\022{\n\022IsServiceAvailable\0221.CSto"
  "rageDeviceManager_IsServiceAvailable_Req"
  "uest\0322.CStorageDeviceManager_IsServiceAv"
  "ailable_Response\022]\n\010GetState\022\'.CStorageD"
  "eviceManager_GetState_Request\032(.CStorage"
  "DeviceManager_GetState_Response\022X\n\022Notif"
  "yStateChanged\0220.CStorageDeviceManager_St"
  "ateChanged_Notification\032\020.WebUINoRespons"
  "e\022T\n\005Adopt\022$.CStorageDeviceManager_Adopt"
  "_Request\032%.CStorageDeviceManager_Adopt_R"
  "esponse\022T\n\005Eject\022$.CStorageDeviceManager"
  "_Eject_Request\032%.CStorageDeviceManager_E"
  "ject_Response\022W\n\006Format\022%.CStorageDevice"
  "Manager_Format_Request\032&.CStorageDeviceM"
  "anager_Format_Response\022Z\n\007Unmount\022&.CSto"
  "rageDeviceManager_Unmount_Request\032\'.CSto"
  "rageDeviceManager_Unmount_Response\022Z\n\007Tr"
  "imAll\022&.CStorageDeviceManager_TrimAll_Re"
  "quest\032\'.CStorageDeviceManager_TrimAll_Re"
  "sponse\032\004\200\227\"\001B\037H\001\200\001\001\252\002\027OpenSteamworks.Pro"
  "tobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_webuimessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fstoragedevicemanager_2eproto = {
  false, false, 2805, descriptor_table_protodef_webuimessages_5fstoragedevicemanager_2eproto, "webuimessages_storagedevicemanager.proto", 
  &descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_once, descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_deps, 4, 18,
  schemas, file_default_instances, TableStruct_webuimessages_5fstoragedevicemanager_2eproto::offsets,
  file_level_metadata_webuimessages_5fstoragedevicemanager_2eproto, file_level_enum_descriptors_webuimessages_5fstoragedevicemanager_2eproto, file_level_service_descriptors_webuimessages_5fstoragedevicemanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fstoragedevicemanager_2eproto);
  return descriptor_table_webuimessages_5fstoragedevicemanager_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_webuimessages_5fstoragedevicemanager_2eproto(&descriptor_table_webuimessages_5fstoragedevicemanager_2eproto);

// ===================================================================

class CStorageDeviceManager_IsServiceAvailable_Request::_Internal {
 public:
};

CStorageDeviceManager_IsServiceAvailable_Request::CStorageDeviceManager_IsServiceAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_IsServiceAvailable_Request)
}
CStorageDeviceManager_IsServiceAvailable_Request::CStorageDeviceManager_IsServiceAvailable_Request(const CStorageDeviceManager_IsServiceAvailable_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_IsServiceAvailable_Request)
}

void CStorageDeviceManager_IsServiceAvailable_Request::SharedCtor() {
}

CStorageDeviceManager_IsServiceAvailable_Request::~CStorageDeviceManager_IsServiceAvailable_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_IsServiceAvailable_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_IsServiceAvailable_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_IsServiceAvailable_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_IsServiceAvailable_Request* _this = reinterpret_cast< CStorageDeviceManager_IsServiceAvailable_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_IsServiceAvailable_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_IsServiceAvailable_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_IsServiceAvailable_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_IsServiceAvailable_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_IsServiceAvailable_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_IsServiceAvailable_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_IsServiceAvailable_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_IsServiceAvailable_Request)
  return target;
}

size_t CStorageDeviceManager_IsServiceAvailable_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_IsServiceAvailable_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_IsServiceAvailable_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_IsServiceAvailable_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_IsServiceAvailable_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_IsServiceAvailable_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_IsServiceAvailable_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_IsServiceAvailable_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_IsServiceAvailable_Request::MergeFrom(const CStorageDeviceManager_IsServiceAvailable_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_IsServiceAvailable_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_IsServiceAvailable_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_IsServiceAvailable_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_IsServiceAvailable_Request::CopyFrom(const CStorageDeviceManager_IsServiceAvailable_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_IsServiceAvailable_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_IsServiceAvailable_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_IsServiceAvailable_Request::InternalSwap(CStorageDeviceManager_IsServiceAvailable_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_IsServiceAvailable_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_IsServiceAvailable_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_IsServiceAvailable_Response>()._has_bits_);
  static void set_has_is_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorageDeviceManager_IsServiceAvailable_Response::CStorageDeviceManager_IsServiceAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_IsServiceAvailable_Response)
}
CStorageDeviceManager_IsServiceAvailable_Response::CStorageDeviceManager_IsServiceAvailable_Response(const CStorageDeviceManager_IsServiceAvailable_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_available_ = from.is_available_;
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_IsServiceAvailable_Response)
}

void CStorageDeviceManager_IsServiceAvailable_Response::SharedCtor() {
is_available_ = false;
}

CStorageDeviceManager_IsServiceAvailable_Response::~CStorageDeviceManager_IsServiceAvailable_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_IsServiceAvailable_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_IsServiceAvailable_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_IsServiceAvailable_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_IsServiceAvailable_Response* _this = reinterpret_cast< CStorageDeviceManager_IsServiceAvailable_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_IsServiceAvailable_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_IsServiceAvailable_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_IsServiceAvailable_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_IsServiceAvailable_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_IsServiceAvailable_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_available(&has_bits);
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_IsServiceAvailable_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_IsServiceAvailable_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_available = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_IsServiceAvailable_Response)
  return target;
}

size_t CStorageDeviceManager_IsServiceAvailable_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_IsServiceAvailable_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_available = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_IsServiceAvailable_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_IsServiceAvailable_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_IsServiceAvailable_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_IsServiceAvailable_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_IsServiceAvailable_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_IsServiceAvailable_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_IsServiceAvailable_Response::MergeFrom(const CStorageDeviceManager_IsServiceAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_IsServiceAvailable_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_available()) {
    _internal_set_is_available(from._internal_is_available());
  }
}

void CStorageDeviceManager_IsServiceAvailable_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_IsServiceAvailable_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_IsServiceAvailable_Response::CopyFrom(const CStorageDeviceManager_IsServiceAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_IsServiceAvailable_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_IsServiceAvailable_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_IsServiceAvailable_Response::InternalSwap(CStorageDeviceManager_IsServiceAvailable_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_available_, other->is_available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_IsServiceAvailable_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManagerDrive::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManagerDrive>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_ejectable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_unformatted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_adopt_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_formattable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_media_available(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CStorageDeviceManagerDrive::CStorageDeviceManagerDrive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManagerDrive)
}
CStorageDeviceManagerDrive::CStorageDeviceManagerDrive(const CStorageDeviceManagerDrive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendor()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArena());
  }
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&adopt_stage_) -
    reinterpret_cast<char*>(&id_)) + sizeof(adopt_stage_));
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManagerDrive)
}

void CStorageDeviceManagerDrive::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adopt_stage_) -
    reinterpret_cast<char*>(&id_)) + sizeof(adopt_stage_));
}

CStorageDeviceManagerDrive::~CStorageDeviceManagerDrive() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManagerDrive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManagerDrive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStorageDeviceManagerDrive::ArenaDtor(void* object) {
  CStorageDeviceManagerDrive* _this = reinterpret_cast< CStorageDeviceManagerDrive* >(object);
  (void)_this;
}
void CStorageDeviceManagerDrive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManagerDrive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManagerDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManagerDrive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      serial_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_unformatted_) -
        reinterpret_cast<char*>(&id_)) + sizeof(is_unformatted_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&is_formattable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adopt_stage_) -
        reinterpret_cast<char*>(&is_formattable_)) + sizeof(adopt_stage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManagerDrive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerDrive.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerDrive.vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerDrive.serial");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_ejectable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_ejectable(&has_bits);
          is_ejectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EStorageDriveMediaType media_type = 7 [default = EStorageDriveMediaType_Invalid];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStorageDriveMediaType_IsValid(val))) {
            _internal_set_media_type(static_cast<::EStorageDriveMediaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_unformatted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_unformatted(&has_bits);
          is_unformatted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EStorageFormatStage adopt_stage = 9 [default = EStorageFormatStage_Invalid];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStorageFormatStage_IsValid(val))) {
            _internal_set_adopt_stage(static_cast<::EStorageFormatStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_formattable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_formattable(&has_bits);
          is_formattable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_media_available = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_media_available(&has_bits);
          is_media_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManagerDrive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManagerDrive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerDrive.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // optional string vendor = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerDrive.vendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor(), target);
  }

  // optional string serial = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerDrive.serial");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial(), target);
  }

  // optional bool is_ejectable = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_ejectable(), target);
  }

  // optional uint64 size_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size_bytes(), target);
  }

  // optional .EStorageDriveMediaType media_type = 7 [default = EStorageDriveMediaType_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_media_type(), target);
  }

  // optional bool is_unformatted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_unformatted(), target);
  }

  // optional .EStorageFormatStage adopt_stage = 9 [default = EStorageFormatStage_Invalid];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_adopt_stage(), target);
  }

  // optional bool is_formattable = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_formattable(), target);
  }

  // optional bool is_media_available = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_media_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManagerDrive)
  return target;
}

size_t CStorageDeviceManagerDrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManagerDrive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional string vendor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vendor());
    }

    // optional string serial = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial());
    }

    // optional uint32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .EStorageDriveMediaType media_type = 7 [default = EStorageDriveMediaType_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_type());
    }

    // optional uint64 size_bytes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size_bytes());
    }

    // optional bool is_ejectable = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_unformatted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_formattable = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_media_available = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .EStorageFormatStage adopt_stage = 9 [default = EStorageFormatStage_Invalid];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adopt_stage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManagerDrive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManagerDrive)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManagerDrive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManagerDrive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManagerDrive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManagerDrive)
    MergeFrom(*source);
  }
}

void CStorageDeviceManagerDrive::MergeFrom(const CStorageDeviceManagerDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManagerDrive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vendor(from._internal_vendor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_serial(from._internal_serial());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      media_type_ = from.media_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_ejectable_ = from.is_ejectable_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_unformatted_ = from.is_unformatted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      is_formattable_ = from.is_formattable_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_media_available_ = from.is_media_available_;
    }
    if (cached_has_bits & 0x00000400u) {
      adopt_stage_ = from.adopt_stage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorageDeviceManagerDrive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManagerDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManagerDrive::CopyFrom(const CStorageDeviceManagerDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManagerDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManagerDrive::IsInitialized() const {
  return true;
}

void CStorageDeviceManagerDrive::InternalSwap(CStorageDeviceManagerDrive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_.Swap(&other->serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerDrive, adopt_stage_)
      + sizeof(CStorageDeviceManagerDrive::adopt_stage_)
      - PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerDrive, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManagerDrive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManagerBlockDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManagerBlockDevice>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_drive_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friendly_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_formattable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_read_only(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_root_device(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_filesystem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_unmounting(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CStorageDeviceManagerBlockDevice::CStorageDeviceManagerBlockDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mount_paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManagerBlockDevice)
}
CStorageDeviceManagerBlockDevice::CStorageDeviceManagerBlockDevice(const CStorageDeviceManagerBlockDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mount_paths_(from.mount_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  friendly_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_friendly_path()) {
    friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_friendly_path(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filesystem_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(filesystem_type_));
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManagerBlockDevice)
}

void CStorageDeviceManagerBlockDevice::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
friendly_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filesystem_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(filesystem_type_));
}

CStorageDeviceManagerBlockDevice::~CStorageDeviceManagerBlockDevice() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManagerBlockDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManagerBlockDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friendly_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStorageDeviceManagerBlockDevice::ArenaDtor(void* object) {
  CStorageDeviceManagerBlockDevice* _this = reinterpret_cast< CStorageDeviceManagerBlockDevice* >(object);
  (void)_this;
}
void CStorageDeviceManagerBlockDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManagerBlockDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManagerBlockDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManagerBlockDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mount_paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      friendly_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      label_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_read_only_) -
        reinterpret_cast<char*>(&id_)) + sizeof(is_read_only_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_root_device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filesystem_type_) -
        reinterpret_cast<char*>(&is_root_device_)) + sizeof(filesystem_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManagerBlockDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drive_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_drive_id(&has_bits);
          drive_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerBlockDevice.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string friendly_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_friendly_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerBlockDevice.friendly_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerBlockDevice.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_formattable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_formattable(&has_bits);
          is_formattable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_read_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_read_only(&has_bits);
          is_read_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_root_device = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_root_device(&has_bits);
          is_root_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EStorageBlockContentType content_type = 10 [default = EStorageBlockContentType_Invalid];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStorageBlockContentType_IsValid(val))) {
            _internal_set_content_type(static_cast<::EStorageBlockContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .EStorageBlockFileSystemType filesystem_type = 11 [default = EStorageBlockFileSystemType_Invalid];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStorageBlockFileSystemType_IsValid(val))) {
            _internal_set_filesystem_type(static_cast<::EStorageBlockFileSystemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string mount_paths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mount_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManagerBlockDevice.mount_paths");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_unmounting = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_unmounting(&has_bits);
          is_unmounting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManagerBlockDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManagerBlockDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 drive_id = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_drive_id(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerBlockDevice.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional string friendly_path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_friendly_path().data(), static_cast<int>(this->_internal_friendly_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerBlockDevice.friendly_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_friendly_path(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerBlockDevice.label");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional uint64 size_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size_bytes(), target);
  }

  // optional bool is_formattable = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_formattable(), target);
  }

  // optional bool is_read_only = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_read_only(), target);
  }

  // optional bool is_root_device = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_root_device(), target);
  }

  // optional .EStorageBlockContentType content_type = 10 [default = EStorageBlockContentType_Invalid];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_content_type(), target);
  }

  // optional .EStorageBlockFileSystemType filesystem_type = 11 [default = EStorageBlockFileSystemType_Invalid];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_filesystem_type(), target);
  }

  // repeated string mount_paths = 12;
  for (int i = 0, n = this->_internal_mount_paths_size(); i < n; i++) {
    const auto& s = this->_internal_mount_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManagerBlockDevice.mount_paths");
    target = stream->WriteString(12, s, target);
  }

  // optional bool is_unmounting = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_unmounting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManagerBlockDevice)
  return target;
}

size_t CStorageDeviceManagerBlockDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManagerBlockDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mount_paths = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mount_paths_.size());
  for (int i = 0, n = mount_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mount_paths_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string friendly_path = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_friendly_path());
    }

    // optional string label = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional uint32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 drive_id = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drive_id());
    }

    // optional uint64 size_bytes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size_bytes());
    }

    // optional bool is_formattable = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_read_only = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_root_device = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_unmounting = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .EStorageBlockContentType content_type = 10 [default = EStorageBlockContentType_Invalid];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
    }

    // optional .EStorageBlockFileSystemType filesystem_type = 11 [default = EStorageBlockFileSystemType_Invalid];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filesystem_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManagerBlockDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManagerBlockDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManagerBlockDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManagerBlockDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManagerBlockDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManagerBlockDevice)
    MergeFrom(*source);
  }
}

void CStorageDeviceManagerBlockDevice::MergeFrom(const CStorageDeviceManagerBlockDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManagerBlockDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mount_paths_.MergeFrom(from.mount_paths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_friendly_path(from._internal_friendly_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      drive_id_ = from.drive_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_formattable_ = from.is_formattable_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_read_only_ = from.is_read_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_root_device_ = from.is_root_device_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_unmounting_ = from.is_unmounting_;
    }
    if (cached_has_bits & 0x00000400u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      filesystem_type_ = from.filesystem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorageDeviceManagerBlockDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManagerBlockDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManagerBlockDevice::CopyFrom(const CStorageDeviceManagerBlockDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManagerBlockDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManagerBlockDevice::IsInitialized() const {
  return true;
}

void CStorageDeviceManagerBlockDevice::InternalSwap(CStorageDeviceManagerBlockDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mount_paths_.InternalSwap(&other->mount_paths_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friendly_path_.Swap(&other->friendly_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerBlockDevice, filesystem_type_)
      + sizeof(CStorageDeviceManagerBlockDevice::filesystem_type_)
      - PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerBlockDevice, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManagerBlockDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManagerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManagerState>()._has_bits_);
  static void set_has_is_unmount_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_trim_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_trim_running(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_adopt_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CStorageDeviceManagerState::CStorageDeviceManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drives_(arena),
  blocdevices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManagerState)
}
CStorageDeviceManagerState::CStorageDeviceManagerState(const CStorageDeviceManagerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drives_(from.drives_),
      blocdevices_(from.blocdevices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_unmount_supported_, &from.is_unmount_supported_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_adopt_supported_) -
    reinterpret_cast<char*>(&is_unmount_supported_)) + sizeof(is_adopt_supported_));
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManagerState)
}

void CStorageDeviceManagerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_unmount_supported_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_adopt_supported_) -
    reinterpret_cast<char*>(&is_unmount_supported_)) + sizeof(is_adopt_supported_));
}

CStorageDeviceManagerState::~CStorageDeviceManagerState() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManagerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManagerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManagerState::ArenaDtor(void* object) {
  CStorageDeviceManagerState* _this = reinterpret_cast< CStorageDeviceManagerState* >(object);
  (void)_this;
}
void CStorageDeviceManagerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManagerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManagerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManagerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drives_.Clear();
  blocdevices_.Clear();
  ::memset(&is_unmount_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_adopt_supported_) -
      reinterpret_cast<char*>(&is_unmount_supported_)) + sizeof(is_adopt_supported_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManagerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CStorageDeviceManagerDrive drives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CStorageDeviceManagerBlockDevice blocdevices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocdevices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_unmount_supported = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_unmount_supported(&has_bits);
          is_unmount_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_trim_supported = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_trim_supported(&has_bits);
          is_trim_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_trim_running = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_trim_running(&has_bits);
          is_trim_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_adopt_supported = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_adopt_supported(&has_bits);
          is_adopt_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManagerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManagerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CStorageDeviceManagerDrive drives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drives(i), target, stream);
  }

  // repeated .CStorageDeviceManagerBlockDevice blocdevices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocdevices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocdevices(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_unmount_supported = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_unmount_supported(), target);
  }

  // optional bool is_trim_supported = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_trim_supported(), target);
  }

  // optional bool is_trim_running = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_trim_running(), target);
  }

  // optional bool is_adopt_supported = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_adopt_supported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManagerState)
  return target;
}

size_t CStorageDeviceManagerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManagerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStorageDeviceManagerDrive drives = 1;
  total_size += 1UL * this->_internal_drives_size();
  for (const auto& msg : this->drives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CStorageDeviceManagerBlockDevice blocdevices = 2;
  total_size += 1UL * this->_internal_blocdevices_size();
  for (const auto& msg : this->blocdevices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_unmount_supported = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_trim_supported = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_trim_running = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_adopt_supported = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManagerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManagerState)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManagerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManagerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManagerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManagerState)
    MergeFrom(*source);
  }
}

void CStorageDeviceManagerState::MergeFrom(const CStorageDeviceManagerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManagerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drives_.MergeFrom(from.drives_);
  blocdevices_.MergeFrom(from.blocdevices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      is_unmount_supported_ = from.is_unmount_supported_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_trim_supported_ = from.is_trim_supported_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_trim_running_ = from.is_trim_running_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_adopt_supported_ = from.is_adopt_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorageDeviceManagerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManagerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManagerState::CopyFrom(const CStorageDeviceManagerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManagerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManagerState::IsInitialized() const {
  return true;
}

void CStorageDeviceManagerState::InternalSwap(CStorageDeviceManagerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drives_.InternalSwap(&other->drives_);
  blocdevices_.InternalSwap(&other->blocdevices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerState, is_adopt_supported_)
      + sizeof(CStorageDeviceManagerState::is_adopt_supported_)
      - PROTOBUF_FIELD_OFFSET(CStorageDeviceManagerState, is_unmount_supported_)>(
          reinterpret_cast<char*>(&is_unmount_supported_),
          reinterpret_cast<char*>(&other->is_unmount_supported_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManagerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_GetState_Request::_Internal {
 public:
};

CStorageDeviceManager_GetState_Request::CStorageDeviceManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_GetState_Request)
}
CStorageDeviceManager_GetState_Request::CStorageDeviceManager_GetState_Request(const CStorageDeviceManager_GetState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_GetState_Request)
}

void CStorageDeviceManager_GetState_Request::SharedCtor() {
}

CStorageDeviceManager_GetState_Request::~CStorageDeviceManager_GetState_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_GetState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_GetState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_GetState_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_GetState_Request* _this = reinterpret_cast< CStorageDeviceManager_GetState_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_GetState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_GetState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_GetState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_GetState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_GetState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_GetState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_GetState_Request)
  return target;
}

size_t CStorageDeviceManager_GetState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_GetState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_GetState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_GetState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_GetState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_GetState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_GetState_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_GetState_Request::MergeFrom(const CStorageDeviceManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_GetState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_GetState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_GetState_Request::CopyFrom(const CStorageDeviceManager_GetState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_GetState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_GetState_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_GetState_Request::InternalSwap(CStorageDeviceManager_GetState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_GetState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_GetState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_GetState_Response>()._has_bits_);
  static const ::CStorageDeviceManagerState& state(const CStorageDeviceManager_GetState_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CStorageDeviceManagerState&
CStorageDeviceManager_GetState_Response::_Internal::state(const CStorageDeviceManager_GetState_Response* msg) {
  return *msg->state_;
}
CStorageDeviceManager_GetState_Response::CStorageDeviceManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_GetState_Response)
}
CStorageDeviceManager_GetState_Response::CStorageDeviceManager_GetState_Response(const CStorageDeviceManager_GetState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CStorageDeviceManagerState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_GetState_Response)
}

void CStorageDeviceManager_GetState_Response::SharedCtor() {
state_ = nullptr;
}

CStorageDeviceManager_GetState_Response::~CStorageDeviceManager_GetState_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_GetState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_GetState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void CStorageDeviceManager_GetState_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_GetState_Response* _this = reinterpret_cast< CStorageDeviceManager_GetState_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_GetState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_GetState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_GetState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_GetState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CStorageDeviceManagerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_GetState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_GetState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CStorageDeviceManagerState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_GetState_Response)
  return target;
}

size_t CStorageDeviceManager_GetState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_GetState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CStorageDeviceManagerState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_GetState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_GetState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_GetState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_GetState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_GetState_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_GetState_Response::MergeFrom(const CStorageDeviceManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_GetState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CStorageDeviceManagerState::MergeFrom(from._internal_state());
  }
}

void CStorageDeviceManager_GetState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_GetState_Response::CopyFrom(const CStorageDeviceManager_GetState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_GetState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_GetState_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_GetState_Response::InternalSwap(CStorageDeviceManager_GetState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_GetState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_StateChanged_Notification::_Internal {
 public:
};

CStorageDeviceManager_StateChanged_Notification::CStorageDeviceManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_StateChanged_Notification)
}
CStorageDeviceManager_StateChanged_Notification::CStorageDeviceManager_StateChanged_Notification(const CStorageDeviceManager_StateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_StateChanged_Notification)
}

void CStorageDeviceManager_StateChanged_Notification::SharedCtor() {
}

CStorageDeviceManager_StateChanged_Notification::~CStorageDeviceManager_StateChanged_Notification() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_StateChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_StateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_StateChanged_Notification::ArenaDtor(void* object) {
  CStorageDeviceManager_StateChanged_Notification* _this = reinterpret_cast< CStorageDeviceManager_StateChanged_Notification* >(object);
  (void)_this;
}
void CStorageDeviceManager_StateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_StateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_StateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_StateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_StateChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_StateChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_StateChanged_Notification)
  return target;
}

size_t CStorageDeviceManager_StateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_StateChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_StateChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_StateChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_StateChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_StateChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_StateChanged_Notification)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_StateChanged_Notification::MergeFrom(const CStorageDeviceManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_StateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_StateChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_StateChanged_Notification::CopyFrom(const CStorageDeviceManager_StateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_StateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_StateChanged_Notification::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_StateChanged_Notification::InternalSwap(CStorageDeviceManager_StateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_StateChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Eject_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_Eject_Request>()._has_bits_);
  static void set_has_drive_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorageDeviceManager_Eject_Request::CStorageDeviceManager_Eject_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Eject_Request)
}
CStorageDeviceManager_Eject_Request::CStorageDeviceManager_Eject_Request(const CStorageDeviceManager_Eject_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  drive_id_ = from.drive_id_;
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Eject_Request)
}

void CStorageDeviceManager_Eject_Request::SharedCtor() {
drive_id_ = 0u;
}

CStorageDeviceManager_Eject_Request::~CStorageDeviceManager_Eject_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Eject_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Eject_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Eject_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_Eject_Request* _this = reinterpret_cast< CStorageDeviceManager_Eject_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_Eject_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Eject_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Eject_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Eject_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drive_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Eject_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 drive_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_id(&has_bits);
          drive_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Eject_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Eject_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 drive_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_drive_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Eject_Request)
  return target;
}

size_t CStorageDeviceManager_Eject_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Eject_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 drive_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drive_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Eject_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Eject_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Eject_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Eject_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Eject_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Eject_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Eject_Request::MergeFrom(const CStorageDeviceManager_Eject_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Eject_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drive_id()) {
    _internal_set_drive_id(from._internal_drive_id());
  }
}

void CStorageDeviceManager_Eject_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Eject_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Eject_Request::CopyFrom(const CStorageDeviceManager_Eject_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Eject_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Eject_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Eject_Request::InternalSwap(CStorageDeviceManager_Eject_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(drive_id_, other->drive_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Eject_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Eject_Response::_Internal {
 public:
};

CStorageDeviceManager_Eject_Response::CStorageDeviceManager_Eject_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Eject_Response)
}
CStorageDeviceManager_Eject_Response::CStorageDeviceManager_Eject_Response(const CStorageDeviceManager_Eject_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Eject_Response)
}

void CStorageDeviceManager_Eject_Response::SharedCtor() {
}

CStorageDeviceManager_Eject_Response::~CStorageDeviceManager_Eject_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Eject_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Eject_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Eject_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_Eject_Response* _this = reinterpret_cast< CStorageDeviceManager_Eject_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_Eject_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Eject_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Eject_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Eject_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Eject_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Eject_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Eject_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Eject_Response)
  return target;
}

size_t CStorageDeviceManager_Eject_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Eject_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Eject_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Eject_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Eject_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Eject_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Eject_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Eject_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Eject_Response::MergeFrom(const CStorageDeviceManager_Eject_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Eject_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_Eject_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Eject_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Eject_Response::CopyFrom(const CStorageDeviceManager_Eject_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Eject_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Eject_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Eject_Response::InternalSwap(CStorageDeviceManager_Eject_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Eject_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Adopt_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_Adopt_Request>()._has_bits_);
  static void set_has_drive_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorageDeviceManager_Adopt_Request::CStorageDeviceManager_Adopt_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Adopt_Request)
}
CStorageDeviceManager_Adopt_Request::CStorageDeviceManager_Adopt_Request(const CStorageDeviceManager_Adopt_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  drive_id_ = from.drive_id_;
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Adopt_Request)
}

void CStorageDeviceManager_Adopt_Request::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
drive_id_ = 0u;
}

CStorageDeviceManager_Adopt_Request::~CStorageDeviceManager_Adopt_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Adopt_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Adopt_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStorageDeviceManager_Adopt_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_Adopt_Request* _this = reinterpret_cast< CStorageDeviceManager_Adopt_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_Adopt_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Adopt_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Adopt_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Adopt_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  drive_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Adopt_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 drive_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_id(&has_bits);
          drive_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorageDeviceManager_Adopt_Request.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Adopt_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Adopt_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 drive_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_drive_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorageDeviceManager_Adopt_Request.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Adopt_Request)
  return target;
}

size_t CStorageDeviceManager_Adopt_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Adopt_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional uint32 drive_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drive_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Adopt_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Adopt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Adopt_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Adopt_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Adopt_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Adopt_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Adopt_Request::MergeFrom(const CStorageDeviceManager_Adopt_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Adopt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      drive_id_ = from.drive_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorageDeviceManager_Adopt_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Adopt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Adopt_Request::CopyFrom(const CStorageDeviceManager_Adopt_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Adopt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Adopt_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Adopt_Request::InternalSwap(CStorageDeviceManager_Adopt_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(drive_id_, other->drive_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Adopt_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Adopt_Response::_Internal {
 public:
};

CStorageDeviceManager_Adopt_Response::CStorageDeviceManager_Adopt_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Adopt_Response)
}
CStorageDeviceManager_Adopt_Response::CStorageDeviceManager_Adopt_Response(const CStorageDeviceManager_Adopt_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Adopt_Response)
}

void CStorageDeviceManager_Adopt_Response::SharedCtor() {
}

CStorageDeviceManager_Adopt_Response::~CStorageDeviceManager_Adopt_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Adopt_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Adopt_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Adopt_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_Adopt_Response* _this = reinterpret_cast< CStorageDeviceManager_Adopt_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_Adopt_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Adopt_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Adopt_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Adopt_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Adopt_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Adopt_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Adopt_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Adopt_Response)
  return target;
}

size_t CStorageDeviceManager_Adopt_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Adopt_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Adopt_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Adopt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Adopt_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Adopt_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Adopt_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Adopt_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Adopt_Response::MergeFrom(const CStorageDeviceManager_Adopt_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Adopt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_Adopt_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Adopt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Adopt_Response::CopyFrom(const CStorageDeviceManager_Adopt_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Adopt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Adopt_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Adopt_Response::InternalSwap(CStorageDeviceManager_Adopt_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Adopt_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Format_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_Format_Request>()._has_bits_);
  static void set_has_blocdevice_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorageDeviceManager_Format_Request::CStorageDeviceManager_Format_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Format_Request)
}
CStorageDeviceManager_Format_Request::CStorageDeviceManager_Format_Request(const CStorageDeviceManager_Format_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocdevice_id_ = from.blocdevice_id_;
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Format_Request)
}

void CStorageDeviceManager_Format_Request::SharedCtor() {
blocdevice_id_ = 0u;
}

CStorageDeviceManager_Format_Request::~CStorageDeviceManager_Format_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Format_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Format_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Format_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_Format_Request* _this = reinterpret_cast< CStorageDeviceManager_Format_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_Format_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Format_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Format_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Format_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocdevice_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Format_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 blocdevice_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocdevice_id(&has_bits);
          blocdevice_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Format_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Format_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 blocdevice_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blocdevice_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Format_Request)
  return target;
}

size_t CStorageDeviceManager_Format_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Format_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 blocdevice_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blocdevice_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Format_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Format_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Format_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Format_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Format_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Format_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Format_Request::MergeFrom(const CStorageDeviceManager_Format_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Format_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blocdevice_id()) {
    _internal_set_blocdevice_id(from._internal_blocdevice_id());
  }
}

void CStorageDeviceManager_Format_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Format_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Format_Request::CopyFrom(const CStorageDeviceManager_Format_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Format_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Format_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Format_Request::InternalSwap(CStorageDeviceManager_Format_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blocdevice_id_, other->blocdevice_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Format_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Format_Response::_Internal {
 public:
};

CStorageDeviceManager_Format_Response::CStorageDeviceManager_Format_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Format_Response)
}
CStorageDeviceManager_Format_Response::CStorageDeviceManager_Format_Response(const CStorageDeviceManager_Format_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Format_Response)
}

void CStorageDeviceManager_Format_Response::SharedCtor() {
}

CStorageDeviceManager_Format_Response::~CStorageDeviceManager_Format_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Format_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Format_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Format_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_Format_Response* _this = reinterpret_cast< CStorageDeviceManager_Format_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_Format_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Format_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Format_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Format_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Format_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Format_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Format_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Format_Response)
  return target;
}

size_t CStorageDeviceManager_Format_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Format_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Format_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Format_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Format_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Format_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Format_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Format_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Format_Response::MergeFrom(const CStorageDeviceManager_Format_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Format_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_Format_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Format_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Format_Response::CopyFrom(const CStorageDeviceManager_Format_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Format_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Format_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Format_Response::InternalSwap(CStorageDeviceManager_Format_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Format_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Unmount_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorageDeviceManager_Unmount_Request>()._has_bits_);
  static void set_has_blocdevice_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorageDeviceManager_Unmount_Request::CStorageDeviceManager_Unmount_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Unmount_Request)
}
CStorageDeviceManager_Unmount_Request::CStorageDeviceManager_Unmount_Request(const CStorageDeviceManager_Unmount_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocdevice_id_ = from.blocdevice_id_;
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Unmount_Request)
}

void CStorageDeviceManager_Unmount_Request::SharedCtor() {
blocdevice_id_ = 0u;
}

CStorageDeviceManager_Unmount_Request::~CStorageDeviceManager_Unmount_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Unmount_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Unmount_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Unmount_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_Unmount_Request* _this = reinterpret_cast< CStorageDeviceManager_Unmount_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_Unmount_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Unmount_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Unmount_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Unmount_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocdevice_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Unmount_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 blocdevice_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocdevice_id(&has_bits);
          blocdevice_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Unmount_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Unmount_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 blocdevice_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blocdevice_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Unmount_Request)
  return target;
}

size_t CStorageDeviceManager_Unmount_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Unmount_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 blocdevice_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blocdevice_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Unmount_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Unmount_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Unmount_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Unmount_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Unmount_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Unmount_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Unmount_Request::MergeFrom(const CStorageDeviceManager_Unmount_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Unmount_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blocdevice_id()) {
    _internal_set_blocdevice_id(from._internal_blocdevice_id());
  }
}

void CStorageDeviceManager_Unmount_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Unmount_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Unmount_Request::CopyFrom(const CStorageDeviceManager_Unmount_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Unmount_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Unmount_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Unmount_Request::InternalSwap(CStorageDeviceManager_Unmount_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blocdevice_id_, other->blocdevice_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Unmount_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_Unmount_Response::_Internal {
 public:
};

CStorageDeviceManager_Unmount_Response::CStorageDeviceManager_Unmount_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_Unmount_Response)
}
CStorageDeviceManager_Unmount_Response::CStorageDeviceManager_Unmount_Response(const CStorageDeviceManager_Unmount_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_Unmount_Response)
}

void CStorageDeviceManager_Unmount_Response::SharedCtor() {
}

CStorageDeviceManager_Unmount_Response::~CStorageDeviceManager_Unmount_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_Unmount_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_Unmount_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_Unmount_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_Unmount_Response* _this = reinterpret_cast< CStorageDeviceManager_Unmount_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_Unmount_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_Unmount_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_Unmount_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_Unmount_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_Unmount_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_Unmount_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_Unmount_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_Unmount_Response)
  return target;
}

size_t CStorageDeviceManager_Unmount_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_Unmount_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_Unmount_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_Unmount_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_Unmount_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_Unmount_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_Unmount_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_Unmount_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_Unmount_Response::MergeFrom(const CStorageDeviceManager_Unmount_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_Unmount_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_Unmount_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_Unmount_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_Unmount_Response::CopyFrom(const CStorageDeviceManager_Unmount_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_Unmount_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_Unmount_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_Unmount_Response::InternalSwap(CStorageDeviceManager_Unmount_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_Unmount_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_TrimAll_Request::_Internal {
 public:
};

CStorageDeviceManager_TrimAll_Request::CStorageDeviceManager_TrimAll_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_TrimAll_Request)
}
CStorageDeviceManager_TrimAll_Request::CStorageDeviceManager_TrimAll_Request(const CStorageDeviceManager_TrimAll_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_TrimAll_Request)
}

void CStorageDeviceManager_TrimAll_Request::SharedCtor() {
}

CStorageDeviceManager_TrimAll_Request::~CStorageDeviceManager_TrimAll_Request() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_TrimAll_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_TrimAll_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_TrimAll_Request::ArenaDtor(void* object) {
  CStorageDeviceManager_TrimAll_Request* _this = reinterpret_cast< CStorageDeviceManager_TrimAll_Request* >(object);
  (void)_this;
}
void CStorageDeviceManager_TrimAll_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_TrimAll_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_TrimAll_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_TrimAll_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_TrimAll_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_TrimAll_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_TrimAll_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_TrimAll_Request)
  return target;
}

size_t CStorageDeviceManager_TrimAll_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_TrimAll_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_TrimAll_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_TrimAll_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_TrimAll_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_TrimAll_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_TrimAll_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_TrimAll_Request)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_TrimAll_Request::MergeFrom(const CStorageDeviceManager_TrimAll_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_TrimAll_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_TrimAll_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_TrimAll_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_TrimAll_Request::CopyFrom(const CStorageDeviceManager_TrimAll_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_TrimAll_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_TrimAll_Request::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_TrimAll_Request::InternalSwap(CStorageDeviceManager_TrimAll_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_TrimAll_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorageDeviceManager_TrimAll_Response::_Internal {
 public:
};

CStorageDeviceManager_TrimAll_Response::CStorageDeviceManager_TrimAll_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorageDeviceManager_TrimAll_Response)
}
CStorageDeviceManager_TrimAll_Response::CStorageDeviceManager_TrimAll_Response(const CStorageDeviceManager_TrimAll_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CStorageDeviceManager_TrimAll_Response)
}

void CStorageDeviceManager_TrimAll_Response::SharedCtor() {
}

CStorageDeviceManager_TrimAll_Response::~CStorageDeviceManager_TrimAll_Response() {
  // @@protoc_insertion_point(destructor:CStorageDeviceManager_TrimAll_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorageDeviceManager_TrimAll_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorageDeviceManager_TrimAll_Response::ArenaDtor(void* object) {
  CStorageDeviceManager_TrimAll_Response* _this = reinterpret_cast< CStorageDeviceManager_TrimAll_Response* >(object);
  (void)_this;
}
void CStorageDeviceManager_TrimAll_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorageDeviceManager_TrimAll_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorageDeviceManager_TrimAll_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorageDeviceManager_TrimAll_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorageDeviceManager_TrimAll_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorageDeviceManager_TrimAll_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorageDeviceManager_TrimAll_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorageDeviceManager_TrimAll_Response)
  return target;
}

size_t CStorageDeviceManager_TrimAll_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorageDeviceManager_TrimAll_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorageDeviceManager_TrimAll_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorageDeviceManager_TrimAll_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorageDeviceManager_TrimAll_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorageDeviceManager_TrimAll_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorageDeviceManager_TrimAll_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorageDeviceManager_TrimAll_Response)
    MergeFrom(*source);
  }
}

void CStorageDeviceManager_TrimAll_Response::MergeFrom(const CStorageDeviceManager_TrimAll_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorageDeviceManager_TrimAll_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStorageDeviceManager_TrimAll_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorageDeviceManager_TrimAll_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorageDeviceManager_TrimAll_Response::CopyFrom(const CStorageDeviceManager_TrimAll_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorageDeviceManager_TrimAll_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorageDeviceManager_TrimAll_Response::IsInitialized() const {
  return true;
}

void CStorageDeviceManager_TrimAll_Response::InternalSwap(CStorageDeviceManager_TrimAll_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorageDeviceManager_TrimAll_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StorageDeviceManager::~StorageDeviceManager() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageDeviceManager::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_webuimessages_5fstoragedevicemanager_2eproto);
  return file_level_service_descriptors_webuimessages_5fstoragedevicemanager_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageDeviceManager::GetDescriptor() {
  return descriptor();
}

void StorageDeviceManager::IsServiceAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_IsServiceAvailable_Request*,
                         ::CStorageDeviceManager_IsServiceAvailable_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsServiceAvailable() not implemented.");
  done->Run();
}

void StorageDeviceManager::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_GetState_Request*,
                         ::CStorageDeviceManager_GetState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void StorageDeviceManager::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_StateChanged_Notification*,
                         ::WebUINoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStateChanged() not implemented.");
  done->Run();
}

void StorageDeviceManager::Adopt(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_Adopt_Request*,
                         ::CStorageDeviceManager_Adopt_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Adopt() not implemented.");
  done->Run();
}

void StorageDeviceManager::Eject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_Eject_Request*,
                         ::CStorageDeviceManager_Eject_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Eject() not implemented.");
  done->Run();
}

void StorageDeviceManager::Format(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_Format_Request*,
                         ::CStorageDeviceManager_Format_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Format() not implemented.");
  done->Run();
}

void StorageDeviceManager::Unmount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_Unmount_Request*,
                         ::CStorageDeviceManager_Unmount_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unmount() not implemented.");
  done->Run();
}

void StorageDeviceManager::TrimAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CStorageDeviceManager_TrimAll_Request*,
                         ::CStorageDeviceManager_TrimAll_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TrimAll() not implemented.");
  done->Run();
}

void StorageDeviceManager::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_webuimessages_5fstoragedevicemanager_2eproto[0]);
  switch(method->index()) {
    case 0:
      IsServiceAvailable(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_IsServiceAvailable_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_IsServiceAvailable_Response*>(
                 response),
             done);
      break;
    case 1:
      GetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_GetState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_GetState_Response*>(
                 response),
             done);
      break;
    case 2:
      NotifyStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_StateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WebUINoResponse*>(
                 response),
             done);
      break;
    case 3:
      Adopt(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_Adopt_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_Adopt_Response*>(
                 response),
             done);
      break;
    case 4:
      Eject(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_Eject_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_Eject_Response*>(
                 response),
             done);
      break;
    case 5:
      Format(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_Format_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_Format_Response*>(
                 response),
             done);
      break;
    case 6:
      Unmount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_Unmount_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_Unmount_Response*>(
                 response),
             done);
      break;
    case 7:
      TrimAll(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CStorageDeviceManager_TrimAll_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CStorageDeviceManager_TrimAll_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageDeviceManager::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CStorageDeviceManager_IsServiceAvailable_Request::default_instance();
    case 1:
      return ::CStorageDeviceManager_GetState_Request::default_instance();
    case 2:
      return ::CStorageDeviceManager_StateChanged_Notification::default_instance();
    case 3:
      return ::CStorageDeviceManager_Adopt_Request::default_instance();
    case 4:
      return ::CStorageDeviceManager_Eject_Request::default_instance();
    case 5:
      return ::CStorageDeviceManager_Format_Request::default_instance();
    case 6:
      return ::CStorageDeviceManager_Unmount_Request::default_instance();
    case 7:
      return ::CStorageDeviceManager_TrimAll_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageDeviceManager::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CStorageDeviceManager_IsServiceAvailable_Response::default_instance();
    case 1:
      return ::CStorageDeviceManager_GetState_Response::default_instance();
    case 2:
      return ::WebUINoResponse::default_instance();
    case 3:
      return ::CStorageDeviceManager_Adopt_Response::default_instance();
    case 4:
      return ::CStorageDeviceManager_Eject_Response::default_instance();
    case 5:
      return ::CStorageDeviceManager_Format_Response::default_instance();
    case 6:
      return ::CStorageDeviceManager_Unmount_Response::default_instance();
    case 7:
      return ::CStorageDeviceManager_TrimAll_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StorageDeviceManager_Stub::StorageDeviceManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StorageDeviceManager_Stub::StorageDeviceManager_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
StorageDeviceManager_Stub::~StorageDeviceManager_Stub() {
  if (owns_channel_) delete channel_;
}

void StorageDeviceManager_Stub::IsServiceAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_IsServiceAvailable_Request* request,
                              ::CStorageDeviceManager_IsServiceAvailable_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_GetState_Request* request,
                              ::CStorageDeviceManager_GetState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_StateChanged_Notification* request,
                              ::WebUINoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::Adopt(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_Adopt_Request* request,
                              ::CStorageDeviceManager_Adopt_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::Eject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_Eject_Request* request,
                              ::CStorageDeviceManager_Eject_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::Format(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_Format_Request* request,
                              ::CStorageDeviceManager_Format_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::Unmount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_Unmount_Request* request,
                              ::CStorageDeviceManager_Unmount_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void StorageDeviceManager_Stub::TrimAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CStorageDeviceManager_TrimAll_Request* request,
                              ::CStorageDeviceManager_TrimAll_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_IsServiceAvailable_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_IsServiceAvailable_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_IsServiceAvailable_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_IsServiceAvailable_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_IsServiceAvailable_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_IsServiceAvailable_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManagerDrive* Arena::CreateMaybeMessage< ::CStorageDeviceManagerDrive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManagerDrive >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManagerBlockDevice* Arena::CreateMaybeMessage< ::CStorageDeviceManagerBlockDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManagerBlockDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManagerState* Arena::CreateMaybeMessage< ::CStorageDeviceManagerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManagerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_GetState_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_GetState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_GetState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_GetState_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_GetState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_GetState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_StateChanged_Notification* Arena::CreateMaybeMessage< ::CStorageDeviceManager_StateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_StateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Eject_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Eject_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Eject_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Eject_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Eject_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Eject_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Adopt_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Adopt_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Adopt_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Adopt_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Adopt_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Adopt_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Format_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Format_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Format_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Format_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Format_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Format_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Unmount_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Unmount_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Unmount_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_Unmount_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_Unmount_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_Unmount_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_TrimAll_Request* Arena::CreateMaybeMessage< ::CStorageDeviceManager_TrimAll_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_TrimAll_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorageDeviceManager_TrimAll_Response* Arena::CreateMaybeMessage< ::CStorageDeviceManager_TrimAll_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorageDeviceManager_TrimAll_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
