// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webuimessages_storagedevicemanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fstoragedevicemanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fstoragedevicemanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
#include "steammessages_base.pb.h"
#include "webuimessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webuimessages_5fstoragedevicemanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webuimessages_5fstoragedevicemanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webuimessages_5fstoragedevicemanager_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(int index);
class CStorageDeviceManagerBlockDevice;
struct CStorageDeviceManagerBlockDeviceDefaultTypeInternal;
extern CStorageDeviceManagerBlockDeviceDefaultTypeInternal _CStorageDeviceManagerBlockDevice_default_instance_;
class CStorageDeviceManagerDrive;
struct CStorageDeviceManagerDriveDefaultTypeInternal;
extern CStorageDeviceManagerDriveDefaultTypeInternal _CStorageDeviceManagerDrive_default_instance_;
class CStorageDeviceManagerState;
struct CStorageDeviceManagerStateDefaultTypeInternal;
extern CStorageDeviceManagerStateDefaultTypeInternal _CStorageDeviceManagerState_default_instance_;
class CStorageDeviceManager_Adopt_Request;
struct CStorageDeviceManager_Adopt_RequestDefaultTypeInternal;
extern CStorageDeviceManager_Adopt_RequestDefaultTypeInternal _CStorageDeviceManager_Adopt_Request_default_instance_;
class CStorageDeviceManager_Adopt_Response;
struct CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_Adopt_ResponseDefaultTypeInternal _CStorageDeviceManager_Adopt_Response_default_instance_;
class CStorageDeviceManager_Eject_Request;
struct CStorageDeviceManager_Eject_RequestDefaultTypeInternal;
extern CStorageDeviceManager_Eject_RequestDefaultTypeInternal _CStorageDeviceManager_Eject_Request_default_instance_;
class CStorageDeviceManager_Eject_Response;
struct CStorageDeviceManager_Eject_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_Eject_ResponseDefaultTypeInternal _CStorageDeviceManager_Eject_Response_default_instance_;
class CStorageDeviceManager_Format_Request;
struct CStorageDeviceManager_Format_RequestDefaultTypeInternal;
extern CStorageDeviceManager_Format_RequestDefaultTypeInternal _CStorageDeviceManager_Format_Request_default_instance_;
class CStorageDeviceManager_Format_Response;
struct CStorageDeviceManager_Format_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_Format_ResponseDefaultTypeInternal _CStorageDeviceManager_Format_Response_default_instance_;
class CStorageDeviceManager_GetState_Request;
struct CStorageDeviceManager_GetState_RequestDefaultTypeInternal;
extern CStorageDeviceManager_GetState_RequestDefaultTypeInternal _CStorageDeviceManager_GetState_Request_default_instance_;
class CStorageDeviceManager_GetState_Response;
struct CStorageDeviceManager_GetState_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_GetState_ResponseDefaultTypeInternal _CStorageDeviceManager_GetState_Response_default_instance_;
class CStorageDeviceManager_IsServiceAvailable_Request;
struct CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal;
extern CStorageDeviceManager_IsServiceAvailable_RequestDefaultTypeInternal _CStorageDeviceManager_IsServiceAvailable_Request_default_instance_;
class CStorageDeviceManager_IsServiceAvailable_Response;
struct CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_IsServiceAvailable_ResponseDefaultTypeInternal _CStorageDeviceManager_IsServiceAvailable_Response_default_instance_;
class CStorageDeviceManager_StateChanged_Notification;
struct CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal;
extern CStorageDeviceManager_StateChanged_NotificationDefaultTypeInternal _CStorageDeviceManager_StateChanged_Notification_default_instance_;
class CStorageDeviceManager_TrimAll_Request;
struct CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal;
extern CStorageDeviceManager_TrimAll_RequestDefaultTypeInternal _CStorageDeviceManager_TrimAll_Request_default_instance_;
class CStorageDeviceManager_TrimAll_Response;
struct CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_TrimAll_ResponseDefaultTypeInternal _CStorageDeviceManager_TrimAll_Response_default_instance_;
class CStorageDeviceManager_Unmount_Request;
struct CStorageDeviceManager_Unmount_RequestDefaultTypeInternal;
extern CStorageDeviceManager_Unmount_RequestDefaultTypeInternal _CStorageDeviceManager_Unmount_Request_default_instance_;
class CStorageDeviceManager_Unmount_Response;
struct CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal;
extern CStorageDeviceManager_Unmount_ResponseDefaultTypeInternal _CStorageDeviceManager_Unmount_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CStorageDeviceManagerBlockDevice* Arena::CreateMaybeMessage<::CStorageDeviceManagerBlockDevice>(Arena*);
template<> ::CStorageDeviceManagerDrive* Arena::CreateMaybeMessage<::CStorageDeviceManagerDrive>(Arena*);
template<> ::CStorageDeviceManagerState* Arena::CreateMaybeMessage<::CStorageDeviceManagerState>(Arena*);
template<> ::CStorageDeviceManager_Adopt_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_Adopt_Request>(Arena*);
template<> ::CStorageDeviceManager_Adopt_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_Adopt_Response>(Arena*);
template<> ::CStorageDeviceManager_Eject_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_Eject_Request>(Arena*);
template<> ::CStorageDeviceManager_Eject_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_Eject_Response>(Arena*);
template<> ::CStorageDeviceManager_Format_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_Format_Request>(Arena*);
template<> ::CStorageDeviceManager_Format_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_Format_Response>(Arena*);
template<> ::CStorageDeviceManager_GetState_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_GetState_Request>(Arena*);
template<> ::CStorageDeviceManager_GetState_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_GetState_Response>(Arena*);
template<> ::CStorageDeviceManager_IsServiceAvailable_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_IsServiceAvailable_Request>(Arena*);
template<> ::CStorageDeviceManager_IsServiceAvailable_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_IsServiceAvailable_Response>(Arena*);
template<> ::CStorageDeviceManager_StateChanged_Notification* Arena::CreateMaybeMessage<::CStorageDeviceManager_StateChanged_Notification>(Arena*);
template<> ::CStorageDeviceManager_TrimAll_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_TrimAll_Request>(Arena*);
template<> ::CStorageDeviceManager_TrimAll_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_TrimAll_Response>(Arena*);
template<> ::CStorageDeviceManager_Unmount_Request* Arena::CreateMaybeMessage<::CStorageDeviceManager_Unmount_Request>(Arena*);
template<> ::CStorageDeviceManager_Unmount_Response* Arena::CreateMaybeMessage<::CStorageDeviceManager_Unmount_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CStorageDeviceManager_IsServiceAvailable_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_IsServiceAvailable_Request) */ {
 public:
  inline CStorageDeviceManager_IsServiceAvailable_Request() : CStorageDeviceManager_IsServiceAvailable_Request(nullptr) {}
  virtual ~CStorageDeviceManager_IsServiceAvailable_Request();
  explicit constexpr CStorageDeviceManager_IsServiceAvailable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_IsServiceAvailable_Request(const CStorageDeviceManager_IsServiceAvailable_Request& from);
  CStorageDeviceManager_IsServiceAvailable_Request(CStorageDeviceManager_IsServiceAvailable_Request&& from) noexcept
    : CStorageDeviceManager_IsServiceAvailable_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_IsServiceAvailable_Request& operator=(const CStorageDeviceManager_IsServiceAvailable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_IsServiceAvailable_Request& operator=(CStorageDeviceManager_IsServiceAvailable_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_IsServiceAvailable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_IsServiceAvailable_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_IsServiceAvailable_Request*>(
               &_CStorageDeviceManager_IsServiceAvailable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CStorageDeviceManager_IsServiceAvailable_Request& a, CStorageDeviceManager_IsServiceAvailable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_IsServiceAvailable_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_IsServiceAvailable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_IsServiceAvailable_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_IsServiceAvailable_Request>(nullptr);
  }

  CStorageDeviceManager_IsServiceAvailable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_IsServiceAvailable_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_IsServiceAvailable_Request& from);
  void MergeFrom(const CStorageDeviceManager_IsServiceAvailable_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_IsServiceAvailable_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_IsServiceAvailable_Request";
  }
  protected:
  explicit CStorageDeviceManager_IsServiceAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_IsServiceAvailable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_IsServiceAvailable_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_IsServiceAvailable_Response) */ {
 public:
  inline CStorageDeviceManager_IsServiceAvailable_Response() : CStorageDeviceManager_IsServiceAvailable_Response(nullptr) {}
  virtual ~CStorageDeviceManager_IsServiceAvailable_Response();
  explicit constexpr CStorageDeviceManager_IsServiceAvailable_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_IsServiceAvailable_Response(const CStorageDeviceManager_IsServiceAvailable_Response& from);
  CStorageDeviceManager_IsServiceAvailable_Response(CStorageDeviceManager_IsServiceAvailable_Response&& from) noexcept
    : CStorageDeviceManager_IsServiceAvailable_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_IsServiceAvailable_Response& operator=(const CStorageDeviceManager_IsServiceAvailable_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_IsServiceAvailable_Response& operator=(CStorageDeviceManager_IsServiceAvailable_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_IsServiceAvailable_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_IsServiceAvailable_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_IsServiceAvailable_Response*>(
               &_CStorageDeviceManager_IsServiceAvailable_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CStorageDeviceManager_IsServiceAvailable_Response& a, CStorageDeviceManager_IsServiceAvailable_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_IsServiceAvailable_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_IsServiceAvailable_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_IsServiceAvailable_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_IsServiceAvailable_Response>(nullptr);
  }

  CStorageDeviceManager_IsServiceAvailable_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_IsServiceAvailable_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_IsServiceAvailable_Response& from);
  void MergeFrom(const CStorageDeviceManager_IsServiceAvailable_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_IsServiceAvailable_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_IsServiceAvailable_Response";
  }
  protected:
  explicit CStorageDeviceManager_IsServiceAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAvailableFieldNumber = 1,
  };
  // optional bool is_available = 1;
  bool has_is_available() const;
  private:
  bool _internal_has_is_available() const;
  public:
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_IsServiceAvailable_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_available_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManagerDrive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManagerDrive) */ {
 public:
  inline CStorageDeviceManagerDrive() : CStorageDeviceManagerDrive(nullptr) {}
  virtual ~CStorageDeviceManagerDrive();
  explicit constexpr CStorageDeviceManagerDrive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManagerDrive(const CStorageDeviceManagerDrive& from);
  CStorageDeviceManagerDrive(CStorageDeviceManagerDrive&& from) noexcept
    : CStorageDeviceManagerDrive() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManagerDrive& operator=(const CStorageDeviceManagerDrive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManagerDrive& operator=(CStorageDeviceManagerDrive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManagerDrive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManagerDrive* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManagerDrive*>(
               &_CStorageDeviceManagerDrive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CStorageDeviceManagerDrive& a, CStorageDeviceManagerDrive& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManagerDrive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManagerDrive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManagerDrive* New() const final {
    return CreateMaybeMessage<CStorageDeviceManagerDrive>(nullptr);
  }

  CStorageDeviceManagerDrive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManagerDrive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManagerDrive& from);
  void MergeFrom(const CStorageDeviceManagerDrive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManagerDrive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManagerDrive";
  }
  protected:
  explicit CStorageDeviceManagerDrive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kVendorFieldNumber = 3,
    kSerialFieldNumber = 4,
    kIdFieldNumber = 1,
    kMediaTypeFieldNumber = 7,
    kSizeBytesFieldNumber = 6,
    kIsEjectableFieldNumber = 5,
    kIsUnformattedFieldNumber = 8,
    kIsFormattableFieldNumber = 10,
    kIsMediaAvailableFieldNumber = 11,
    kAdoptStageFieldNumber = 9,
  };
  // optional string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string vendor = 3;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional string serial = 4;
  bool has_serial() const;
  private:
  bool _internal_has_serial() const;
  public:
  void clear_serial();
  const std::string& serial() const;
  void set_serial(const std::string& value);
  void set_serial(std::string&& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  std::string* mutable_serial();
  std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  private:
  const std::string& _internal_serial() const;
  void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EStorageDriveMediaType media_type = 7 [default = EStorageDriveMediaType_Invalid];
  bool has_media_type() const;
  private:
  bool _internal_has_media_type() const;
  public:
  void clear_media_type();
  ::EStorageDriveMediaType media_type() const;
  void set_media_type(::EStorageDriveMediaType value);
  private:
  ::EStorageDriveMediaType _internal_media_type() const;
  void _internal_set_media_type(::EStorageDriveMediaType value);
  public:

  // optional uint64 size_bytes = 6;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size_bytes() const;
  void _internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_ejectable = 5;
  bool has_is_ejectable() const;
  private:
  bool _internal_has_is_ejectable() const;
  public:
  void clear_is_ejectable();
  bool is_ejectable() const;
  void set_is_ejectable(bool value);
  private:
  bool _internal_is_ejectable() const;
  void _internal_set_is_ejectable(bool value);
  public:

  // optional bool is_unformatted = 8;
  bool has_is_unformatted() const;
  private:
  bool _internal_has_is_unformatted() const;
  public:
  void clear_is_unformatted();
  bool is_unformatted() const;
  void set_is_unformatted(bool value);
  private:
  bool _internal_is_unformatted() const;
  void _internal_set_is_unformatted(bool value);
  public:

  // optional bool is_formattable = 10;
  bool has_is_formattable() const;
  private:
  bool _internal_has_is_formattable() const;
  public:
  void clear_is_formattable();
  bool is_formattable() const;
  void set_is_formattable(bool value);
  private:
  bool _internal_is_formattable() const;
  void _internal_set_is_formattable(bool value);
  public:

  // optional bool is_media_available = 11;
  bool has_is_media_available() const;
  private:
  bool _internal_has_is_media_available() const;
  public:
  void clear_is_media_available();
  bool is_media_available() const;
  void set_is_media_available(bool value);
  private:
  bool _internal_is_media_available() const;
  void _internal_set_is_media_available(bool value);
  public:

  // optional .EStorageFormatStage adopt_stage = 9 [default = EStorageFormatStage_Invalid];
  bool has_adopt_stage() const;
  private:
  bool _internal_has_adopt_stage() const;
  public:
  void clear_adopt_stage();
  ::EStorageFormatStage adopt_stage() const;
  void set_adopt_stage(::EStorageFormatStage value);
  private:
  ::EStorageFormatStage _internal_adopt_stage() const;
  void _internal_set_adopt_stage(::EStorageFormatStage value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManagerDrive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int media_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes_;
  bool is_ejectable_;
  bool is_unformatted_;
  bool is_formattable_;
  bool is_media_available_;
  int adopt_stage_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManagerBlockDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManagerBlockDevice) */ {
 public:
  inline CStorageDeviceManagerBlockDevice() : CStorageDeviceManagerBlockDevice(nullptr) {}
  virtual ~CStorageDeviceManagerBlockDevice();
  explicit constexpr CStorageDeviceManagerBlockDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManagerBlockDevice(const CStorageDeviceManagerBlockDevice& from);
  CStorageDeviceManagerBlockDevice(CStorageDeviceManagerBlockDevice&& from) noexcept
    : CStorageDeviceManagerBlockDevice() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManagerBlockDevice& operator=(const CStorageDeviceManagerBlockDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManagerBlockDevice& operator=(CStorageDeviceManagerBlockDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManagerBlockDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManagerBlockDevice* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManagerBlockDevice*>(
               &_CStorageDeviceManagerBlockDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CStorageDeviceManagerBlockDevice& a, CStorageDeviceManagerBlockDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManagerBlockDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManagerBlockDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManagerBlockDevice* New() const final {
    return CreateMaybeMessage<CStorageDeviceManagerBlockDevice>(nullptr);
  }

  CStorageDeviceManagerBlockDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManagerBlockDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManagerBlockDevice& from);
  void MergeFrom(const CStorageDeviceManagerBlockDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManagerBlockDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManagerBlockDevice";
  }
  protected:
  explicit CStorageDeviceManagerBlockDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountPathsFieldNumber = 12,
    kPathFieldNumber = 3,
    kFriendlyPathFieldNumber = 4,
    kLabelFieldNumber = 5,
    kIdFieldNumber = 1,
    kDriveIdFieldNumber = 2,
    kSizeBytesFieldNumber = 6,
    kIsFormattableFieldNumber = 7,
    kIsReadOnlyFieldNumber = 8,
    kIsRootDeviceFieldNumber = 9,
    kIsUnmountingFieldNumber = 13,
    kContentTypeFieldNumber = 10,
    kFilesystemTypeFieldNumber = 11,
  };
  // repeated string mount_paths = 12;
  int mount_paths_size() const;
  private:
  int _internal_mount_paths_size() const;
  public:
  void clear_mount_paths();
  const std::string& mount_paths(int index) const;
  std::string* mutable_mount_paths(int index);
  void set_mount_paths(int index, const std::string& value);
  void set_mount_paths(int index, std::string&& value);
  void set_mount_paths(int index, const char* value);
  void set_mount_paths(int index, const char* value, size_t size);
  std::string* add_mount_paths();
  void add_mount_paths(const std::string& value);
  void add_mount_paths(std::string&& value);
  void add_mount_paths(const char* value);
  void add_mount_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mount_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mount_paths();
  private:
  const std::string& _internal_mount_paths(int index) const;
  std::string* _internal_add_mount_paths();
  public:

  // optional string path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string friendly_path = 4;
  bool has_friendly_path() const;
  private:
  bool _internal_has_friendly_path() const;
  public:
  void clear_friendly_path();
  const std::string& friendly_path() const;
  void set_friendly_path(const std::string& value);
  void set_friendly_path(std::string&& value);
  void set_friendly_path(const char* value);
  void set_friendly_path(const char* value, size_t size);
  std::string* mutable_friendly_path();
  std::string* release_friendly_path();
  void set_allocated_friendly_path(std::string* friendly_path);
  private:
  const std::string& _internal_friendly_path() const;
  void _internal_set_friendly_path(const std::string& value);
  std::string* _internal_mutable_friendly_path();
  public:

  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 drive_id = 2 [default = 0];
  bool has_drive_id() const;
  private:
  bool _internal_has_drive_id() const;
  public:
  void clear_drive_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id() const;
  void set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drive_id() const;
  void _internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 size_bytes = 6;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size_bytes() const;
  void _internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_formattable = 7;
  bool has_is_formattable() const;
  private:
  bool _internal_has_is_formattable() const;
  public:
  void clear_is_formattable();
  bool is_formattable() const;
  void set_is_formattable(bool value);
  private:
  bool _internal_is_formattable() const;
  void _internal_set_is_formattable(bool value);
  public:

  // optional bool is_read_only = 8;
  bool has_is_read_only() const;
  private:
  bool _internal_has_is_read_only() const;
  public:
  void clear_is_read_only();
  bool is_read_only() const;
  void set_is_read_only(bool value);
  private:
  bool _internal_is_read_only() const;
  void _internal_set_is_read_only(bool value);
  public:

  // optional bool is_root_device = 9;
  bool has_is_root_device() const;
  private:
  bool _internal_has_is_root_device() const;
  public:
  void clear_is_root_device();
  bool is_root_device() const;
  void set_is_root_device(bool value);
  private:
  bool _internal_is_root_device() const;
  void _internal_set_is_root_device(bool value);
  public:

  // optional bool is_unmounting = 13;
  bool has_is_unmounting() const;
  private:
  bool _internal_has_is_unmounting() const;
  public:
  void clear_is_unmounting();
  bool is_unmounting() const;
  void set_is_unmounting(bool value);
  private:
  bool _internal_is_unmounting() const;
  void _internal_set_is_unmounting(bool value);
  public:

  // optional .EStorageBlockContentType content_type = 10 [default = EStorageBlockContentType_Invalid];
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  ::EStorageBlockContentType content_type() const;
  void set_content_type(::EStorageBlockContentType value);
  private:
  ::EStorageBlockContentType _internal_content_type() const;
  void _internal_set_content_type(::EStorageBlockContentType value);
  public:

  // optional .EStorageBlockFileSystemType filesystem_type = 11 [default = EStorageBlockFileSystemType_Invalid];
  bool has_filesystem_type() const;
  private:
  bool _internal_has_filesystem_type() const;
  public:
  void clear_filesystem_type();
  ::EStorageBlockFileSystemType filesystem_type() const;
  void set_filesystem_type(::EStorageBlockFileSystemType value);
  private:
  ::EStorageBlockFileSystemType _internal_filesystem_type() const;
  void _internal_set_filesystem_type(::EStorageBlockFileSystemType value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManagerBlockDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mount_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes_;
  bool is_formattable_;
  bool is_read_only_;
  bool is_root_device_;
  bool is_unmounting_;
  int content_type_;
  int filesystem_type_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManagerState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManagerState) */ {
 public:
  inline CStorageDeviceManagerState() : CStorageDeviceManagerState(nullptr) {}
  virtual ~CStorageDeviceManagerState();
  explicit constexpr CStorageDeviceManagerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManagerState(const CStorageDeviceManagerState& from);
  CStorageDeviceManagerState(CStorageDeviceManagerState&& from) noexcept
    : CStorageDeviceManagerState() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManagerState& operator=(const CStorageDeviceManagerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManagerState& operator=(CStorageDeviceManagerState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManagerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManagerState* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManagerState*>(
               &_CStorageDeviceManagerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CStorageDeviceManagerState& a, CStorageDeviceManagerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManagerState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManagerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManagerState* New() const final {
    return CreateMaybeMessage<CStorageDeviceManagerState>(nullptr);
  }

  CStorageDeviceManagerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManagerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManagerState& from);
  void MergeFrom(const CStorageDeviceManagerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManagerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManagerState";
  }
  protected:
  explicit CStorageDeviceManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivesFieldNumber = 1,
    kBlocdevicesFieldNumber = 2,
    kIsUnmountSupportedFieldNumber = 3,
    kIsTrimSupportedFieldNumber = 4,
    kIsTrimRunningFieldNumber = 5,
    kIsAdoptSupportedFieldNumber = 6,
  };
  // repeated .CStorageDeviceManagerDrive drives = 1;
  int drives_size() const;
  private:
  int _internal_drives_size() const;
  public:
  void clear_drives();
  ::CStorageDeviceManagerDrive* mutable_drives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerDrive >*
      mutable_drives();
  private:
  const ::CStorageDeviceManagerDrive& _internal_drives(int index) const;
  ::CStorageDeviceManagerDrive* _internal_add_drives();
  public:
  const ::CStorageDeviceManagerDrive& drives(int index) const;
  ::CStorageDeviceManagerDrive* add_drives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerDrive >&
      drives() const;

  // repeated .CStorageDeviceManagerBlockDevice blocdevices = 2;
  int blocdevices_size() const;
  private:
  int _internal_blocdevices_size() const;
  public:
  void clear_blocdevices();
  ::CStorageDeviceManagerBlockDevice* mutable_blocdevices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerBlockDevice >*
      mutable_blocdevices();
  private:
  const ::CStorageDeviceManagerBlockDevice& _internal_blocdevices(int index) const;
  ::CStorageDeviceManagerBlockDevice* _internal_add_blocdevices();
  public:
  const ::CStorageDeviceManagerBlockDevice& blocdevices(int index) const;
  ::CStorageDeviceManagerBlockDevice* add_blocdevices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerBlockDevice >&
      blocdevices() const;

  // optional bool is_unmount_supported = 3;
  bool has_is_unmount_supported() const;
  private:
  bool _internal_has_is_unmount_supported() const;
  public:
  void clear_is_unmount_supported();
  bool is_unmount_supported() const;
  void set_is_unmount_supported(bool value);
  private:
  bool _internal_is_unmount_supported() const;
  void _internal_set_is_unmount_supported(bool value);
  public:

  // optional bool is_trim_supported = 4;
  bool has_is_trim_supported() const;
  private:
  bool _internal_has_is_trim_supported() const;
  public:
  void clear_is_trim_supported();
  bool is_trim_supported() const;
  void set_is_trim_supported(bool value);
  private:
  bool _internal_is_trim_supported() const;
  void _internal_set_is_trim_supported(bool value);
  public:

  // optional bool is_trim_running = 5;
  bool has_is_trim_running() const;
  private:
  bool _internal_has_is_trim_running() const;
  public:
  void clear_is_trim_running();
  bool is_trim_running() const;
  void set_is_trim_running(bool value);
  private:
  bool _internal_is_trim_running() const;
  void _internal_set_is_trim_running(bool value);
  public:

  // optional bool is_adopt_supported = 6;
  bool has_is_adopt_supported() const;
  private:
  bool _internal_has_is_adopt_supported() const;
  public:
  void clear_is_adopt_supported();
  bool is_adopt_supported() const;
  void set_is_adopt_supported(bool value);
  private:
  bool _internal_is_adopt_supported() const;
  void _internal_set_is_adopt_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManagerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerDrive > drives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerBlockDevice > blocdevices_;
  bool is_unmount_supported_;
  bool is_trim_supported_;
  bool is_trim_running_;
  bool is_adopt_supported_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_GetState_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_GetState_Request) */ {
 public:
  inline CStorageDeviceManager_GetState_Request() : CStorageDeviceManager_GetState_Request(nullptr) {}
  virtual ~CStorageDeviceManager_GetState_Request();
  explicit constexpr CStorageDeviceManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_GetState_Request(const CStorageDeviceManager_GetState_Request& from);
  CStorageDeviceManager_GetState_Request(CStorageDeviceManager_GetState_Request&& from) noexcept
    : CStorageDeviceManager_GetState_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_GetState_Request& operator=(const CStorageDeviceManager_GetState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_GetState_Request& operator=(CStorageDeviceManager_GetState_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_GetState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_GetState_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_GetState_Request*>(
               &_CStorageDeviceManager_GetState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CStorageDeviceManager_GetState_Request& a, CStorageDeviceManager_GetState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_GetState_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_GetState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_GetState_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_GetState_Request>(nullptr);
  }

  CStorageDeviceManager_GetState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_GetState_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_GetState_Request& from);
  void MergeFrom(const CStorageDeviceManager_GetState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_GetState_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_GetState_Request";
  }
  protected:
  explicit CStorageDeviceManager_GetState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_GetState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_GetState_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_GetState_Response) */ {
 public:
  inline CStorageDeviceManager_GetState_Response() : CStorageDeviceManager_GetState_Response(nullptr) {}
  virtual ~CStorageDeviceManager_GetState_Response();
  explicit constexpr CStorageDeviceManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_GetState_Response(const CStorageDeviceManager_GetState_Response& from);
  CStorageDeviceManager_GetState_Response(CStorageDeviceManager_GetState_Response&& from) noexcept
    : CStorageDeviceManager_GetState_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_GetState_Response& operator=(const CStorageDeviceManager_GetState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_GetState_Response& operator=(CStorageDeviceManager_GetState_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_GetState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_GetState_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_GetState_Response*>(
               &_CStorageDeviceManager_GetState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CStorageDeviceManager_GetState_Response& a, CStorageDeviceManager_GetState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_GetState_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_GetState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_GetState_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_GetState_Response>(nullptr);
  }

  CStorageDeviceManager_GetState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_GetState_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_GetState_Response& from);
  void MergeFrom(const CStorageDeviceManager_GetState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_GetState_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_GetState_Response";
  }
  protected:
  explicit CStorageDeviceManager_GetState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .CStorageDeviceManagerState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::CStorageDeviceManagerState& state() const;
  ::CStorageDeviceManagerState* release_state();
  ::CStorageDeviceManagerState* mutable_state();
  void set_allocated_state(::CStorageDeviceManagerState* state);
  private:
  const ::CStorageDeviceManagerState& _internal_state() const;
  ::CStorageDeviceManagerState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::CStorageDeviceManagerState* state);
  ::CStorageDeviceManagerState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_GetState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStorageDeviceManagerState* state_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_StateChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_StateChanged_Notification) */ {
 public:
  inline CStorageDeviceManager_StateChanged_Notification() : CStorageDeviceManager_StateChanged_Notification(nullptr) {}
  virtual ~CStorageDeviceManager_StateChanged_Notification();
  explicit constexpr CStorageDeviceManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_StateChanged_Notification(const CStorageDeviceManager_StateChanged_Notification& from);
  CStorageDeviceManager_StateChanged_Notification(CStorageDeviceManager_StateChanged_Notification&& from) noexcept
    : CStorageDeviceManager_StateChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_StateChanged_Notification& operator=(const CStorageDeviceManager_StateChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_StateChanged_Notification& operator=(CStorageDeviceManager_StateChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_StateChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_StateChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_StateChanged_Notification*>(
               &_CStorageDeviceManager_StateChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CStorageDeviceManager_StateChanged_Notification& a, CStorageDeviceManager_StateChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_StateChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_StateChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_StateChanged_Notification* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_StateChanged_Notification>(nullptr);
  }

  CStorageDeviceManager_StateChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_StateChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_StateChanged_Notification& from);
  void MergeFrom(const CStorageDeviceManager_StateChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_StateChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_StateChanged_Notification";
  }
  protected:
  explicit CStorageDeviceManager_StateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_StateChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Eject_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Eject_Request) */ {
 public:
  inline CStorageDeviceManager_Eject_Request() : CStorageDeviceManager_Eject_Request(nullptr) {}
  virtual ~CStorageDeviceManager_Eject_Request();
  explicit constexpr CStorageDeviceManager_Eject_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Eject_Request(const CStorageDeviceManager_Eject_Request& from);
  CStorageDeviceManager_Eject_Request(CStorageDeviceManager_Eject_Request&& from) noexcept
    : CStorageDeviceManager_Eject_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Eject_Request& operator=(const CStorageDeviceManager_Eject_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Eject_Request& operator=(CStorageDeviceManager_Eject_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Eject_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Eject_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Eject_Request*>(
               &_CStorageDeviceManager_Eject_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CStorageDeviceManager_Eject_Request& a, CStorageDeviceManager_Eject_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Eject_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Eject_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Eject_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Eject_Request>(nullptr);
  }

  CStorageDeviceManager_Eject_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Eject_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Eject_Request& from);
  void MergeFrom(const CStorageDeviceManager_Eject_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Eject_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Eject_Request";
  }
  protected:
  explicit CStorageDeviceManager_Eject_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveIdFieldNumber = 1,
  };
  // optional uint32 drive_id = 1;
  bool has_drive_id() const;
  private:
  bool _internal_has_drive_id() const;
  public:
  void clear_drive_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id() const;
  void set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drive_id() const;
  void _internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Eject_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Eject_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Eject_Response) */ {
 public:
  inline CStorageDeviceManager_Eject_Response() : CStorageDeviceManager_Eject_Response(nullptr) {}
  virtual ~CStorageDeviceManager_Eject_Response();
  explicit constexpr CStorageDeviceManager_Eject_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Eject_Response(const CStorageDeviceManager_Eject_Response& from);
  CStorageDeviceManager_Eject_Response(CStorageDeviceManager_Eject_Response&& from) noexcept
    : CStorageDeviceManager_Eject_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Eject_Response& operator=(const CStorageDeviceManager_Eject_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Eject_Response& operator=(CStorageDeviceManager_Eject_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Eject_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Eject_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Eject_Response*>(
               &_CStorageDeviceManager_Eject_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CStorageDeviceManager_Eject_Response& a, CStorageDeviceManager_Eject_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Eject_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Eject_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Eject_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Eject_Response>(nullptr);
  }

  CStorageDeviceManager_Eject_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Eject_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Eject_Response& from);
  void MergeFrom(const CStorageDeviceManager_Eject_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Eject_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Eject_Response";
  }
  protected:
  explicit CStorageDeviceManager_Eject_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Eject_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Adopt_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Adopt_Request) */ {
 public:
  inline CStorageDeviceManager_Adopt_Request() : CStorageDeviceManager_Adopt_Request(nullptr) {}
  virtual ~CStorageDeviceManager_Adopt_Request();
  explicit constexpr CStorageDeviceManager_Adopt_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Adopt_Request(const CStorageDeviceManager_Adopt_Request& from);
  CStorageDeviceManager_Adopt_Request(CStorageDeviceManager_Adopt_Request&& from) noexcept
    : CStorageDeviceManager_Adopt_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Adopt_Request& operator=(const CStorageDeviceManager_Adopt_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Adopt_Request& operator=(CStorageDeviceManager_Adopt_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Adopt_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Adopt_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Adopt_Request*>(
               &_CStorageDeviceManager_Adopt_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CStorageDeviceManager_Adopt_Request& a, CStorageDeviceManager_Adopt_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Adopt_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Adopt_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Adopt_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Adopt_Request>(nullptr);
  }

  CStorageDeviceManager_Adopt_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Adopt_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Adopt_Request& from);
  void MergeFrom(const CStorageDeviceManager_Adopt_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Adopt_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Adopt_Request";
  }
  protected:
  explicit CStorageDeviceManager_Adopt_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kDriveIdFieldNumber = 1,
  };
  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional uint32 drive_id = 1;
  bool has_drive_id() const;
  private:
  bool _internal_has_drive_id() const;
  public:
  void clear_drive_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id() const;
  void set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drive_id() const;
  void _internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Adopt_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drive_id_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Adopt_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Adopt_Response) */ {
 public:
  inline CStorageDeviceManager_Adopt_Response() : CStorageDeviceManager_Adopt_Response(nullptr) {}
  virtual ~CStorageDeviceManager_Adopt_Response();
  explicit constexpr CStorageDeviceManager_Adopt_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Adopt_Response(const CStorageDeviceManager_Adopt_Response& from);
  CStorageDeviceManager_Adopt_Response(CStorageDeviceManager_Adopt_Response&& from) noexcept
    : CStorageDeviceManager_Adopt_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Adopt_Response& operator=(const CStorageDeviceManager_Adopt_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Adopt_Response& operator=(CStorageDeviceManager_Adopt_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Adopt_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Adopt_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Adopt_Response*>(
               &_CStorageDeviceManager_Adopt_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CStorageDeviceManager_Adopt_Response& a, CStorageDeviceManager_Adopt_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Adopt_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Adopt_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Adopt_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Adopt_Response>(nullptr);
  }

  CStorageDeviceManager_Adopt_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Adopt_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Adopt_Response& from);
  void MergeFrom(const CStorageDeviceManager_Adopt_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Adopt_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Adopt_Response";
  }
  protected:
  explicit CStorageDeviceManager_Adopt_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Adopt_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Format_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Format_Request) */ {
 public:
  inline CStorageDeviceManager_Format_Request() : CStorageDeviceManager_Format_Request(nullptr) {}
  virtual ~CStorageDeviceManager_Format_Request();
  explicit constexpr CStorageDeviceManager_Format_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Format_Request(const CStorageDeviceManager_Format_Request& from);
  CStorageDeviceManager_Format_Request(CStorageDeviceManager_Format_Request&& from) noexcept
    : CStorageDeviceManager_Format_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Format_Request& operator=(const CStorageDeviceManager_Format_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Format_Request& operator=(CStorageDeviceManager_Format_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Format_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Format_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Format_Request*>(
               &_CStorageDeviceManager_Format_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CStorageDeviceManager_Format_Request& a, CStorageDeviceManager_Format_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Format_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Format_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Format_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Format_Request>(nullptr);
  }

  CStorageDeviceManager_Format_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Format_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Format_Request& from);
  void MergeFrom(const CStorageDeviceManager_Format_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Format_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Format_Request";
  }
  protected:
  explicit CStorageDeviceManager_Format_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocdeviceIdFieldNumber = 1,
  };
  // optional uint32 blocdevice_id = 1;
  bool has_blocdevice_id() const;
  private:
  bool _internal_has_blocdevice_id() const;
  public:
  void clear_blocdevice_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blocdevice_id() const;
  void set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blocdevice_id() const;
  void _internal_set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Format_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blocdevice_id_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Format_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Format_Response) */ {
 public:
  inline CStorageDeviceManager_Format_Response() : CStorageDeviceManager_Format_Response(nullptr) {}
  virtual ~CStorageDeviceManager_Format_Response();
  explicit constexpr CStorageDeviceManager_Format_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Format_Response(const CStorageDeviceManager_Format_Response& from);
  CStorageDeviceManager_Format_Response(CStorageDeviceManager_Format_Response&& from) noexcept
    : CStorageDeviceManager_Format_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Format_Response& operator=(const CStorageDeviceManager_Format_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Format_Response& operator=(CStorageDeviceManager_Format_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Format_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Format_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Format_Response*>(
               &_CStorageDeviceManager_Format_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CStorageDeviceManager_Format_Response& a, CStorageDeviceManager_Format_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Format_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Format_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Format_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Format_Response>(nullptr);
  }

  CStorageDeviceManager_Format_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Format_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Format_Response& from);
  void MergeFrom(const CStorageDeviceManager_Format_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Format_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Format_Response";
  }
  protected:
  explicit CStorageDeviceManager_Format_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Format_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Unmount_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Unmount_Request) */ {
 public:
  inline CStorageDeviceManager_Unmount_Request() : CStorageDeviceManager_Unmount_Request(nullptr) {}
  virtual ~CStorageDeviceManager_Unmount_Request();
  explicit constexpr CStorageDeviceManager_Unmount_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Unmount_Request(const CStorageDeviceManager_Unmount_Request& from);
  CStorageDeviceManager_Unmount_Request(CStorageDeviceManager_Unmount_Request&& from) noexcept
    : CStorageDeviceManager_Unmount_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Unmount_Request& operator=(const CStorageDeviceManager_Unmount_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Unmount_Request& operator=(CStorageDeviceManager_Unmount_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Unmount_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Unmount_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Unmount_Request*>(
               &_CStorageDeviceManager_Unmount_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CStorageDeviceManager_Unmount_Request& a, CStorageDeviceManager_Unmount_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Unmount_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Unmount_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Unmount_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Unmount_Request>(nullptr);
  }

  CStorageDeviceManager_Unmount_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Unmount_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Unmount_Request& from);
  void MergeFrom(const CStorageDeviceManager_Unmount_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Unmount_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Unmount_Request";
  }
  protected:
  explicit CStorageDeviceManager_Unmount_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocdeviceIdFieldNumber = 1,
  };
  // optional uint32 blocdevice_id = 1;
  bool has_blocdevice_id() const;
  private:
  bool _internal_has_blocdevice_id() const;
  public:
  void clear_blocdevice_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blocdevice_id() const;
  void set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blocdevice_id() const;
  void _internal_set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Unmount_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blocdevice_id_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_Unmount_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_Unmount_Response) */ {
 public:
  inline CStorageDeviceManager_Unmount_Response() : CStorageDeviceManager_Unmount_Response(nullptr) {}
  virtual ~CStorageDeviceManager_Unmount_Response();
  explicit constexpr CStorageDeviceManager_Unmount_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_Unmount_Response(const CStorageDeviceManager_Unmount_Response& from);
  CStorageDeviceManager_Unmount_Response(CStorageDeviceManager_Unmount_Response&& from) noexcept
    : CStorageDeviceManager_Unmount_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_Unmount_Response& operator=(const CStorageDeviceManager_Unmount_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_Unmount_Response& operator=(CStorageDeviceManager_Unmount_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_Unmount_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_Unmount_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_Unmount_Response*>(
               &_CStorageDeviceManager_Unmount_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CStorageDeviceManager_Unmount_Response& a, CStorageDeviceManager_Unmount_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_Unmount_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_Unmount_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_Unmount_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_Unmount_Response>(nullptr);
  }

  CStorageDeviceManager_Unmount_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_Unmount_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_Unmount_Response& from);
  void MergeFrom(const CStorageDeviceManager_Unmount_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_Unmount_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_Unmount_Response";
  }
  protected:
  explicit CStorageDeviceManager_Unmount_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_Unmount_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_TrimAll_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_TrimAll_Request) */ {
 public:
  inline CStorageDeviceManager_TrimAll_Request() : CStorageDeviceManager_TrimAll_Request(nullptr) {}
  virtual ~CStorageDeviceManager_TrimAll_Request();
  explicit constexpr CStorageDeviceManager_TrimAll_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_TrimAll_Request(const CStorageDeviceManager_TrimAll_Request& from);
  CStorageDeviceManager_TrimAll_Request(CStorageDeviceManager_TrimAll_Request&& from) noexcept
    : CStorageDeviceManager_TrimAll_Request() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_TrimAll_Request& operator=(const CStorageDeviceManager_TrimAll_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_TrimAll_Request& operator=(CStorageDeviceManager_TrimAll_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_TrimAll_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_TrimAll_Request* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_TrimAll_Request*>(
               &_CStorageDeviceManager_TrimAll_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CStorageDeviceManager_TrimAll_Request& a, CStorageDeviceManager_TrimAll_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_TrimAll_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_TrimAll_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_TrimAll_Request* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_TrimAll_Request>(nullptr);
  }

  CStorageDeviceManager_TrimAll_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_TrimAll_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_TrimAll_Request& from);
  void MergeFrom(const CStorageDeviceManager_TrimAll_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_TrimAll_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_TrimAll_Request";
  }
  protected:
  explicit CStorageDeviceManager_TrimAll_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_TrimAll_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// -------------------------------------------------------------------

class CStorageDeviceManager_TrimAll_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorageDeviceManager_TrimAll_Response) */ {
 public:
  inline CStorageDeviceManager_TrimAll_Response() : CStorageDeviceManager_TrimAll_Response(nullptr) {}
  virtual ~CStorageDeviceManager_TrimAll_Response();
  explicit constexpr CStorageDeviceManager_TrimAll_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorageDeviceManager_TrimAll_Response(const CStorageDeviceManager_TrimAll_Response& from);
  CStorageDeviceManager_TrimAll_Response(CStorageDeviceManager_TrimAll_Response&& from) noexcept
    : CStorageDeviceManager_TrimAll_Response() {
    *this = ::std::move(from);
  }

  inline CStorageDeviceManager_TrimAll_Response& operator=(const CStorageDeviceManager_TrimAll_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorageDeviceManager_TrimAll_Response& operator=(CStorageDeviceManager_TrimAll_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CStorageDeviceManager_TrimAll_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorageDeviceManager_TrimAll_Response* internal_default_instance() {
    return reinterpret_cast<const CStorageDeviceManager_TrimAll_Response*>(
               &_CStorageDeviceManager_TrimAll_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CStorageDeviceManager_TrimAll_Response& a, CStorageDeviceManager_TrimAll_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorageDeviceManager_TrimAll_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorageDeviceManager_TrimAll_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CStorageDeviceManager_TrimAll_Response* New() const final {
    return CreateMaybeMessage<CStorageDeviceManager_TrimAll_Response>(nullptr);
  }

  CStorageDeviceManager_TrimAll_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CStorageDeviceManager_TrimAll_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CStorageDeviceManager_TrimAll_Response& from);
  void MergeFrom(const CStorageDeviceManager_TrimAll_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorageDeviceManager_TrimAll_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorageDeviceManager_TrimAll_Response";
  }
  protected:
  explicit CStorageDeviceManager_TrimAll_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_webuimessages_5fstoragedevicemanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStorageDeviceManager_TrimAll_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webuimessages_5fstoragedevicemanager_2eproto;
};
// ===================================================================

class StorageDeviceManager_Stub;

class StorageDeviceManager : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StorageDeviceManager() {};
 public:
  virtual ~StorageDeviceManager();

  typedef StorageDeviceManager_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void IsServiceAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_IsServiceAvailable_Request* request,
                       ::CStorageDeviceManager_IsServiceAvailable_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_GetState_Request* request,
                       ::CStorageDeviceManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Adopt(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Adopt_Request* request,
                       ::CStorageDeviceManager_Adopt_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Eject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Eject_Request* request,
                       ::CStorageDeviceManager_Eject_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Format(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Format_Request* request,
                       ::CStorageDeviceManager_Format_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Unmount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Unmount_Request* request,
                       ::CStorageDeviceManager_Unmount_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void TrimAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_TrimAll_Request* request,
                       ::CStorageDeviceManager_TrimAll_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageDeviceManager);
};

class StorageDeviceManager_Stub : public StorageDeviceManager {
 public:
  StorageDeviceManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  StorageDeviceManager_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~StorageDeviceManager_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements StorageDeviceManager ------------------------------------------

  void IsServiceAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_IsServiceAvailable_Request* request,
                       ::CStorageDeviceManager_IsServiceAvailable_Response* response,
                       ::google::protobuf::Closure* done);
  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_GetState_Request* request,
                       ::CStorageDeviceManager_GetState_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_StateChanged_Notification* request,
                       ::WebUINoResponse* response,
                       ::google::protobuf::Closure* done);
  void Adopt(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Adopt_Request* request,
                       ::CStorageDeviceManager_Adopt_Response* response,
                       ::google::protobuf::Closure* done);
  void Eject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Eject_Request* request,
                       ::CStorageDeviceManager_Eject_Response* response,
                       ::google::protobuf::Closure* done);
  void Format(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Format_Request* request,
                       ::CStorageDeviceManager_Format_Response* response,
                       ::google::protobuf::Closure* done);
  void Unmount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_Unmount_Request* request,
                       ::CStorageDeviceManager_Unmount_Response* response,
                       ::google::protobuf::Closure* done);
  void TrimAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStorageDeviceManager_TrimAll_Request* request,
                       ::CStorageDeviceManager_TrimAll_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageDeviceManager_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CStorageDeviceManager_IsServiceAvailable_Request

// -------------------------------------------------------------------

// CStorageDeviceManager_IsServiceAvailable_Response

// optional bool is_available = 1;
inline bool CStorageDeviceManager_IsServiceAvailable_Response::_internal_has_is_available() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManager_IsServiceAvailable_Response::has_is_available() const {
  return _internal_has_is_available();
}
inline void CStorageDeviceManager_IsServiceAvailable_Response::clear_is_available() {
  is_available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CStorageDeviceManager_IsServiceAvailable_Response::_internal_is_available() const {
  return is_available_;
}
inline bool CStorageDeviceManager_IsServiceAvailable_Response::is_available() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_IsServiceAvailable_Response.is_available)
  return _internal_is_available();
}
inline void CStorageDeviceManager_IsServiceAvailable_Response::_internal_set_is_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_available_ = value;
}
inline void CStorageDeviceManager_IsServiceAvailable_Response::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_IsServiceAvailable_Response.is_available)
}

// -------------------------------------------------------------------

// CStorageDeviceManagerDrive

// optional uint32 id = 1 [default = 0];
inline bool CStorageDeviceManagerDrive::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_id() const {
  return _internal_has_id();
}
inline void CStorageDeviceManagerDrive::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerDrive::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerDrive::id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.id)
  return _internal_id();
}
inline void CStorageDeviceManagerDrive::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CStorageDeviceManagerDrive::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.id)
}

// optional string model = 2;
inline bool CStorageDeviceManagerDrive::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_model() const {
  return _internal_has_model();
}
inline void CStorageDeviceManagerDrive::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorageDeviceManagerDrive::model() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.model)
  return _internal_model();
}
inline void CStorageDeviceManagerDrive::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.model)
}
inline std::string* CStorageDeviceManagerDrive::mutable_model() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerDrive.model)
  return _internal_mutable_model();
}
inline const std::string& CStorageDeviceManagerDrive::_internal_model() const {
  return model_.Get();
}
inline void CStorageDeviceManagerDrive::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerDrive::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerDrive.model)
}
inline void CStorageDeviceManagerDrive::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerDrive.model)
}
inline void CStorageDeviceManagerDrive::set_model(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerDrive.model)
}
inline std::string* CStorageDeviceManagerDrive::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerDrive::release_model() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerDrive.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerDrive::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerDrive.model)
}

// optional string vendor = 3;
inline bool CStorageDeviceManagerDrive::_internal_has_vendor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_vendor() const {
  return _internal_has_vendor();
}
inline void CStorageDeviceManagerDrive::clear_vendor() {
  vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStorageDeviceManagerDrive::vendor() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.vendor)
  return _internal_vendor();
}
inline void CStorageDeviceManagerDrive::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.vendor)
}
inline std::string* CStorageDeviceManagerDrive::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerDrive.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& CStorageDeviceManagerDrive::_internal_vendor() const {
  return vendor_.Get();
}
inline void CStorageDeviceManagerDrive::_internal_set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerDrive::set_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerDrive.vendor)
}
inline void CStorageDeviceManagerDrive::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerDrive.vendor)
}
inline void CStorageDeviceManagerDrive::set_vendor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerDrive.vendor)
}
inline std::string* CStorageDeviceManagerDrive::_internal_mutable_vendor() {
  _has_bits_[0] |= 0x00000002u;
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerDrive::release_vendor() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerDrive.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vendor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerDrive::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerDrive.vendor)
}

// optional string serial = 4;
inline bool CStorageDeviceManagerDrive::_internal_has_serial() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_serial() const {
  return _internal_has_serial();
}
inline void CStorageDeviceManagerDrive::clear_serial() {
  serial_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CStorageDeviceManagerDrive::serial() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.serial)
  return _internal_serial();
}
inline void CStorageDeviceManagerDrive::set_serial(const std::string& value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.serial)
}
inline std::string* CStorageDeviceManagerDrive::mutable_serial() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerDrive.serial)
  return _internal_mutable_serial();
}
inline const std::string& CStorageDeviceManagerDrive::_internal_serial() const {
  return serial_.Get();
}
inline void CStorageDeviceManagerDrive::_internal_set_serial(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerDrive::set_serial(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  serial_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerDrive.serial)
}
inline void CStorageDeviceManagerDrive::set_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerDrive.serial)
}
inline void CStorageDeviceManagerDrive::set_serial(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerDrive.serial)
}
inline std::string* CStorageDeviceManagerDrive::_internal_mutable_serial() {
  _has_bits_[0] |= 0x00000004u;
  return serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerDrive::release_serial() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerDrive.serial)
  if (!_internal_has_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return serial_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerDrive::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerDrive.serial)
}

// optional bool is_ejectable = 5;
inline bool CStorageDeviceManagerDrive::_internal_has_is_ejectable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_is_ejectable() const {
  return _internal_has_is_ejectable();
}
inline void CStorageDeviceManagerDrive::clear_is_ejectable() {
  is_ejectable_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CStorageDeviceManagerDrive::_internal_is_ejectable() const {
  return is_ejectable_;
}
inline bool CStorageDeviceManagerDrive::is_ejectable() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.is_ejectable)
  return _internal_is_ejectable();
}
inline void CStorageDeviceManagerDrive::_internal_set_is_ejectable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_ejectable_ = value;
}
inline void CStorageDeviceManagerDrive::set_is_ejectable(bool value) {
  _internal_set_is_ejectable(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.is_ejectable)
}

// optional uint64 size_bytes = 6;
inline bool CStorageDeviceManagerDrive::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void CStorageDeviceManagerDrive::clear_size_bytes() {
  size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CStorageDeviceManagerDrive::_internal_size_bytes() const {
  return size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CStorageDeviceManagerDrive::size_bytes() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.size_bytes)
  return _internal_size_bytes();
}
inline void CStorageDeviceManagerDrive::_internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  size_bytes_ = value;
}
inline void CStorageDeviceManagerDrive::set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.size_bytes)
}

// optional .EStorageDriveMediaType media_type = 7 [default = EStorageDriveMediaType_Invalid];
inline bool CStorageDeviceManagerDrive::_internal_has_media_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_media_type() const {
  return _internal_has_media_type();
}
inline void CStorageDeviceManagerDrive::clear_media_type() {
  media_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EStorageDriveMediaType CStorageDeviceManagerDrive::_internal_media_type() const {
  return static_cast< ::EStorageDriveMediaType >(media_type_);
}
inline ::EStorageDriveMediaType CStorageDeviceManagerDrive::media_type() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.media_type)
  return _internal_media_type();
}
inline void CStorageDeviceManagerDrive::_internal_set_media_type(::EStorageDriveMediaType value) {
  assert(::EStorageDriveMediaType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  media_type_ = value;
}
inline void CStorageDeviceManagerDrive::set_media_type(::EStorageDriveMediaType value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.media_type)
}

// optional bool is_unformatted = 8;
inline bool CStorageDeviceManagerDrive::_internal_has_is_unformatted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_is_unformatted() const {
  return _internal_has_is_unformatted();
}
inline void CStorageDeviceManagerDrive::clear_is_unformatted() {
  is_unformatted_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CStorageDeviceManagerDrive::_internal_is_unformatted() const {
  return is_unformatted_;
}
inline bool CStorageDeviceManagerDrive::is_unformatted() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.is_unformatted)
  return _internal_is_unformatted();
}
inline void CStorageDeviceManagerDrive::_internal_set_is_unformatted(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_unformatted_ = value;
}
inline void CStorageDeviceManagerDrive::set_is_unformatted(bool value) {
  _internal_set_is_unformatted(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.is_unformatted)
}

// optional .EStorageFormatStage adopt_stage = 9 [default = EStorageFormatStage_Invalid];
inline bool CStorageDeviceManagerDrive::_internal_has_adopt_stage() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_adopt_stage() const {
  return _internal_has_adopt_stage();
}
inline void CStorageDeviceManagerDrive::clear_adopt_stage() {
  adopt_stage_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::EStorageFormatStage CStorageDeviceManagerDrive::_internal_adopt_stage() const {
  return static_cast< ::EStorageFormatStage >(adopt_stage_);
}
inline ::EStorageFormatStage CStorageDeviceManagerDrive::adopt_stage() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.adopt_stage)
  return _internal_adopt_stage();
}
inline void CStorageDeviceManagerDrive::_internal_set_adopt_stage(::EStorageFormatStage value) {
  assert(::EStorageFormatStage_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  adopt_stage_ = value;
}
inline void CStorageDeviceManagerDrive::set_adopt_stage(::EStorageFormatStage value) {
  _internal_set_adopt_stage(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.adopt_stage)
}

// optional bool is_formattable = 10;
inline bool CStorageDeviceManagerDrive::_internal_has_is_formattable() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_is_formattable() const {
  return _internal_has_is_formattable();
}
inline void CStorageDeviceManagerDrive::clear_is_formattable() {
  is_formattable_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CStorageDeviceManagerDrive::_internal_is_formattable() const {
  return is_formattable_;
}
inline bool CStorageDeviceManagerDrive::is_formattable() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.is_formattable)
  return _internal_is_formattable();
}
inline void CStorageDeviceManagerDrive::_internal_set_is_formattable(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_formattable_ = value;
}
inline void CStorageDeviceManagerDrive::set_is_formattable(bool value) {
  _internal_set_is_formattable(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.is_formattable)
}

// optional bool is_media_available = 11;
inline bool CStorageDeviceManagerDrive::_internal_has_is_media_available() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStorageDeviceManagerDrive::has_is_media_available() const {
  return _internal_has_is_media_available();
}
inline void CStorageDeviceManagerDrive::clear_is_media_available() {
  is_media_available_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CStorageDeviceManagerDrive::_internal_is_media_available() const {
  return is_media_available_;
}
inline bool CStorageDeviceManagerDrive::is_media_available() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerDrive.is_media_available)
  return _internal_is_media_available();
}
inline void CStorageDeviceManagerDrive::_internal_set_is_media_available(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_media_available_ = value;
}
inline void CStorageDeviceManagerDrive::set_is_media_available(bool value) {
  _internal_set_is_media_available(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerDrive.is_media_available)
}

// -------------------------------------------------------------------

// CStorageDeviceManagerBlockDevice

// optional uint32 id = 1 [default = 0];
inline bool CStorageDeviceManagerBlockDevice::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_id() const {
  return _internal_has_id();
}
inline void CStorageDeviceManagerBlockDevice::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerBlockDevice::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerBlockDevice::id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.id)
  return _internal_id();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.id)
}

// optional uint32 drive_id = 2 [default = 0];
inline bool CStorageDeviceManagerBlockDevice::_internal_has_drive_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_drive_id() const {
  return _internal_has_drive_id();
}
inline void CStorageDeviceManagerBlockDevice::clear_drive_id() {
  drive_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerBlockDevice::_internal_drive_id() const {
  return drive_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManagerBlockDevice::drive_id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.drive_id)
  return _internal_drive_id();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  drive_id_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drive_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.drive_id)
}

// optional string path = 3;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_path() const {
  return _internal_has_path();
}
inline void CStorageDeviceManagerBlockDevice::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorageDeviceManagerBlockDevice::path() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.path)
  return _internal_path();
}
inline void CStorageDeviceManagerBlockDevice::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.path)
}
inline std::string* CStorageDeviceManagerBlockDevice::mutable_path() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerBlockDevice.path)
  return _internal_mutable_path();
}
inline const std::string& CStorageDeviceManagerBlockDevice::_internal_path() const {
  return path_.Get();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerBlockDevice.path)
}
inline void CStorageDeviceManagerBlockDevice::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerBlockDevice.path)
}
inline void CStorageDeviceManagerBlockDevice::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerBlockDevice.path)
}
inline std::string* CStorageDeviceManagerBlockDevice::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerBlockDevice::release_path() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerBlockDevice.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerBlockDevice.path)
}

// optional string friendly_path = 4;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_friendly_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_friendly_path() const {
  return _internal_has_friendly_path();
}
inline void CStorageDeviceManagerBlockDevice::clear_friendly_path() {
  friendly_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStorageDeviceManagerBlockDevice::friendly_path() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.friendly_path)
  return _internal_friendly_path();
}
inline void CStorageDeviceManagerBlockDevice::set_friendly_path(const std::string& value) {
  _internal_set_friendly_path(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.friendly_path)
}
inline std::string* CStorageDeviceManagerBlockDevice::mutable_friendly_path() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerBlockDevice.friendly_path)
  return _internal_mutable_friendly_path();
}
inline const std::string& CStorageDeviceManagerBlockDevice::_internal_friendly_path() const {
  return friendly_path_.Get();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_friendly_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_friendly_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  friendly_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerBlockDevice.friendly_path)
}
inline void CStorageDeviceManagerBlockDevice::set_friendly_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerBlockDevice.friendly_path)
}
inline void CStorageDeviceManagerBlockDevice::set_friendly_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerBlockDevice.friendly_path)
}
inline std::string* CStorageDeviceManagerBlockDevice::_internal_mutable_friendly_path() {
  _has_bits_[0] |= 0x00000002u;
  return friendly_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerBlockDevice::release_friendly_path() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerBlockDevice.friendly_path)
  if (!_internal_has_friendly_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return friendly_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_allocated_friendly_path(std::string* friendly_path) {
  if (friendly_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  friendly_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerBlockDevice.friendly_path)
}

// optional string label = 5;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_label() const {
  return _internal_has_label();
}
inline void CStorageDeviceManagerBlockDevice::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CStorageDeviceManagerBlockDevice::label() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.label)
  return _internal_label();
}
inline void CStorageDeviceManagerBlockDevice::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.label)
}
inline std::string* CStorageDeviceManagerBlockDevice::mutable_label() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerBlockDevice.label)
  return _internal_mutable_label();
}
inline const std::string& CStorageDeviceManagerBlockDevice::_internal_label() const {
  return label_.Get();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManagerBlockDevice.label)
}
inline void CStorageDeviceManagerBlockDevice::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerBlockDevice.label)
}
inline void CStorageDeviceManagerBlockDevice::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerBlockDevice.label)
}
inline std::string* CStorageDeviceManagerBlockDevice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManagerBlockDevice::release_label() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManagerBlockDevice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManagerBlockDevice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManagerBlockDevice.label)
}

// optional uint64 size_bytes = 6;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void CStorageDeviceManagerBlockDevice::clear_size_bytes() {
  size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CStorageDeviceManagerBlockDevice::_internal_size_bytes() const {
  return size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CStorageDeviceManagerBlockDevice::size_bytes() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.size_bytes)
  return _internal_size_bytes();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  size_bytes_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.size_bytes)
}

// optional bool is_formattable = 7;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_is_formattable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_is_formattable() const {
  return _internal_has_is_formattable();
}
inline void CStorageDeviceManagerBlockDevice::clear_is_formattable() {
  is_formattable_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CStorageDeviceManagerBlockDevice::_internal_is_formattable() const {
  return is_formattable_;
}
inline bool CStorageDeviceManagerBlockDevice::is_formattable() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.is_formattable)
  return _internal_is_formattable();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_is_formattable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_formattable_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_is_formattable(bool value) {
  _internal_set_is_formattable(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.is_formattable)
}

// optional bool is_read_only = 8;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_is_read_only() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_is_read_only() const {
  return _internal_has_is_read_only();
}
inline void CStorageDeviceManagerBlockDevice::clear_is_read_only() {
  is_read_only_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CStorageDeviceManagerBlockDevice::_internal_is_read_only() const {
  return is_read_only_;
}
inline bool CStorageDeviceManagerBlockDevice::is_read_only() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.is_read_only)
  return _internal_is_read_only();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_is_read_only(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_read_only_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_is_read_only(bool value) {
  _internal_set_is_read_only(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.is_read_only)
}

// optional bool is_root_device = 9;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_is_root_device() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_is_root_device() const {
  return _internal_has_is_root_device();
}
inline void CStorageDeviceManagerBlockDevice::clear_is_root_device() {
  is_root_device_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CStorageDeviceManagerBlockDevice::_internal_is_root_device() const {
  return is_root_device_;
}
inline bool CStorageDeviceManagerBlockDevice::is_root_device() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.is_root_device)
  return _internal_is_root_device();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_is_root_device(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_root_device_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_is_root_device(bool value) {
  _internal_set_is_root_device(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.is_root_device)
}

// optional .EStorageBlockContentType content_type = 10 [default = EStorageBlockContentType_Invalid];
inline bool CStorageDeviceManagerBlockDevice::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_content_type() const {
  return _internal_has_content_type();
}
inline void CStorageDeviceManagerBlockDevice::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::EStorageBlockContentType CStorageDeviceManagerBlockDevice::_internal_content_type() const {
  return static_cast< ::EStorageBlockContentType >(content_type_);
}
inline ::EStorageBlockContentType CStorageDeviceManagerBlockDevice::content_type() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.content_type)
  return _internal_content_type();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_content_type(::EStorageBlockContentType value) {
  assert(::EStorageBlockContentType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  content_type_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_content_type(::EStorageBlockContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.content_type)
}

// optional .EStorageBlockFileSystemType filesystem_type = 11 [default = EStorageBlockFileSystemType_Invalid];
inline bool CStorageDeviceManagerBlockDevice::_internal_has_filesystem_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_filesystem_type() const {
  return _internal_has_filesystem_type();
}
inline void CStorageDeviceManagerBlockDevice::clear_filesystem_type() {
  filesystem_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::EStorageBlockFileSystemType CStorageDeviceManagerBlockDevice::_internal_filesystem_type() const {
  return static_cast< ::EStorageBlockFileSystemType >(filesystem_type_);
}
inline ::EStorageBlockFileSystemType CStorageDeviceManagerBlockDevice::filesystem_type() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.filesystem_type)
  return _internal_filesystem_type();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_filesystem_type(::EStorageBlockFileSystemType value) {
  assert(::EStorageBlockFileSystemType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  filesystem_type_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_filesystem_type(::EStorageBlockFileSystemType value) {
  _internal_set_filesystem_type(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.filesystem_type)
}

// repeated string mount_paths = 12;
inline int CStorageDeviceManagerBlockDevice::_internal_mount_paths_size() const {
  return mount_paths_.size();
}
inline int CStorageDeviceManagerBlockDevice::mount_paths_size() const {
  return _internal_mount_paths_size();
}
inline void CStorageDeviceManagerBlockDevice::clear_mount_paths() {
  mount_paths_.Clear();
}
inline std::string* CStorageDeviceManagerBlockDevice::add_mount_paths() {
  // @@protoc_insertion_point(field_add_mutable:CStorageDeviceManagerBlockDevice.mount_paths)
  return _internal_add_mount_paths();
}
inline const std::string& CStorageDeviceManagerBlockDevice::_internal_mount_paths(int index) const {
  return mount_paths_.Get(index);
}
inline const std::string& CStorageDeviceManagerBlockDevice::mount_paths(int index) const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.mount_paths)
  return _internal_mount_paths(index);
}
inline std::string* CStorageDeviceManagerBlockDevice::mutable_mount_paths(int index) {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerBlockDevice.mount_paths)
  return mount_paths_.Mutable(index);
}
inline void CStorageDeviceManagerBlockDevice::set_mount_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.mount_paths)
  mount_paths_.Mutable(index)->assign(value);
}
inline void CStorageDeviceManagerBlockDevice::set_mount_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.mount_paths)
  mount_paths_.Mutable(index)->assign(std::move(value));
}
inline void CStorageDeviceManagerBlockDevice::set_mount_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mount_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline void CStorageDeviceManagerBlockDevice::set_mount_paths(int index, const char* value, size_t size) {
  mount_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline std::string* CStorageDeviceManagerBlockDevice::_internal_add_mount_paths() {
  return mount_paths_.Add();
}
inline void CStorageDeviceManagerBlockDevice::add_mount_paths(const std::string& value) {
  mount_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline void CStorageDeviceManagerBlockDevice::add_mount_paths(std::string&& value) {
  mount_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline void CStorageDeviceManagerBlockDevice::add_mount_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mount_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline void CStorageDeviceManagerBlockDevice::add_mount_paths(const char* value, size_t size) {
  mount_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CStorageDeviceManagerBlockDevice.mount_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CStorageDeviceManagerBlockDevice::mount_paths() const {
  // @@protoc_insertion_point(field_list:CStorageDeviceManagerBlockDevice.mount_paths)
  return mount_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CStorageDeviceManagerBlockDevice::mutable_mount_paths() {
  // @@protoc_insertion_point(field_mutable_list:CStorageDeviceManagerBlockDevice.mount_paths)
  return &mount_paths_;
}

// optional bool is_unmounting = 13;
inline bool CStorageDeviceManagerBlockDevice::_internal_has_is_unmounting() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStorageDeviceManagerBlockDevice::has_is_unmounting() const {
  return _internal_has_is_unmounting();
}
inline void CStorageDeviceManagerBlockDevice::clear_is_unmounting() {
  is_unmounting_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CStorageDeviceManagerBlockDevice::_internal_is_unmounting() const {
  return is_unmounting_;
}
inline bool CStorageDeviceManagerBlockDevice::is_unmounting() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerBlockDevice.is_unmounting)
  return _internal_is_unmounting();
}
inline void CStorageDeviceManagerBlockDevice::_internal_set_is_unmounting(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_unmounting_ = value;
}
inline void CStorageDeviceManagerBlockDevice::set_is_unmounting(bool value) {
  _internal_set_is_unmounting(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerBlockDevice.is_unmounting)
}

// -------------------------------------------------------------------

// CStorageDeviceManagerState

// repeated .CStorageDeviceManagerDrive drives = 1;
inline int CStorageDeviceManagerState::_internal_drives_size() const {
  return drives_.size();
}
inline int CStorageDeviceManagerState::drives_size() const {
  return _internal_drives_size();
}
inline void CStorageDeviceManagerState::clear_drives() {
  drives_.Clear();
}
inline ::CStorageDeviceManagerDrive* CStorageDeviceManagerState::mutable_drives(int index) {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerState.drives)
  return drives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerDrive >*
CStorageDeviceManagerState::mutable_drives() {
  // @@protoc_insertion_point(field_mutable_list:CStorageDeviceManagerState.drives)
  return &drives_;
}
inline const ::CStorageDeviceManagerDrive& CStorageDeviceManagerState::_internal_drives(int index) const {
  return drives_.Get(index);
}
inline const ::CStorageDeviceManagerDrive& CStorageDeviceManagerState::drives(int index) const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.drives)
  return _internal_drives(index);
}
inline ::CStorageDeviceManagerDrive* CStorageDeviceManagerState::_internal_add_drives() {
  return drives_.Add();
}
inline ::CStorageDeviceManagerDrive* CStorageDeviceManagerState::add_drives() {
  // @@protoc_insertion_point(field_add:CStorageDeviceManagerState.drives)
  return _internal_add_drives();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerDrive >&
CStorageDeviceManagerState::drives() const {
  // @@protoc_insertion_point(field_list:CStorageDeviceManagerState.drives)
  return drives_;
}

// repeated .CStorageDeviceManagerBlockDevice blocdevices = 2;
inline int CStorageDeviceManagerState::_internal_blocdevices_size() const {
  return blocdevices_.size();
}
inline int CStorageDeviceManagerState::blocdevices_size() const {
  return _internal_blocdevices_size();
}
inline void CStorageDeviceManagerState::clear_blocdevices() {
  blocdevices_.Clear();
}
inline ::CStorageDeviceManagerBlockDevice* CStorageDeviceManagerState::mutable_blocdevices(int index) {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManagerState.blocdevices)
  return blocdevices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerBlockDevice >*
CStorageDeviceManagerState::mutable_blocdevices() {
  // @@protoc_insertion_point(field_mutable_list:CStorageDeviceManagerState.blocdevices)
  return &blocdevices_;
}
inline const ::CStorageDeviceManagerBlockDevice& CStorageDeviceManagerState::_internal_blocdevices(int index) const {
  return blocdevices_.Get(index);
}
inline const ::CStorageDeviceManagerBlockDevice& CStorageDeviceManagerState::blocdevices(int index) const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.blocdevices)
  return _internal_blocdevices(index);
}
inline ::CStorageDeviceManagerBlockDevice* CStorageDeviceManagerState::_internal_add_blocdevices() {
  return blocdevices_.Add();
}
inline ::CStorageDeviceManagerBlockDevice* CStorageDeviceManagerState::add_blocdevices() {
  // @@protoc_insertion_point(field_add:CStorageDeviceManagerState.blocdevices)
  return _internal_add_blocdevices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorageDeviceManagerBlockDevice >&
CStorageDeviceManagerState::blocdevices() const {
  // @@protoc_insertion_point(field_list:CStorageDeviceManagerState.blocdevices)
  return blocdevices_;
}

// optional bool is_unmount_supported = 3;
inline bool CStorageDeviceManagerState::_internal_has_is_unmount_supported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManagerState::has_is_unmount_supported() const {
  return _internal_has_is_unmount_supported();
}
inline void CStorageDeviceManagerState::clear_is_unmount_supported() {
  is_unmount_supported_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CStorageDeviceManagerState::_internal_is_unmount_supported() const {
  return is_unmount_supported_;
}
inline bool CStorageDeviceManagerState::is_unmount_supported() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.is_unmount_supported)
  return _internal_is_unmount_supported();
}
inline void CStorageDeviceManagerState::_internal_set_is_unmount_supported(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_unmount_supported_ = value;
}
inline void CStorageDeviceManagerState::set_is_unmount_supported(bool value) {
  _internal_set_is_unmount_supported(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerState.is_unmount_supported)
}

// optional bool is_trim_supported = 4;
inline bool CStorageDeviceManagerState::_internal_has_is_trim_supported() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorageDeviceManagerState::has_is_trim_supported() const {
  return _internal_has_is_trim_supported();
}
inline void CStorageDeviceManagerState::clear_is_trim_supported() {
  is_trim_supported_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CStorageDeviceManagerState::_internal_is_trim_supported() const {
  return is_trim_supported_;
}
inline bool CStorageDeviceManagerState::is_trim_supported() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.is_trim_supported)
  return _internal_is_trim_supported();
}
inline void CStorageDeviceManagerState::_internal_set_is_trim_supported(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_trim_supported_ = value;
}
inline void CStorageDeviceManagerState::set_is_trim_supported(bool value) {
  _internal_set_is_trim_supported(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerState.is_trim_supported)
}

// optional bool is_trim_running = 5;
inline bool CStorageDeviceManagerState::_internal_has_is_trim_running() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStorageDeviceManagerState::has_is_trim_running() const {
  return _internal_has_is_trim_running();
}
inline void CStorageDeviceManagerState::clear_is_trim_running() {
  is_trim_running_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CStorageDeviceManagerState::_internal_is_trim_running() const {
  return is_trim_running_;
}
inline bool CStorageDeviceManagerState::is_trim_running() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.is_trim_running)
  return _internal_is_trim_running();
}
inline void CStorageDeviceManagerState::_internal_set_is_trim_running(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_trim_running_ = value;
}
inline void CStorageDeviceManagerState::set_is_trim_running(bool value) {
  _internal_set_is_trim_running(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerState.is_trim_running)
}

// optional bool is_adopt_supported = 6;
inline bool CStorageDeviceManagerState::_internal_has_is_adopt_supported() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStorageDeviceManagerState::has_is_adopt_supported() const {
  return _internal_has_is_adopt_supported();
}
inline void CStorageDeviceManagerState::clear_is_adopt_supported() {
  is_adopt_supported_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CStorageDeviceManagerState::_internal_is_adopt_supported() const {
  return is_adopt_supported_;
}
inline bool CStorageDeviceManagerState::is_adopt_supported() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManagerState.is_adopt_supported)
  return _internal_is_adopt_supported();
}
inline void CStorageDeviceManagerState::_internal_set_is_adopt_supported(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_adopt_supported_ = value;
}
inline void CStorageDeviceManagerState::set_is_adopt_supported(bool value) {
  _internal_set_is_adopt_supported(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManagerState.is_adopt_supported)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_GetState_Request

// -------------------------------------------------------------------

// CStorageDeviceManager_GetState_Response

// optional .CStorageDeviceManagerState state = 1;
inline bool CStorageDeviceManager_GetState_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool CStorageDeviceManager_GetState_Response::has_state() const {
  return _internal_has_state();
}
inline void CStorageDeviceManager_GetState_Response::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CStorageDeviceManagerState& CStorageDeviceManager_GetState_Response::_internal_state() const {
  const ::CStorageDeviceManagerState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorageDeviceManagerState&>(
      ::_CStorageDeviceManagerState_default_instance_);
}
inline const ::CStorageDeviceManagerState& CStorageDeviceManager_GetState_Response::state() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_GetState_Response.state)
  return _internal_state();
}
inline void CStorageDeviceManager_GetState_Response::unsafe_arena_set_allocated_state(
    ::CStorageDeviceManagerState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStorageDeviceManager_GetState_Response.state)
}
inline ::CStorageDeviceManagerState* CStorageDeviceManager_GetState_Response::release_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStorageDeviceManagerState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CStorageDeviceManagerState* CStorageDeviceManager_GetState_Response::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManager_GetState_Response.state)
  _has_bits_[0] &= ~0x00000001u;
  ::CStorageDeviceManagerState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::CStorageDeviceManagerState* CStorageDeviceManager_GetState_Response::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorageDeviceManagerState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::CStorageDeviceManagerState* CStorageDeviceManager_GetState_Response::mutable_state() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManager_GetState_Response.state)
  return _internal_mutable_state();
}
inline void CStorageDeviceManager_GetState_Response::set_allocated_state(::CStorageDeviceManagerState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManager_GetState_Response.state)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_StateChanged_Notification

// -------------------------------------------------------------------

// CStorageDeviceManager_Eject_Request

// optional uint32 drive_id = 1;
inline bool CStorageDeviceManager_Eject_Request::_internal_has_drive_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManager_Eject_Request::has_drive_id() const {
  return _internal_has_drive_id();
}
inline void CStorageDeviceManager_Eject_Request::clear_drive_id() {
  drive_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Eject_Request::_internal_drive_id() const {
  return drive_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Eject_Request::drive_id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_Eject_Request.drive_id)
  return _internal_drive_id();
}
inline void CStorageDeviceManager_Eject_Request::_internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  drive_id_ = value;
}
inline void CStorageDeviceManager_Eject_Request::set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drive_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_Eject_Request.drive_id)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_Eject_Response

// -------------------------------------------------------------------

// CStorageDeviceManager_Adopt_Request

// optional uint32 drive_id = 1;
inline bool CStorageDeviceManager_Adopt_Request::_internal_has_drive_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorageDeviceManager_Adopt_Request::has_drive_id() const {
  return _internal_has_drive_id();
}
inline void CStorageDeviceManager_Adopt_Request::clear_drive_id() {
  drive_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Adopt_Request::_internal_drive_id() const {
  return drive_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Adopt_Request::drive_id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_Adopt_Request.drive_id)
  return _internal_drive_id();
}
inline void CStorageDeviceManager_Adopt_Request::_internal_set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  drive_id_ = value;
}
inline void CStorageDeviceManager_Adopt_Request::set_drive_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drive_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_Adopt_Request.drive_id)
}

// optional string label = 2;
inline bool CStorageDeviceManager_Adopt_Request::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManager_Adopt_Request::has_label() const {
  return _internal_has_label();
}
inline void CStorageDeviceManager_Adopt_Request::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorageDeviceManager_Adopt_Request::label() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_Adopt_Request.label)
  return _internal_label();
}
inline void CStorageDeviceManager_Adopt_Request::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_Adopt_Request.label)
}
inline std::string* CStorageDeviceManager_Adopt_Request::mutable_label() {
  // @@protoc_insertion_point(field_mutable:CStorageDeviceManager_Adopt_Request.label)
  return _internal_mutable_label();
}
inline const std::string& CStorageDeviceManager_Adopt_Request::_internal_label() const {
  return label_.Get();
}
inline void CStorageDeviceManager_Adopt_Request::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CStorageDeviceManager_Adopt_Request::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CStorageDeviceManager_Adopt_Request.label)
}
inline void CStorageDeviceManager_Adopt_Request::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CStorageDeviceManager_Adopt_Request.label)
}
inline void CStorageDeviceManager_Adopt_Request::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CStorageDeviceManager_Adopt_Request.label)
}
inline std::string* CStorageDeviceManager_Adopt_Request::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CStorageDeviceManager_Adopt_Request::release_label() {
  // @@protoc_insertion_point(field_release:CStorageDeviceManager_Adopt_Request.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CStorageDeviceManager_Adopt_Request::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CStorageDeviceManager_Adopt_Request.label)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_Adopt_Response

// -------------------------------------------------------------------

// CStorageDeviceManager_Format_Request

// optional uint32 blocdevice_id = 1;
inline bool CStorageDeviceManager_Format_Request::_internal_has_blocdevice_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManager_Format_Request::has_blocdevice_id() const {
  return _internal_has_blocdevice_id();
}
inline void CStorageDeviceManager_Format_Request::clear_blocdevice_id() {
  blocdevice_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Format_Request::_internal_blocdevice_id() const {
  return blocdevice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Format_Request::blocdevice_id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_Format_Request.blocdevice_id)
  return _internal_blocdevice_id();
}
inline void CStorageDeviceManager_Format_Request::_internal_set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  blocdevice_id_ = value;
}
inline void CStorageDeviceManager_Format_Request::set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blocdevice_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_Format_Request.blocdevice_id)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_Format_Response

// -------------------------------------------------------------------

// CStorageDeviceManager_Unmount_Request

// optional uint32 blocdevice_id = 1;
inline bool CStorageDeviceManager_Unmount_Request::_internal_has_blocdevice_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorageDeviceManager_Unmount_Request::has_blocdevice_id() const {
  return _internal_has_blocdevice_id();
}
inline void CStorageDeviceManager_Unmount_Request::clear_blocdevice_id() {
  blocdevice_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Unmount_Request::_internal_blocdevice_id() const {
  return blocdevice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CStorageDeviceManager_Unmount_Request::blocdevice_id() const {
  // @@protoc_insertion_point(field_get:CStorageDeviceManager_Unmount_Request.blocdevice_id)
  return _internal_blocdevice_id();
}
inline void CStorageDeviceManager_Unmount_Request::_internal_set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  blocdevice_id_ = value;
}
inline void CStorageDeviceManager_Unmount_Request::set_blocdevice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blocdevice_id(value);
  // @@protoc_insertion_point(field_set:CStorageDeviceManager_Unmount_Request.blocdevice_id)
}

// -------------------------------------------------------------------

// CStorageDeviceManager_Unmount_Response

// -------------------------------------------------------------------

// CStorageDeviceManager_TrimAll_Request

// -------------------------------------------------------------------

// CStorageDeviceManager_TrimAll_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webuimessages_5fstoragedevicemanager_2eproto
